
test_g473_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000215d4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e48  080217b8  080217b8  000317b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024600  08024600  00040358  2**0
                  CONTENTS
  4 .ARM          00000000  08024600  08024600  00040358  2**0
                  CONTENTS
  5 .preinit_array 00000000  08024600  08024600  00040358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024600  08024600  00034600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024604  08024604  00034604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08024608  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001673c  20000358  08024960  00040358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016a94  08024960  00046a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040358  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040388  2**0
                  CONTENTS, READONLY
 13 .debug_info   00062300  00000000  00000000  000403cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000942d  00000000  00000000  000a26cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ce8  00000000  00000000  000abaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002360  00000000  00000000  000ae7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b4c  00000000  00000000  000b0b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ae55  00000000  00000000  000d968c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff706  00000000  00000000  001144e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cf68  00000000  00000000  00213be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00220b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000358 	.word	0x20000358
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802179c 	.word	0x0802179c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000035c 	.word	0x2000035c
 800021c:	0802179c 	.word	0x0802179c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f01d ff46 	bl	801eb96 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d12:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d54:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d78:	4830      	ldr	r0, [pc, #192]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d7a:	f006 fae9 	bl	8007350 <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f004 f82f 	bl	8004de6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d94:	f008 f978 	bl	8009088 <HAL_ADCEx_MultiModeConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d9e:	f004 f822 	bl	8004de6 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_ADC1_Init+0x168>)
 8000da4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000da6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 4095;
 8000db6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 2048+768;
 8000dbc:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dce:	f007 fc61 	bl	8008694 <HAL_ADC_AnalogWDGConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f004 f805 	bl	8004de6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	237f      	movs	r3, #127	; 0x7f
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dec:	2304      	movs	r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dfa:	f007 f80b 	bl	8007e14 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000e04:	f003 ffef 	bl	8004de6 <Error_Handler>
  }

  /** Configure the channel to be monitored by WatchDog 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_ADC1_Init+0x170>)
 8000e0a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REGINJEC;
 8000e0c:	f04f 73e0 	mov.w	r3, #29360128	; 0x1c00000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 2816;
 8000e12:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000e24:	f007 fc36 	bl	8008694 <HAL_ADC_AnalogWDGConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000e2e:	f003 ffda 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3748      	adds	r7, #72	; 0x48
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000374 	.word	0x20000374
 8000e40:	7dc00000 	.word	0x7dc00000
 8000e44:	b6902000 	.word	0xb6902000
 8000e48:	0017ffff 	.word	0x0017ffff

08000e4c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f01d fe96 	bl	801eb96 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e6c:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <MX_ADC3_Init+0xec>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eb2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed8:	f006 fa3a 	bl	8007350 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000ee2:	f003 ff80 	bl	8004de6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ef2:	f008 f8c9 	bl	8009088 <HAL_ADCEx_MultiModeConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000efc:	f003 ff73 	bl	8004de6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_ADC3_Init+0xf0>)
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f04:	2306      	movs	r3, #6
 8000f06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0c:	237f      	movs	r3, #127	; 0x7f
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f10:	2304      	movs	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000f1e:	f006 ff79 	bl	8007e14 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000f28:	f003 ff5d 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200003e0 	.word	0x200003e0
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	b6982000 	.word	0xb6982000

08000f40 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f01d fe22 	bl	801eb96 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_ADC4_Init+0xc8>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f9a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fc0:	f006 f9c6 	bl	8007350 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f003 ff0c 	bl	8004de6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC4_Init+0xcc>)
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	237f      	movs	r3, #127	; 0x7f
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fec:	f006 ff12 	bl	8007e14 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8000ff6:	f003 fef6 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000044c 	.word	0x2000044c
 8001008:	50000500 	.word	0x50000500
 800100c:	c75a0000 	.word	0xc75a0000

08001010 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f01d fdba 	bl	801eb96 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <MX_ADC5_Init+0xc8>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800102a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800104a:	2204      	movs	r2, #4
 800104c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800105c:	2201      	movs	r2, #1
 800105e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800106a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001090:	f006 f95e 	bl	8007350 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800109a:	f003 fea4 	bl	8004de6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ADC5_Init+0xcc>)
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010aa:	237f      	movs	r3, #127	; 0x7f
 80010ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ae:	2304      	movs	r3, #4
 80010b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_ADC5_Init+0xc4>)
 80010bc:	f006 feaa 	bl	8007e14 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 80010c6:	f003 fe8e 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200004b8 	.word	0x200004b8
 80010d8:	50000600 	.word	0x50000600
 80010dc:	8c900008 	.word	0x8c900008

080010e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b09c      	sub	sp, #112	; 0x70
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f01d fd50 	bl	801eb96 <memset>
  if(adcHandle->Instance==ADC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d14f      	bne.n	80011a0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001104:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001106:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800110a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4618      	mov	r0, r3
 8001112:	f00a fbef 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800111c:	f003 fe63 	bl	8004de6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a74      	ldr	r2, [pc, #464]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <HAL_ADC_MspInit+0x220>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001140:	2205      	movs	r2, #5
 8001142:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001168:	2220      	movs	r2, #32
 800116a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	4862      	ldr	r0, [pc, #392]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001174:	f008 fd5a 	bl	8009c2c <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800117e:	f003 fe32 	bl	8004de6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
 8001188:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2012      	movs	r0, #18
 8001194:	f008 f95b 	bl	800944e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f008 f972 	bl	8009482 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800119e:	e114      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_ADC_MspInit+0x224>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d150      	bne.n	800124c <HAL_ADC_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a fb9a 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_ADC_MspInit+0xea>
      Error_Handler();
 80011c6:	f003 fe0e 	bl	8004de6 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    hdma_adc3.Instance = DMA1_Channel5;
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_ADC_MspInit+0x230>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011fc:	2225      	movs	r2, #37	; 0x25
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001200:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800121c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001224:	2220      	movs	r2, #32
 8001226:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800122e:	4837      	ldr	r0, [pc, #220]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001230:	f008 fcfc 	bl	8009c2c <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x15e>
      Error_Handler();
 800123a:	f003 fdd4 	bl	8004de6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
}
 800124a:	e0be      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_ADC_MspInit+0x234>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d164      	bne.n	8001320 <HAL_ADC_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800125c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f00a fb44 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 8001272:	f003 fdb8 	bl	8004de6 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_ADC_MspInit+0x228>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_MspInit+0x1c0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel6;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_ADC_MspInit+0x23c>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a8:	2226      	movs	r2, #38	; 0x26
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012dc:	f008 fca6 	bl	8009c2c <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_ADC_MspInit+0x20a>
      Error_Handler();
 80012e6:	f003 fd7e 	bl	8004de6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012f6:	e068      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	20000524 	.word	0x20000524
 8001300:	4002001c 	.word	0x4002001c
 8001304:	50000400 	.word	0x50000400
 8001308:	200006a4 	.word	0x200006a4
 800130c:	20000584 	.word	0x20000584
 8001310:	40020058 	.word	0x40020058
 8001314:	50000500 	.word	0x50000500
 8001318:	200005e4 	.word	0x200005e4
 800131c:	4002006c 	.word	0x4002006c
  else if(adcHandle->Instance==ADC5)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <HAL_ADC_MspInit+0x2f4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d14f      	bne.n	80013ca <HAL_ADC_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001334:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4618      	mov	r0, r3
 800133c:	f00a fada 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0x26a>
      Error_Handler();
 8001346:	f003 fd4e 	bl	8004de6 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x294>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel7;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_ADC_MspInit+0x304>)
 8001378:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800137c:	2227      	movs	r2, #39	; 0x27
 800137e:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001398:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013b0:	f008 fc3c 	bl	8009c2c <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_ADC_MspInit+0x2de>
      Error_Handler();
 80013ba:	f003 fd14 	bl	8004de6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013ca:	bf00      	nop
 80013cc:	3770      	adds	r7, #112	; 0x70
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	50000600 	.word	0x50000600
 80013d8:	200006a4 	.word	0x200006a4
 80013dc:	40021000 	.word	0x40021000
 80013e0:	20000644 	.word	0x20000644
 80013e4:	40020080 	.word	0x40020080

080013e8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f01d fbce 	bl	801eb96 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_DAC1_Init+0x80>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <MX_DAC1_Init+0x84>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <MX_DAC1_Init+0x80>)
 8001402:	f008 f858 	bl	80094b6 <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f003 fceb 	bl	8004de6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001410:	2302      	movs	r3, #2
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001420:	2322      	movs	r3, #34	; 0x22
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_DAC1_Init+0x80>)
 800143c:	f008 f9c4 	bl	80097c8 <HAL_DAC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001446:	f003 fcce 	bl	8004de6 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2210      	movs	r2, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_DAC1_Init+0x80>)
 8001452:	f008 f9b9 	bl	80097c8 <HAL_DAC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800145c:	f003 fcc3 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200006a8 	.word	0x200006a8
 800146c:	50000800 	.word	0x50000800

08001470 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f01d fb8a 	bl	801eb96 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_DAC2_Init+0x6c>)
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <MX_DAC2_Init+0x70>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_DAC2_Init+0x6c>)
 800148a:	f008 f814 	bl	80094b6 <HAL_DAC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001494:	f003 fca7 	bl	8004de6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001498:	2302      	movs	r3, #2
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_DAC2_Init+0x6c>)
 80014c4:	f008 f980 	bl	80097c8 <HAL_DAC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80014ce:	f003 fc8a 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200006bc 	.word	0x200006bc
 80014e0:	50000c00 	.word	0x50000c00

080014e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_DAC_MspInit+0x178>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d17b      	bne.n	80015fe <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001536:	2330      	movs	r3, #48	; 0x30
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f008 fea0 	bl	800a290 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001552:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_DAC_MspInit+0x184>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001558:	2206      	movs	r2, #6
 800155a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800155e:	2210      	movs	r2, #16
 8001560:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800158c:	f008 fb4e 	bl	8009c2c <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001596:	f003 fc26 	bl	8004de6 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a31      	ldr	r2, [pc, #196]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_DAC_MspInit+0x180>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DAC_MspInit+0x18c>)
 80015aa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80015e0:	4822      	ldr	r0, [pc, #136]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015e2:	f008 fb23 	bl	8009c2c <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 80015ec:	f003 fbfb 	bl	8004de6 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015fc:	e029      	b.n	8001652 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_DAC_MspInit+0x190>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d124      	bne.n	8001652 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f008 fe1f 	bl	800a290 <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	; 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	50000800 	.word	0x50000800
 8001660:	40021000 	.word	0x40021000
 8001664:	200006d0 	.word	0x200006d0
 8001668:	40020030 	.word	0x40020030
 800166c:	20000730 	.word	0x20000730
 8001670:	40020044 	.word	0x40020044
 8001674:	50000c00 	.word	0x50000c00

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_DMA_Init+0xb0>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <MX_DMA_Init+0xb0>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_DMA_Init+0xb0>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_DMA_Init+0xb0>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_DMA_Init+0xb0>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6493      	str	r3, [r2, #72]	; 0x48
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_DMA_Init+0xb0>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f007 fecb 	bl	800944e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f007 fee2 	bl	8009482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	200c      	movs	r0, #12
 80016c4:	f007 fec3 	bl	800944e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f007 feda 	bl	8009482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200d      	movs	r0, #13
 80016d4:	f007 febb 	bl	800944e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d8:	200d      	movs	r0, #13
 80016da:	f007 fed2 	bl	8009482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200e      	movs	r0, #14
 80016e4:	f007 feb3 	bl	800944e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f007 feca 	bl	8009482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200f      	movs	r0, #15
 80016f4:	f007 feab 	bl	800944e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016f8:	200f      	movs	r0, #15
 80016fa:	f007 fec2 	bl	8009482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2010      	movs	r0, #16
 8001704:	f007 fea3 	bl	800944e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f007 feba 	bl	8009482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2011      	movs	r0, #17
 8001714:	f007 fe9b 	bl	800944e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001718:	2011      	movs	r0, #17
 800171a:	f007 feb2 	bl	8009482 <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f01d fa2c 	bl	801eb96 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001740:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001744:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001748:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <MX_FMC_Init+0xd0>)
 800174a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_FMC_Init+0xcc>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_FMC_Init+0xcc>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001760:	2210      	movs	r2, #16
 8001762:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MX_FMC_Init+0xcc>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_FMC_Init+0xcc>)
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001792:	2200      	movs	r2, #0
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001798:	2200      	movs	r2, #0
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_FMC_Init+0xcc>)
 800179e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80017b8:	230f      	movs	r3, #15
 80017ba:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80017bc:	230f      	movs	r3, #15
 80017be:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 15;
 80017c0:	230f      	movs	r3, #15
 80017c2:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80017c8:	230f      	movs	r3, #15
 80017ca:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80017cc:	2310      	movs	r3, #16
 80017ce:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80017d0:	2311      	movs	r3, #17
 80017d2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017e0:	f00a fef8 	bl	800c5d4 <HAL_SRAM_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_FMC_Init+0xc2>
  {
    Error_Handler( );
 80017ea:	f003 fafc 	bl	8004de6 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000790 	.word	0x20000790
 80017fc:	a0000104 	.word	0xa0000104

08001800 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d13f      	bne.n	800189c <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6513      	str	r3, [r2, #80]	; 0x50
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184c:	230c      	movs	r3, #12
 800184e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <HAL_FMC_MspInit+0xac>)
 8001856:	f008 fd1b 	bl	800a290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800185a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800185e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186c:	230c      	movs	r3, #12
 800186e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <HAL_FMC_MspInit+0xb0>)
 8001876:	f008 fd0b 	bl	800a290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800187a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800187e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800188c:	230c      	movs	r3, #12
 800188e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <HAL_FMC_MspInit+0xb4>)
 8001896:	f008 fcfb 	bl	800a290 <HAL_GPIO_Init>
 800189a:	e000      	b.n	800189e <HAL_FMC_MspInit+0x9e>
    return;
 800189c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200007e8 	.word	0x200007e8
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48001400 	.word	0x48001400
 80018b0:	48001000 	.word	0x48001000
 80018b4:	48000c00 	.word	0x48000c00

080018b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018c0:	f7ff ff9e 	bl	8001800 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a24      	ldr	r2, [pc, #144]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f248 3104 	movw	r1, #33540	; 0x8304
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f008 fe0a 	bl	800a594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8001980:	f248 3304 	movw	r3, #33540	; 0x8304
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f008 fc78 	bl	800a290 <HAL_GPIO_Init>

}
 80019a0:	bf00      	nop
 80019a2:	3730      	adds	r7, #48	; 0x30
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80019cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019d4:	e000      	b.n	80019d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80019d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f9      	beq.n	80019d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80019e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e009      	b.n	8001a20 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ffc9 	bl	80019ac <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf1      	blt.n	8001a0c <_write+0x12>
	}
    return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <get_systick>:

int32_t get_systick()
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <get_systick+0x14>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <diff_systick>:

int32_t diff_systick( int32_t b, int32_t a )
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	int d = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
	if( b < a )
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da04      	bge.n	8001a6c <diff_systick+0x20>
	{
	  d = a-b;
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e006      	b.n	8001a7a <diff_systick+0x2e>
	}
	else
	{
	  d = a+(SysTick->LOAD-b);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <diff_systick+0x3c>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
	}
	return d;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <text_width_f>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color );
tRectangle get_char_rect( const tFont *pFont, uint8_t c );
tRectangle get_text_rect( const tFont *pFont, char *pString );

float text_width_f( nk_handle handle, float h, const char* t, int len )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a98:	6079      	str	r1, [r7, #4]
 8001a9a:	603a      	str	r2, [r7, #0]

	return get_text_rect( &fontUbuntuBookRNormal16, t ).width;
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <text_width_f+0x34>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fc30 	bl	800230a <get_text_rect>
 8001aaa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	080237a4 	.word	0x080237a4

08001ac4 <lcd_config>:

void lcd_config( void );
void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color );

void lcd_config( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_SET );
 8001aca:	2201      	movs	r2, #1
 8001acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f008 fd5e 	bl	800a594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_RESET );
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f008 fd57 	bl	800a594 <HAL_GPIO_WritePin>
	HAL_Delay( 10 );
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f005 f882 	bl	8006bf0 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_SET );
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f008 fd4d 	bl	800a594 <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8001afa:	2064      	movs	r0, #100	; 0x64
 8001afc:	f005 f878 	bl	8006bf0 <HAL_Delay>

	*addr_cmd = 0x01;
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <lcd_config+0xa0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 100 );
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f005 f871 	bl	8006bf0 <HAL_Delay>
	*addr_cmd = 0x11;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <lcd_config+0xa0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2211      	movs	r2, #17
 8001b14:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b16:	200a      	movs	r0, #10
 8001b18:	f005 f86a 	bl	8006bf0 <HAL_Delay>
	*addr_cmd = 0x3A;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <lcd_config+0xa0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	223a      	movs	r2, #58	; 0x3a
 8001b22:	801a      	strh	r2, [r3, #0]
	*addr_data = 0x06;//0x05;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <lcd_config+0xa4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2206      	movs	r2, #6
 8001b2a:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x36;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <lcd_config+0xa0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2236      	movs	r2, #54	; 0x36
 8001b32:	801a      	strh	r2, [r3, #0]
	*addr_data = (0x01<<5)|(0x01<<6)|(0x01<<7);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <lcd_config+0xa4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	22e0      	movs	r2, #224	; 0xe0
 8001b3a:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x29;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <lcd_config+0xa0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2229      	movs	r2, #41	; 0x29
 8001b42:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b44:	200a      	movs	r0, #10
 8001b46:	f005 f853 	bl	8006bf0 <HAL_Delay>

	lcd_rect( 0, 0, 480, 320, 0x0000 );
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 f867 	bl	8001c2c <lcd_rect>
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <nk_colot_to_rgb666>:

uint32_t nk_colot_to_rgb666( struct nk_color color )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	uint32_t rgb666 = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]

	color.r = (color.r*color.a)/256.0;
 8001b78:	793b      	ldrb	r3, [r7, #4]
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcf7 	bl	8000574 <__aeabi_i2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001b8c:	f7fe fe86 	bl	800089c <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f82e 	bl	8000bf8 <__aeabi_d2uiz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	713b      	strb	r3, [r7, #4]
	color.g = (color.g*color.a)/256.0;
 8001ba2:	797b      	ldrb	r3, [r7, #5]
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fce2 	bl	8000574 <__aeabi_i2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001bb6:	f7fe fe71 	bl	800089c <__aeabi_ddiv>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff f819 	bl	8000bf8 <__aeabi_d2uiz>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	717b      	strb	r3, [r7, #5]
	color.b = (color.b*color.a)/256.0;
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fccd 	bl	8000574 <__aeabi_i2d>
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001be0:	f7fe fe5c 	bl	800089c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff f804 	bl	8000bf8 <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	71bb      	strb	r3, [r7, #6]

	color.r >>= 2;
 8001bf6:	793b      	ldrb	r3, [r7, #4]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	713b      	strb	r3, [r7, #4]
	color.g >>= 2;
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	717b      	strb	r3, [r7, #5]
	color.b >>= 2;
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	71bb      	strb	r3, [r7, #6]
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 8001c0e:	793b      	ldrb	r3, [r7, #4]
 8001c10:	031a      	lsls	r2, r3, #12
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	4313      	orrs	r3, r2
 8001c18:	79ba      	ldrb	r2, [r7, #6]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
	return rgb666;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40700000 	.word	0x40700000

08001c2c <lcd_rect>:

void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color )
{
 8001c2c:	b490      	push	{r4, r7}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80bb      	strh	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y0 = y;
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t x1 = x + w - 1;
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	4413      	add	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t y1 = y + h - 1;
 8001c60:	88ba      	ldrh	r2, [r7, #4]
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	843b      	strh	r3, [r7, #32]

	if( x0 < 0 )
 8001c6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da02      	bge.n	8001c7c <lcd_rect+0x50>
	{
		x0 = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c7a:	e007      	b.n	8001c8c <lcd_rect+0x60>
	}
	else if( x0 > 480 - 1 )
 8001c7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c80:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c84:	db02      	blt.n	8001c8c <lcd_rect+0x60>
	{
		x0 = 480 - 1;
 8001c86:	f240 13df 	movw	r3, #479	; 0x1df
 8001c8a:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	if( x1 < 0 )
 8001c8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da02      	bge.n	8001c9a <lcd_rect+0x6e>
	{
		x1 = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c98:	e007      	b.n	8001caa <lcd_rect+0x7e>
	}
	else if( x1 > 480 - 1 )
 8001c9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c9e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ca2:	db02      	blt.n	8001caa <lcd_rect+0x7e>
	{
		x1 = 480 - 1;
 8001ca4:	f240 13df 	movw	r3, #479	; 0x1df
 8001ca8:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 < 0 )
 8001caa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da02      	bge.n	8001cb8 <lcd_rect+0x8c>
	{
		y0 = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001cb6:	e007      	b.n	8001cc8 <lcd_rect+0x9c>
	}
	else if( y0 > 320 - 1 )
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cbc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cc0:	db02      	blt.n	8001cc8 <lcd_rect+0x9c>
	{
		y0 = 320 - 1;
 8001cc2:	f240 133f 	movw	r3, #319	; 0x13f
 8001cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( y1 < 0 )
 8001cc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da02      	bge.n	8001cd6 <lcd_rect+0xaa>
	{
		y1 = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	843b      	strh	r3, [r7, #32]
 8001cd4:	e007      	b.n	8001ce6 <lcd_rect+0xba>
	}
	else if( y1 > 320 - 1 )
 8001cd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001cda:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cde:	db02      	blt.n	8001ce6 <lcd_rect+0xba>
	{
		y1 = 320 - 1;
 8001ce0:	f240 133f 	movw	r3, #319	; 0x13f
 8001ce4:	843b      	strh	r3, [r7, #32]
	}

	if( x0 > x1 )
 8001ce6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001cea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dd06      	ble.n	8001d00 <lcd_rect+0xd4>
	{
		int tmp = x0;
 8001cf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001cf6:	61bb      	str	r3, [r7, #24]
		x0 = x1;
 8001cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
		x1 = tmp;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 > y1 )
 8001d00:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001d04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dd06      	ble.n	8001d1a <lcd_rect+0xee>
	{
		int tmp = y0;
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d10:	617b      	str	r3, [r7, #20]
		y0 = y1;
 8001d12:	8c3b      	ldrh	r3, [r7, #32]
 8001d14:	84bb      	strh	r3, [r7, #36]	; 0x24
		y1 = tmp;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	843b      	strh	r3, [r7, #32]
	}

	w = x1 - x0 + 1;
 8001d1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8001d28:	8c3a      	ldrh	r2, [r7, #32]
 8001d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
	uint32_t n = w*h;
 8001d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	613b      	str	r3, [r7, #16]

	uint16_t color_l = (color>>0)&0x1FF;
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d50:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	0a5b      	lsrs	r3, r3, #9
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5c:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <lcd_rect+0x1dc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	222a      	movs	r2, #42	; 0x2a
 8001d64:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001d66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <lcd_rect+0x1e0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0a12      	lsrs	r2, r2, #8
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001d72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <lcd_rect+0x1e0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001d7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <lcd_rect+0x1e0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0a12      	lsrs	r2, r2, #8
 8001d86:	b292      	uxth	r2, r2
 8001d88:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001d8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <lcd_rect+0x1e0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	b292      	uxth	r2, r2
 8001d94:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <lcd_rect+0x1dc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	222b      	movs	r2, #43	; 0x2b
 8001d9c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001d9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <lcd_rect+0x1e0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0a12      	lsrs	r2, r2, #8
 8001da6:	b292      	uxth	r2, r2
 8001da8:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <lcd_rect+0x1e0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	b292      	uxth	r2, r2
 8001db4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001db6:	8c3a      	ldrh	r2, [r7, #32]
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <lcd_rect+0x1e0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0a12      	lsrs	r2, r2, #8
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001dc2:	8c3a      	ldrh	r2, [r7, #32]
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <lcd_rect+0x1e0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <lcd_rect+0x1dc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	222c      	movs	r2, #44	; 0x2c
 8001dd4:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e00a      	b.n	8001df2 <lcd_rect+0x1c6>
	{
		*addr_data = color_l;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <lcd_rect+0x1e0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	89fa      	ldrh	r2, [r7, #14]
 8001de2:	801a      	strh	r2, [r3, #0]
		*addr_data = color_h;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <lcd_rect+0x1e0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	89ba      	ldrh	r2, [r7, #12]
 8001dea:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3301      	adds	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f0      	bcc.n	8001ddc <lcd_rect+0x1b0>
	}
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <lcd_set_pixel>:

void lcd_set_pixel( int16_t x, int16_t y, uint32_t color )
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	603a      	str	r2, [r7, #0]
 8001e1a:	80fb      	strh	r3, [r7, #6]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	80bb      	strh	r3, [r7, #4]
	int16_t x0 = x;
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	82fb      	strh	r3, [r7, #22]
	int16_t y0 = y;
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	82bb      	strh	r3, [r7, #20]
	int16_t x1 = x + 1;
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	827b      	strh	r3, [r7, #18]
	int16_t y1 = y + 1;
 8001e30:	88bb      	ldrh	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	823b      	strh	r3, [r7, #16]
	uint16_t color_l = (color>>0)&0x1FF;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e40:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4c:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	222a      	movs	r2, #42	; 0x2a
 8001e54:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001e56:	8afa      	ldrh	r2, [r7, #22]
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0a12      	lsrs	r2, r2, #8
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001e62:	8afa      	ldrh	r2, [r7, #22]
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001e6e:	8a7a      	ldrh	r2, [r7, #18]
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0a12      	lsrs	r2, r2, #8
 8001e76:	b292      	uxth	r2, r2
 8001e78:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001e7a:	8a7a      	ldrh	r2, [r7, #18]
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	b292      	uxth	r2, r2
 8001e84:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	222b      	movs	r2, #43	; 0x2b
 8001e8c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001e8e:	8aba      	ldrh	r2, [r7, #20]
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0a12      	lsrs	r2, r2, #8
 8001e96:	b292      	uxth	r2, r2
 8001e98:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001e9a:	8aba      	ldrh	r2, [r7, #20]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001ea6:	8a3a      	ldrh	r2, [r7, #16]
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0a12      	lsrs	r2, r2, #8
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001eb2:	8a3a      	ldrh	r2, [r7, #16]
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	222c      	movs	r2, #44	; 0x2c
 8001ec4:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	89fa      	ldrh	r2, [r7, #14]
 8001ecc:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	89ba      	ldrh	r2, [r7, #12]
 8001ed4:	801a      	strh	r2, [r3, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <lcd_set_pixel_bench>:


int32_t lcd_set_pixel_bench( int16_t x, int16_t y, uint32_t color )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	603a      	str	r2, [r7, #0]
 8001ef6:	80fb      	strh	r3, [r7, #6]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	80bb      	strh	r3, [r7, #4]
	int32_t a, b, d;
	int16_t x0 = x;
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 8001f00:	88bb      	ldrh	r3, [r7, #4]
 8001f02:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + 4;
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	3304      	adds	r3, #4
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + 4;
 8001f0c:	88bb      	ldrh	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	833b      	strh	r3, [r7, #24]
	uint16_t color_l = (color>>0)&0x1FF;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	82fb      	strh	r3, [r7, #22]
	uint16_t color_h = (color>>9)&0x1FF;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	0a5b      	lsrs	r3, r3, #9
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f28:	82bb      	strh	r3, [r7, #20]

	*addr_cmd = 0x2A;
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	222a      	movs	r2, #42	; 0x2a
 8001f30:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001f32:	8bfa      	ldrh	r2, [r7, #30]
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0a12      	lsrs	r2, r2, #8
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001f3e:	8bfa      	ldrh	r2, [r7, #30]
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	b292      	uxth	r2, r2
 8001f48:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001f4a:	8b7a      	ldrh	r2, [r7, #26]
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0a12      	lsrs	r2, r2, #8
 8001f52:	b292      	uxth	r2, r2
 8001f54:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001f56:	8b7a      	ldrh	r2, [r7, #26]
 8001f58:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001f62:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	222b      	movs	r2, #43	; 0x2b
 8001f68:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001f6a:	8bba      	ldrh	r2, [r7, #28]
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0a12      	lsrs	r2, r2, #8
 8001f72:	b292      	uxth	r2, r2
 8001f74:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001f76:	8bba      	ldrh	r2, [r7, #28]
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001f82:	8b3a      	ldrh	r2, [r7, #24]
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0a12      	lsrs	r2, r2, #8
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001f8e:	8b3a      	ldrh	r2, [r7, #24]
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	b292      	uxth	r2, r2
 8001f98:	801a      	strh	r2, [r3, #0]

	a = get_systick();
 8001f9a:	f7ff fd4b 	bl	8001a34 <get_systick>
 8001f9e:	6138      	str	r0, [r7, #16]
	*addr_cmd = 0x2C;
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	222c      	movs	r2, #44	; 0x2c
 8001fa6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fa8:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	8afa      	ldrh	r2, [r7, #22]
 8001fae:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fb0:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	8aba      	ldrh	r2, [r7, #20]
 8001fb6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	8afa      	ldrh	r2, [r7, #22]
 8001fbe:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	8aba      	ldrh	r2, [r7, #20]
 8001fc6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	8afa      	ldrh	r2, [r7, #22]
 8001fce:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	8aba      	ldrh	r2, [r7, #20]
 8001fd6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	8aba      	ldrh	r2, [r7, #20]
 8001fe6:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8001fe8:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	8afa      	ldrh	r2, [r7, #22]
 8001fee:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	8aba      	ldrh	r2, [r7, #20]
 8001ff6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	8aba      	ldrh	r2, [r7, #20]
 8002006:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	8afa      	ldrh	r2, [r7, #22]
 800200e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	8aba      	ldrh	r2, [r7, #20]
 8002016:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	8afa      	ldrh	r2, [r7, #22]
 800201e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	8aba      	ldrh	r2, [r7, #20]
 8002026:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	8afa      	ldrh	r2, [r7, #22]
 800202e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	8aba      	ldrh	r2, [r7, #20]
 8002036:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	8afa      	ldrh	r2, [r7, #22]
 800203e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	8aba      	ldrh	r2, [r7, #20]
 8002046:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	8afa      	ldrh	r2, [r7, #22]
 800204e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	8aba      	ldrh	r2, [r7, #20]
 8002056:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	8afa      	ldrh	r2, [r7, #22]
 800205e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	8aba      	ldrh	r2, [r7, #20]
 8002066:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	8afa      	ldrh	r2, [r7, #22]
 800206e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	8aba      	ldrh	r2, [r7, #20]
 8002076:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	8afa      	ldrh	r2, [r7, #22]
 800207e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	8aba      	ldrh	r2, [r7, #20]
 8002086:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	8afa      	ldrh	r2, [r7, #22]
 800208e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	8aba      	ldrh	r2, [r7, #20]
 8002096:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	8afa      	ldrh	r2, [r7, #22]
 800209e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	8aba      	ldrh	r2, [r7, #20]
 80020a6:	801a      	strh	r2, [r3, #0]
	b = get_systick();
 80020a8:	f7ff fcc4 	bl	8001a34 <get_systick>
 80020ac:	60f8      	str	r0, [r7, #12]
	d = diff_systick(b,a);
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fccb 	bl	8001a4c <diff_systick>
 80020b6:	60b8      	str	r0, [r7, #8]
	return d;
 80020b8:	68bb      	ldr	r3, [r7, #8]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <lcd_text>:
void lcd_text( const tFramebuf *fb, uint16_t x0, uint16_t y0, char *str, uint32_t color )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	817b      	strh	r3, [r7, #10]
 80020da:	4613      	mov	r3, r2
 80020dc:	813b      	strh	r3, [r7, #8]
	for(; *str; ++str) {
 80020de:	e02a      	b.n	8002136 <lcd_text+0x6a>
	        // get char and make sure its in range of font
	        int chr = *(uint8_t *)str;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	61fb      	str	r3, [r7, #28]
	        if (chr < 32 || chr > 127) {
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b1f      	cmp	r3, #31
 80020ea:	dd02      	ble.n	80020f2 <lcd_text+0x26>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b7f      	cmp	r3, #127	; 0x7f
 80020f0:	dd01      	ble.n	80020f6 <lcd_text+0x2a>
	            chr = 127;
 80020f2:	237f      	movs	r3, #127	; 0x7f
 80020f4:	61fb      	str	r3, [r7, #28]
	        }
	        draw_char( fb, &fontUbuntuBookRNormal16, x0, y0, chr, color );
 80020f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80020fa:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002104:	9201      	str	r2, [sp, #4]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	4603      	mov	r3, r0
 800210a:	460a      	mov	r2, r1
 800210c:	490e      	ldr	r1, [pc, #56]	; (8002148 <lcd_text+0x7c>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f81c 	bl	800214c <draw_char>
	        x0 += get_char_rect( &fontUbuntuBookRNormal16, chr ).width;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	490a      	ldr	r1, [pc, #40]	; (8002148 <lcd_text+0x7c>)
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f8c9 	bl	80022b6 <get_char_rect>
 8002124:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002128:	b29a      	uxth	r2, r3
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	4413      	add	r3, r2
 800212e:	817b      	strh	r3, [r7, #10]
	for(; *str; ++str) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3301      	adds	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1d0      	bne.n	80020e0 <lcd_text+0x14>
	}
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	080237a4 	.word	0x080237a4

0800214c <draw_char>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	; 0x30
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	460b      	mov	r3, r1
 800215c:	80fb      	strh	r3, [r7, #6]
 800215e:	4613      	mov	r3, r2
 8002160:	80bb      	strh	r3, [r7, #4]
    int16_t x, y, w, bitmap, b;
    int16_t px, py;
    const tGlyph *pGlyph;

    pGlyph = pFont->pGlyphs[c-32];
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800216a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800216e:	3b20      	subs	r3, #32
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61fb      	str	r3, [r7, #28]

    y0 += pFont->bbxh;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800217e:	b29a      	uxth	r2, r3
 8002180:	88bb      	ldrh	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	80bb      	strh	r3, [r7, #4]
    y0 -= pFont->descent;
 8002188:	88ba      	ldrh	r2, [r7, #4]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	79db      	ldrb	r3, [r3, #7]
 800218e:	b29b      	uxth	r3, r3
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	b29b      	uxth	r3, r3
 8002194:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxh;
 8002196:	88ba      	ldrh	r2, [r7, #4]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxy;
 80021a6:	88ba      	ldrh	r2, [r7, #4]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	80bb      	strh	r3, [r7, #4]

    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 80021b6:	2300      	movs	r3, #0
 80021b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021ba:	e06f      	b.n	800229c <draw_char+0x150>
    {
        py = y0+y;
 80021bc:	88ba      	ldrh	r2, [r7, #4]
 80021be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021c0:	4413      	add	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	837b      	strh	r3, [r7, #26]

        w = (pGlyph->bbxw-1)/8+1;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da00      	bge.n	80021d4 <draw_char+0x88>
 80021d2:	3307      	adds	r3, #7
 80021d4:	10db      	asrs	r3, r3, #3
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	b29b      	uxth	r3, r3
 80021dc:	833b      	strh	r3, [r7, #24]

        int16_t yw = y*w;
 80021de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021e0:	8b3b      	ldrh	r3, [r7, #24]
 80021e2:	fb12 f303 	smulbb	r3, r2, r3
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	82fb      	strh	r3, [r7, #22]
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 80021ea:	2300      	movs	r3, #0
 80021ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021ee:	e047      	b.n	8002280 <draw_char+0x134>
        {
            bitmap = pGlyph->pBitmap[yw+x/8];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80021f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	da00      	bge.n	8002202 <draw_char+0xb6>
 8002200:	3307      	adds	r3, #7
 8002202:	10db      	asrs	r3, r3, #3
 8002204:	b21b      	sxth	r3, r3
 8002206:	440b      	add	r3, r1
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	82bb      	strh	r3, [r7, #20]

            for( b = 0 ; b < 8 ; b++ )
 800220e:	2300      	movs	r3, #0
 8002210:	847b      	strh	r3, [r7, #34]	; 0x22
 8002212:	e02b      	b.n	800226c <draw_char+0x120>
            {
                if( x+b >= pGlyph->bbxw )
 8002214:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002218:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800221c:	4413      	add	r3, r2
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	f992 2009 	ldrsb.w	r2, [r2, #9]
 8002224:	4293      	cmp	r3, r2
 8002226:	da26      	bge.n	8002276 <draw_char+0x12a>
                {
                    break;
                }

                px = x0+x+b;
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002232:	4413      	add	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	827b      	strh	r3, [r7, #18]

                if( bitmap & (0x80>>b) )
 8002238:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800223c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	fa41 f303 	asr.w	r3, r1, r3
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <draw_char+0x114>
                {
                    //set_pixel( px, py, color );
                    //lcd_rect( px, py, 1, 1, color);
                	setpixel_checked(fb, px, py, color, 1);
 800224c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002250:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	2001      	movs	r0, #1
 8002258:	9000      	str	r0, [sp, #0]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f00b fe8c 	bl	800df78 <setpixel_checked>
            for( b = 0 ; b < 8 ; b++ )
 8002260:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002264:	b29b      	uxth	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	b29b      	uxth	r3, r3
 800226a:	847b      	strh	r3, [r7, #34]	; 0x22
 800226c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002270:	2b07      	cmp	r3, #7
 8002272:	ddcf      	ble.n	8002214 <draw_char+0xc8>
 8002274:	e000      	b.n	8002278 <draw_char+0x12c>
                    break;
 8002276:	bf00      	nop
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 8002278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800227a:	3308      	adds	r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002286:	b21b      	sxth	r3, r3
 8002288:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800228c:	429a      	cmp	r2, r3
 800228e:	dbaf      	blt.n	80021f0 <draw_char+0xa4>
    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 8002290:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002294:	b29b      	uxth	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80022a8:	429a      	cmp	r2, r3
 80022aa:	db87      	blt.n	80021bc <draw_char+0x70>
                }
            }
        }
    }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <get_char_rect>:


tRectangle get_char_rect( const tFont *pFont, uint8_t c )
{
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
    tRectangle rect = {0};
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]

    rect.width = pFont->pGlyphs[c-32]->dwidthx;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d8:	3b20      	subs	r3, #32
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	79db      	ldrb	r3, [r3, #7]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	82bb      	strh	r3, [r7, #20]
    rect.height = pFont->bbxh;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	82fb      	strh	r3, [r7, #22]
    return rect;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	cb03      	ldmia	r3!, {r0, r1}
 80022fa:	6010      	str	r0, [r2, #0]
 80022fc:	6051      	str	r1, [r2, #4]
}
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <get_text_rect>:

tRectangle get_text_rect( const tFont *pFont, char *pString )
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08a      	sub	sp, #40	; 0x28
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
	uint8_t i;
	tRectangle rect = {0};
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]

	rect.height = pFont->bbxh;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002326:	b21b      	sxth	r3, r3
 8002328:	837b      	strh	r3, [r7, #26]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002330:	e019      	b.n	8002366 <get_text_rect+0x5c>
	{
		rect.width += get_char_rect( pFont, pString[i] ).width;
 8002332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ffb7 	bl	80022b6 <get_char_rect>
 8002348:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800234c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002350:	b292      	uxth	r2, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	b21b      	sxth	r3, r3
 800235a:	833b      	strh	r3, [r7, #24]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 800235c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002360:	3301      	adds	r3, #1
 8002362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1de      	bne.n	8002332 <get_text_rect+0x28>
    }

    return rect;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	461a      	mov	r2, r3
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	cb03      	ldmia	r3!, {r0, r1}
 800237e:	6010      	str	r0, [r2, #0]
 8002380:	6051      	str	r1, [r2, #4]
}
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <lcd_bmp>:
	        }
	    }
}

void lcd_bmp( int16_t x, int16_t y, int16_t w, int16_t h, uint8_t *buf )
{
 800238c:	b490      	push	{r4, r7}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	80fb      	strh	r3, [r7, #6]
 800239e:	4603      	mov	r3, r0
 80023a0:	80bb      	strh	r3, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
 80023a6:	4613      	mov	r3, r2
 80023a8:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + w - 1;
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4413      	add	r3, r2
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + h - 1;
 80023c0:	88ba      	ldrh	r2, [r7, #4]
 80023c2:	883b      	ldrh	r3, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	833b      	strh	r3, [r7, #24]

	if( x0 < 0 )
 80023ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da02      	bge.n	80023dc <lcd_bmp+0x50>
	{
		x0 = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	83fb      	strh	r3, [r7, #30]
 80023da:	e005      	b.n	80023e8 <lcd_bmp+0x5c>
	}
	else if( x0 > 240 - 1 )
 80023dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023e0:	2bef      	cmp	r3, #239	; 0xef
 80023e2:	dd01      	ble.n	80023e8 <lcd_bmp+0x5c>
	{
		x0 = 240 - 1;
 80023e4:	23ef      	movs	r3, #239	; 0xef
 80023e6:	83fb      	strh	r3, [r7, #30]
	}

	if( x1 < 0 )
 80023e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da02      	bge.n	80023f6 <lcd_bmp+0x6a>
	{
		x1 = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	837b      	strh	r3, [r7, #26]
 80023f4:	e005      	b.n	8002402 <lcd_bmp+0x76>
	}
	else if( x1 > 240 - 1 )
 80023f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023fa:	2bef      	cmp	r3, #239	; 0xef
 80023fc:	dd01      	ble.n	8002402 <lcd_bmp+0x76>
	{
		x1 = 240 - 1;
 80023fe:	23ef      	movs	r3, #239	; 0xef
 8002400:	837b      	strh	r3, [r7, #26]
	}

	if( y0 < 0 )
 8002402:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	da02      	bge.n	8002410 <lcd_bmp+0x84>
	{
		y0 = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	83bb      	strh	r3, [r7, #28]
 800240e:	e007      	b.n	8002420 <lcd_bmp+0x94>
	}
	else if( y0 > 320 - 1 )
 8002410:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002414:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002418:	db02      	blt.n	8002420 <lcd_bmp+0x94>
	{
		y0 = 320 - 1;
 800241a:	f240 133f 	movw	r3, #319	; 0x13f
 800241e:	83bb      	strh	r3, [r7, #28]
	}

	if( y1 < 0 )
 8002420:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	da02      	bge.n	800242e <lcd_bmp+0xa2>
	{
		y1 = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	833b      	strh	r3, [r7, #24]
 800242c:	e007      	b.n	800243e <lcd_bmp+0xb2>
	}
	else if( y1 > 320 - 1 )
 800242e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002432:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002436:	db02      	blt.n	800243e <lcd_bmp+0xb2>
	{
		y1 = 320 - 1;
 8002438:	f240 133f 	movw	r3, #319	; 0x13f
 800243c:	833b      	strh	r3, [r7, #24]
	}

	if( x0 > x1 )
 800243e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002442:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002446:	429a      	cmp	r2, r3
 8002448:	dd06      	ble.n	8002458 <lcd_bmp+0xcc>
	{
		int tmp = x0;
 800244a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800244e:	613b      	str	r3, [r7, #16]
		x0 = x1;
 8002450:	8b7b      	ldrh	r3, [r7, #26]
 8002452:	83fb      	strh	r3, [r7, #30]
		x1 = tmp;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	837b      	strh	r3, [r7, #26]
	}

	if( y0 > y1 )
 8002458:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800245c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002460:	429a      	cmp	r2, r3
 8002462:	dd06      	ble.n	8002472 <lcd_bmp+0xe6>
	{
		int tmp = y0;
 8002464:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002468:	60fb      	str	r3, [r7, #12]
		y0 = y1;
 800246a:	8b3b      	ldrh	r3, [r7, #24]
 800246c:	83bb      	strh	r3, [r7, #28]
		y1 = tmp;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	833b      	strh	r3, [r7, #24]
	}

	w = x1 - x0 + 1;
 8002472:	8b7a      	ldrh	r2, [r7, #26]
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	b29b      	uxth	r3, r3
 800247a:	3301      	adds	r3, #1
 800247c:	b29b      	uxth	r3, r3
 800247e:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8002480:	8b3a      	ldrh	r2, [r7, #24]
 8002482:	8bbb      	ldrh	r3, [r7, #28]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	b29b      	uxth	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	b29b      	uxth	r3, r3
 800248c:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
	uint32_t n = w*h;
 8002492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002496:	f9b7 2000 	ldrsh.w	r2, [r7]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	60bb      	str	r3, [r7, #8]

	//uint16_t color_l = (color>>0)&0x1FF;
	//uint16_t color_h = (color>>9)&0x1FF;

	*addr_cmd = 0x2A;
 80024a0:	4b2e      	ldr	r3, [pc, #184]	; (800255c <lcd_bmp+0x1d0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	222a      	movs	r2, #42	; 0x2a
 80024a6:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 80024a8:	8bfa      	ldrh	r2, [r7, #30]
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <lcd_bmp+0x1d4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0a12      	lsrs	r2, r2, #8
 80024b0:	b292      	uxth	r2, r2
 80024b2:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 80024b4:	8bfa      	ldrh	r2, [r7, #30]
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <lcd_bmp+0x1d4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	b292      	uxth	r2, r2
 80024be:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 80024c0:	8b7a      	ldrh	r2, [r7, #26]
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <lcd_bmp+0x1d4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0a12      	lsrs	r2, r2, #8
 80024c8:	b292      	uxth	r2, r2
 80024ca:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 80024cc:	8b7a      	ldrh	r2, [r7, #26]
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <lcd_bmp+0x1d4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	b292      	uxth	r2, r2
 80024d6:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <lcd_bmp+0x1d0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	222b      	movs	r2, #43	; 0x2b
 80024de:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 80024e0:	8bba      	ldrh	r2, [r7, #28]
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <lcd_bmp+0x1d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0a12      	lsrs	r2, r2, #8
 80024e8:	b292      	uxth	r2, r2
 80024ea:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 80024ec:	8bba      	ldrh	r2, [r7, #28]
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <lcd_bmp+0x1d4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	b292      	uxth	r2, r2
 80024f6:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 80024f8:	8b3a      	ldrh	r2, [r7, #24]
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <lcd_bmp+0x1d4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0a12      	lsrs	r2, r2, #8
 8002500:	b292      	uxth	r2, r2
 8002502:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8002504:	8b3a      	ldrh	r2, [r7, #24]
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <lcd_bmp+0x1d4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	b292      	uxth	r2, r2
 800250e:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <lcd_bmp+0x1d0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	222c      	movs	r2, #44	; 0x2c
 8002516:	801a      	strh	r2, [r3, #0]
	for( i = n ; i ; i-- )
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e014      	b.n	8002548 <lcd_bmp+0x1bc>
	{
		*addr_data = *buf;
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <lcd_bmp+0x1d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b292      	uxth	r2, r2
 8002528:	801a      	strh	r2, [r3, #0]
		buf++;
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	3301      	adds	r3, #1
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
		*addr_data = *buf;
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <lcd_bmp+0x1d4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b292      	uxth	r2, r2
 800253a:	801a      	strh	r2, [r3, #0]
		buf++;
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	3301      	adds	r3, #1
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
	for( i = n ; i ; i-- )
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3b01      	subs	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e7      	bne.n	800251e <lcd_bmp+0x192>
	}
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bc90      	pop	{r4, r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000000 	.word	0x20000000
 8002560:	20000004 	.word	0x20000004

08002564 <oscilloscope_process>:
    nk_bool draw_bg;
    int draw_signals;
};
int visible = 0;
void oscilloscope_process(struct Oscilloscope *osc, struct nk_context *ctx)
{
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b0fe      	sub	sp, #504	; 0x1f8
 8002568:	af04      	add	r7, sp, #16
 800256a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800256e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002572:	6018      	str	r0, [r3, #0]
 8002574:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002578:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800257c:	6019      	str	r1, [r3, #0]
	visible = 0;
 800257e:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <oscilloscope_process+0x1d0>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
	if( nk_begin(ctx, "STM32G4 Scope", nk_rect(0, 0, 240, 320), NK_WINDOW_MINIMIZABLE ) )
 8002584:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8002738 <oscilloscope_process+0x1d4>
 8002588:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 800273c <oscilloscope_process+0x1d8>
 800258c:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8002740 <oscilloscope_process+0x1dc>
 8002590:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002740 <oscilloscope_process+0x1dc>
 8002594:	f012 f820 	bl	80145d8 <nk_rect>
 8002598:	eeb0 6a40 	vmov.f32	s12, s0
 800259c:	eef0 6a60 	vmov.f32	s13, s1
 80025a0:	eeb0 7a41 	vmov.f32	s14, s2
 80025a4:	eef0 7a61 	vmov.f32	s15, s3
 80025a8:	ed87 6a5b 	vstr	s12, [r7, #364]	; 0x16c
 80025ac:	edc7 6a5c 	vstr	s13, [r7, #368]	; 0x170
 80025b0:	ed87 7a5d 	vstr	s14, [r7, #372]	; 0x174
 80025b4:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
 80025b8:	ed97 6a5b 	vldr	s12, [r7, #364]	; 0x16c
 80025bc:	edd7 6a5c 	vldr	s13, [r7, #368]	; 0x170
 80025c0:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 80025c4:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 80025c8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80025cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025d0:	2210      	movs	r2, #16
 80025d2:	eeb0 0a46 	vmov.f32	s0, s12
 80025d6:	eef0 0a66 	vmov.f32	s1, s13
 80025da:	eeb0 1a47 	vmov.f32	s2, s14
 80025de:	eef0 1a67 	vmov.f32	s3, s15
 80025e2:	4958      	ldr	r1, [pc, #352]	; (8002744 <oscilloscope_process+0x1e0>)
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	f01a fe96 	bl	801d316 <nk_begin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f001 85f8 	beq.w	80041e2 <oscilloscope_process+0x1c7e>
	{
		visible = 1;
 80025f2:	4b50      	ldr	r3, [pc, #320]	; (8002734 <oscilloscope_process+0x1d0>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
        osc->draw_bg = nk_true;
 80025f8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80025fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        if( nk_tree_push( ctx, NK_TREE_TAB, "Acquire", NK_MAXIMIZED) ){
 8002608:	484f      	ldr	r0, [pc, #316]	; (8002748 <oscilloscope_process+0x1e4>)
 800260a:	f01a f841 	bl	801c690 <nk_strlen>
 800260e:	4603      	mov	r3, r0
 8002610:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8002614:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8002618:	f240 2267 	movw	r2, #615	; 0x267
 800261c:	9202      	str	r2, [sp, #8]
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	4b49      	ldr	r3, [pc, #292]	; (8002748 <oscilloscope_process+0x1e4>)
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2301      	movs	r3, #1
 8002626:	4a49      	ldr	r2, [pc, #292]	; (800274c <oscilloscope_process+0x1e8>)
 8002628:	2101      	movs	r1, #1
 800262a:	6800      	ldr	r0, [r0, #0]
 800262c:	f019 fd82 	bl	801c134 <nk_tree_push_hashed>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80a5 	beq.w	8002782 <oscilloscope_process+0x21e>
            osc->draw_bg = nk_false;
 8002638:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800263c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 60, 60, 60});
 8002648:	4b41      	ldr	r3, [pc, #260]	; (8002750 <oscilloscope_process+0x1ec>)
 800264a:	f507 74ae 	add.w	r4, r7, #348	; 0x15c
 800264e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002654:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8002658:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800265c:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8002660:	2204      	movs	r2, #4
 8002662:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002666:	2101      	movs	r1, #1
 8002668:	6800      	ldr	r0, [r0, #0]
 800266a:	f011 fa61 	bl	8013b30 <nk_layout_row>
            if (osc->acquire_run) {
 800266e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002672:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <oscilloscope_process+0x140>
                if (nk_button_label(ctx, "Stop")) {
 800267e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002682:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002686:	4933      	ldr	r1, [pc, #204]	; (8002754 <oscilloscope_process+0x1f0>)
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	f00d fa5d 	bl	800fb48 <nk_button_label>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d019      	beq.n	80026c8 <oscilloscope_process+0x164>
                    osc->acquire_run = nk_false;
 8002694:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002698:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e011      	b.n	80026c8 <oscilloscope_process+0x164>
                }
            } else {
                if (nk_button_label(ctx, "Run")) {
 80026a4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80026a8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026ac:	492a      	ldr	r1, [pc, #168]	; (8002758 <oscilloscope_process+0x1f4>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	f00d fa4a 	bl	800fb48 <nk_button_label>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <oscilloscope_process+0x164>
                    osc->acquire_run = nk_true;
 80026ba:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80026be:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
                }
            }

            if (nk_button_label(ctx, "Single")) {
 80026c8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80026cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026d0:	4922      	ldr	r1, [pc, #136]	; (800275c <oscilloscope_process+0x1f8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f00d fa38 	bl	800fb48 <nk_button_label>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <oscilloscope_process+0x188>
                osc->acquire_single = nk_true;
 80026de:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80026e2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2201      	movs	r2, #1
 80026ea:	605a      	str	r2, [r3, #4]
            }

            if (nk_button_label(ctx, "Draw")) {
 80026ec:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80026f0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026f4:	491a      	ldr	r1, [pc, #104]	; (8002760 <oscilloscope_process+0x1fc>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	f00d fa26 	bl	800fb48 <nk_button_label>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d038      	beq.n	8002774 <oscilloscope_process+0x210>
                if (osc->draw_signals + 1 < 3) {
 8002702:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002706:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002710:	2b01      	cmp	r3, #1
 8002712:	dc27      	bgt.n	8002764 <oscilloscope_process+0x200>
                    osc->draw_signals += 1;
 8002714:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002718:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002728:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002732:	e01f      	b.n	8002774 <oscilloscope_process+0x210>
 8002734:	200007ec 	.word	0x200007ec
 8002738:	43a00000 	.word	0x43a00000
 800273c:	43700000 	.word	0x43700000
 8002740:	00000000 	.word	0x00000000
 8002744:	080217b8 	.word	0x080217b8
 8002748:	080217c8 	.word	0x080217c8
 800274c:	080217e0 	.word	0x080217e0
 8002750:	0802198c 	.word	0x0802198c
 8002754:	080217e8 	.word	0x080217e8
 8002758:	080217f0 	.word	0x080217f0
 800275c:	080217f4 	.word	0x080217f4
 8002760:	080217fc 	.word	0x080217fc
                } else {
                    osc->draw_signals = 0;
 8002764:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002768:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                }
            }
            nk_tree_pop(ctx);
 8002774:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002778:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	f019 fcf6 	bl	801c16e <nk_tree_pop>
        }

        {
        	if( nk_tree_push( ctx, NK_TREE_TAB, "Horizontal", NK_MINIMIZED) ){
 8002782:	48a8      	ldr	r0, [pc, #672]	; (8002a24 <oscilloscope_process+0x4c0>)
 8002784:	f019 ff84 	bl	801c690 <nk_strlen>
 8002788:	4603      	mov	r3, r0
 800278a:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800278e:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8002792:	f240 2283 	movw	r2, #643	; 0x283
 8002796:	9202      	str	r2, [sp, #8]
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	4ba2      	ldr	r3, [pc, #648]	; (8002a24 <oscilloscope_process+0x4c0>)
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	4aa1      	ldr	r2, [pc, #644]	; (8002a28 <oscilloscope_process+0x4c4>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	6800      	ldr	r0, [r0, #0]
 80027a6:	f019 fcc5 	bl	801c134 <nk_tree_push_hashed>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8209 	beq.w	8002bc4 <oscilloscope_process+0x660>
        		nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80027b2:	4b9e      	ldr	r3, [pc, #632]	; (8002a2c <oscilloscope_process+0x4c8>)
 80027b4:	f507 74a6 	add.w	r4, r7, #332	; 0x14c
 80027b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027be:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80027c2:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80027c6:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 80027ca:	2204      	movs	r2, #4
 80027cc:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80027d0:	2101      	movs	r1, #1
 80027d2:	6800      	ldr	r0, [r0, #0]
 80027d4:	f011 f9ac 	bl	8013b30 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 80027d8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80027dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027e0:	2211      	movs	r2, #17
 80027e2:	4993      	ldr	r1, [pc, #588]	; (8002a30 <oscilloscope_process+0x4cc>)
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	f019 f85b 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80027ea:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80027ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027f2:	2101      	movs	r1, #1
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	f00d f8a3 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80027fa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80027fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002802:	2109      	movs	r1, #9
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	f00d fa55 	bl	800fcb4 <nk_button_symbol>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d011      	beq.n	8002834 <oscilloscope_process+0x2d0>
        		{
        			osc->horizontal_offset -= 1;
 8002810:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002814:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	edd3 7a02 	vldr	s15, [r3, #8]
 800281e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002826:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800282a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	edc3 7a02 	vstr	s15, [r3, #8]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->horizontal_offset);
 8002834:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002838:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fea9 	bl	8000598 <__aeabi_f2d>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	f107 000c 	add.w	r0, r7, #12
 800284e:	4979      	ldr	r1, [pc, #484]	; (8002a34 <oscilloscope_process+0x4d0>)
 8002850:	f01c f93e 	bl	801ead0 <siprintf>

        		static int show_app_about = 0;
        		show_app_about |= nk_button_label( ctx, combo_buffer );
 8002854:	f107 020c 	add.w	r2, r7, #12
 8002858:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800285c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002860:	4611      	mov	r1, r2
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	f00d f970 	bl	800fb48 <nk_button_label>
 8002868:	4602      	mov	r2, r0
 800286a:	4b73      	ldr	r3, [pc, #460]	; (8002a38 <oscilloscope_process+0x4d4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	4a71      	ldr	r2, [pc, #452]	; (8002a38 <oscilloscope_process+0x4d4>)
 8002872:	6013      	str	r3, [r2, #0]

                if (show_app_about)
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <oscilloscope_process+0x4d4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 810a 	beq.w	8002a92 <oscilloscope_process+0x52e>
                {
                    /* about popup */
                    //static struct nk_rect s = {20, 20, 200, 200};
                    if (nk_popup_begin(ctx, NK_POPUP_DYNAMIC, "Keypad", NK_WINDOW_CLOSABLE, (struct nk_rect){20, 20, 160, 240} ) )
 800287e:	4b6f      	ldr	r3, [pc, #444]	; (8002a3c <oscilloscope_process+0x4d8>)
 8002880:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8002884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800288a:	ed97 6a4f 	vldr	s12, [r7, #316]	; 0x13c
 800288e:	edd7 6a50 	vldr	s13, [r7, #320]	; 0x140
 8002892:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 8002896:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800289a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800289e:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80028a2:	eeb0 0a46 	vmov.f32	s0, s12
 80028a6:	eef0 0a66 	vmov.f32	s1, s13
 80028aa:	eeb0 1a47 	vmov.f32	s2, s14
 80028ae:	eef0 1a67 	vmov.f32	s3, s15
 80028b2:	2308      	movs	r3, #8
 80028b4:	4a62      	ldr	r2, [pc, #392]	; (8002a40 <oscilloscope_process+0x4dc>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	6800      	ldr	r0, [r0, #0]
 80028ba:	f014 fcef 	bl	801729c <nk_popup_begin>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80e3 	beq.w	8002a8c <oscilloscope_process+0x528>
                    {
                        nk_layout_row_dynamic(ctx, 20, 1);
 80028c6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80028ca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028ce:	2101      	movs	r1, #1
 80028d0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	f011 f917 	bl	8013b08 <nk_layout_row_dynamic>
                        nk_label(ctx, "0.00", NK_TEXT_RIGHT );
 80028da:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80028de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028e2:	2214      	movs	r2, #20
 80028e4:	4957      	ldr	r1, [pc, #348]	; (8002a44 <oscilloscope_process+0x4e0>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f018 ffda 	bl	801b8a0 <nk_label>
                        nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){35, 35, 35, 35});
 80028ec:	4b56      	ldr	r3, [pc, #344]	; (8002a48 <oscilloscope_process+0x4e4>)
 80028ee:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 80028f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028f8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80028fc:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8002900:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8002904:	2204      	movs	r2, #4
 8002906:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800290a:	2101      	movs	r1, #1
 800290c:	6800      	ldr	r0, [r0, #0]
 800290e:	f011 f90f 	bl	8013b30 <nk_layout_row>
                        nk_button_label( ctx, "7" );
 8002912:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002916:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800291a:	494c      	ldr	r1, [pc, #304]	; (8002a4c <oscilloscope_process+0x4e8>)
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	f00d f913 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "8" );
 8002922:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002926:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800292a:	4949      	ldr	r1, [pc, #292]	; (8002a50 <oscilloscope_process+0x4ec>)
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	f00d f90b 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "9" );
 8002932:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002936:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800293a:	4946      	ldr	r1, [pc, #280]	; (8002a54 <oscilloscope_process+0x4f0>)
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	f00d f903 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "k" );
 8002942:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002946:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800294a:	4943      	ldr	r1, [pc, #268]	; (8002a58 <oscilloscope_process+0x4f4>)
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f00d f8fb 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "4" );
 8002952:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002956:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800295a:	4940      	ldr	r1, [pc, #256]	; (8002a5c <oscilloscope_process+0x4f8>)
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	f00d f8f3 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "5" );
 8002962:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002966:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800296a:	493d      	ldr	r1, [pc, #244]	; (8002a60 <oscilloscope_process+0x4fc>)
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f00d f8eb 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "6" );
 8002972:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002976:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800297a:	493a      	ldr	r1, [pc, #232]	; (8002a64 <oscilloscope_process+0x500>)
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	f00d f8e3 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "m" );
 8002982:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002986:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800298a:	4937      	ldr	r1, [pc, #220]	; (8002a68 <oscilloscope_process+0x504>)
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	f00d f8db 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "1" );
 8002992:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002996:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800299a:	4934      	ldr	r1, [pc, #208]	; (8002a6c <oscilloscope_process+0x508>)
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	f00d f8d3 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "2" );
 80029a2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80029a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029aa:	4931      	ldr	r1, [pc, #196]	; (8002a70 <oscilloscope_process+0x50c>)
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	f00d f8cb 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "3" );
 80029b2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80029b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029ba:	492e      	ldr	r1, [pc, #184]	; (8002a74 <oscilloscope_process+0x510>)
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	f00d f8c3 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "u" );
 80029c2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80029c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029ca:	492b      	ldr	r1, [pc, #172]	; (8002a78 <oscilloscope_process+0x514>)
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	f00d f8bb 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "C" );
 80029d2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80029d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029da:	4928      	ldr	r1, [pc, #160]	; (8002a7c <oscilloscope_process+0x518>)
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	f00d f8b3 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "0" );
 80029e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80029e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029ea:	4925      	ldr	r1, [pc, #148]	; (8002a80 <oscilloscope_process+0x51c>)
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	f00d f8ab 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "." );
 80029f2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80029f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029fa:	4922      	ldr	r1, [pc, #136]	; (8002a84 <oscilloscope_process+0x520>)
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	f00d f8a3 	bl	800fb48 <nk_button_label>
                        nk_button_label( ctx, "OK" );
 8002a02:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002a06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a0a:	491f      	ldr	r1, [pc, #124]	; (8002a88 <oscilloscope_process+0x524>)
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	f00d f89b 	bl	800fb48 <nk_button_label>
                        nk_popup_end(ctx);
 8002a12:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002a16:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	f014 ffe8 	bl	80179f0 <nk_popup_end>
 8002a20:	e037      	b.n	8002a92 <oscilloscope_process+0x52e>
 8002a22:	bf00      	nop
 8002a24:	08021804 	.word	0x08021804
 8002a28:	0802181c 	.word	0x0802181c
 8002a2c:	0802199c 	.word	0x0802199c
 8002a30:	08021828 	.word	0x08021828
 8002a34:	08021830 	.word	0x08021830
 8002a38:	200007f0 	.word	0x200007f0
 8002a3c:	080219ac 	.word	0x080219ac
 8002a40:	08021838 	.word	0x08021838
 8002a44:	08021840 	.word	0x08021840
 8002a48:	080219bc 	.word	0x080219bc
 8002a4c:	08021848 	.word	0x08021848
 8002a50:	0802184c 	.word	0x0802184c
 8002a54:	08021850 	.word	0x08021850
 8002a58:	08021854 	.word	0x08021854
 8002a5c:	08021858 	.word	0x08021858
 8002a60:	0802185c 	.word	0x0802185c
 8002a64:	08021860 	.word	0x08021860
 8002a68:	08021864 	.word	0x08021864
 8002a6c:	08021868 	.word	0x08021868
 8002a70:	0802186c 	.word	0x0802186c
 8002a74:	08021870 	.word	0x08021870
 8002a78:	08021874 	.word	0x08021874
 8002a7c:	08021878 	.word	0x08021878
 8002a80:	0802187c 	.word	0x0802187c
 8002a84:	08021880 	.word	0x08021880
 8002a88:	08021884 	.word	0x08021884
                    } else show_app_about = nk_false;
 8002a8c:	4bd9      	ldr	r3, [pc, #868]	; (8002df4 <oscilloscope_process+0x890>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
                }

        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002a92:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002a96:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	f00c ff4f 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002aa2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002aa6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002aaa:	210a      	movs	r1, #10
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	f00d f901 	bl	800fcb4 <nk_button_symbol>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d011      	beq.n	8002adc <oscilloscope_process+0x578>
        		{
        			osc->horizontal_offset += 1;
 8002ab8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002abc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ace:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ad2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	edc3 7a02 	vstr	s15, [r3, #8]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 8002adc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ae0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ae4:	2211      	movs	r2, #17
 8002ae6:	49c4      	ldr	r1, [pc, #784]	; (8002df8 <oscilloscope_process+0x894>)
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	f018 fed9 	bl	801b8a0 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002aee:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002af2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002af6:	2101      	movs	r1, #1
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	f00c ff21 	bl	800f940 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002afe:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b02:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b06:	2109      	movs	r1, #9
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f00d f8d3 	bl	800fcb4 <nk_button_symbol>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d011      	beq.n	8002b38 <oscilloscope_process+0x5d4>
				{
					osc->horizontal_scale -= 1;
 8002b14:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b2a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b2e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	edc3 7a03 	vstr	s15, [r3, #12]
				}
				//char combo_buffer[32];
				sprintf(combo_buffer, "%.2f", osc->horizontal_scale);
 8002b38:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fd27 	bl	8000598 <__aeabi_f2d>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	f107 000c 	add.w	r0, r7, #12
 8002b52:	49aa      	ldr	r1, [pc, #680]	; (8002dfc <oscilloscope_process+0x898>)
 8002b54:	f01b ffbc 	bl	801ead0 <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002b58:	f107 010c 	add.w	r1, r7, #12
 8002b5c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b60:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b64:	2212      	movs	r2, #18
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	f018 fe9a 	bl	801b8a0 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002b6c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b70:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b74:	2101      	movs	r1, #1
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	f00c fee2 	bl	800f940 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002b7c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b80:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b84:	210a      	movs	r1, #10
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	f00d f894 	bl	800fcb4 <nk_button_symbol>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d011      	beq.n	8002bb6 <oscilloscope_process+0x652>
				{
					osc->horizontal_scale += 1;
 8002b92:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b96:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ba8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002bac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	edc3 7a03 	vstr	s15, [r3, #12]
				}
                nk_tree_pop(ctx);
 8002bb6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002bba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	f019 fad5 	bl	801c16e <nk_tree_pop>
            }

        	if( nk_tree_push( ctx, NK_TREE_TAB, "Vertical", NK_MINIMIZED) ){
 8002bc4:	488e      	ldr	r0, [pc, #568]	; (8002e00 <oscilloscope_process+0x89c>)
 8002bc6:	f019 fd63 	bl	801c690 <nk_strlen>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8002bd0:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8002bd4:	f240 22c5 	movw	r2, #709	; 0x2c5
 8002bd8:	9202      	str	r2, [sp, #8]
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <oscilloscope_process+0x89c>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	4a88      	ldr	r2, [pc, #544]	; (8002e04 <oscilloscope_process+0x8a0>)
 8002be4:	2101      	movs	r1, #1
 8002be6:	6800      	ldr	r0, [r0, #0]
 8002be8:	f019 faa4 	bl	801c134 <nk_tree_push_hashed>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8280 	beq.w	80030f4 <oscilloscope_process+0xb90>
        		nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){80});
 8002bf4:	4b84      	ldr	r3, [pc, #528]	; (8002e08 <oscilloscope_process+0x8a4>)
 8002bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002bfa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002bfe:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8002c02:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8002c06:	2201      	movs	r2, #1
 8002c08:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	6800      	ldr	r0, [r0, #0]
 8002c10:	f010 ff8e 	bl	8013b30 <nk_layout_row>
        		//nk_style_push_style_item(&ctx, &ctx->style.combo.button.text_background, nk_style_item_color(nk_rgb(255,0,0)));
        		osc->channel_selected = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->channel_selected, 30, nk_vec2(80, 160));
 8002c14:	4b7d      	ldr	r3, [pc, #500]	; (8002e0c <oscilloscope_process+0x8a8>)
 8002c16:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8002c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c20:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002c24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002c2c:	eddf 0a78 	vldr	s1, [pc, #480]	; 8002e10 <oscilloscope_process+0x8ac>
 8002c30:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8002e14 <oscilloscope_process+0x8b0>
 8002c34:	f011 fd82 	bl	801473c <nk_vec2>
 8002c38:	eeb0 7a40 	vmov.f32	s14, s0
 8002c3c:	eef0 7a60 	vmov.f32	s15, s1
 8002c40:	ed87 7a5f 	vstr	s14, [r7, #380]	; 0x17c
 8002c44:	edc7 7a60 	vstr	s15, [r7, #384]	; 0x180
 8002c48:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 8002c4c:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 8002c50:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002c54:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002c58:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8002c5c:	231e      	movs	r3, #30
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	eeb0 0a47 	vmov.f32	s0, s14
 8002c64:	eef0 0a67 	vmov.f32	s1, s15
 8002c68:	4623      	mov	r3, r4
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	6800      	ldr	r0, [r0, #0]
 8002c6e:	f00d fd23 	bl	80106b8 <nk_combo>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002c78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
        		//nk_style_pop_style_item(&ctx);
        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){80, 80});
 8002c80:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <oscilloscope_process+0x8b4>)
 8002c82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c92:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8002c96:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	6800      	ldr	r0, [r0, #0]
 8002ca4:	f010 ff44 	bl	8013b30 <nk_layout_row>
                osc->channels[osc->channel_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->channels[osc->channel_selected].enabled, 30, nk_vec2(80, 120));
 8002ca8:	4a5c      	ldr	r2, [pc, #368]	; (8002e1c <oscilloscope_process+0x8b8>)
 8002caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cb2:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cb6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002cba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002cc6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3328      	adds	r3, #40	; 0x28
 8002cd8:	681d      	ldr	r5, [r3, #0]
 8002cda:	eddf 0a51 	vldr	s1, [pc, #324]	; 8002e20 <oscilloscope_process+0x8bc>
 8002cde:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8002e14 <oscilloscope_process+0x8b0>
 8002ce2:	f011 fd2b 	bl	801473c <nk_vec2>
 8002ce6:	eeb0 7a40 	vmov.f32	s14, s0
 8002cea:	eef0 7a60 	vmov.f32	s15, s1
 8002cee:	ed87 7a61 	vstr	s14, [r7, #388]	; 0x184
 8002cf2:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
 8002cf6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002cfa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d02:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 8002d06:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002d0a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002d0e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d12:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8002d16:	231e      	movs	r3, #30
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d1e:	eef0 0a67 	vmov.f32	s1, s15
 8002d22:	462b      	mov	r3, r5
 8002d24:	2202      	movs	r2, #2
 8002d26:	6800      	ldr	r0, [r0, #0]
 8002d28:	f00d fcc6 	bl	80106b8 <nk_combo>
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d32:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4623      	mov	r3, r4
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4423      	add	r3, r4
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	3328      	adds	r3, #40	; 0x28
 8002d44:	6019      	str	r1, [r3, #0]
                osc->channels[osc->channel_selected].coupling = nk_combo(ctx, (const char*[]){"DC", "AC", "Gnd"}, 3, osc->channels[osc->channel_selected].coupling, 30, nk_vec2(80, 120));
 8002d46:	4a37      	ldr	r2, [pc, #220]	; (8002e24 <oscilloscope_process+0x8c0>)
 8002d48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d52:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d56:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d5e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d62:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	332c      	adds	r3, #44	; 0x2c
 8002d74:	681d      	ldr	r5, [r3, #0]
 8002d76:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8002e20 <oscilloscope_process+0x8bc>
 8002d7a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002e14 <oscilloscope_process+0x8b0>
 8002d7e:	f011 fcdd 	bl	801473c <nk_vec2>
 8002d82:	eeb0 7a40 	vmov.f32	s14, s0
 8002d86:	eef0 7a60 	vmov.f32	s15, s1
 8002d8a:	ed87 7a63 	vstr	s14, [r7, #396]	; 0x18c
 8002d8e:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
 8002d92:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d96:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d9e:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 8002da2:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8002da6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8002daa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002dae:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8002db2:	231e      	movs	r3, #30
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dba:	eef0 0a67 	vmov.f32	s1, s15
 8002dbe:	462b      	mov	r3, r5
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	6800      	ldr	r0, [r0, #0]
 8002dc4:	f00d fc78 	bl	80106b8 <nk_combo>
 8002dc8:	4601      	mov	r1, r0
 8002dca:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002dce:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4623      	mov	r3, r4
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4423      	add	r3, r4
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	332c      	adds	r3, #44	; 0x2c
 8002de0:	6019      	str	r1, [r3, #0]
                //osc->channels[osc->channel_selected].offset = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].offset, 10.0f, 1.0f);
                //osc->channels[osc->channel_selected].scale = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].scale, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <oscilloscope_process+0x8c4>)
 8002de4:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8002de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002dee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002df2:	e01b      	b.n	8002e2c <oscilloscope_process+0x8c8>
 8002df4:	200007f0 	.word	0x200007f0
 8002df8:	08021888 	.word	0x08021888
 8002dfc:	08021830 	.word	0x08021830
 8002e00:	08021890 	.word	0x08021890
 8002e04:	080218a8 	.word	0x080218a8
 8002e08:	42a00000 	.word	0x42a00000
 8002e0c:	080219dc 	.word	0x080219dc
 8002e10:	43200000 	.word	0x43200000
 8002e14:	42a00000 	.word	0x42a00000
 8002e18:	080219ec 	.word	0x080219ec
 8002e1c:	080219fc 	.word	0x080219fc
 8002e20:	42f00000 	.word	0x42f00000
 8002e24:	08021a10 	.word	0x08021a10
 8002e28:	0802199c 	.word	0x0802199c
 8002e2c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8002e30:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8002e34:	2204      	movs	r2, #4
 8002e36:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	6800      	ldr	r0, [r0, #0]
 8002e3e:	f010 fe77 	bl	8013b30 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8002e42:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002e46:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e4a:	2211      	movs	r2, #17
 8002e4c:	49d8      	ldr	r1, [pc, #864]	; (80031b0 <oscilloscope_process+0xc4c>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	f018 fd26 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002e54:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002e58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	f00c fd6e 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002e64:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002e68:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e6c:	2109      	movs	r1, #9
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	f00c ff20 	bl	800fcb4 <nk_button_symbol>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d029      	beq.n	8002ece <oscilloscope_process+0x96a>
        		{
        			osc->channels[osc->channel_selected].offset -= 1;
 8002e7a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002e7e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e86:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002e8a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3330      	adds	r3, #48	; 0x30
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ea4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eb4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002eb8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ebc:	6819      	ldr	r1, [r3, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3330      	adds	r3, #48	; 0x30
 8002eca:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].offset);
 8002ece:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ed2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eda:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ede:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3330      	adds	r3, #48	; 0x30
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fb50 	bl	8000598 <__aeabi_f2d>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	f107 000c 	add.w	r0, r7, #12
 8002f00:	49ac      	ldr	r1, [pc, #688]	; (80031b4 <oscilloscope_process+0xc50>)
 8002f02:	f01b fde5 	bl	801ead0 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002f06:	f107 010c 	add.w	r1, r7, #12
 8002f0a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f12:	2212      	movs	r2, #18
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	f018 fcc3 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002f1a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f22:	2101      	movs	r1, #1
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	f00c fd0b 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002f2a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f2e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f32:	210a      	movs	r1, #10
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	f00c febd 	bl	800fcb4 <nk_button_symbol>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d029      	beq.n	8002f94 <oscilloscope_process+0xa30>
        		{
        			osc->channels[osc->channel_selected].offset += 1;
 8002f40:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f44:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3330      	adds	r3, #48	; 0x30
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f6a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f7a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f7e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3330      	adds	r3, #48	; 0x30
 8002f90:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 8002f94:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f9c:	2211      	movs	r2, #17
 8002f9e:	4986      	ldr	r1, [pc, #536]	; (80031b8 <oscilloscope_process+0xc54>)
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	f018 fc7d 	bl	801b8a0 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002fa6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002faa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fae:	2101      	movs	r1, #1
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	f00c fcc5 	bl	800f940 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002fb6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fbe:	2109      	movs	r1, #9
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	f00c fe77 	bl	800fcb4 <nk_button_symbol>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d029      	beq.n	8003020 <oscilloscope_process+0xabc>
				{
					osc->channels[osc->channel_selected].scale -= 1;
 8002fcc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fd0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fdc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3334      	adds	r3, #52	; 0x34
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ff6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003006:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800300a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3334      	adds	r3, #52	; 0x34
 800301c:	edc3 7a00 	vstr	s15, [r3]
				}
				//char combo_buffer[32];
				sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].scale);
 8003020:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003024:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003030:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3334      	adds	r3, #52	; 0x34
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd faa7 	bl	8000598 <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	f107 000c 	add.w	r0, r7, #12
 8003052:	4958      	ldr	r1, [pc, #352]	; (80031b4 <oscilloscope_process+0xc50>)
 8003054:	f01b fd3c 	bl	801ead0 <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003058:	f107 010c 	add.w	r1, r7, #12
 800305c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003060:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003064:	2212      	movs	r2, #18
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	f018 fc1a 	bl	801b8a0 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800306c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003070:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003074:	2101      	movs	r1, #1
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	f00c fc62 	bl	800f940 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800307c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003080:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003084:	210a      	movs	r1, #10
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	f00c fe14 	bl	800fcb4 <nk_button_symbol>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d029      	beq.n	80030e6 <oscilloscope_process+0xb82>
				{
					osc->channels[osc->channel_selected].scale += 1;
 8003092:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003096:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800309e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80030a2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3334      	adds	r3, #52	; 0x34
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80030bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030cc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80030d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3334      	adds	r3, #52	; 0x34
 80030e2:	edc3 7a00 	vstr	s15, [r3]
				}
                nk_tree_pop(ctx);
 80030e6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80030ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	f019 f83d 	bl	801c16e <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Trigger", NK_MINIMIZED) ){
 80030f4:	4831      	ldr	r0, [pc, #196]	; (80031bc <oscilloscope_process+0xc58>)
 80030f6:	f019 facb 	bl	801c690 <nk_strlen>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003100:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8003104:	f240 22f1 	movw	r2, #753	; 0x2f1
 8003108:	9202      	str	r2, [sp, #8]
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <oscilloscope_process+0xc58>)
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2300      	movs	r3, #0
 8003112:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <oscilloscope_process+0xc5c>)
 8003114:	2101      	movs	r1, #1
 8003116:	6800      	ldr	r0, [r0, #0]
 8003118:	f019 f80c 	bl	801c134 <nk_tree_push_hashed>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8173 	beq.w	800340a <oscilloscope_process+0xea6>
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){100});
 8003124:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003128:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <oscilloscope_process+0xc60>)
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003134:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003138:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 800313c:	2201      	movs	r2, #1
 800313e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003142:	2101      	movs	r1, #1
 8003144:	6800      	ldr	r0, [r0, #0]
 8003146:	f010 fcf3 	bl	8013b30 <nk_layout_row>
                osc->trigger_source = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->trigger_source, 30, nk_vec2(100, 160));
 800314a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800314e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003152:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <oscilloscope_process+0xc64>)
 8003154:	461c      	mov	r4, r3
 8003156:	4613      	mov	r3, r2
 8003158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800315a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800315e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003162:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69dc      	ldr	r4, [r3, #28]
 800316a:	eddf 0a18 	vldr	s1, [pc, #96]	; 80031cc <oscilloscope_process+0xc68>
 800316e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80031d0 <oscilloscope_process+0xc6c>
 8003172:	f011 fae3 	bl	801473c <nk_vec2>
 8003176:	eeb0 7a40 	vmov.f32	s14, s0
 800317a:	eef0 7a60 	vmov.f32	s15, s1
 800317e:	ed87 7a65 	vstr	s14, [r7, #404]	; 0x194
 8003182:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
 8003186:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 800318a:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800318e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8003192:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003196:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 800319a:	231e      	movs	r3, #30
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	eeb0 0a47 	vmov.f32	s0, s14
 80031a2:	eef0 0a67 	vmov.f32	s1, s15
 80031a6:	4623      	mov	r3, r4
 80031a8:	2204      	movs	r2, #4
 80031aa:	6800      	ldr	r0, [r0, #0]
 80031ac:	e012      	b.n	80031d4 <oscilloscope_process+0xc70>
 80031ae:	bf00      	nop
 80031b0:	08021828 	.word	0x08021828
 80031b4:	08021830 	.word	0x08021830
 80031b8:	08021888 	.word	0x08021888
 80031bc:	080218b4 	.word	0x080218b4
 80031c0:	080218cc 	.word	0x080218cc
 80031c4:	42c80000 	.word	0x42c80000
 80031c8:	080219dc 	.word	0x080219dc
 80031cc:	43200000 	.word	0x43200000
 80031d0:	42c80000 	.word	0x42c80000
 80031d4:	f00d fa70 	bl	80106b8 <nk_combo>
 80031d8:	4602      	mov	r2, r0
 80031da:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80031de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61da      	str	r2, [r3, #28]
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){100, 100});
 80031e6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80031ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031ee:	4add      	ldr	r2, [pc, #884]	; (8003564 <oscilloscope_process+0x1000>)
 80031f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80031f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80031fc:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003200:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8003204:	2202      	movs	r2, #2
 8003206:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800320a:	2101      	movs	r1, #1
 800320c:	6800      	ldr	r0, [r0, #0]
 800320e:	f010 fc8f 	bl	8013b30 <nk_layout_row>
                osc->trigger_mode = nk_combo(ctx, (const char*[]){"Normal", "Auto"}, 2, osc->trigger_mode, 30, nk_vec2(100, 120));
 8003212:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003216:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800321a:	4ad3      	ldr	r2, [pc, #844]	; (8003568 <oscilloscope_process+0x1004>)
 800321c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003220:	e883 0003 	stmia.w	r3, {r0, r1}
 8003224:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003228:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695c      	ldr	r4, [r3, #20]
 8003230:	eddf 0ace 	vldr	s1, [pc, #824]	; 800356c <oscilloscope_process+0x1008>
 8003234:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8003570 <oscilloscope_process+0x100c>
 8003238:	f011 fa80 	bl	801473c <nk_vec2>
 800323c:	eeb0 7a40 	vmov.f32	s14, s0
 8003240:	eef0 7a60 	vmov.f32	s15, s1
 8003244:	ed87 7a67 	vstr	s14, [r7, #412]	; 0x19c
 8003248:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
 800324c:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8003250:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8003254:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003258:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800325c:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8003260:	231e      	movs	r3, #30
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	eeb0 0a47 	vmov.f32	s0, s14
 8003268:	eef0 0a67 	vmov.f32	s1, s15
 800326c:	4623      	mov	r3, r4
 800326e:	2202      	movs	r2, #2
 8003270:	6800      	ldr	r0, [r0, #0]
 8003272:	f00d fa21 	bl	80106b8 <nk_combo>
 8003276:	4602      	mov	r2, r0
 8003278:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800327c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	615a      	str	r2, [r3, #20]
                osc->trigger_slope = nk_combo(ctx, (const char*[]){"Rising", "Falling", "Both"}, 3, osc->trigger_slope, 30, nk_vec2(100, 120));
 8003284:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800328c:	4ab9      	ldr	r2, [pc, #740]	; (8003574 <oscilloscope_process+0x1010>)
 800328e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003290:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003294:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003298:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699c      	ldr	r4, [r3, #24]
 80032a0:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800356c <oscilloscope_process+0x1008>
 80032a4:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8003570 <oscilloscope_process+0x100c>
 80032a8:	f011 fa48 	bl	801473c <nk_vec2>
 80032ac:	eeb0 7a40 	vmov.f32	s14, s0
 80032b0:	eef0 7a60 	vmov.f32	s15, s1
 80032b4:	ed87 7a69 	vstr	s14, [r7, #420]	; 0x1a4
 80032b8:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
 80032bc:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 80032c0:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80032c4:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80032c8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80032cc:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80032d0:	231e      	movs	r3, #30
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	eeb0 0a47 	vmov.f32	s0, s14
 80032d8:	eef0 0a67 	vmov.f32	s1, s15
 80032dc:	4623      	mov	r3, r4
 80032de:	2203      	movs	r2, #3
 80032e0:	6800      	ldr	r0, [r0, #0]
 80032e2:	f00d f9e9 	bl	80106b8 <nk_combo>
 80032e6:	4602      	mov	r2, r0
 80032e8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80032ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	619a      	str	r2, [r3, #24]
                //nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){200});
                //nk_slider_float(ctx, -10.0f, &osc->trigger_offset, 10.0f, 1.0f);


                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80032f4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80032f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032fc:	4a9e      	ldr	r2, [pc, #632]	; (8003578 <oscilloscope_process+0x1014>)
 80032fe:	461c      	mov	r4, r3
 8003300:	4613      	mov	r3, r2
 8003302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003308:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800330c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003310:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8003314:	2204      	movs	r2, #4
 8003316:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800331a:	2101      	movs	r1, #1
 800331c:	6800      	ldr	r0, [r0, #0]
 800331e:	f010 fc07 	bl	8013b30 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8003322:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003326:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800332a:	2211      	movs	r2, #17
 800332c:	4993      	ldr	r1, [pc, #588]	; (800357c <oscilloscope_process+0x1018>)
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	f018 fab6 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003334:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003338:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800333c:	2101      	movs	r1, #1
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	f00c fafe 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003344:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003348:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800334c:	2109      	movs	r1, #9
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	f00c fcb0 	bl	800fcb4 <nk_button_symbol>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d011      	beq.n	800337e <oscilloscope_process+0xe1a>
        		{
        			osc->trigger_offset -= 1;
 800335a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800335e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	edd3 7a04 	vldr	s15, [r3, #16]
 8003368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800336c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003370:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003374:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	edc3 7a04 	vstr	s15, [r3, #16]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->trigger_offset);
 800337e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003382:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd f904 	bl	8000598 <__aeabi_f2d>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	f107 000c 	add.w	r0, r7, #12
 8003398:	4979      	ldr	r1, [pc, #484]	; (8003580 <oscilloscope_process+0x101c>)
 800339a:	f01b fb99 	bl	801ead0 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 800339e:	f107 010c 	add.w	r1, r7, #12
 80033a2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80033a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033aa:	2212      	movs	r2, #18
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	f018 fa77 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80033b2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80033b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033ba:	2101      	movs	r1, #1
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f00c fabf 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 80033c2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80033c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033ca:	210a      	movs	r1, #10
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	f00c fc71 	bl	800fcb4 <nk_button_symbol>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d011      	beq.n	80033fc <oscilloscope_process+0xe98>
        		{
        			osc->trigger_offset += 1;
 80033d8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80033dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80033e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033ee:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80033f2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	edc3 7a04 	vstr	s15, [r3, #16]
        		}


                nk_tree_pop(ctx);
 80033fc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003400:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	f018 feb2 	bl	801c16e <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Waveform", NK_MINIMIZED) ){
 800340a:	485e      	ldr	r0, [pc, #376]	; (8003584 <oscilloscope_process+0x1020>)
 800340c:	f019 f940 	bl	801c690 <nk_strlen>
 8003410:	4603      	mov	r3, r0
 8003412:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003416:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 800341a:	f240 320f 	movw	r2, #783	; 0x30f
 800341e:	9202      	str	r2, [sp, #8]
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	4b58      	ldr	r3, [pc, #352]	; (8003584 <oscilloscope_process+0x1020>)
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	4a57      	ldr	r2, [pc, #348]	; (8003588 <oscilloscope_process+0x1024>)
 800342a:	2101      	movs	r1, #1
 800342c:	6800      	ldr	r0, [r0, #0]
 800342e:	f018 fe81 	bl	801c134 <nk_tree_push_hashed>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8351 	beq.w	8003adc <oscilloscope_process+0x1578>
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){100});
 800343a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800343e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003442:	4a52      	ldr	r2, [pc, #328]	; (800358c <oscilloscope_process+0x1028>)
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800344a:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800344e:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8003452:	2201      	movs	r2, #1
 8003454:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003458:	2101      	movs	r1, #1
 800345a:	6800      	ldr	r0, [r0, #0]
 800345c:	f010 fb68 	bl	8013b30 <nk_layout_row>
                osc->waveform_selected = nk_combo(ctx, (const char*[]){"Wf1", "Wf2"}, WAVEFORM_COUNT, osc->waveform_selected, 30, nk_vec2(100, 80));
 8003460:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003464:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003468:	4a49      	ldr	r2, [pc, #292]	; (8003590 <oscilloscope_process+0x102c>)
 800346a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800346e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003472:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003476:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800347e:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003594 <oscilloscope_process+0x1030>
 8003482:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8003570 <oscilloscope_process+0x100c>
 8003486:	f011 f959 	bl	801473c <nk_vec2>
 800348a:	eeb0 7a40 	vmov.f32	s14, s0
 800348e:	eef0 7a60 	vmov.f32	s15, s1
 8003492:	ed87 7a6b 	vstr	s14, [r7, #428]	; 0x1ac
 8003496:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
 800349a:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 800349e:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 80034a2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80034a6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80034aa:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80034ae:	231e      	movs	r3, #30
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	eeb0 0a47 	vmov.f32	s0, s14
 80034b6:	eef0 0a67 	vmov.f32	s1, s15
 80034ba:	4623      	mov	r3, r4
 80034bc:	2202      	movs	r2, #2
 80034be:	6800      	ldr	r0, [r0, #0]
 80034c0:	f00d f8fa 	bl	80106b8 <nk_combo>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80034ca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	679a      	str	r2, [r3, #120]	; 0x78
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){100, 100});
 80034d2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80034d6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034da:	4a22      	ldr	r2, [pc, #136]	; (8003564 <oscilloscope_process+0x1000>)
 80034dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80034e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034e8:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80034ec:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 80034f0:	2202      	movs	r2, #2
 80034f2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80034f6:	2101      	movs	r1, #1
 80034f8:	6800      	ldr	r0, [r0, #0]
 80034fa:	f010 fb19 	bl	8013b30 <nk_layout_row>
                osc->waveforms[osc->waveform_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->waveforms[osc->waveform_selected].enabled, 30, nk_vec2(100, 200));
 80034fe:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003502:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <oscilloscope_process+0x1034>)
 8003508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800350c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003510:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003514:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800351c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003520:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	337c      	adds	r3, #124	; 0x7c
 8003532:	681d      	ldr	r5, [r3, #0]
 8003534:	eddf 0a19 	vldr	s1, [pc, #100]	; 800359c <oscilloscope_process+0x1038>
 8003538:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003570 <oscilloscope_process+0x100c>
 800353c:	f011 f8fe 	bl	801473c <nk_vec2>
 8003540:	eeb0 7a40 	vmov.f32	s14, s0
 8003544:	eef0 7a60 	vmov.f32	s15, s1
 8003548:	ed87 7a6d 	vstr	s14, [r7, #436]	; 0x1b4
 800354c:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
 8003550:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003554:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800355c:	ed97 7a6d 	vldr	s14, [r7, #436]	; 0x1b4
 8003560:	e01e      	b.n	80035a0 <oscilloscope_process+0x103c>
 8003562:	bf00      	nop
 8003564:	08021a1c 	.word	0x08021a1c
 8003568:	08021a34 	.word	0x08021a34
 800356c:	42f00000 	.word	0x42f00000
 8003570:	42c80000 	.word	0x42c80000
 8003574:	08021a54 	.word	0x08021a54
 8003578:	0802199c 	.word	0x0802199c
 800357c:	08021828 	.word	0x08021828
 8003580:	08021830 	.word	0x08021830
 8003584:	080218d4 	.word	0x080218d4
 8003588:	080218ec 	.word	0x080218ec
 800358c:	42c80000 	.word	0x42c80000
 8003590:	08021a68 	.word	0x08021a68
 8003594:	42a00000 	.word	0x42a00000
 8003598:	080219fc 	.word	0x080219fc
 800359c:	43480000 	.word	0x43480000
 80035a0:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80035a4:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80035a8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80035ac:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80035b0:	231e      	movs	r3, #30
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	eeb0 0a47 	vmov.f32	s0, s14
 80035b8:	eef0 0a67 	vmov.f32	s1, s15
 80035bc:	462b      	mov	r3, r5
 80035be:	2202      	movs	r2, #2
 80035c0:	6800      	ldr	r0, [r0, #0]
 80035c2:	f00d f879 	bl	80106b8 <nk_combo>
 80035c6:	4601      	mov	r1, r0
 80035c8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80035cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4623      	mov	r3, r4
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4423      	add	r3, r4
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	337c      	adds	r3, #124	; 0x7c
 80035de:	6019      	str	r1, [r3, #0]
                osc->waveforms[osc->waveform_selected].type = nk_combo(ctx, (const char*[]){"DC", "PWM", "Sine", "Tria", "Saw", "Noise"}, 6, osc->waveforms[osc->waveform_selected].type, 30, nk_vec2(100, 240));
 80035e0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80035e4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035e8:	4ac8      	ldr	r2, [pc, #800]	; (800390c <oscilloscope_process+0x13a8>)
 80035ea:	461c      	mov	r4, r3
 80035ec:	4615      	mov	r5, r2
 80035ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80035f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80035fa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80035fe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003606:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800360a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	440b      	add	r3, r1
 800361a:	3380      	adds	r3, #128	; 0x80
 800361c:	681d      	ldr	r5, [r3, #0]
 800361e:	eddf 0abc 	vldr	s1, [pc, #752]	; 8003910 <oscilloscope_process+0x13ac>
 8003622:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8003914 <oscilloscope_process+0x13b0>
 8003626:	f011 f889 	bl	801473c <nk_vec2>
 800362a:	eeb0 7a40 	vmov.f32	s14, s0
 800362e:	eef0 7a60 	vmov.f32	s15, s1
 8003632:	ed87 7a6f 	vstr	s14, [r7, #444]	; 0x1bc
 8003636:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
 800363a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800363e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8003646:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 800364a:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 800364e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003652:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003656:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 800365a:	231e      	movs	r3, #30
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	eeb0 0a47 	vmov.f32	s0, s14
 8003662:	eef0 0a67 	vmov.f32	s1, s15
 8003666:	462b      	mov	r3, r5
 8003668:	2206      	movs	r2, #6
 800366a:	6800      	ldr	r0, [r0, #0]
 800366c:	f00d f824 	bl	80106b8 <nk_combo>
 8003670:	4601      	mov	r1, r0
 8003672:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003676:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4623      	mov	r3, r4
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4423      	add	r3, r4
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	3380      	adds	r3, #128	; 0x80
 8003688:	6019      	str	r1, [r3, #0]
                //osc->waveforms[osc->waveform_selected].offset = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].offset, 10.0f, 1.0f);
                //osc->waveforms[osc->waveform_selected].scale = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].scale, 10.0f, 1.0f);
                //osc->waveforms[osc->waveform_selected].duty_cycle = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].duty_cycle, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 800368a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800368e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003692:	4aa1      	ldr	r2, [pc, #644]	; (8003918 <oscilloscope_process+0x13b4>)
 8003694:	461c      	mov	r4, r3
 8003696:	4613      	mov	r3, r2
 8003698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800369a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800369e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036a2:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80036a6:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 80036aa:	2204      	movs	r2, #4
 80036ac:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80036b0:	2101      	movs	r1, #1
 80036b2:	6800      	ldr	r0, [r0, #0]
 80036b4:	f010 fa3c 	bl	8013b30 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 80036b8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036c0:	2211      	movs	r2, #17
 80036c2:	4996      	ldr	r1, [pc, #600]	; (800391c <oscilloscope_process+0x13b8>)
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	f018 f8eb 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80036ca:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036d2:	2101      	movs	r1, #1
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	f00c f933 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80036da:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036e2:	2109      	movs	r1, #9
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	f00c fae5 	bl	800fcb4 <nk_button_symbol>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d029      	beq.n	8003744 <oscilloscope_process+0x11e0>
        		{
        			osc->waveforms[osc->waveform_selected].offset -= 1;
 80036f0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80036fc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003700:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003704:	6819      	ldr	r1, [r3, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	3384      	adds	r3, #132	; 0x84
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800371a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800372a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800372e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	3384      	adds	r3, #132	; 0x84
 8003740:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].offset);
 8003744:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003748:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003750:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003754:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	440b      	add	r3, r1
 8003764:	3384      	adds	r3, #132	; 0x84
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc ff15 	bl	8000598 <__aeabi_f2d>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	f107 000c 	add.w	r0, r7, #12
 8003776:	496a      	ldr	r1, [pc, #424]	; (8003920 <oscilloscope_process+0x13bc>)
 8003778:	f01b f9aa 	bl	801ead0 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 800377c:	f107 010c 	add.w	r1, r7, #12
 8003780:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003784:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003788:	2212      	movs	r2, #18
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	f018 f888 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003790:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003794:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003798:	2101      	movs	r1, #1
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	f00c f8d0 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 80037a0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80037a8:	210a      	movs	r1, #10
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	f00c fa82 	bl	800fcb4 <nk_button_symbol>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d029      	beq.n	800380a <oscilloscope_process+0x12a6>
        		{
        			osc->waveforms[osc->waveform_selected].offset += 1;
 80037b6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037ba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037c2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	3384      	adds	r3, #132	; 0x84
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037f0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	440b      	add	r3, r1
 8003804:	3384      	adds	r3, #132	; 0x84
 8003806:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 800380a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800380e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003812:	2211      	movs	r2, #17
 8003814:	4943      	ldr	r1, [pc, #268]	; (8003924 <oscilloscope_process+0x13c0>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	f018 f842 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800381c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003820:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003824:	2101      	movs	r1, #1
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	f00c f88a 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 800382c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003830:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003834:	2109      	movs	r1, #9
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	f00c fa3c 	bl	800fcb4 <nk_button_symbol>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d029      	beq.n	8003896 <oscilloscope_process+0x1332>
        		{
        			osc->waveforms[osc->waveform_selected].scale -= 1;
 8003842:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003846:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800384e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003852:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003856:	6819      	ldr	r1, [r3, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	3388      	adds	r3, #136	; 0x88
 8003864:	edd3 7a00 	vldr	s15, [r3]
 8003868:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800386c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800387c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003880:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	440b      	add	r3, r1
 8003890:	3388      	adds	r3, #136	; 0x88
 8003892:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].scale);
 8003896:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800389a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038a2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038a6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	3388      	adds	r3, #136	; 0x88
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fe6c 	bl	8000598 <__aeabi_f2d>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	f107 000c 	add.w	r0, r7, #12
 80038c8:	4915      	ldr	r1, [pc, #84]	; (8003920 <oscilloscope_process+0x13bc>)
 80038ca:	f01b f901 	bl	801ead0 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 80038ce:	f107 010c 	add.w	r1, r7, #12
 80038d2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038da:	2212      	movs	r2, #18
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	f017 ffdf 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80038e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038ea:	2101      	movs	r1, #1
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	f00c f827 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 80038f2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038fa:	210a      	movs	r1, #10
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	f00c f9d9 	bl	800fcb4 <nk_button_symbol>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d039      	beq.n	800397c <oscilloscope_process+0x1418>
 8003908:	e00e      	b.n	8003928 <oscilloscope_process+0x13c4>
 800390a:	bf00      	nop
 800390c:	08021a90 	.word	0x08021a90
 8003910:	43700000 	.word	0x43700000
 8003914:	42c80000 	.word	0x42c80000
 8003918:	0802199c 	.word	0x0802199c
 800391c:	08021828 	.word	0x08021828
 8003920:	08021830 	.word	0x08021830
 8003924:	08021888 	.word	0x08021888
        		{
        			osc->waveforms[osc->waveform_selected].scale += 1;
 8003928:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800392c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003934:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003938:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	440b      	add	r3, r1
 8003948:	3388      	adds	r3, #136	; 0x88
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003952:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800395a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800395e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003962:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003966:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	440b      	add	r3, r1
 8003976:	3388      	adds	r3, #136	; 0x88
 8003978:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Duty", NK_TEXT_LEFT );
 800397c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003980:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003984:	2211      	movs	r2, #17
 8003986:	49df      	ldr	r1, [pc, #892]	; (8003d04 <oscilloscope_process+0x17a0>)
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	f017 ff89 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800398e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003992:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003996:	2101      	movs	r1, #1
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f00b ffd1 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 800399e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80039a2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039a6:	2109      	movs	r1, #9
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	f00c f983 	bl	800fcb4 <nk_button_symbol>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d029      	beq.n	8003a08 <oscilloscope_process+0x14a4>
        		{
        			osc->waveforms[osc->waveform_selected].duty_cycle -= 1;
 80039b4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80039b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80039c0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80039c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80039c8:	6819      	ldr	r1, [r3, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	440b      	add	r3, r1
 80039d4:	338c      	adds	r3, #140	; 0x8c
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80039de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80039e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039ee:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80039f2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	338c      	adds	r3, #140	; 0x8c
 8003a04:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].duty_cycle);
 8003a08:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003a0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a14:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003a18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	338c      	adds	r3, #140	; 0x8c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fc fdb3 	bl	8000598 <__aeabi_f2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	f107 000c 	add.w	r0, r7, #12
 8003a3a:	49b3      	ldr	r1, [pc, #716]	; (8003d08 <oscilloscope_process+0x17a4>)
 8003a3c:	f01b f848 	bl	801ead0 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003a40:	f107 010c 	add.w	r1, r7, #12
 8003a44:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003a48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a4c:	2212      	movs	r2, #18
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	f017 ff26 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003a54:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003a58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	f00b ff6e 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003a64:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003a68:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a6c:	210a      	movs	r1, #10
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	f00c f920 	bl	800fcb4 <nk_button_symbol>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d029      	beq.n	8003ace <oscilloscope_process+0x156a>
        		{
        			osc->waveforms[osc->waveform_selected].duty_cycle += 1;
 8003a7a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003a7e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a86:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003a8a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	440b      	add	r3, r1
 8003a9a:	338c      	adds	r3, #140	; 0x8c
 8003a9c:	edd3 7a00 	vldr	s15, [r3]
 8003aa0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003aa4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ab4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003ab8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	338c      	adds	r3, #140	; 0x8c
 8003aca:	edc3 7a00 	vstr	s15, [r3]
        		}
                nk_tree_pop(ctx);
 8003ace:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003ad2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	f018 fb49 	bl	801c16e <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Cursor", NK_MINIMIZED) ){
 8003adc:	488b      	ldr	r0, [pc, #556]	; (8003d0c <oscilloscope_process+0x17a8>)
 8003ade:	f018 fdd7 	bl	801c690 <nk_strlen>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003ae8:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8003aec:	f240 3249 	movw	r2, #841	; 0x349
 8003af0:	9202      	str	r2, [sp, #8]
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <oscilloscope_process+0x17a8>)
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2300      	movs	r3, #0
 8003afa:	4a85      	ldr	r2, [pc, #532]	; (8003d10 <oscilloscope_process+0x17ac>)
 8003afc:	2101      	movs	r1, #1
 8003afe:	6800      	ldr	r0, [r0, #0]
 8003b00:	f018 fb18 	bl	801c134 <nk_tree_push_hashed>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 829a 	beq.w	8004040 <oscilloscope_process+0x1adc>
				nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){100});
 8003b0c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b14:	4a7f      	ldr	r2, [pc, #508]	; (8003d14 <oscilloscope_process+0x17b0>)
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b1c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003b20:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8003b24:	2201      	movs	r2, #1
 8003b26:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	6800      	ldr	r0, [r0, #0]
 8003b2e:	f00f ffff 	bl	8013b30 <nk_layout_row>
                osc->cursor_selected = nk_combo(ctx, (const char*[]){"C1", "C2"}, CURSOR_COUNT, osc->cursor_selected, 20, nk_vec2(100, 100));
 8003b32:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b3a:	4a77      	ldr	r2, [pc, #476]	; (8003d18 <oscilloscope_process+0x17b4>)
 8003b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b40:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b44:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b48:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003b52:	eddf 0a72 	vldr	s1, [pc, #456]	; 8003d1c <oscilloscope_process+0x17b8>
 8003b56:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8003d1c <oscilloscope_process+0x17b8>
 8003b5a:	f010 fdef 	bl	801473c <nk_vec2>
 8003b5e:	eeb0 7a40 	vmov.f32	s14, s0
 8003b62:	eef0 7a60 	vmov.f32	s15, s1
 8003b66:	ed87 7a71 	vstr	s14, [r7, #452]	; 0x1c4
 8003b6a:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
 8003b6e:	ed97 7a71 	vldr	s14, [r7, #452]	; 0x1c4
 8003b72:	edd7 7a72 	vldr	s15, [r7, #456]	; 0x1c8
 8003b76:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003b7a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b7e:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8003b82:	2314      	movs	r3, #20
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	eeb0 0a47 	vmov.f32	s0, s14
 8003b8a:	eef0 0a67 	vmov.f32	s1, s15
 8003b8e:	4623      	mov	r3, r4
 8003b90:	2202      	movs	r2, #2
 8003b92:	6800      	ldr	r0, [r0, #0]
 8003b94:	f00c fd90 	bl	80106b8 <nk_combo>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b9e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){100, 100});
 8003ba8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003bac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003bb0:	4a5b      	ldr	r2, [pc, #364]	; (8003d20 <oscilloscope_process+0x17bc>)
 8003bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8003bba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bbe:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003bc2:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003bcc:	2101      	movs	r1, #1
 8003bce:	6800      	ldr	r0, [r0, #0]
 8003bd0:	f00f ffae 	bl	8013b30 <nk_layout_row>
                osc->cursors[osc->cursor_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->cursors[osc->cursor_selected].enabled, 30, nk_vec2(100, 100));
 8003bd4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003bd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003bdc:	4a51      	ldr	r2, [pc, #324]	; (8003d24 <oscilloscope_process+0x17c0>)
 8003bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003be2:	e883 0003 	stmia.w	r3, {r0, r1}
 8003be6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003bea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bf4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003bf8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	33b0      	adds	r3, #176	; 0xb0
 8003c0a:	681d      	ldr	r5, [r3, #0]
 8003c0c:	eddf 0a43 	vldr	s1, [pc, #268]	; 8003d1c <oscilloscope_process+0x17b8>
 8003c10:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003d1c <oscilloscope_process+0x17b8>
 8003c14:	f010 fd92 	bl	801473c <nk_vec2>
 8003c18:	eeb0 7a40 	vmov.f32	s14, s0
 8003c1c:	eef0 7a60 	vmov.f32	s15, s1
 8003c20:	ed87 7a73 	vstr	s14, [r7, #460]	; 0x1cc
 8003c24:	edc7 7a74 	vstr	s15, [r7, #464]	; 0x1d0
 8003c28:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003c36:	ed97 7a73 	vldr	s14, [r7, #460]	; 0x1cc
 8003c3a:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8003c3e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003c42:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c46:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8003c4a:	231e      	movs	r3, #30
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8003c52:	eef0 0a67 	vmov.f32	s1, s15
 8003c56:	462b      	mov	r3, r5
 8003c58:	2202      	movs	r2, #2
 8003c5a:	6800      	ldr	r0, [r0, #0]
 8003c5c:	f00c fd2c 	bl	80106b8 <nk_combo>
 8003c60:	4601      	mov	r1, r0
 8003c62:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c66:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4423      	add	r3, r4
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	33b0      	adds	r3, #176	; 0xb0
 8003c78:	6019      	str	r1, [r3, #0]
                osc->cursors[osc->cursor_selected].horizontal = nk_combo(ctx, (const char*[]){"Track", "Free"}, 2, osc->cursors[osc->cursor_selected].horizontal, 30, nk_vec2(100, 100));
 8003c7a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c7e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003c82:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <oscilloscope_process+0x17c4>)
 8003c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c88:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c8c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c9a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c9e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	33b4      	adds	r3, #180	; 0xb4
 8003cb0:	681d      	ldr	r5, [r3, #0]
 8003cb2:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8003d1c <oscilloscope_process+0x17b8>
 8003cb6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003d1c <oscilloscope_process+0x17b8>
 8003cba:	f010 fd3f 	bl	801473c <nk_vec2>
 8003cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8003cc2:	eef0 7a60 	vmov.f32	s15, s1
 8003cc6:	ed87 7a75 	vstr	s14, [r7, #468]	; 0x1d4
 8003cca:	edc7 7a76 	vstr	s15, [r7, #472]	; 0x1d8
 8003cce:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003cd2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003cdc:	ed97 7a75 	vldr	s14, [r7, #468]	; 0x1d4
 8003ce0:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8003ce4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003ce8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003cec:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8003cf0:	231e      	movs	r3, #30
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	eeb0 0a47 	vmov.f32	s0, s14
 8003cf8:	eef0 0a67 	vmov.f32	s1, s15
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	2202      	movs	r2, #2
 8003d00:	e014      	b.n	8003d2c <oscilloscope_process+0x17c8>
 8003d02:	bf00      	nop
 8003d04:	080218f8 	.word	0x080218f8
 8003d08:	08021830 	.word	0x08021830
 8003d0c:	08021900 	.word	0x08021900
 8003d10:	08021918 	.word	0x08021918
 8003d14:	42c80000 	.word	0x42c80000
 8003d18:	08021ab0 	.word	0x08021ab0
 8003d1c:	42c80000 	.word	0x42c80000
 8003d20:	08021a1c 	.word	0x08021a1c
 8003d24:	080219fc 	.word	0x080219fc
 8003d28:	08021ac0 	.word	0x08021ac0
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f00c fcc3 	bl	80106b8 <nk_combo>
 8003d32:	4601      	mov	r1, r0
 8003d34:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4623      	mov	r3, r4
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4423      	add	r3, r4
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	33b4      	adds	r3, #180	; 0xb4
 8003d4a:	6019      	str	r1, [r3, #0]


                //osc->cursors[osc->cursor_selected].offset = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].offset, 10.0f, 1.0f);
                //osc->cursors[osc->cursor_selected].track = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].track, 10.0f, 1.0f);
                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8003d4c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d54:	4ad9      	ldr	r2, [pc, #868]	; (80040bc <oscilloscope_process+0x1b58>)
 8003d56:	461c      	mov	r4, r3
 8003d58:	4613      	mov	r3, r2
 8003d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d64:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8003d68:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003d72:	2101      	movs	r1, #1
 8003d74:	6800      	ldr	r0, [r0, #0]
 8003d76:	f00f fedb 	bl	8013b30 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8003d7a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d82:	2211      	movs	r2, #17
 8003d84:	49ce      	ldr	r1, [pc, #824]	; (80040c0 <oscilloscope_process+0x1b5c>)
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	f017 fd8a 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003d8c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d90:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d94:	2101      	movs	r1, #1
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f00b fdd2 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003d9c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003da0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003da4:	2109      	movs	r1, #9
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	f00b ff84 	bl	800fcb4 <nk_button_symbol>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d02b      	beq.n	8003e0a <oscilloscope_process+0x18a6>
        		{
        			osc->cursors[osc->cursor_selected].offset -= 1;
 8003db2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003db6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003dc0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003dc4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	33b8      	adds	r3, #184	; 0xb8
 8003dd6:	edd3 7a00 	vldr	s15, [r3]
 8003dda:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003dde:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003de8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003df0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003df4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	33b8      	adds	r3, #184	; 0xb8
 8003e06:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].offset);
 8003e0a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e0e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e18:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e1c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	33b8      	adds	r3, #184	; 0xb8
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fc fbb1 	bl	8000598 <__aeabi_f2d>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	f107 000c 	add.w	r0, r7, #12
 8003e3e:	49a1      	ldr	r1, [pc, #644]	; (80040c4 <oscilloscope_process+0x1b60>)
 8003e40:	f01a fe46 	bl	801ead0 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003e44:	f107 010c 	add.w	r1, r7, #12
 8003e48:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e4c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e50:	2212      	movs	r2, #18
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	f017 fd24 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003e58:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e5c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e60:	2101      	movs	r1, #1
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	f00b fd6c 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003e68:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e6c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e70:	210a      	movs	r1, #10
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	f00b ff1e 	bl	800fcb4 <nk_button_symbol>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02b      	beq.n	8003ed6 <oscilloscope_process+0x1972>
        		{
        			osc->cursors[osc->cursor_selected].offset += 1;
 8003e7e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e82:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e8c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003e94:	6819      	ldr	r1, [r3, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	33b8      	adds	r3, #184	; 0xb8
 8003ea2:	edd3 7a00 	vldr	s15, [r3]
 8003ea6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003eaa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ebc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003ec0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ec4:	6819      	ldr	r1, [r3, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	33b8      	adds	r3, #184	; 0xb8
 8003ed2:	edc3 7a00 	vstr	s15, [r3]
        		}


        		nk_label( ctx, "Track", NK_TEXT_LEFT );
 8003ed6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003eda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ede:	2211      	movs	r2, #17
 8003ee0:	4979      	ldr	r1, [pc, #484]	; (80040c8 <oscilloscope_process+0x1b64>)
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	f017 fcdc 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003ee8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003eec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	f00b fd24 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003ef8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003efc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f00:	2109      	movs	r1, #9
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	f00b fed6 	bl	800fcb4 <nk_button_symbol>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02b      	beq.n	8003f66 <oscilloscope_process+0x1a02>
        		{
        			osc->cursors[osc->cursor_selected].track -= 1;
 8003f0e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003f12:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f1c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003f20:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	33bc      	adds	r3, #188	; 0xbc
 8003f32:	edd3 7a00 	vldr	s15, [r3]
 8003f36:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003f3a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f4c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003f50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	33bc      	adds	r3, #188	; 0xbc
 8003f62:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].track);
 8003f66:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003f6a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003f78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	33bc      	adds	r3, #188	; 0xbc
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fc fb03 	bl	8000598 <__aeabi_f2d>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	f107 000c 	add.w	r0, r7, #12
 8003f9a:	494a      	ldr	r1, [pc, #296]	; (80040c4 <oscilloscope_process+0x1b60>)
 8003f9c:	f01a fd98 	bl	801ead0 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003fa0:	f107 010c 	add.w	r1, r7, #12
 8003fa4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003fa8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fac:	2212      	movs	r2, #18
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	f017 fc76 	bl	801b8a0 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003fb4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003fb8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	f00b fcbe 	bl	800f940 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003fc4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003fc8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fcc:	210a      	movs	r1, #10
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	f00b fe70 	bl	800fcb4 <nk_button_symbol>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02b      	beq.n	8004032 <oscilloscope_process+0x1ace>
        		{
        			osc->cursors[osc->cursor_selected].track += 1;
 8003fda:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003fde:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003fe8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003fec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	33bc      	adds	r3, #188	; 0xbc
 8003ffe:	edd3 7a00 	vldr	s15, [r3]
 8004002:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004006:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004018:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800401c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	33bc      	adds	r3, #188	; 0xbc
 800402e:	edc3 7a00 	vstr	s15, [r3]
        		}


                nk_tree_pop(ctx);
 8004032:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004036:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	f018 f897 	bl	801c16e <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Measurements", NK_MINIMIZED) ){
 8004040:	4822      	ldr	r0, [pc, #136]	; (80040cc <oscilloscope_process+0x1b68>)
 8004042:	f018 fb25 	bl	801c690 <nk_strlen>
 8004046:	4603      	mov	r3, r0
 8004048:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800404c:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8004050:	f240 3277 	movw	r2, #887	; 0x377
 8004054:	9202      	str	r2, [sp, #8]
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <oscilloscope_process+0x1b68>)
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2300      	movs	r3, #0
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <oscilloscope_process+0x1b6c>)
 8004060:	2101      	movs	r1, #1
 8004062:	6800      	ldr	r0, [r0, #0]
 8004064:	f018 f866 	bl	801c134 <nk_tree_push_hashed>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00f      	beq.n	800408e <oscilloscope_process+0x1b2a>
                nk_label(ctx, "Todo", NK_TEXT_LEFT);
 800406e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004072:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004076:	2211      	movs	r2, #17
 8004078:	4916      	ldr	r1, [pc, #88]	; (80040d4 <oscilloscope_process+0x1b70>)
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	f017 fc10 	bl	801b8a0 <nk_label>
                nk_tree_pop(ctx);
 8004080:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004084:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	f018 f870 	bl	801c16e <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Info", NK_MINIMIZED) ){
 800408e:	4812      	ldr	r0, [pc, #72]	; (80040d8 <oscilloscope_process+0x1b74>)
 8004090:	f018 fafe 	bl	801c690 <nk_strlen>
 8004094:	4603      	mov	r3, r0
 8004096:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800409a:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 800409e:	f44f 725f 	mov.w	r2, #892	; 0x37c
 80040a2:	9202      	str	r2, [sp, #8]
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <oscilloscope_process+0x1b74>)
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	4a0b      	ldr	r2, [pc, #44]	; (80040dc <oscilloscope_process+0x1b78>)
 80040ae:	2101      	movs	r1, #1
 80040b0:	6800      	ldr	r0, [r0, #0]
 80040b2:	f018 f83f 	bl	801c134 <nk_tree_push_hashed>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	e011      	b.n	80040e0 <oscilloscope_process+0x1b7c>
 80040bc:	0802199c 	.word	0x0802199c
 80040c0:	08021828 	.word	0x08021828
 80040c4:	08021830 	.word	0x08021830
 80040c8:	08021920 	.word	0x08021920
 80040cc:	08021928 	.word	0x08021928
 80040d0:	08021940 	.word	0x08021940
 80040d4:	08021950 	.word	0x08021950
 80040d8:	08021958 	.word	0x08021958
 80040dc:	08021970 	.word	0x08021970
 80040e0:	d07f      	beq.n	80041e2 <oscilloscope_process+0x1c7e>
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 120});
 80040e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80040e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040ea:	4a44      	ldr	r2, [pc, #272]	; (80041fc <oscilloscope_process+0x1c98>)
 80040ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80040f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f8:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80040fc:	f5a2 70f4 	sub.w	r0, r2, #488	; 0x1e8
 8004100:	2202      	movs	r2, #2
 8004102:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8004106:	2101      	movs	r1, #1
 8004108:	6800      	ldr	r0, [r0, #0]
 800410a:	f00f fd11 	bl	8013b30 <nk_layout_row>

                float fps = 0.0f; // Calculate fps here
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                nk_label(ctx, "FPS", NK_TEXT_LEFT);
 8004116:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800411a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800411e:	2211      	movs	r2, #17
 8004120:	4937      	ldr	r1, [pc, #220]	; (8004200 <oscilloscope_process+0x1c9c>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	f017 fbbc 	bl	801b8a0 <nk_label>

                static int a = 0;
                static int b = 0;
                b = a;
 8004128:	4b36      	ldr	r3, [pc, #216]	; (8004204 <oscilloscope_process+0x1ca0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a36      	ldr	r2, [pc, #216]	; (8004208 <oscilloscope_process+0x1ca4>)
 800412e:	6013      	str	r3, [r2, #0]
                a = HAL_GetTick();
 8004130:	f002 fd52 	bl	8006bd8 <HAL_GetTick>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	4b32      	ldr	r3, [pc, #200]	; (8004204 <oscilloscope_process+0x1ca0>)
 800413a:	601a      	str	r2, [r3, #0]
                int d = a-b;
 800413c:	4b31      	ldr	r3, [pc, #196]	; (8004204 <oscilloscope_process+0x1ca0>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b31      	ldr	r3, [pc, #196]	; (8004208 <oscilloscope_process+0x1ca4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                char buffer[32];
                sprintf(buffer, "%f", 1000.0f/d);
 800414a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004156:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800420c <oscilloscope_process+0x1ca8>
 800415a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800415e:	ee16 0a90 	vmov	r0, s13
 8004162:	f7fc fa19 	bl	8000598 <__aeabi_f2d>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	f107 000c 	add.w	r0, r7, #12
 800416e:	4928      	ldr	r1, [pc, #160]	; (8004210 <oscilloscope_process+0x1cac>)
 8004170:	f01a fcae 	bl	801ead0 <siprintf>

                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual fps
 8004174:	f107 010c 	add.w	r1, r7, #12
 8004178:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800417c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004180:	2211      	movs	r2, #17
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	f017 fb8c 	bl	801b8a0 <nk_label>

                float ratio = 0.0f; // Calculate memory ratio here
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
                nk_label(ctx, "Memory", NK_TEXT_LEFT);
 8004190:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004194:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004198:	2211      	movs	r2, #17
 800419a:	491e      	ldr	r1, [pc, #120]	; (8004214 <oscilloscope_process+0x1cb0>)
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	f017 fb7f 	bl	801b8a0 <nk_label>

                sprintf(buffer, "%d", ctx->memory.allocated );
 80041a2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80041a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b0:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	4917      	ldr	r1, [pc, #92]	; (8004218 <oscilloscope_process+0x1cb4>)
 80041ba:	4618      	mov	r0, r3
 80041bc:	f01a fc88 	bl	801ead0 <siprintf>
                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual memory ratio
 80041c0:	f107 010c 	add.w	r1, r7, #12
 80041c4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80041c8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041cc:	2211      	movs	r2, #17
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	f017 fb66 	bl	801b8a0 <nk_label>

                nk_tree_pop(ctx);
 80041d4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80041d8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	f017 ffc6 	bl	801c16e <nk_tree_pop>
            }
        }
        //nk_end(ctx);
    }
	nk_end(ctx);
 80041e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80041e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	f019 fd04 	bl	801dbf8 <nk_end>
}
 80041f0:	bf00      	nop
 80041f2:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bdb0      	pop	{r4, r5, r7, pc}
 80041fa:	bf00      	nop
 80041fc:	08021ac8 	.word	0x08021ac8
 8004200:	08021978 	.word	0x08021978
 8004204:	200007f4 	.word	0x200007f4
 8004208:	200007f8 	.word	0x200007f8
 800420c:	447a0000 	.word	0x447a0000
 8004210:	0802197c 	.word	0x0802197c
 8004214:	08021980 	.word	0x08021980
 8004218:	08021988 	.word	0x08021988

0800421c <nk_draw_fb>:



int quadrant = 0x01;
void nk_draw_fb( struct nk_context *ctx, const tFramebuf *pfb )
{
 800421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004220:	b094      	sub	sp, #80	; 0x50
 8004222:	af02      	add	r7, sp, #8
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
	  for( int y0 = 0 ; y0 < 320 ; y0 += 80 )
 8004228:	2300      	movs	r3, #0
 800422a:	647b      	str	r3, [r7, #68]	; 0x44
 800422c:	e3d6      	b.n	80049dc <nk_draw_fb+0x7c0>
	  {
	   framebuf_fill( pfb, 0x00000000 );
 800422e:	2100      	movs	r1, #0
 8004230:	6838      	ldr	r0, [r7, #0]
 8004232:	f009 ff5a 	bl	800e0ea <framebuf_fill>

	  {
		  const struct nk_command *cmd = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	643b      	str	r3, [r7, #64]	; 0x40
		  nk_foreach(cmd, ctx)
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f00c ff78 	bl	8011130 <nk__begin>
 8004240:	6438      	str	r0, [r7, #64]	; 0x40
 8004242:	e3b5      	b.n	80049b0 <nk_draw_fb+0x794>
		  {
			  //printf( "cmd->type = %d\n", cmd->type );
			  switch (cmd->type) {
 8004244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b11      	cmp	r3, #17
 800424a:	f200 83ab 	bhi.w	80049a4 <nk_draw_fb+0x788>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <nk_draw_fb+0x38>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	080049a5 	.word	0x080049a5
 8004258:	0800429d 	.word	0x0800429d
 800425c:	080042a3 	.word	0x080042a3
 8004260:	080049a5 	.word	0x080049a5
 8004264:	08004399 	.word	0x08004399
 8004268:	0800459f 	.word	0x0800459f
 800426c:	080049a5 	.word	0x080049a5
 8004270:	08004789 	.word	0x08004789
 8004274:	08004803 	.word	0x08004803
 8004278:	080049a5 	.word	0x080049a5
 800427c:	080049a5 	.word	0x080049a5
 8004280:	080049a5 	.word	0x080049a5
 8004284:	080048db 	.word	0x080048db
 8004288:	080049a5 	.word	0x080049a5
 800428c:	080049a5 	.word	0x080049a5
 8004290:	080049a5 	.word	0x080049a5
 8004294:	08004877 	.word	0x08004877
 8004298:	080048a5 	.word	0x080048a5
			  case NK_COMMAND_NOP: break;
			  case NK_COMMAND_SCISSOR: {
				  const struct nk_command_scissor *s = (const struct nk_command_scissor*)cmd;
 800429c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429e:	617b      	str	r3, [r7, #20]
			  } break;
 80042a0:	e381      	b.n	80049a6 <nk_draw_fb+0x78a>
			  case NK_COMMAND_LINE: {
				  const struct nk_command_line *l = (const struct nk_command_line*)cmd;
 80042a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a4:	61bb      	str	r3, [r7, #24]
				  if( l->begin.y == l->end.y )
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d121      	bne.n	80042fa <nk_draw_fb+0xde>
				  {
					  framebuf_hline( pfb, l->begin.x, l->begin.y-y0, l->end.x-l->begin.x, nk_colot_to_rgb666( l->color ) );
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042bc:	461e      	mov	r6, r3
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80042c4:	461a      	mov	r2, r3
 80042c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c8:	1ad4      	subs	r4, r2, r3
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80042d0:	461a      	mov	r2, r3
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042d8:	1ad5      	subs	r5, r2, r3
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80042e0:	4613      	mov	r3, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd fc42 	bl	8001b6c <nk_colot_to_rgb666>
 80042e8:	4603      	mov	r3, r0
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	462b      	mov	r3, r5
 80042ee:	4622      	mov	r2, r4
 80042f0:	4631      	mov	r1, r6
 80042f2:	6838      	ldr	r0, [r7, #0]
 80042f4:	f009 ff49 	bl	800e18a <framebuf_hline>
				  }
				  else
				  {
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
				  }
			  } break;
 80042f8:	e355      	b.n	80049a6 <nk_draw_fb+0x78a>
				  else if( l->begin.x == l->end.x )
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004306:	429a      	cmp	r2, r3
 8004308:	d121      	bne.n	800434e <nk_draw_fb+0x132>
					  framebuf_vline( pfb, l->begin.x, l->begin.y-y0, l->end.y-l->begin.y, nk_colot_to_rgb666( l->color ) );
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004310:	461e      	mov	r6, r3
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004318:	461a      	mov	r2, r3
 800431a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431c:	1ad4      	subs	r4, r2, r3
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004324:	461a      	mov	r2, r3
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800432c:	1ad5      	subs	r5, r2, r3
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8004334:	4613      	mov	r3, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fc18 	bl	8001b6c <nk_colot_to_rgb666>
 800433c:	4603      	mov	r3, r0
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	462b      	mov	r3, r5
 8004342:	4622      	mov	r2, r4
 8004344:	4631      	mov	r1, r6
 8004346:	6838      	ldr	r0, [r7, #0]
 8004348:	f009 ff34 	bl	800e1b4 <framebuf_vline>
			  } break;
 800434c:	e32b      	b.n	80049a6 <nk_draw_fb+0x78a>
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004354:	461e      	mov	r6, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800435c:	461a      	mov	r2, r3
 800435e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004360:	1ad5      	subs	r5, r2, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004368:	4698      	mov	r8, r3
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004370:	461a      	mov	r2, r3
 8004372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004374:	1ad4      	subs	r4, r2, r3
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800437c:	4613      	mov	r3, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fbf4 	bl	8001b6c <nk_colot_to_rgb666>
 8004384:	4603      	mov	r3, r0
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	9400      	str	r4, [sp, #0]
 800438a:	4643      	mov	r3, r8
 800438c:	462a      	mov	r2, r5
 800438e:	4631      	mov	r1, r6
 8004390:	6838      	ldr	r0, [r7, #0]
 8004392:	f009 ffdb 	bl	800e34c <framebuf_line>
			  } break;
 8004396:	e306      	b.n	80049a6 <nk_draw_fb+0x78a>
			  case NK_COMMAND_RECT: {
				  const struct nk_command_rect *r = (const struct nk_command_rect*)cmd;
 8004398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439a:	623b      	str	r3, [r7, #32]
				  //printf( "NK_COMMAND_RECT x: %d, y: %d, width: %d, height: %d, rounding: %d, thickness: %d\n", r->x, r->y, r->w, r->h, r->rounding, r->line_thickness );
				  //framebuf_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
				  int rad = 4;//r->rounding;
 800439c:	2304      	movs	r3, #4
 800439e:	61fb      	str	r3, [r7, #28]
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_0 );
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	8a1b      	ldrh	r3, [r3, #16]
 80043ac:	441a      	add	r2, r3
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	1ad4      	subs	r4, r2, r3
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80043b8:	461a      	mov	r2, r3
 80043ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	8a52      	ldrh	r2, [r2, #18]
 80043c2:	441a      	add	r2, r3
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	1ad5      	subs	r5, r2, r3
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	6958      	ldr	r0, [r3, #20]
 80043cc:	f7fd fbce 	bl	8001b6c <nk_colot_to_rgb666>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2201      	movs	r2, #1
 80043d4:	9201      	str	r2, [sp, #4]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	462a      	mov	r2, r5
 80043dc:	4621      	mov	r1, r4
 80043de:	6838      	ldr	r0, [r7, #0]
 80043e0:	f00a f84b 	bl	800e47a <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_90 );
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043ea:	461a      	mov	r2, r3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	18d4      	adds	r4, r2, r3
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80043f6:	461a      	mov	r2, r3
 80043f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	8a52      	ldrh	r2, [r2, #18]
 8004400:	441a      	add	r2, r3
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	1ad5      	subs	r5, r2, r3
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	6958      	ldr	r0, [r3, #20]
 800440a:	f7fd fbaf 	bl	8001b6c <nk_colot_to_rgb666>
 800440e:	4603      	mov	r3, r0
 8004410:	2202      	movs	r2, #2
 8004412:	9201      	str	r2, [sp, #4]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	462a      	mov	r2, r5
 800441a:	4621      	mov	r1, r4
 800441c:	6838      	ldr	r0, [r7, #0]
 800441e:	f00a f82c 	bl	800e47a <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_180 );
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004428:	461a      	mov	r2, r3
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	18d4      	adds	r4, r2, r3
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004434:	461a      	mov	r2, r3
 8004436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004438:	1ad2      	subs	r2, r2, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	18d5      	adds	r5, r2, r3
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	6958      	ldr	r0, [r3, #20]
 8004442:	f7fd fb93 	bl	8001b6c <nk_colot_to_rgb666>
 8004446:	4603      	mov	r3, r0
 8004448:	2204      	movs	r2, #4
 800444a:	9201      	str	r2, [sp, #4]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	462a      	mov	r2, r5
 8004452:	4621      	mov	r1, r4
 8004454:	6838      	ldr	r0, [r7, #0]
 8004456:	f00a f810 	bl	800e47a <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_270 );
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004460:	461a      	mov	r2, r3
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	8a1b      	ldrh	r3, [r3, #16]
 8004466:	441a      	add	r2, r3
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	1ad4      	subs	r4, r2, r3
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004472:	461a      	mov	r2, r3
 8004474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	18d5      	adds	r5, r2, r3
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	6958      	ldr	r0, [r3, #20]
 8004480:	f7fd fb74 	bl	8001b6c <nk_colot_to_rgb666>
 8004484:	4603      	mov	r3, r0
 8004486:	2208      	movs	r2, #8
 8004488:	9201      	str	r2, [sp, #4]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	462a      	mov	r2, r5
 8004490:	4621      	mov	r1, r4
 8004492:	6838      	ldr	r0, [r7, #0]
 8004494:	f009 fff1 	bl	800e47a <framebuf_circle_quadrant>

                    framebuf_hline( pfb, r->x+rad, r->y-y0, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800449e:	461a      	mov	r2, r3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	18d4      	adds	r4, r2, r3
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80044aa:	461a      	mov	r2, r3
 80044ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ae:	1ad5      	subs	r5, r2, r3
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	8a1b      	ldrh	r3, [r3, #16]
 80044b4:	461a      	mov	r2, r3
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	1ad2      	subs	r2, r2, r3
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	1ad6      	subs	r6, r2, r3
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	6958      	ldr	r0, [r3, #20]
 80044c2:	f7fd fb53 	bl	8001b6c <nk_colot_to_rgb666>
 80044c6:	4603      	mov	r3, r0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4633      	mov	r3, r6
 80044cc:	462a      	mov	r2, r5
 80044ce:	4621      	mov	r1, r4
 80044d0:	6838      	ldr	r0, [r7, #0]
 80044d2:	f009 fe5a 	bl	800e18a <framebuf_hline>
                    framebuf_hline( pfb, r->x+rad, r->y-y0+r->h, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044dc:	461a      	mov	r2, r3
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	18d4      	adds	r4, r2, r3
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	6a3a      	ldr	r2, [r7, #32]
 80044f0:	8a52      	ldrh	r2, [r2, #18]
 80044f2:	189d      	adds	r5, r3, r2
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	8a1b      	ldrh	r3, [r3, #16]
 80044f8:	461a      	mov	r2, r3
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	1ad6      	subs	r6, r2, r3
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	6958      	ldr	r0, [r3, #20]
 8004506:	f7fd fb31 	bl	8001b6c <nk_colot_to_rgb666>
 800450a:	4603      	mov	r3, r0
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	4633      	mov	r3, r6
 8004510:	462a      	mov	r2, r5
 8004512:	4621      	mov	r1, r4
 8004514:	6838      	ldr	r0, [r7, #0]
 8004516:	f009 fe38 	bl	800e18a <framebuf_hline>
                    framebuf_vline( pfb, r->x, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004520:	461e      	mov	r6, r3
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004528:	461a      	mov	r2, r3
 800452a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	18d4      	adds	r4, r2, r3
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	8a5b      	ldrh	r3, [r3, #18]
 8004536:	461a      	mov	r2, r3
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	1ad5      	subs	r5, r2, r3
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	6958      	ldr	r0, [r3, #20]
 8004544:	f7fd fb12 	bl	8001b6c <nk_colot_to_rgb666>
 8004548:	4603      	mov	r3, r0
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	462b      	mov	r3, r5
 800454e:	4622      	mov	r2, r4
 8004550:	4631      	mov	r1, r6
 8004552:	6838      	ldr	r0, [r7, #0]
 8004554:	f009 fe2e 	bl	800e1b4 <framebuf_vline>
                    framebuf_vline( pfb, r->x+r->w, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	8a1b      	ldrh	r3, [r3, #16]
 8004564:	18d4      	adds	r4, r2, r3
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800456c:	461a      	mov	r2, r3
 800456e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	18d5      	adds	r5, r2, r3
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	8a5b      	ldrh	r3, [r3, #18]
 800457a:	461a      	mov	r2, r3
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	1ad2      	subs	r2, r2, r3
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	1ad6      	subs	r6, r2, r3
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	6958      	ldr	r0, [r3, #20]
 8004588:	f7fd faf0 	bl	8001b6c <nk_colot_to_rgb666>
 800458c:	4603      	mov	r3, r0
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	4633      	mov	r3, r6
 8004592:	462a      	mov	r2, r5
 8004594:	4621      	mov	r1, r4
 8004596:	6838      	ldr	r0, [r7, #0]
 8004598:	f009 fe0c 	bl	800e1b4 <framebuf_vline>
			  } break;
 800459c:	e203      	b.n	80049a6 <nk_draw_fb+0x78a>
			  case NK_COMMAND_RECT_FILLED: {
				  const struct nk_command_rect_filled *r = (const struct nk_command_rect_filled*)cmd;
 800459e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
				  //framebuf_fill_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
                  int rad = 4;//r->rounding;
 80045a2:	2304      	movs	r3, #4
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
                  struct nk_color r_color = r->color;
 80045a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	3212      	adds	r2, #18
 80045ae:	6810      	ldr	r0, [r2, #0]
 80045b0:	6018      	str	r0, [r3, #0]
                  if( r_color.r == 50 )
 80045b2:	7c3b      	ldrb	r3, [r7, #16]
 80045b4:	2b32      	cmp	r3, #50	; 0x32
 80045b6:	d107      	bne.n	80045c8 <nk_draw_fb+0x3ac>
                  {
                	  r_color.r = 40;
 80045b8:	2328      	movs	r3, #40	; 0x28
 80045ba:	743b      	strb	r3, [r7, #16]
                	  r_color.g = 40;
 80045bc:	2328      	movs	r3, #40	; 0x28
 80045be:	747b      	strb	r3, [r7, #17]
                	  r_color.b = 40;
 80045c0:	2328      	movs	r3, #40	; 0x28
 80045c2:	74bb      	strb	r3, [r7, #18]
                	  r_color.a = 255;
 80045c4:	23ff      	movs	r3, #255	; 0xff
 80045c6:	74fb      	strb	r3, [r7, #19]
                  }
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	89db      	ldrh	r3, [r3, #14]
 80045d4:	441a      	add	r2, r3
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	1ad4      	subs	r4, r2, r3
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80045e0:	461a      	mov	r2, r3
 80045e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e8:	8a12      	ldrh	r2, [r2, #16]
 80045ea:	441a      	add	r2, r3
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	1ad5      	subs	r5, r2, r3
 80045f0:	6938      	ldr	r0, [r7, #16]
 80045f2:	f7fd fabb 	bl	8001b6c <nk_colot_to_rgb666>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2202      	movs	r2, #2
 80045fa:	9201      	str	r2, [sp, #4]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	462a      	mov	r2, r5
 8004602:	4621      	mov	r1, r4
 8004604:	6838      	ldr	r0, [r7, #0]
 8004606:	f00a f84f 	bl	800e6a8 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004610:	461a      	mov	r2, r3
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	18d4      	adds	r4, r2, r3
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800461c:	461a      	mov	r2, r3
 800461e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004624:	8a12      	ldrh	r2, [r2, #16]
 8004626:	441a      	add	r2, r3
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	1ad5      	subs	r5, r2, r3
 800462c:	6938      	ldr	r0, [r7, #16]
 800462e:	f7fd fa9d 	bl	8001b6c <nk_colot_to_rgb666>
 8004632:	4603      	mov	r3, r0
 8004634:	2202      	movs	r2, #2
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	462a      	mov	r2, r5
 800463e:	4621      	mov	r1, r4
 8004640:	6838      	ldr	r0, [r7, #0]
 8004642:	f00a f831 	bl	800e6a8 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800464c:	461a      	mov	r2, r3
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	18d4      	adds	r4, r2, r3
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004658:	461a      	mov	r2, r3
 800465a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465c:	1ad2      	subs	r2, r2, r3
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	18d5      	adds	r5, r2, r3
 8004662:	6938      	ldr	r0, [r7, #16]
 8004664:	f7fd fa82 	bl	8001b6c <nk_colot_to_rgb666>
 8004668:	4603      	mov	r3, r0
 800466a:	2202      	movs	r2, #2
 800466c:	9201      	str	r2, [sp, #4]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	462a      	mov	r2, r5
 8004674:	4621      	mov	r1, r4
 8004676:	6838      	ldr	r0, [r7, #0]
 8004678:	f00a f816 	bl	800e6a8 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004682:	461a      	mov	r2, r3
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	89db      	ldrh	r3, [r3, #14]
 8004688:	441a      	add	r2, r3
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1ad4      	subs	r4, r2, r3
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004694:	461a      	mov	r2, r3
 8004696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004698:	1ad2      	subs	r2, r2, r3
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	18d5      	adds	r5, r2, r3
 800469e:	6938      	ldr	r0, [r7, #16]
 80046a0:	f7fd fa64 	bl	8001b6c <nk_colot_to_rgb666>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2202      	movs	r2, #2
 80046a8:	9201      	str	r2, [sp, #4]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	462a      	mov	r2, r5
 80046b0:	4621      	mov	r1, r4
 80046b2:	6838      	ldr	r0, [r7, #0]
 80046b4:	f009 fff8 	bl	800e6a8 <framebuf_fill_circle_quadrant>
                    // up and down
                    //framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, r->h, nk_colot_to_rgb666( r_color ) );
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, rad, nk_colot_to_rgb666( r_color ) );
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80046be:	461a      	mov	r2, r3
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	18d4      	adds	r4, r2, r3
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046ca:	461a      	mov	r2, r3
 80046cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ce:	1ad5      	subs	r5, r2, r3
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	89db      	ldrh	r3, [r3, #14]
 80046d4:	461a      	mov	r2, r3
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	1ad2      	subs	r2, r2, r3
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	1ad6      	subs	r6, r2, r3
 80046de:	6938      	ldr	r0, [r7, #16]
 80046e0:	f7fd fa44 	bl	8001b6c <nk_colot_to_rgb666>
 80046e4:	4603      	mov	r3, r0
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	4633      	mov	r3, r6
 80046ee:	462a      	mov	r2, r5
 80046f0:	4621      	mov	r1, r4
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	f009 fd11 	bl	800e11a <framebuf_fill_rect>
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0+r->h-rad, r->w-rad-rad, rad, nk_colot_to_rgb666( r_color ) );
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80046fe:	461a      	mov	r2, r3
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	18d4      	adds	r4, r2, r3
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800470a:	461a      	mov	r2, r3
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004712:	8a12      	ldrh	r2, [r2, #16]
 8004714:	441a      	add	r2, r3
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	1ad5      	subs	r5, r2, r3
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	89db      	ldrh	r3, [r3, #14]
 800471e:	461a      	mov	r2, r3
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	1ad2      	subs	r2, r2, r3
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	1ad6      	subs	r6, r2, r3
 8004728:	6938      	ldr	r0, [r7, #16]
 800472a:	f7fd fa1f 	bl	8001b6c <nk_colot_to_rgb666>
 800472e:	4603      	mov	r3, r0
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	4633      	mov	r3, r6
 8004738:	462a      	mov	r2, r5
 800473a:	4621      	mov	r1, r4
 800473c:	6838      	ldr	r0, [r7, #0]
 800473e:	f009 fcec 	bl	800e11a <framebuf_fill_rect>
                    // middle
                    framebuf_fill_rect(  pfb, r->x, r->y-y0+rad, r->w, r->h-rad-rad, nk_colot_to_rgb666( r_color ) );
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004748:	461e      	mov	r6, r3
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004750:	461a      	mov	r2, r3
 8004752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004754:	1ad2      	subs	r2, r2, r3
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	18d5      	adds	r5, r2, r3
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	89db      	ldrh	r3, [r3, #14]
 800475e:	4698      	mov	r8, r3
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	8a1b      	ldrh	r3, [r3, #16]
 8004764:	461a      	mov	r2, r3
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	1ad2      	subs	r2, r2, r3
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	1ad4      	subs	r4, r2, r3
 800476e:	6938      	ldr	r0, [r7, #16]
 8004770:	f7fd f9fc 	bl	8001b6c <nk_colot_to_rgb666>
 8004774:	4603      	mov	r3, r0
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	9400      	str	r4, [sp, #0]
 800477a:	4643      	mov	r3, r8
 800477c:	462a      	mov	r2, r5
 800477e:	4631      	mov	r1, r6
 8004780:	6838      	ldr	r0, [r7, #0]
 8004782:	f009 fcca 	bl	800e11a <framebuf_fill_rect>
			 } break;
 8004786:	e10e      	b.n	80049a6 <nk_draw_fb+0x78a>
			  case NK_COMMAND_CIRCLE: {
				  const struct nk_command_circle *c = (const struct nk_command_circle*)cmd;
 8004788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
				  framebuf_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004792:	461a      	mov	r2, r3
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	89db      	ldrh	r3, [r3, #14]
 8004798:	4619      	mov	r1, r3
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	8a1b      	ldrh	r3, [r3, #16]
 800479e:	440b      	add	r3, r1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	da00      	bge.n	80047a6 <nk_draw_fb+0x58a>
 80047a4:	3303      	adds	r3, #3
 80047a6:	109b      	asrs	r3, r3, #2
 80047a8:	18d4      	adds	r4, r2, r3
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b4:	1ad2      	subs	r2, r2, r3
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	89db      	ldrh	r3, [r3, #14]
 80047ba:	4619      	mov	r1, r3
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	8a1b      	ldrh	r3, [r3, #16]
 80047c0:	440b      	add	r3, r1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	da00      	bge.n	80047c8 <nk_draw_fb+0x5ac>
 80047c6:	3303      	adds	r3, #3
 80047c8:	109b      	asrs	r3, r3, #2
 80047ca:	18d5      	adds	r5, r2, r3
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	89db      	ldrh	r3, [r3, #14]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	8a1b      	ldrh	r3, [r3, #16]
 80047d6:	4413      	add	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	da00      	bge.n	80047de <nk_draw_fb+0x5c2>
 80047dc:	3303      	adds	r3, #3
 80047de:	109b      	asrs	r3, r3, #2
 80047e0:	461e      	mov	r6, r3
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80047e8:	4613      	mov	r3, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fd f9be 	bl	8001b6c <nk_colot_to_rgb666>
 80047f0:	4603      	mov	r3, r0
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4633      	mov	r3, r6
 80047f6:	462a      	mov	r2, r5
 80047f8:	4621      	mov	r1, r4
 80047fa:	6838      	ldr	r0, [r7, #0]
 80047fc:	f009 fdbb 	bl	800e376 <framebuf_circle>
			  } break;
 8004800:	e0d1      	b.n	80049a6 <nk_draw_fb+0x78a>
			  case NK_COMMAND_CIRCLE_FILLED: {
				  const struct nk_command_circle_filled *c = (const struct nk_command_circle_filled *)cmd;
 8004802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
				  framebuf_fill_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800480c:	461a      	mov	r2, r3
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	899b      	ldrh	r3, [r3, #12]
 8004812:	4619      	mov	r1, r3
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	89db      	ldrh	r3, [r3, #14]
 8004818:	440b      	add	r3, r1
 800481a:	2b00      	cmp	r3, #0
 800481c:	da00      	bge.n	8004820 <nk_draw_fb+0x604>
 800481e:	3303      	adds	r3, #3
 8004820:	109b      	asrs	r3, r3, #2
 8004822:	18d4      	adds	r4, r2, r3
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800482a:	461a      	mov	r2, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	899b      	ldrh	r3, [r3, #12]
 8004834:	4619      	mov	r1, r3
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	89db      	ldrh	r3, [r3, #14]
 800483a:	440b      	add	r3, r1
 800483c:	2b00      	cmp	r3, #0
 800483e:	da00      	bge.n	8004842 <nk_draw_fb+0x626>
 8004840:	3303      	adds	r3, #3
 8004842:	109b      	asrs	r3, r3, #2
 8004844:	18d5      	adds	r5, r2, r3
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	899b      	ldrh	r3, [r3, #12]
 800484a:	461a      	mov	r2, r3
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	89db      	ldrh	r3, [r3, #14]
 8004850:	4413      	add	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	da00      	bge.n	8004858 <nk_draw_fb+0x63c>
 8004856:	3303      	adds	r3, #3
 8004858:	109b      	asrs	r3, r3, #2
 800485a:	461e      	mov	r6, r3
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	6918      	ldr	r0, [r3, #16]
 8004860:	f7fd f984 	bl	8001b6c <nk_colot_to_rgb666>
 8004864:	4603      	mov	r3, r0
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4633      	mov	r3, r6
 800486a:	462a      	mov	r2, r5
 800486c:	4621      	mov	r1, r4
 800486e:	6838      	ldr	r0, [r7, #0]
 8004870:	f009 fe9e 	bl	800e5b0 <framebuf_fill_circle>
			  } break;
 8004874:	e097      	b.n	80049a6 <nk_draw_fb+0x78a>
			  case NK_COMMAND_TEXT: {
				  const struct nk_command_text *t = (const struct nk_command_text*)cmd;
 8004876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004878:	63bb      	str	r3, [r7, #56]	; 0x38
				  //framebuf_text( pfb, t->x, t->y-y0, (char *)t->string, nk_colot_to_rgb666( t->foreground ) );
				  lcd_text( pfb,  t->x, t->y-y0, (char *)t->string, 0xFFFF );
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004880:	b299      	uxth	r1, r3
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004888:	b29a      	uxth	r2, r3
 800488a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488c:	b29b      	uxth	r3, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	b29a      	uxth	r2, r3
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	3324      	adds	r3, #36	; 0x24
 8004896:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800489a:	9000      	str	r0, [sp, #0]
 800489c:	6838      	ldr	r0, [r7, #0]
 800489e:	f7fd fc15 	bl	80020cc <lcd_text>
			  } break;
 80048a2:	e080      	b.n	80049a6 <nk_draw_fb+0x78a>
			  case NK_COMMAND_IMAGE: {
				  const struct nk_command_image *i = (const struct nk_command_image*)cmd;
 80048a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
				  framebuf_fill_rect( pfb, i->x, i->y-y0, i->w, i->h, 0x0003FFFF );
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	899b      	ldrh	r3, [r3, #12]
 80048c0:	461c      	mov	r4, r3
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	89db      	ldrh	r3, [r3, #14]
 80048c6:	4619      	mov	r1, r3
 80048c8:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <nk_draw_fb+0x7d8>)
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	9100      	str	r1, [sp, #0]
 80048ce:	4623      	mov	r3, r4
 80048d0:	4601      	mov	r1, r0
 80048d2:	6838      	ldr	r0, [r7, #0]
 80048d4:	f009 fc21 	bl	800e11a <framebuf_fill_rect>
			  } break;
 80048d8:	e065      	b.n	80049a6 <nk_draw_fb+0x78a>
			  case NK_COMMAND_TRIANGLE_FILLED: {
				  const struct nk_command_triangle_filled *t = (const struct nk_command_triangle_filled*)cmd;
 80048da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
				  struct nk_color t_color = t->color;
 80048de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	60fb      	str	r3, [r7, #12]
				if( 1 )
				{
				  t_color.r = 175;
 80048e4:	23af      	movs	r3, #175	; 0xaf
 80048e6:	733b      	strb	r3, [r7, #12]
				  t_color.g = 175;
 80048e8:	23af      	movs	r3, #175	; 0xaf
 80048ea:	737b      	strb	r3, [r7, #13]
				  t_color.b = 175;
 80048ec:	23af      	movs	r3, #175	; 0xaf
 80048ee:	73bb      	strb	r3, [r7, #14]
				  t_color.a = 255;
 80048f0:	23ff      	movs	r3, #255	; 0xff
 80048f2:	73fb      	strb	r3, [r7, #15]
				}

				  framebuf_line( pfb, t->a.x, t->a.y-y0, t->b.x, t->b.y-y0, 0xFFFF );
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004902:	461a      	mov	r2, r3
 8004904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004906:	1ad2      	subs	r2, r2, r3
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800490e:	461c      	mov	r4, r3
 8004910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004912:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004916:	4619      	mov	r1, r3
 8004918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491a:	1acb      	subs	r3, r1, r3
 800491c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004920:	9101      	str	r1, [sp, #4]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4623      	mov	r3, r4
 8004926:	4601      	mov	r1, r0
 8004928:	6838      	ldr	r0, [r7, #0]
 800492a:	f009 fd0f 	bl	800e34c <framebuf_line>
				  framebuf_line( pfb, t->b.x, t->b.y-y0, t->c.x, t->c.y-y0, 0xFFFF );
 800492e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004930:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004934:	4618      	mov	r0, r3
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800493c:	461a      	mov	r2, r3
 800493e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004948:	461c      	mov	r4, r3
 800494a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004950:	4619      	mov	r1, r3
 8004952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004954:	1acb      	subs	r3, r1, r3
 8004956:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800495a:	9101      	str	r1, [sp, #4]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4623      	mov	r3, r4
 8004960:	4601      	mov	r1, r0
 8004962:	6838      	ldr	r0, [r7, #0]
 8004964:	f009 fcf2 	bl	800e34c <framebuf_line>
				  framebuf_line( pfb, t->c.x, t->c.y-y0, t->a.x, t->a.y-y0, 0xFFFF );
 8004968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800496e:	4618      	mov	r0, r3
 8004970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004972:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004976:	461a      	mov	r2, r3
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	1ad2      	subs	r2, r2, r3
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004982:	461c      	mov	r4, r3
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498e:	1acb      	subs	r3, r1, r3
 8004990:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004994:	9101      	str	r1, [sp, #4]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	4623      	mov	r3, r4
 800499a:	4601      	mov	r1, r0
 800499c:	6838      	ldr	r0, [r7, #0]
 800499e:	f009 fcd5 	bl	800e34c <framebuf_line>
			  } break;
 80049a2:	e000      	b.n	80049a6 <nk_draw_fb+0x78a>
			  default: break;
 80049a4:	bf00      	nop
		  nk_foreach(cmd, ctx)
 80049a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f00c fc2d 	bl	8011208 <nk__next>
 80049ae:	6438      	str	r0, [r7, #64]	; 0x40
 80049b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f47f ac46 	bne.w	8004244 <nk_draw_fb+0x28>
			  }
		  }
	  }

		lcd_bmp( 0, y0, pfb->width, pfb->height, pfb->buf );
 80049b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ba:	b219      	sxth	r1, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	889b      	ldrh	r3, [r3, #4]
 80049c0:	b21a      	sxth	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	88db      	ldrh	r3, [r3, #6]
 80049c6:	b218      	sxth	r0, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4603      	mov	r3, r0
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7fd fcdb 	bl	800238c <lcd_bmp>
	  for( int y0 = 0 ; y0 < 320 ; y0 += 80 )
 80049d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d8:	3350      	adds	r3, #80	; 0x50
 80049da:	647b      	str	r3, [r7, #68]	; 0x44
 80049dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80049e2:	f6ff ac24 	blt.w	800422e <nk_draw_fb+0x12>
	  }
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	3748      	adds	r7, #72	; 0x48
 80049ec:	46bd      	mov	sp, r7
 80049ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f2:	bf00      	nop
 80049f4:	0003ffff 	.word	0x0003ffff

080049f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b09a      	sub	sp, #104	; 0x68
 80049fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049fe:	f002 f886 	bl	8006b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a02:	f000 f9a7 	bl	8004d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a06:	f7fc ff61 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 8004a0a:	f7fc fe35 	bl	8001678 <MX_DMA_Init>
  MX_QUADSPI1_Init();
 8004a0e:	f000 fb6f 	bl	80050f0 <MX_QUADSPI1_Init>
  MX_ADC1_Init();
 8004a12:	f7fc f961 	bl	8000cd8 <MX_ADC1_Init>
  MX_DAC2_Init();
 8004a16:	f7fc fd2b 	bl	8001470 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 8004a1a:	f000 f9e9 	bl	8004df0 <MX_OPAMP1_Init>
  MX_DAC1_Init();
 8004a1e:	f7fc fce3 	bl	80013e8 <MX_DAC1_Init>
  MX_ADC3_Init();
 8004a22:	f7fc fa13 	bl	8000e4c <MX_ADC3_Init>
  MX_ADC4_Init();
 8004a26:	f7fc fa8b 	bl	8000f40 <MX_ADC4_Init>
  MX_ADC5_Init();
 8004a2a:	f7fc faf1 	bl	8001010 <MX_ADC5_Init>
  MX_OPAMP3_Init();
 8004a2e:	f000 fa0b 	bl	8004e48 <MX_OPAMP3_Init>
  MX_OPAMP5_Init();
 8004a32:	f000 fa35 	bl	8004ea0 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 8004a36:	f000 fa5f 	bl	8004ef8 <MX_OPAMP6_Init>
  MX_FMC_Init();
 8004a3a:	f7fc fe77 	bl	800172c <MX_FMC_Init>
  MX_SPI3_Init();
 8004a3e:	f001 fcd7 	bl	80063f0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8004a42:	f001 fedb 	bl	80067fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8004a46:	f001 ff2b 	bl	80068a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004a4a:	f001 ff9d 	bl	8006988 <MX_TIM3_Init>
  //float bx = -15800/989.0;
  //float ay = 250/1407.0;
  //float by = -1150/67.0;

  //solve([50=a*250+b,480-50=a*1760+b],[a,b])
  float ax = 38.0/151.0;
 8004a4e:	4bad      	ldr	r3, [pc, #692]	; (8004d04 <main+0x30c>)
 8004a50:	653b      	str	r3, [r7, #80]	; 0x50
  float bx = -1950.0/151.0;
 8004a52:	4bad      	ldr	r3, [pc, #692]	; (8004d08 <main+0x310>)
 8004a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  //solve([50=a*387+b,320-50=a*1627+b],[a,b])
  float ay = 11.0/62.0;
 8004a56:	4bad      	ldr	r3, [pc, #692]	; (8004d0c <main+0x314>)
 8004a58:	64bb      	str	r3, [r7, #72]	; 0x48
  float by = -1157.0/62.0;
 8004a5a:	4bad      	ldr	r3, [pc, #692]	; (8004d10 <main+0x318>)
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44

  uint16_t x = 0, y = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	867b      	strh	r3, [r7, #50]	; 0x32
 8004a62:	2300      	movs	r3, #0
 8004a64:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t x_bck = 0, y_bck = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40



  tTsc2046 tsc;
  tsc2046_init( &tsc, &hspi3, GPIOA, GPIO_PIN_15, ax, bx, ay, by, 32 );
 8004a72:	f107 0010 	add.w	r0, r7, #16
 8004a76:	2320      	movs	r3, #32
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	edd7 1a11 	vldr	s3, [r7, #68]	; 0x44
 8004a7e:	ed97 1a12 	vldr	s2, [r7, #72]	; 0x48
 8004a82:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8004a86:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004a92:	49a0      	ldr	r1, [pc, #640]	; (8004d14 <main+0x31c>)
 8004a94:	f019 f9c4 	bl	801de20 <tsc2046_init>

  lcd_config();
 8004a98:	f7fd f814 	bl	8001ac4 <lcd_config>

  lcd_rect( 50, 50, 2, 2, 0xFFFF );
 8004a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	2132      	movs	r1, #50	; 0x32
 8004aa8:	2032      	movs	r0, #50	; 0x32
 8004aaa:	f7fd f8bf 	bl	8001c2c <lcd_rect>
  lcd_rect( 240-50, 50, 2, 2, 0xFFFF );
 8004aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	2132      	movs	r1, #50	; 0x32
 8004aba:	20be      	movs	r0, #190	; 0xbe
 8004abc:	f7fd f8b6 	bl	8001c2c <lcd_rect>
  lcd_rect( 50, 320-50, 2, 2, 0xFFFF );
 8004ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004ace:	2032      	movs	r0, #50	; 0x32
 8004ad0:	f7fd f8ac 	bl	8001c2c <lcd_rect>
  lcd_rect( 240-50, 320-50, 2, 2, 0xFFFF );
 8004ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2302      	movs	r3, #2
 8004adc:	2202      	movs	r2, #2
 8004ade:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004ae2:	20be      	movs	r0, #190	; 0xbe
 8004ae4:	f7fd f8a2 	bl	8001c2c <lcd_rect>

  while( 0 )
 8004ae8:	bf00      	nop
	  lcd_rect( x, y, 2, 2, 0xFFFF );
	  printf("%d, %d, %d\n", cnt++, x, y );
	  HAL_Delay( 1 );
  }

  int d = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  d = lcd_set_pixel_bench( 100, 100, 0xFFFF );
 8004aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004af2:	2164      	movs	r1, #100	; 0x64
 8004af4:	2064      	movs	r0, #100	; 0x64
 8004af6:	f7fd f9f9 	bl	8001eec <lcd_set_pixel_bench>
 8004afa:	63f8      	str	r0, [r7, #60]	; 0x3c
  d = d+1;
 8004afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afe:	3301      	adds	r3, #1
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  static struct nk_buffer pool;
  static struct nk_user_font font;
  static uint8_t buf_cmds[1024*8] = {0};
  static uint8_t buf_pool[1024*8] = {0};

  nk_buffer_init_fixed( &cmds, buf_cmds, 1024*8 );
 8004b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b06:	4984      	ldr	r1, [pc, #528]	; (8004d18 <main+0x320>)
 8004b08:	4884      	ldr	r0, [pc, #528]	; (8004d1c <main+0x324>)
 8004b0a:	f009 fea1 	bl	800e850 <nk_buffer_init_fixed>
  nk_buffer_init_fixed( &pool, buf_pool, 1024*8 );
 8004b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b12:	4983      	ldr	r1, [pc, #524]	; (8004d20 <main+0x328>)
 8004b14:	4883      	ldr	r0, [pc, #524]	; (8004d24 <main+0x32c>)
 8004b16:	f009 fe9b 	bl	800e850 <nk_buffer_init_fixed>

  font.height = fontUbuntuBookRNormal16.bbxh;
 8004b1a:	4b83      	ldr	r3, [pc, #524]	; (8004d28 <main+0x330>)
 8004b1c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b28:	4b80      	ldr	r3, [pc, #512]	; (8004d2c <main+0x334>)
 8004b2a:	edc3 7a01 	vstr	s15, [r3, #4]
  font.width = text_width_f;
 8004b2e:	4b7f      	ldr	r3, [pc, #508]	; (8004d2c <main+0x334>)
 8004b30:	4a7f      	ldr	r2, [pc, #508]	; (8004d30 <main+0x338>)
 8004b32:	609a      	str	r2, [r3, #8]
  nk_init_custom( &ctx, &cmds, &pool, &font );
 8004b34:	4b7d      	ldr	r3, [pc, #500]	; (8004d2c <main+0x334>)
 8004b36:	4a7b      	ldr	r2, [pc, #492]	; (8004d24 <main+0x32c>)
 8004b38:	4978      	ldr	r1, [pc, #480]	; (8004d1c <main+0x324>)
 8004b3a:	487e      	ldr	r0, [pc, #504]	; (8004d34 <main+0x33c>)
 8004b3c:	f00b fed0 	bl	80108e0 <nk_init_custom>

	static uint8_t fb_buf[240*80*2];
	tFramebuf fb;

	framebuf_init( &fb, 240, 80, fb_buf );
 8004b40:	1d38      	adds	r0, r7, #4
 8004b42:	4b7d      	ldr	r3, [pc, #500]	; (8004d38 <main+0x340>)
 8004b44:	2250      	movs	r2, #80	; 0x50
 8004b46:	21f0      	movs	r1, #240	; 0xf0
 8004b48:	f009 fab3 	bl	800e0b2 <framebuf_init>

	  int pressed = 1;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  int pressed_bck = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	65bb      	str	r3, [r7, #88]	; 0x58
	  int pressed_bck2 = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	63bb      	str	r3, [r7, #56]	; 0x38
	int pressed_cnt = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	657b      	str	r3, [r7, #84]	; 0x54
	static struct Oscilloscope osc = {0};

  while( 1 )
  {
	  x_bck = x;
 8004b5c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  y_bck = y;
 8004b62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  tsc2046_read( &tsc, &x, &y );
 8004b68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b6c:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8004b70:	f107 0310 	add.w	r3, r7, #16
 8004b74:	4618      	mov	r0, r3
 8004b76:	f019 f9eb 	bl	801df50 <tsc2046_read>

	  pressed_bck2 = pressed_bck;
 8004b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b7c:	63bb      	str	r3, [r7, #56]	; 0x38
	  pressed_bck = pressed;
 8004b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b80:	65bb      	str	r3, [r7, #88]	; 0x58
	  pressed = (x!=0);
 8004b82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	65fb      	str	r3, [r7, #92]	; 0x5c

	  if(  (pressed || pressed_bck) )// && (pressed != pressed_bck) )
 8004b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <main+0x1a6>
 8004b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 808c 	beq.w	8004cb6 <main+0x2be>
	  {
		  //printf("%d, %d, %d, %d, %d, %d, %d,\n", pressed_cnt, pressed, pressed_bck, x, y, x_bck, y_bck );
		  static int a = 0;
		  static int b = 0;
		  int d = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
		  a = get_systick();
 8004ba2:	f7fc ff47 	bl	8001a34 <get_systick>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4a64      	ldr	r2, [pc, #400]	; (8004d3c <main+0x344>)
 8004baa:	6013      	str	r3, [r2, #0]
		  pressed_cnt++;
 8004bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bae:	3301      	adds	r3, #1
 8004bb0:	657b      	str	r3, [r7, #84]	; 0x54
		  nk_input_begin( &ctx );
 8004bb2:	4860      	ldr	r0, [pc, #384]	; (8004d34 <main+0x33c>)
 8004bb4:	f00e f986 	bl	8012ec4 <nk_input_begin>
		  if( pressed )
 8004bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d012      	beq.n	8004be4 <main+0x1ec>
		  {
			  nk_input_motion( &ctx, x, y );
 8004bbe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	485b      	ldr	r0, [pc, #364]	; (8004d34 <main+0x33c>)
 8004bc8:	f00e fa1c 	bl	8013004 <nk_input_motion>
			  nk_input_button( &ctx, 0, x, y, 1 );
 8004bcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bce:	461a      	mov	r2, r3
 8004bd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4855      	ldr	r0, [pc, #340]	; (8004d34 <main+0x33c>)
 8004bde:	f00e fa57 	bl	8013090 <nk_input_button>
 8004be2:	e014      	b.n	8004c0e <main+0x216>
		  }
		  else if( pressed_bck )
 8004be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d011      	beq.n	8004c0e <main+0x216>
		  {
			  nk_input_motion( &ctx, x_bck, y_bck );
 8004bea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004bee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	484f      	ldr	r0, [pc, #316]	; (8004d34 <main+0x33c>)
 8004bf6:	f00e fa05 	bl	8013004 <nk_input_motion>
			  nk_input_button( &ctx, 0, x_bck, y_bck, 0 );
 8004bfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004bfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c02:	2100      	movs	r1, #0
 8004c04:	9100      	str	r1, [sp, #0]
 8004c06:	2100      	movs	r1, #0
 8004c08:	484a      	ldr	r0, [pc, #296]	; (8004d34 <main+0x33c>)
 8004c0a:	f00e fa41 	bl	8013090 <nk_input_button>
		  }
		  nk_input_end( &ctx );
 8004c0e:	4849      	ldr	r0, [pc, #292]	; (8004d34 <main+0x33c>)
 8004c10:	f00e f9c0 	bl	8012f94 <nk_input_end>

		  oscilloscope_process(&osc, &ctx);
 8004c14:	4947      	ldr	r1, [pc, #284]	; (8004d34 <main+0x33c>)
 8004c16:	484a      	ldr	r0, [pc, #296]	; (8004d40 <main+0x348>)
 8004c18:	f7fd fca4 	bl	8002564 <oscilloscope_process>
		  nk_draw_fb( &ctx, &fb );
 8004c1c:	1d3b      	adds	r3, r7, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4844      	ldr	r0, [pc, #272]	; (8004d34 <main+0x33c>)
 8004c22:	f7ff fafb 	bl	800421c <nk_draw_fb>
		  nk_clear(&ctx);
 8004c26:	4843      	ldr	r0, [pc, #268]	; (8004d34 <main+0x33c>)
 8004c28:	f00b fec2 	bl	80109b0 <nk_clear>
		  //HAL_Delay(10);
		  b = get_systick();
 8004c2c:	f7fc ff02 	bl	8001a34 <get_systick>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4a44      	ldr	r2, [pc, #272]	; (8004d44 <main+0x34c>)
 8004c34:	6013      	str	r3, [r2, #0]
		  d = diff_systick( b, a );
 8004c36:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <main+0x34c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a40      	ldr	r2, [pc, #256]	; (8004d3c <main+0x344>)
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fc ff03 	bl	8001a4c <diff_systick>
 8004c46:	6378      	str	r0, [r7, #52]	; 0x34
		  if( x )
 8004c48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d033      	beq.n	8004cb6 <main+0x2be>
		  {
			  lcd_rect( x-4, y, 4, 2, 0xFFFF );
 8004c4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c50:	3b04      	subs	r3, #4
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	b218      	sxth	r0, r3
 8004c56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c58:	b219      	sxth	r1, r3
 8004c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	2302      	movs	r3, #2
 8004c62:	2204      	movs	r2, #4
 8004c64:	f7fc ffe2 	bl	8001c2c <lcd_rect>
			  lcd_rect( x+2, y, 4, 2, 0xFFFF );
 8004c68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	b218      	sxth	r0, r3
 8004c70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c72:	b219      	sxth	r1, r3
 8004c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	f7fc ffd5 	bl	8001c2c <lcd_rect>
			  lcd_rect( x, y-4, 2, 4, 0xFFFF );
 8004c82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c84:	b218      	sxth	r0, r3
 8004c86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c88:	3b04      	subs	r3, #4
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	b219      	sxth	r1, r3
 8004c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2304      	movs	r3, #4
 8004c96:	2202      	movs	r2, #2
 8004c98:	f7fc ffc8 	bl	8001c2c <lcd_rect>
			  lcd_rect( x, y+2, 2, 4, 0xFFFF );
 8004c9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c9e:	b218      	sxth	r0, r3
 8004ca0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	b219      	sxth	r1, r3
 8004ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	2304      	movs	r3, #4
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f7fc ffbb 	bl	8001c2c <lcd_rect>
	  }
	  //else if( nk_window_is_collapsed( &ctx, "STM32G4 Scope" ) )
	  {
		  static int collapsed = 0;
		  static int collapsed_bck = 0;
		  collapsed_bck = collapsed;
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <main+0x350>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a24      	ldr	r2, [pc, #144]	; (8004d4c <main+0x354>)
 8004cbc:	6013      	str	r3, [r2, #0]
		  collapsed = nk_window_is_collapsed( &ctx, "STM32G4 Scope" );
 8004cbe:	4924      	ldr	r1, [pc, #144]	; (8004d50 <main+0x358>)
 8004cc0:	481c      	ldr	r0, [pc, #112]	; (8004d34 <main+0x33c>)
 8004cc2:	f019 f875 	bl	801ddb0 <nk_window_is_collapsed>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <main+0x350>)
 8004cca:	6013      	str	r3, [r2, #0]
		  test_scope( !collapsed );
 8004ccc:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <main+0x350>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fdfc 	bl	80058d8 <test_scope>
		  if( collapsed != collapsed_bck )
 8004ce0:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <main+0x350>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <main+0x354>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	f43f af37 	beq.w	8004b5c <main+0x164>
		  {
			  lcd_rect( 0, 0, 480, 320, 0x0000 );
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004cf6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7fc ff95 	bl	8001c2c <lcd_rect>
	  x_bck = x;
 8004d02:	e72b      	b.n	8004b5c <main+0x164>
 8004d04:	3e80d902 	.word	0x3e80d902
 8004d08:	c14e9f5d 	.word	0xc14e9f5d
 8004d0c:	3e35ad6b 	.word	0x3e35ad6b
 8004d10:	c1954a53 	.word	0xc1954a53
 8004d14:	200167f8 	.word	0x200167f8
 8004d18:	20000838 	.word	0x20000838
 8004d1c:	200007fc 	.word	0x200007fc
 8004d20:	20002874 	.word	0x20002874
 8004d24:	20002838 	.word	0x20002838
 8004d28:	080237a4 	.word	0x080237a4
 8004d2c:	20004874 	.word	0x20004874
 8004d30:	08001a8d 	.word	0x08001a8d
 8004d34:	20004880 	.word	0x20004880
 8004d38:	20007ee8 	.word	0x20007ee8
 8004d3c:	200114e8 	.word	0x200114e8
 8004d40:	200114ec 	.word	0x200114ec
 8004d44:	200115cc 	.word	0x200115cc
 8004d48:	200115d0 	.word	0x200115d0
 8004d4c:	200115d4 	.word	0x200115d4
 8004d50:	080217b8 	.word	0x080217b8

08004d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b094      	sub	sp, #80	; 0x50
 8004d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d5a:	f107 0318 	add.w	r3, r7, #24
 8004d5e:	2238      	movs	r2, #56	; 0x38
 8004d60:	2100      	movs	r1, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	f019 ff17 	bl	801eb96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d68:	1d3b      	adds	r3, r7, #4
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	60da      	str	r2, [r3, #12]
 8004d74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004d76:	2000      	movs	r0, #0
 8004d78:	f005 fd26 	bl	800a7c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d84:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d86:	2302      	movs	r3, #2
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8004d8e:	2306      	movs	r3, #6
 8004d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004d92:	2355      	movs	r3, #85	; 0x55
 8004d94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d96:	2302      	movs	r3, #2
 8004d98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004da2:	f107 0318 	add.w	r3, r7, #24
 8004da6:	4618      	mov	r0, r3
 8004da8:	f006 f89c 	bl	800aee4 <HAL_RCC_OscConfig>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004db2:	f000 f818 	bl	8004de6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004db6:	230f      	movs	r3, #15
 8004db8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	2104      	movs	r1, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f006 fba0 	bl	800b514 <HAL_RCC_ClockConfig>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004dda:	f000 f804 	bl	8004de6 <Error_Handler>
  }
}
 8004dde:	bf00      	nop
 8004de0:	3750      	adds	r7, #80	; 0x50
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dea:	b672      	cpsid	i
}
 8004dec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004dee:	e7fe      	b.n	8004dee <Error_Handler+0x8>

08004df0 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp5;
OPAMP_HandleTypeDef hopamp6;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004df4:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004df6:	4a13      	ldr	r2, [pc, #76]	; (8004e44 <MX_OPAMP1_Init+0x54>)
 8004df8:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004e00:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004e02:	2240      	movs	r2, #64	; 0x40
 8004e04:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004e08:	2208      	movs	r2, #8
 8004e0a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004e2c:	4804      	ldr	r0, [pc, #16]	; (8004e40 <MX_OPAMP1_Init+0x50>)
 8004e2e:	f005 fbc9 	bl	800a5c4 <HAL_OPAMP_Init>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 8004e38:	f7ff ffd5 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	200115d8 	.word	0x200115d8
 8004e44:	40010300 	.word	0x40010300

08004e48 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e4e:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <MX_OPAMP3_Init+0x54>)
 8004e50:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8004e84:	4804      	ldr	r0, [pc, #16]	; (8004e98 <MX_OPAMP3_Init+0x50>)
 8004e86:	f005 fb9d 	bl	800a5c4 <HAL_OPAMP_Init>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_OPAMP3_Init+0x4c>
  {
    Error_Handler();
 8004e90:	f7ff ffa9 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20011614 	.word	0x20011614
 8004e9c:	40010308 	.word	0x40010308

08004ea0 <MX_OPAMP5_Init>:
/* OPAMP5 init function */
void MX_OPAMP5_Init(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004ea6:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <MX_OPAMP5_Init+0x54>)
 8004ea8:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004eb2:	2240      	movs	r2, #64	; 0x40
 8004eb4:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	619a      	str	r2, [r3, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8004edc:	4804      	ldr	r0, [pc, #16]	; (8004ef0 <MX_OPAMP5_Init+0x50>)
 8004ede:	f005 fb71 	bl	800a5c4 <HAL_OPAMP_Init>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <MX_OPAMP5_Init+0x4c>
  {
    Error_Handler();
 8004ee8:	f7ff ff7d 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8004eec:	bf00      	nop
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20011650 	.word	0x20011650
 8004ef4:	40010310 	.word	0x40010310

08004ef8 <MX_OPAMP6_Init>:
/* OPAMP6 init function */
void MX_OPAMP6_Init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <MX_OPAMP6_Init+0x54>)
 8004f00:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f10:	2208      	movs	r2, #8
 8004f12:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004f20:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8004f34:	4804      	ldr	r0, [pc, #16]	; (8004f48 <MX_OPAMP6_Init+0x50>)
 8004f36:	f005 fb45 	bl	800a5c4 <HAL_OPAMP_Init>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_OPAMP6_Init+0x4c>
  {
    Error_Handler();
 8004f40:	f7ff ff51 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8004f44:	bf00      	nop
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	2001168c 	.word	0x2001168c
 8004f4c:	40010314 	.word	0x40010314

08004f50 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f58:	f107 031c 	add.w	r3, r7, #28
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a4a      	ldr	r2, [pc, #296]	; (8005098 <HAL_OPAMP_MspInit+0x148>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d119      	bne.n	8004fa6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f72:	4b4a      	ldr	r3, [pc, #296]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	4a49      	ldr	r2, [pc, #292]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINM0
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8004f8a:	2388      	movs	r3, #136	; 0x88
 8004f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f96:	f107 031c 	add.w	r3, r7, #28
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fa0:	f005 f976 	bl	800a290 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }
}
 8004fa4:	e073      	b.n	800508e <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP3)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a3d      	ldr	r2, [pc, #244]	; (80050a0 <HAL_OPAMP_MspInit+0x150>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d118      	bne.n	8004fe2 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb0:	4b3a      	ldr	r3, [pc, #232]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb4:	4a39      	ldr	r2, [pc, #228]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004fb6:	f043 0302 	orr.w	r3, r3, #2
 8004fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fbc:	4b37      	ldr	r3, [pc, #220]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004fc8:	2305      	movs	r3, #5
 8004fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd4:	f107 031c 	add.w	r3, r7, #28
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4832      	ldr	r0, [pc, #200]	; (80050a4 <HAL_OPAMP_MspInit+0x154>)
 8004fdc:	f005 f958 	bl	800a290 <HAL_GPIO_Init>
}
 8004fe0:	e055      	b.n	800508e <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP5)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a30      	ldr	r2, [pc, #192]	; (80050a8 <HAL_OPAMP_MspInit+0x158>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d119      	bne.n	8005020 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff0:	4a2a      	ldr	r2, [pc, #168]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004ff2:	f043 0302 	orr.w	r3, r3, #2
 8004ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005004:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800500a:	2303      	movs	r3, #3
 800500c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500e:	2300      	movs	r3, #0
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005012:	f107 031c 	add.w	r3, r7, #28
 8005016:	4619      	mov	r1, r3
 8005018:	4822      	ldr	r0, [pc, #136]	; (80050a4 <HAL_OPAMP_MspInit+0x154>)
 800501a:	f005 f939 	bl	800a290 <HAL_GPIO_Init>
}
 800501e:	e036      	b.n	800508e <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP6)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a21      	ldr	r2, [pc, #132]	; (80050ac <HAL_OPAMP_MspInit+0x15c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d131      	bne.n	800508e <HAL_OPAMP_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502a:	4b1c      	ldr	r3, [pc, #112]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	4a1b      	ldr	r2, [pc, #108]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005036:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005042:	4b16      	ldr	r3, [pc, #88]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8005044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005046:	4a15      	ldr	r2, [pc, #84]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <HAL_OPAMP_MspInit+0x14c>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800505a:	2302      	movs	r3, #2
 800505c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800505e:	2303      	movs	r3, #3
 8005060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005062:	2300      	movs	r3, #0
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005066:	f107 031c 	add.w	r3, r7, #28
 800506a:	4619      	mov	r1, r3
 800506c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005070:	f005 f90e 	bl	800a290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800507a:	2303      	movs	r3, #3
 800507c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005082:	f107 031c 	add.w	r3, r7, #28
 8005086:	4619      	mov	r1, r3
 8005088:	4806      	ldr	r0, [pc, #24]	; (80050a4 <HAL_OPAMP_MspInit+0x154>)
 800508a:	f005 f901 	bl	800a290 <HAL_GPIO_Init>
}
 800508e:	bf00      	nop
 8005090:	3730      	adds	r7, #48	; 0x30
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40010300 	.word	0x40010300
 800509c:	40021000 	.word	0x40021000
 80050a0:	40010308 	.word	0x40010308
 80050a4:	48000400 	.word	0x48000400
 80050a8:	40010310 	.word	0x40010310
 80050ac:	40010314 	.word	0x40010314

080050b0 <HAL_QSPI_TxCpltCallback>:
    uint32_t SIOOMode,
	enum ePsram_Direction direction
);

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
    TxCpltCallback = 1;
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <HAL_QSPI_TxCpltCallback+0x1c>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	200116c8 	.word	0x200116c8

080050d0 <HAL_QSPI_RxCpltCallback>:
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
    RxCpltCallback = 1;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <HAL_QSPI_RxCpltCallback+0x1c>)
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	200116c9 	.word	0x200116c9

080050f0 <MX_QUADSPI1_Init>:
QSPI_HandleTypeDef hqspi1;
DMA_HandleTypeDef hdma_quadspi;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 80050f4:	4b12      	ldr	r3, [pc, #72]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 80050f6:	4a13      	ldr	r2, [pc, #76]	; (8005144 <MX_QUADSPI1_Init+0x54>)
 80050f8:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 6;
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 80050fc:	2206      	movs	r2, #6
 80050fe:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 8005102:	2201      	movs	r2, #1
 8005104:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 8005108:	2200      	movs	r2, #0
 800510a:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 23;
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 800510e:	2217      	movs	r2, #23
 8005110:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 8005114:	2200      	movs	r2, #0
 8005116:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 800511a:	2200      	movs	r2, #0
 800511c:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_2;
 800511e:	4b08      	ldr	r3, [pc, #32]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 8005126:	2200      	movs	r2, #0
 8005128:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 800512a:	4805      	ldr	r0, [pc, #20]	; (8005140 <MX_QUADSPI1_Init+0x50>)
 800512c:	f005 fbf0 	bl	800a910 <HAL_QSPI_Init>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 8005136:	f7ff fe56 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	200116cc 	.word	0x200116cc
 8005144:	a0001000 	.word	0xa0001000

08005148 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b0a0      	sub	sp, #128	; 0x80
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005150:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005160:	f107 0318 	add.w	r3, r7, #24
 8005164:	2254      	movs	r2, #84	; 0x54
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f019 fd14 	bl	801eb96 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a54      	ldr	r2, [pc, #336]	; (80052c4 <HAL_QSPI_MspInit+0x17c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	f040 80a1 	bne.w	80052bc <HAL_QSPI_MspInit+0x174>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800517a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800517e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8005180:	2300      	movs	r3, #0
 8005182:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005184:	f107 0318 	add.w	r3, r7, #24
 8005188:	4618      	mov	r0, r3
 800518a:	f006 fbb3 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8005194:	f7ff fe27 	bl	8004de6 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005198:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 800519a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519c:	4a4a      	ldr	r2, [pc, #296]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 800519e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a2:	6513      	str	r3, [r2, #80]	; 0x50
 80051a4:	4b48      	ldr	r3, [pc, #288]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051b0:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b4:	4a44      	ldr	r2, [pc, #272]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051b6:	f043 0304 	orr.w	r3, r3, #4
 80051ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c8:	4b3f      	ldr	r3, [pc, #252]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051cc:	4a3e      	ldr	r2, [pc, #248]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051ce:	f043 0302 	orr.w	r3, r3, #2
 80051d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051d4:	4b3c      	ldr	r3, [pc, #240]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051e0:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e4:	4a38      	ldr	r2, [pc, #224]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051e6:	f043 0308 	orr.w	r3, r3, #8
 80051ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <HAL_QSPI_MspInit+0x180>)
 80051ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> QUADSPI1_BK2_IO2
    PC4     ------> QUADSPI1_BK2_IO3
    PB10     ------> QUADSPI1_CLK
    PD3     ------> QUADSPI1_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80051f8:	231e      	movs	r3, #30
 80051fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fc:	2302      	movs	r3, #2
 80051fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005200:	2300      	movs	r3, #0
 8005202:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005204:	2300      	movs	r3, #0
 8005206:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005208:	230a      	movs	r3, #10
 800520a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800520c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005210:	4619      	mov	r1, r3
 8005212:	482e      	ldr	r0, [pc, #184]	; (80052cc <HAL_QSPI_MspInit+0x184>)
 8005214:	f005 f83c 	bl	800a290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800521c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521e:	2302      	movs	r3, #2
 8005220:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005226:	2300      	movs	r3, #0
 8005228:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800522a:	230a      	movs	r3, #10
 800522c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800522e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005232:	4619      	mov	r1, r3
 8005234:	4826      	ldr	r0, [pc, #152]	; (80052d0 <HAL_QSPI_MspInit+0x188>)
 8005236:	f005 f82b 	bl	800a290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800523a:	2308      	movs	r3, #8
 800523c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523e:	2302      	movs	r3, #2
 8005240:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005242:	2300      	movs	r3, #0
 8005244:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005246:	2300      	movs	r3, #0
 8005248:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800524a:	230a      	movs	r3, #10
 800524c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800524e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005252:	4619      	mov	r1, r3
 8005254:	481f      	ldr	r0, [pc, #124]	; (80052d4 <HAL_QSPI_MspInit+0x18c>)
 8005256:	f005 f81b 	bl	800a290 <HAL_GPIO_Init>

    /* QUADSPI DMA Init */
    /* QUADSPI Init */
    hdma_quadspi.Instance = DMA1_Channel1;
 800525a:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 800525c:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <HAL_QSPI_MspInit+0x194>)
 800525e:	601a      	str	r2, [r3, #0]
    hdma_quadspi.Init.Request = DMA_REQUEST_QUADSPI;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 8005262:	2228      	movs	r2, #40	; 0x28
 8005264:	605a      	str	r2, [r3, #4]
    hdma_quadspi.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005266:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 8005268:	2210      	movs	r2, #16
 800526a:	609a      	str	r2, [r3, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 800526c:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 800526e:	2200      	movs	r2, #0
 8005270:	60da      	str	r2, [r3, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 8005272:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 8005274:	2280      	movs	r2, #128	; 0x80
 8005276:	611a      	str	r2, [r3, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 800527a:	2200      	movs	r2, #0
 800527c:	615a      	str	r2, [r3, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800527e:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 8005280:	2200      	movs	r2, #0
 8005282:	619a      	str	r2, [r3, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 800528c:	2200      	movs	r2, #0
 800528e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 8005290:	4811      	ldr	r0, [pc, #68]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 8005292:	f004 fccb 	bl	8009c2c <HAL_DMA_Init>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_QSPI_MspInit+0x158>
    {
      Error_Handler();
 800529c:	f7ff fda3 	bl	8004de6 <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hdma,hdma_quadspi);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 80052a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <HAL_QSPI_MspInit+0x190>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 80052ac:	2200      	movs	r2, #0
 80052ae:	2100      	movs	r1, #0
 80052b0:	205f      	movs	r0, #95	; 0x5f
 80052b2:	f004 f8cc 	bl	800944e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80052b6:	205f      	movs	r0, #95	; 0x5f
 80052b8:	f004 f8e3 	bl	8009482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80052bc:	bf00      	nop
 80052be:	3780      	adds	r7, #128	; 0x80
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	a0001000 	.word	0xa0001000
 80052c8:	40021000 	.word	0x40021000
 80052cc:	48000800 	.word	0x48000800
 80052d0:	48000400 	.word	0x48000400
 80052d4:	48000c00 	.word	0x48000c00
 80052d8:	20011718 	.word	0x20011718
 80052dc:	40020008 	.word	0x40020008

080052e0 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	605a      	str	r2, [r3, #4]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	605a      	str	r2, [r3, #4]
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	605a      	str	r2, [r3, #4]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <scope_init>:
#include "scope.h"

static tScope *_scope;

void scope_init( tScope *scope, uint16_t trigger_level, uint16_t sample_rate, uint16_t *buffer1, uint16_t *buffer2, uint16_t *buffer3, uint16_t *buffer4, uint16_t len )
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	460b      	mov	r3, r1
 800536c:	817b      	strh	r3, [r7, #10]
 800536e:	4613      	mov	r3, r2
 8005370:	813b      	strh	r3, [r7, #8]
	scope->trigger_level = trigger_level;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	897a      	ldrh	r2, [r7, #10]
 8005376:	82da      	strh	r2, [r3, #22]
	scope->sample_rate = sample_rate;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	893a      	ldrh	r2, [r7, #8]
 800537c:	805a      	strh	r2, [r3, #2]
	scope->buffer1 = buffer1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]
	scope->buffer2 = buffer2;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	609a      	str	r2, [r3, #8]
	scope->buffer3 = buffer3;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	60da      	str	r2, [r3, #12]
	scope->buffer4 = buffer4;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a3a      	ldr	r2, [r7, #32]
 8005394:	611a      	str	r2, [r3, #16]
	scope->len = len;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800539a:	829a      	strh	r2, [r3, #20]
	scope->trigger_location = 0;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	831a      	strh	r2, [r3, #24]
	scope->state = SCOPE_STATE_RESET;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]

	_scope = scope;
 80053a8:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <scope_init+0x98>)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6013      	str	r3, [r2, #0]
	extern DMA_HandleTypeDef hdma_adc5;
	extern DMA_HandleTypeDef hdma_adc4;
	extern TIM_HandleTypeDef htim1;
	extern TIM_HandleTypeDef htim2;

	scope->hadc1 = &hadc1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a12      	ldr	r2, [pc, #72]	; (80053fc <scope_init+0x9c>)
 80053b2:	61da      	str	r2, [r3, #28]
	scope->hadc2 = &hadc3;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a12      	ldr	r2, [pc, #72]	; (8005400 <scope_init+0xa0>)
 80053b8:	621a      	str	r2, [r3, #32]
	scope->hadc3 = &hadc5;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4a11      	ldr	r2, [pc, #68]	; (8005404 <scope_init+0xa4>)
 80053be:	625a      	str	r2, [r3, #36]	; 0x24
	scope->hadc4 = &hadc4;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a11      	ldr	r2, [pc, #68]	; (8005408 <scope_init+0xa8>)
 80053c4:	629a      	str	r2, [r3, #40]	; 0x28
	scope->hdma_adc1 = &hdma_adc1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a10      	ldr	r2, [pc, #64]	; (800540c <scope_init+0xac>)
 80053ca:	62da      	str	r2, [r3, #44]	; 0x2c
	scope->hdma_adc2 = &hdma_adc3;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <scope_init+0xb0>)
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
	scope->hdma_adc3 = &hdma_adc5;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a0f      	ldr	r2, [pc, #60]	; (8005414 <scope_init+0xb4>)
 80053d6:	635a      	str	r2, [r3, #52]	; 0x34
	scope->hdma_adc4 = &hdma_adc4;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a0f      	ldr	r2, [pc, #60]	; (8005418 <scope_init+0xb8>)
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
	scope->htim1 = &htim1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a0e      	ldr	r2, [pc, #56]	; (800541c <scope_init+0xbc>)
 80053e2:	63da      	str	r2, [r3, #60]	; 0x3c
	scope->htim2 = &htim2;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4a0e      	ldr	r2, [pc, #56]	; (8005420 <scope_init+0xc0>)
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
	//MX_DMA_Init();
	//MX_ADC1_Init();
	//MX_OPAMP1_Init();
	//MX_TIM1_Init();
	//MX_TIM2_Init();
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20011778 	.word	0x20011778
 80053fc:	20000374 	.word	0x20000374
 8005400:	200003e0 	.word	0x200003e0
 8005404:	200004b8 	.word	0x200004b8
 8005408:	2000044c 	.word	0x2000044c
 800540c:	20000524 	.word	0x20000524
 8005410:	20000584 	.word	0x20000584
 8005414:	20000644 	.word	0x20000644
 8005418:	200005e4 	.word	0x200005e4
 800541c:	20016860 	.word	0x20016860
 8005420:	200168ac 	.word	0x200168ac
 8005424:	00000000 	.word	0x00000000

08005428 <scope_start>:
	scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = 0;
	scope->state = SCOPE_STATE_RESET;
}

void scope_start( tScope *scope )
{
 8005428:	b5b0      	push	{r4, r5, r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e009      	b.n	800544a <scope_start+0x22>
	{
		scope->CNDTRs[i] = 0;
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3310      	adds	r3, #16
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	2200      	movs	r2, #0
 8005442:	605a      	str	r2, [r3, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b05      	cmp	r3, #5
 800544e:	ddf2      	ble.n	8005436 <scope_start+0xe>
	}

	__HAL_DBGMCU_FREEZE_TIM1();
 8005450:	4b5b      	ldr	r3, [pc, #364]	; (80055c0 <scope_start+0x198>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	4a5a      	ldr	r2, [pc, #360]	; (80055c0 <scope_start+0x198>)
 8005456:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800545a:	6113      	str	r3, [r2, #16]
	__HAL_DBGMCU_FREEZE_TIM2();
 800545c:	4b58      	ldr	r3, [pc, #352]	; (80055c0 <scope_start+0x198>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a57      	ldr	r2, [pc, #348]	; (80055c0 <scope_start+0x198>)
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	6093      	str	r3, [r2, #8]

	extern DAC_HandleTypeDef hdac2;
	int vcc = 3.3;
 8005468:	2303      	movs	r3, #3
 800546a:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (vcc/2.0)/vcc*4095);
 800546c:	68b8      	ldr	r0, [r7, #8]
 800546e:	f7fb f881 	bl	8000574 <__aeabi_i2d>
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800547a:	f7fb fa0f 	bl	800089c <__aeabi_ddiv>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4614      	mov	r4, r2
 8005484:	461d      	mov	r5, r3
 8005486:	68b8      	ldr	r0, [r7, #8]
 8005488:	f7fb f874 	bl	8000574 <__aeabi_i2d>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4620      	mov	r0, r4
 8005492:	4629      	mov	r1, r5
 8005494:	f7fb fa02 	bl	800089c <__aeabi_ddiv>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	a345      	add	r3, pc, #276	; (adr r3, 80055b8 <scope_start+0x190>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fb f8cf 	bl	8000648 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fb fba1 	bl	8000bf8 <__aeabi_d2uiz>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2200      	movs	r2, #0
 80054ba:	2100      	movs	r1, #0
 80054bc:	4841      	ldr	r0, [pc, #260]	; (80055c4 <scope_start+0x19c>)
 80054be:	f004 f93d 	bl	800973c <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80054c2:	2100      	movs	r1, #0
 80054c4:	483f      	ldr	r0, [pc, #252]	; (80055c4 <scope_start+0x19c>)
 80054c6:	f004 f818 	bl	80094fa <HAL_DAC_Start>

	extern OPAMP_HandleTypeDef hopamp1;
	extern OPAMP_HandleTypeDef hopamp3;
	extern OPAMP_HandleTypeDef hopamp5;
	extern OPAMP_HandleTypeDef hopamp6;
	HAL_OPAMP_Start(&hopamp1);
 80054ca:	483f      	ldr	r0, [pc, #252]	; (80055c8 <scope_start+0x1a0>)
 80054cc:	f005 f94a 	bl	800a764 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 80054d0:	483e      	ldr	r0, [pc, #248]	; (80055cc <scope_start+0x1a4>)
 80054d2:	f005 f947 	bl	800a764 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 80054d6:	483e      	ldr	r0, [pc, #248]	; (80055d0 <scope_start+0x1a8>)
 80054d8:	f005 f944 	bl	800a764 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp6);
 80054dc:	483d      	ldr	r0, [pc, #244]	; (80055d4 <scope_start+0x1ac>)
 80054de:	f005 f941 	bl	800a764 <HAL_OPAMP_Start>

	HAL_ADCEx_Calibration_Start( scope->hadc1, ADC_SINGLE_ENDED );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	217f      	movs	r1, #127	; 0x7f
 80054e8:	4618      	mov	r0, r3
 80054ea:	f003 fd43 	bl	8008f74 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc2, ADC_SINGLE_ENDED );
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	217f      	movs	r1, #127	; 0x7f
 80054f4:	4618      	mov	r0, r3
 80054f6:	f003 fd3d 	bl	8008f74 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc3, ADC_SINGLE_ENDED );
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	217f      	movs	r1, #127	; 0x7f
 8005500:	4618      	mov	r0, r3
 8005502:	f003 fd37 	bl	8008f74 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc4, ADC_SINGLE_ENDED );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	217f      	movs	r1, #127	; 0x7f
 800550c:	4618      	mov	r0, r3
 800550e:	f003 fd31 	bl	8008f74 <HAL_ADCEx_Calibration_Start>

	LL_ADC_DisableIT_AWD1( scope->hadc1->Instance );
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff ff01 	bl	8005320 <LL_ADC_DisableIT_AWD1>
	LL_ADC_DisableIT_AWD2( scope->hadc1->Instance );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff ff0b 	bl	8005340 <LL_ADC_DisableIT_AWD2>
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD1 );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2280      	movs	r2, #128	; 0x80
 8005532:	601a      	str	r2, [r3, #0]
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD2 );
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553e:	601a      	str	r2, [r3, #0]

	scope->htim1->Instance->CNT = 0;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
	scope->htim2->Instance->CNT = 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_ADC_Start_DMA( scope->hadc1, (uint32_t*)scope->buffer1, scope->len );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69d8      	ldr	r0, [r3, #28]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6859      	ldr	r1, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8a9b      	ldrh	r3, [r3, #20]
 8005560:	461a      	mov	r2, r3
 8005562:	f002 f8b7 	bl	80076d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc2, (uint32_t*)scope->buffer2, scope->len );
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a18      	ldr	r0, [r3, #32]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6899      	ldr	r1, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8a9b      	ldrh	r3, [r3, #20]
 8005572:	461a      	mov	r2, r3
 8005574:	f002 f8ae 	bl	80076d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc3, (uint32_t*)scope->buffer3, scope->len );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68d9      	ldr	r1, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8a9b      	ldrh	r3, [r3, #20]
 8005584:	461a      	mov	r2, r3
 8005586:	f002 f8a5 	bl	80076d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc4, (uint32_t*)scope->buffer4, scope->len );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6919      	ldr	r1, [r3, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8a9b      	ldrh	r3, [r3, #20]
 8005596:	461a      	mov	r2, r3
 8005598:	f002 f89c 	bl	80076d4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start( scope->htim1 );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	4618      	mov	r0, r3
 80055a2:	f007 f8b7 	bl	800c714 <HAL_TIM_Base_Start>
	scope->state = SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	701a      	strb	r2, [r3, #0]
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bdb0      	pop	{r4, r5, r7, pc}
 80055b4:	f3af 8000 	nop.w
 80055b8:	00000000 	.word	0x00000000
 80055bc:	40affe00 	.word	0x40affe00
 80055c0:	e0042000 	.word	0xe0042000
 80055c4:	200006bc 	.word	0x200006bc
 80055c8:	200115d8 	.word	0x200115d8
 80055cc:	20011614 	.word	0x20011614
 80055d0:	20011650 	.word	0x20011650
 80055d4:	2001168c 	.word	0x2001168c

080055d8 <scope_stop>:

void scope_stop( tScope *scope )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop( scope->htim1 );
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	4618      	mov	r0, r3
 80055e6:	f007 f905 	bl	800c7f4 <HAL_TIM_Base_Stop>
	HAL_TIM_OnePulse_Stop_IT( scope->htim2, TIM_CHANNEL_1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f007 fa15 	bl	800ca20 <HAL_TIM_OnePulse_Stop_IT>
	HAL_TIM_Base_Stop( scope->htim2 );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	4618      	mov	r0, r3
 80055fc:	f007 f8fa 	bl	800c7f4 <HAL_TIM_Base_Stop>
	HAL_ADC_Stop_DMA( scope->hadc1 );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4618      	mov	r0, r3
 8005606:	f002 f939 	bl	800787c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc2 );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	4618      	mov	r0, r3
 8005610:	f002 f934 	bl	800787c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc3 );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	4618      	mov	r0, r3
 800561a:	f002 f92f 	bl	800787c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc4 );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	4618      	mov	r0, r3
 8005624:	f002 f92a 	bl	800787c <HAL_ADC_Stop_DMA>
	scope->state = SCOPE_STATE_DONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2205      	movs	r2, #5
 800562c:	701a      	strb	r2, [r3, #0]
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <scope_is_busy>:

uint8_t scope_is_busy( tScope *scope )
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
	return scope->state != SCOPE_STATE_DONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b05      	cmp	r3, #5
 8005644:	bf14      	ite	ne
 8005646:	2301      	movne	r3, #1
 8005648:	2300      	moveq	r3, #0
 800564a:	b2db      	uxtb	r3, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <scope_get_trigger>:

int32_t scope_get_trigger( tScope *scope )
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	return scope->len - scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP];
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8a9b      	ldrh	r3, [r3, #20]
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566a:	1ad3      	subs	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_ADC_ConvHalfCpltCallback>:

// ********************** IRQs ********************** //
int cndtr1 = 0;
int cndtr2 = 0;
void HAL_ADC_ConvHalfCpltCallback( ADC_HandleTypeDef* hadc )
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
	{
	}
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef* hadc )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8005694:	4b15      	ldr	r3, [pc, #84]	; (80056ec <HAL_ADC_ConvCpltCallback+0x60>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d120      	bne.n	80056e2 <HAL_ADC_ConvCpltCallback+0x56>
	{
		if( 1 && _scope->state == SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE )
 80056a0:	4b12      	ldr	r3, [pc, #72]	; (80056ec <HAL_ADC_ConvCpltCallback+0x60>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d11b      	bne.n	80056e2 <HAL_ADC_ConvCpltCallback+0x56>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_ARM;
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <HAL_ADC_ConvCpltCallback+0x60>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2202      	movs	r2, #2
 80056b0:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_ARM] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 80056b2:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <HAL_ADC_ConvCpltCallback+0x60>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a0e      	ldr	r2, [pc, #56]	; (80056f0 <HAL_ADC_ConvCpltCallback+0x64>)
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	64da      	str	r2, [r3, #76]	; 0x4c
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_ADC_ConvCpltCallback+0x60>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	601a      	str	r2, [r3, #0]
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
			LL_ADC_EnableIT_AWD1( _scope->hadc1->Instance );
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <HAL_ADC_ConvCpltCallback+0x60>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff fe05 	bl	80052e0 <LL_ADC_EnableIT_AWD1>
			cndtr1 = 0;
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_ADC_ConvCpltCallback+0x64>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
			cndtr2 = 0;
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_ADC_ConvCpltCallback+0x68>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20011778 	.word	0x20011778
 80056f0:	2001177c 	.word	0x2001177c
 80056f4:	20011780 	.word	0x20011780

080056f8 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback( ADC_HandleTypeDef* hadc )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8005700:	4b17      	ldr	r3, [pc, #92]	; (8005760 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	429a      	cmp	r2, r3
 800570a:	d125      	bne.n	8005758 <HAL_ADC_LevelOutOfWindowCallback+0x60>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_ARM )
 800570c:	4b14      	ldr	r3, [pc, #80]	; (8005760 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d120      	bne.n	8005758 <HAL_ADC_LevelOutOfWindowCallback+0x60>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_TRIGGER;
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2203      	movs	r2, #3
 800571c:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_TRIGGER] = _scope->hdma_adc1->Instance->CNDTR;
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	651a      	str	r2, [r3, #80]	; 0x50
			LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fdf2 	bl	8005320 <LL_ADC_DisableIT_AWD1>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005748:	601a      	str	r2, [r3, #0]
			LL_ADC_EnableIT_AWD2( _scope->hadc1->Instance );
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fdd4 	bl	8005300 <LL_ADC_EnableIT_AWD2>
		}
	}
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20011778 	.word	0x20011778

08005764 <HAL_ADCEx_LevelOutOfWindow2Callback>:
uint32_t start_cpu;
uint32_t stop_cpu;

void HAL_ADCEx_LevelOutOfWindow2Callback( ADC_HandleTypeDef* hadc )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 800576c:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d14f      	bne.n	8005818 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_TRIGGER )
 8005778:	4b29      	ldr	r3, [pc, #164]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d14a      	bne.n	8005818 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_STOP;
 8005782:	4b27      	ldr	r3, [pc, #156]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2204      	movs	r2, #4
 8005788:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 800578a:	4b25      	ldr	r3, [pc, #148]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a25      	ldr	r2, [pc, #148]	; (8005824 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc0>)
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	655a      	str	r2, [r3, #84]	; 0x54

			//_scope->htim2->Instance->CCR1 = 127;
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC1 );
 8005794:	4b22      	ldr	r3, [pc, #136]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0202 	mvn.w	r2, #2
 80057a0:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC2 );
 80057a2:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0204 	mvn.w	r2, #4
 80057ae:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_UPDATE );
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0201 	mvn.w	r2, #1
 80057bc:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC1 );
 80057be:	4b18      	ldr	r3, [pc, #96]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0202 	mvn.w	r2, #2
 80057ca:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC2 );
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0204 	mvn.w	r2, #4
 80057d8:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_UPDATE );
 80057da:	4b11      	ldr	r3, [pc, #68]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0201 	mvn.w	r2, #1
 80057e6:	611a      	str	r2, [r3, #16]
			start_cpu = SysTick->VAL;
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc4>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4a0f      	ldr	r2, [pc, #60]	; (800582c <HAL_ADCEx_LevelOutOfWindow2Callback+0xc8>)
 80057ee:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start( _scope->htim2 );
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4618      	mov	r0, r3
 80057f8:	f006 ff8c 	bl	800c714 <HAL_TIM_Base_Start>
			HAL_TIM_OnePulse_Start_IT( _scope->htim2, TIM_CHANNEL_1);
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f007 f87d 	bl	800c904 <HAL_TIM_OnePulse_Start_IT>
			//LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fd94 	bl	8005340 <LL_ADC_DisableIT_AWD2>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20011778 	.word	0x20011778
 8005824:	2001177c 	.word	0x2001177c
 8005828:	e000e010 	.word	0xe000e010
 800582c:	20011784 	.word	0x20011784

08005830 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	if( htim == _scope->htim2 ) // htim2
 8005838:	4b23      	ldr	r3, [pc, #140]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	429a      	cmp	r2, r3
 8005842:	d13c      	bne.n	80058be <HAL_TIM_OC_DelayElapsedCallback+0x8e>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_STOP )
 8005844:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b04      	cmp	r3, #4
 800584c:	d137      	bne.n	80058be <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		{
			stop_cpu = SysTick->VAL;
 800584e:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8005854:	6013      	str	r3, [r2, #0]
			_scope->state = SCOPE_STATE_DONE;
 8005856:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2205      	movs	r2, #5
 800585c:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_DONE] = cndtr2;//_scope->hdma_adc1->Instance->CNDTR;
 800585e:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	659a      	str	r2, [r3, #88]	; 0x58
			HAL_TIM_Base_Stop( _scope->htim1 );
 8005868:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	4618      	mov	r0, r3
 8005870:	f006 ffc0 	bl	800c7f4 <HAL_TIM_Base_Stop>
			HAL_ADC_Stop_DMA( _scope->hadc1 );
 8005874:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fffe 	bl	800787c <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc2 );
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	4618      	mov	r0, r3
 8005888:	f001 fff8 	bl	800787c <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc3 );
 800588c:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fff2 	bl	800787c <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc4 );
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 ffec 	bl	800787c <HAL_ADC_Stop_DMA>
			HAL_TIM_OnePulse_Stop_IT( _scope->htim2, TIM_CHANNEL_1);
 80058a4:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f007 f8b7 	bl	800ca20 <HAL_TIM_OnePulse_Stop_IT>
			HAL_TIM_Base_Stop( _scope->htim2 );
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	4618      	mov	r0, r3
 80058ba:	f006 ff9b 	bl	800c7f4 <HAL_TIM_Base_Stop>
		}
	}
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20011778 	.word	0x20011778
 80058cc:	e000e010 	.word	0xe000e010
 80058d0:	20011788 	.word	0x20011788
 80058d4:	20011780 	.word	0x20011780

080058d8 <test_scope>:
uint16_t buffer6[BUFFER_LEN];
uint16_t buffer7[BUFFER_LEN];
uint16_t buffer8[BUFFER_LEN];
tScope scope = {0};
void test_scope( int collapsed )
{
 80058d8:	b5b0      	push	{r4, r5, r7, lr}
 80058da:	b098      	sub	sp, #96	; 0x60
 80058dc:	af04      	add	r7, sp, #16
 80058de:	6078      	str	r0, [r7, #4]
	// test scope

	uint16_t start = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  static int trigger_bck = 0;
	  static int i = 0;

	if( _scope_init == 0 )
 80058e4:	4ba8      	ldr	r3, [pc, #672]	; (8005b88 <test_scope+0x2b0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d17e      	bne.n	80059ea <test_scope+0x112>
	{

		float freq = 3;
 80058ec:	4ba7      	ldr	r3, [pc, #668]	; (8005b8c <test_scope+0x2b4>)
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 80058f0:	2300      	movs	r3, #0
 80058f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f4:	e057      	b.n	80059a6 <test_scope+0xce>
		{
			dac1_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*1023 + 2048;
 80058f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80058fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80058fe:	ee17 0a90 	vmov	r0, s15
 8005902:	f7fa fe49 	bl	8000598 <__aeabi_f2d>
 8005906:	a39e      	add	r3, pc, #632	; (adr r3, 8005b80 <test_scope+0x2a8>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fe9c 	bl	8000648 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800591a:	f7fa fe2b 	bl	8000574 <__aeabi_i2d>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fa fe8f 	bl	8000648 <__aeabi_dmul>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4610      	mov	r0, r2
 8005930:	4619      	mov	r1, r3
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	4b96      	ldr	r3, [pc, #600]	; (8005b90 <test_scope+0x2b8>)
 8005938:	f7fa ffb0 	bl	800089c <__aeabi_ddiv>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4610      	mov	r0, r2
 8005942:	4619      	mov	r1, r3
 8005944:	f7fb f978 	bl	8000c38 <__aeabi_d2f>
 8005948:	4603      	mov	r3, r0
 800594a:	ee00 3a10 	vmov	s0, r3
 800594e:	f01b f9eb 	bl	8020d28 <sinf>
 8005952:	eef0 7a40 	vmov.f32	s15, s0
 8005956:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005b94 <test_scope+0x2bc>
 800595a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800595e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8005b98 <test_scope+0x2c0>
 8005962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596a:	ee17 3a90 	vmov	r3, s15
 800596e:	b299      	uxth	r1, r3
 8005970:	4a8a      	ldr	r2, [pc, #552]	; (8005b9c <test_scope+0x2c4>)
 8005972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005974:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//dac2_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*2000 + 2048;
			dac2_buffer[i] = 1024+(((BUFFER_LEN-i-1)*8)%2048);
 8005978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597a:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800597e:	3303      	adds	r3, #3
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	425a      	negs	r2, r3
 8005984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005988:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800598c:	bf58      	it	pl
 800598e:	4253      	negpl	r3, r2
 8005990:	b29b      	uxth	r3, r3
 8005992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005996:	b299      	uxth	r1, r3
 8005998:	4a81      	ldr	r2, [pc, #516]	; (8005ba0 <test_scope+0x2c8>)
 800599a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 80059a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a2:	3301      	adds	r3, #1
 80059a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	dba3      	blt.n	80058f6 <test_scope+0x1e>
		}
		extern DAC_HandleTypeDef hdac1;
		extern TIM_HandleTypeDef htim2;
		extern TIM_HandleTypeDef htim3;
		__HAL_DBGMCU_FREEZE_TIM3();
 80059ae:	4b7d      	ldr	r3, [pc, #500]	; (8005ba4 <test_scope+0x2cc>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4a7c      	ldr	r2, [pc, #496]	; (8005ba4 <test_scope+0x2cc>)
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	6093      	str	r3, [r2, #8]
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_1, (uint32_t*)dac1_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 80059ba:	2300      	movs	r3, #0
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c2:	4a76      	ldr	r2, [pc, #472]	; (8005b9c <test_scope+0x2c4>)
 80059c4:	2100      	movs	r1, #0
 80059c6:	4878      	ldr	r0, [pc, #480]	; (8005ba8 <test_scope+0x2d0>)
 80059c8:	f003 fdea 	bl	80095a0 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_2, (uint32_t*)dac2_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 80059cc:	2300      	movs	r3, #0
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d4:	4a72      	ldr	r2, [pc, #456]	; (8005ba0 <test_scope+0x2c8>)
 80059d6:	2110      	movs	r1, #16
 80059d8:	4873      	ldr	r0, [pc, #460]	; (8005ba8 <test_scope+0x2d0>)
 80059da:	f003 fde1 	bl	80095a0 <HAL_DAC_Start_DMA>
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Start( &htim3 );
 80059de:	4873      	ldr	r0, [pc, #460]	; (8005bac <test_scope+0x2d4>)
 80059e0:	f006 fe98 	bl	800c714 <HAL_TIM_Base_Start>
		//htim1.Instance->ARR = 0x54;
		//htim1.Instance->CNT = 0x2A;
		//HAL_TIM_Base_Start( &htim1 );


		_scope_init = 1;
 80059e4:	4b68      	ldr	r3, [pc, #416]	; (8005b88 <test_scope+0x2b0>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]


	{

		static int dd = 0;
		if( dd<10 )
 80059ea:	4b71      	ldr	r3, [pc, #452]	; (8005bb0 <test_scope+0x2d8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b09      	cmp	r3, #9
 80059f0:	dc05      	bgt.n	80059fe <test_scope+0x126>
		{
			dd++;
 80059f2:	4b6f      	ldr	r3, [pc, #444]	; (8005bb0 <test_scope+0x2d8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	4a6d      	ldr	r2, [pc, #436]	; (8005bb0 <test_scope+0x2d8>)
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e09b      	b.n	8005b36 <test_scope+0x25e>
		}
		else
		{
			dd = 0;
 80059fe:	4b6c      	ldr	r3, [pc, #432]	; (8005bb0 <test_scope+0x2d8>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
			if( collapsed )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d04d      	beq.n	8005aa6 <test_scope+0x1ce>
			{
				for( int d = 0 ; d < 480 ; d += 40 )
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a0e:	e011      	b.n	8005a34 <test_scope+0x15c>
				{
					lcd_rect( d/2+240, 0, 1, 320, 0x55555555 );
 8005a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a12:	0fda      	lsrs	r2, r3, #31
 8005a14:	4413      	add	r3, r2
 8005a16:	105b      	asrs	r3, r3, #1
 8005a18:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8005a1c:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005a26:	2201      	movs	r2, #1
 8005a28:	2100      	movs	r1, #0
 8005a2a:	f7fc f8ff 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 480 ; d += 40 )
 8005a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a30:	3328      	adds	r3, #40	; 0x28
 8005a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a36:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005a3a:	dbe9      	blt.n	8005a10 <test_scope+0x138>
				}
				lcd_rect( 480/2+240, 0, 1, 320, 0x55555555 );
 8005a3c:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005a46:	2201      	movs	r2, #1
 8005a48:	2100      	movs	r1, #0
 8005a4a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005a4e:	f7fc f8ed 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005a52:	2300      	movs	r3, #0
 8005a54:	647b      	str	r3, [r7, #68]	; 0x44
 8005a56:	e00c      	b.n	8005a72 <test_scope+0x19a>
				{
					lcd_rect( 0/2+240, d, 480, 1, 0x55555555 );
 8005a58:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a66:	20f0      	movs	r0, #240	; 0xf0
 8005a68:	f7fc f8e0 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6e:	3328      	adds	r3, #40	; 0x28
 8005a70:	647b      	str	r3, [r7, #68]	; 0x44
 8005a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a74:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005a78:	dbee      	blt.n	8005a58 <test_scope+0x180>
				}
				lcd_rect( 0/2+240, 320, 480, 1, 0x55555555 );
 8005a7a:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2301      	movs	r3, #1
 8005a82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a8a:	20f0      	movs	r0, #240	; 0xf0
 8005a8c:	f7fc f8ce 	bl	8001c2c <lcd_rect>

				lcd_rect( 0/2+240, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8005a90:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2301      	movs	r3, #1
 8005a98:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a9c:	2164      	movs	r1, #100	; 0x64
 8005a9e:	20f0      	movs	r0, #240	; 0xf0
 8005aa0:	f7fc f8c4 	bl	8001c2c <lcd_rect>
 8005aa4:	e047      	b.n	8005b36 <test_scope+0x25e>
			}
			else
			{
				for( int d = 0 ; d < 480 ; d += 40 )
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aaa:	e00c      	b.n	8005ac6 <test_scope+0x1ee>
				{
					lcd_rect( d, 0, 1, 320, 0x55555555 );
 8005aac:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	2100      	movs	r1, #0
 8005aba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005abc:	f7fc f8b6 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 480 ; d += 40 )
 8005ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac2:	3328      	adds	r3, #40	; 0x28
 8005ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005acc:	dbee      	blt.n	8005aac <test_scope+0x1d4>
				}
				lcd_rect( 480, 0, 1, 320, 0x55555555 );
 8005ace:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005ad8:	2201      	movs	r2, #1
 8005ada:	2100      	movs	r1, #0
 8005adc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005ae0:	f7fc f8a4 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae8:	e00c      	b.n	8005b04 <test_scope+0x22c>
				{
					lcd_rect( 0, d, 480, 1, 0x55555555 );
 8005aea:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2301      	movs	r3, #1
 8005af2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005af6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005af8:	2000      	movs	r0, #0
 8005afa:	f7fc f897 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	3328      	adds	r3, #40	; 0x28
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b0a:	dbee      	blt.n	8005aea <test_scope+0x212>
				}
				lcd_rect( 0, 320, 480, 1, 0x55555555 );
 8005b0c:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2301      	movs	r3, #1
 8005b14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005b18:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f7fc f885 	bl	8001c2c <lcd_rect>

				lcd_rect( 0, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8005b22:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	2000      	movs	r0, #0
 8005b32:	f7fc f87b 	bl	8001c2c <lcd_rect>

		}


		scope_init( &scope, 2048, 1000000,
				(i&0x01)?buffer1:buffer5,
 8005b36:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <test_scope+0x2dc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <test_scope+0x26e>
 8005b42:	481d      	ldr	r0, [pc, #116]	; (8005bb8 <test_scope+0x2e0>)
 8005b44:	e000      	b.n	8005b48 <test_scope+0x270>
 8005b46:	481d      	ldr	r0, [pc, #116]	; (8005bbc <test_scope+0x2e4>)
				(i&0x01)?buffer2:buffer6,
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <test_scope+0x2dc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <test_scope+0x280>
 8005b54:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <test_scope+0x2e8>)
 8005b56:	e000      	b.n	8005b5a <test_scope+0x282>
 8005b58:	4b1a      	ldr	r3, [pc, #104]	; (8005bc4 <test_scope+0x2ec>)
				(i&0x01)?buffer3:buffer7,
 8005b5a:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <test_scope+0x2dc>)
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	f002 0201 	and.w	r2, r2, #1
		scope_init( &scope, 2048, 1000000,
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d001      	beq.n	8005b6a <test_scope+0x292>
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <test_scope+0x2f0>)
 8005b68:	e000      	b.n	8005b6c <test_scope+0x294>
 8005b6a:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <test_scope+0x2f4>)
				(i&0x01)?buffer4:buffer8,
 8005b6c:	4911      	ldr	r1, [pc, #68]	; (8005bb4 <test_scope+0x2dc>)
 8005b6e:	6809      	ldr	r1, [r1, #0]
 8005b70:	f001 0101 	and.w	r1, r1, #1
		scope_init( &scope, 2048, 1000000,
 8005b74:	2900      	cmp	r1, #0
 8005b76:	d02d      	beq.n	8005bd4 <test_scope+0x2fc>
 8005b78:	4915      	ldr	r1, [pc, #84]	; (8005bd0 <test_scope+0x2f8>)
 8005b7a:	e02c      	b.n	8005bd6 <test_scope+0x2fe>
 8005b7c:	f3af 8000 	nop.w
 8005b80:	54442d18 	.word	0x54442d18
 8005b84:	400921fb 	.word	0x400921fb
 8005b88:	2001178c 	.word	0x2001178c
 8005b8c:	40400000 	.word	0x40400000
 8005b90:	40900000 	.word	0x40900000
 8005b94:	447fc000 	.word	0x447fc000
 8005b98:	45000000 	.word	0x45000000
 8005b9c:	20011790 	.word	0x20011790
 8005ba0:	20011f90 	.word	0x20011f90
 8005ba4:	e0042000 	.word	0xe0042000
 8005ba8:	200006a8 	.word	0x200006a8
 8005bac:	200168f8 	.word	0x200168f8
 8005bb0:	200167ec 	.word	0x200167ec
 8005bb4:	200167f0 	.word	0x200167f0
 8005bb8:	20012790 	.word	0x20012790
 8005bbc:	20014790 	.word	0x20014790
 8005bc0:	20012f90 	.word	0x20012f90
 8005bc4:	20014f90 	.word	0x20014f90
 8005bc8:	20013790 	.word	0x20013790
 8005bcc:	20015790 	.word	0x20015790
 8005bd0:	20013f90 	.word	0x20013f90
 8005bd4:	49af      	ldr	r1, [pc, #700]	; (8005e94 <test_scope+0x5bc>)
 8005bd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005bda:	9403      	str	r4, [sp, #12]
 8005bdc:	9102      	str	r1, [sp, #8]
 8005bde:	9201      	str	r2, [sp, #4]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	4603      	mov	r3, r0
 8005be4:	f244 2240 	movw	r2, #16960	; 0x4240
 8005be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bec:	48aa      	ldr	r0, [pc, #680]	; (8005e98 <test_scope+0x5c0>)
 8005bee:	f7ff fbb7 	bl	8005360 <scope_init>
				BUFFER_LEN );
		scope_start( &scope );
 8005bf2:	48a9      	ldr	r0, [pc, #676]	; (8005e98 <test_scope+0x5c0>)
 8005bf4:	f7ff fc18 	bl	8005428 <scope_start>
		while( scope_is_busy( &scope ) );
 8005bf8:	bf00      	nop
 8005bfa:	48a7      	ldr	r0, [pc, #668]	; (8005e98 <test_scope+0x5c0>)
 8005bfc:	f7ff fd1b 	bl	8005636 <scope_is_busy>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f9      	bne.n	8005bfa <test_scope+0x322>
		scope_stop( &scope );
 8005c06:	48a4      	ldr	r0, [pc, #656]	; (8005e98 <test_scope+0x5c0>)
 8005c08:	f7ff fce6 	bl	80055d8 <scope_stop>

		int32_t trigger = scope_get_trigger( &scope ) - BUFFER_LEN/2;
 8005c0c:	48a2      	ldr	r0, [pc, #648]	; (8005e98 <test_scope+0x5c0>)
 8005c0e:	f7ff fd23 	bl	8005658 <scope_get_trigger>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24

		//printf( "data%d = np.array( [", i );
		for( int jj = 0; jj < 480; jj++ )
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c1e:	e3c7      	b.n	80063b0 <test_scope+0xad8>
		//for( int jj = 0; jj < BUFFER_LEN; jj++ )
		{
			int j = (jj*BUFFER_LEN)/480.0;
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fa fca5 	bl	8000574 <__aeabi_i2d>
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	4b9b      	ldr	r3, [pc, #620]	; (8005e9c <test_scope+0x5c4>)
 8005c30:	f7fa fe34 	bl	800089c <__aeabi_ddiv>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f7fa ffb4 	bl	8000ba8 <__aeabi_d2iz>
 8005c40:	4603      	mov	r3, r0
 8005c42:	623b      	str	r3, [r7, #32]
			//int j = jj;
			int n = trigger + j;
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	4413      	add	r3, r2
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
			if( n < 0 )
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	da04      	bge.n	8005c5c <test_scope+0x384>
			{
				n += BUFFER_LEN;
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5a:	e007      	b.n	8005c6c <test_scope+0x394>
			}
			else if( n >= BUFFER_LEN )
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c62:	db03      	blt.n	8005c6c <test_scope+0x394>
			{
				n -= BUFFER_LEN;
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
			}

			int n2 = trigger_bck + j;
 8005c6c:	4b8c      	ldr	r3, [pc, #560]	; (8005ea0 <test_scope+0x5c8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	4413      	add	r3, r2
 8005c74:	633b      	str	r3, [r7, #48]	; 0x30
			if( n2 < 0 )
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da04      	bge.n	8005c86 <test_scope+0x3ae>
			{
				n2 += BUFFER_LEN;
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30
 8005c84:	e007      	b.n	8005c96 <test_scope+0x3be>
			}
			else if( n2 >= BUFFER_LEN )
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8c:	db03      	blt.n	8005c96 <test_scope+0x3be>
			{
				n2 -= BUFFER_LEN;
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005c94:	633b      	str	r3, [r7, #48]	; 0x30
			}
			//printf( "%d, ", buffer[n] );

			if( collapsed )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 81dc 	beq.w	8006056 <test_scope+0x77e>
			{
				int x0, y0, y1;
				x0 = jj;//(j*480)/BUFFER_LEN;
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	613b      	str	r3, [r7, #16]
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8005ca2:	4b80      	ldr	r3, [pc, #512]	; (8005ea4 <test_scope+0x5cc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <test_scope+0x3fa>
 8005cae:	4a7e      	ldr	r2, [pc, #504]	; (8005ea8 <test_scope+0x5d0>)
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	019b      	lsls	r3, r3, #6
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	da01      	bge.n	8005cc8 <test_scope+0x3f0>
 8005cc4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005cc8:	131b      	asrs	r3, r3, #12
 8005cca:	425b      	negs	r3, r3
 8005ccc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005cd0:	e010      	b.n	8005cf4 <test_scope+0x41c>
 8005cd2:	4a76      	ldr	r2, [pc, #472]	; (8005eac <test_scope+0x5d4>)
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	019b      	lsls	r3, r3, #6
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	da01      	bge.n	8005cec <test_scope+0x414>
 8005ce8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005cec:	131b      	asrs	r3, r3, #12
 8005cee:	425b      	negs	r3, r3
 8005cf0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005cf4:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 8005cf6:	4b6b      	ldr	r3, [pc, #428]	; (8005ea4 <test_scope+0x5cc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d011      	beq.n	8005d26 <test_scope+0x44e>
 8005d02:	4a6a      	ldr	r2, [pc, #424]	; (8005eac <test_scope+0x5d4>)
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	019b      	lsls	r3, r3, #6
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da01      	bge.n	8005d1c <test_scope+0x444>
 8005d18:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005d1c:	131b      	asrs	r3, r3, #12
 8005d1e:	425b      	negs	r3, r3
 8005d20:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d24:	e010      	b.n	8005d48 <test_scope+0x470>
 8005d26:	4a60      	ldr	r2, [pc, #384]	; (8005ea8 <test_scope+0x5d0>)
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	019b      	lsls	r3, r3, #6
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da01      	bge.n	8005d40 <test_scope+0x468>
 8005d3c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005d40:	131b      	asrs	r3, r3, #12
 8005d42:	425b      	negs	r3, r3
 8005d44:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d48:	60bb      	str	r3, [r7, #8]
				extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	0fda      	lsrs	r2, r3, #31
 8005d4e:	4413      	add	r3, r2
 8005d50:	105b      	asrs	r3, r3, #1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	33f0      	adds	r3, #240	; 0xf0
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	b21b      	sxth	r3, r3
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	b211      	sxth	r1, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fc f855 	bl	8001e10 <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x0001C007 );
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	0fda      	lsrs	r2, r3, #31
 8005d6a:	4413      	add	r3, r2
 8005d6c:	105b      	asrs	r3, r3, #1
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	33f0      	adds	r3, #240	; 0xf0
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	b21b      	sxth	r3, r3
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	b211      	sxth	r1, r2
 8005d7a:	4a4d      	ldr	r2, [pc, #308]	; (8005eb0 <test_scope+0x5d8>)
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fc f847 	bl	8001e10 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8005d82:	4b48      	ldr	r3, [pc, #288]	; (8005ea4 <test_scope+0x5cc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d011      	beq.n	8005db2 <test_scope+0x4da>
 8005d8e:	4a49      	ldr	r2, [pc, #292]	; (8005eb4 <test_scope+0x5dc>)
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d96:	461a      	mov	r2, r3
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	019b      	lsls	r3, r3, #6
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da01      	bge.n	8005da8 <test_scope+0x4d0>
 8005da4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005da8:	131b      	asrs	r3, r3, #12
 8005daa:	425b      	negs	r3, r3
 8005dac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005db0:	e010      	b.n	8005dd4 <test_scope+0x4fc>
 8005db2:	4a41      	ldr	r2, [pc, #260]	; (8005eb8 <test_scope+0x5e0>)
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	019b      	lsls	r3, r3, #6
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da01      	bge.n	8005dcc <test_scope+0x4f4>
 8005dc8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005dcc:	131b      	asrs	r3, r3, #12
 8005dce:	425b      	negs	r3, r3
 8005dd0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005dd4:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 8005dd6:	4b33      	ldr	r3, [pc, #204]	; (8005ea4 <test_scope+0x5cc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <test_scope+0x52e>
 8005de2:	4a35      	ldr	r2, [pc, #212]	; (8005eb8 <test_scope+0x5e0>)
 8005de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dea:	461a      	mov	r2, r3
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	019b      	lsls	r3, r3, #6
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	da01      	bge.n	8005dfc <test_scope+0x524>
 8005df8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005dfc:	131b      	asrs	r3, r3, #12
 8005dfe:	425b      	negs	r3, r3
 8005e00:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e04:	e010      	b.n	8005e28 <test_scope+0x550>
 8005e06:	4a2b      	ldr	r2, [pc, #172]	; (8005eb4 <test_scope+0x5dc>)
 8005e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	019b      	lsls	r3, r3, #6
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da01      	bge.n	8005e20 <test_scope+0x548>
 8005e1c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005e20:	131b      	asrs	r3, r3, #12
 8005e22:	425b      	negs	r3, r3
 8005e24:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e28:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	0fda      	lsrs	r2, r3, #31
 8005e2e:	4413      	add	r3, r2
 8005e30:	105b      	asrs	r3, r3, #1
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	33f0      	adds	r3, #240	; 0xf0
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	b21b      	sxth	r3, r3
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	b211      	sxth	r1, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fb ffe5 	bl	8001e10 <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x00003F00 );
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	0fda      	lsrs	r2, r3, #31
 8005e4a:	4413      	add	r3, r2
 8005e4c:	105b      	asrs	r3, r3, #1
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	33f0      	adds	r3, #240	; 0xf0
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	b211      	sxth	r1, r2
 8005e5a:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fb ffd6 	bl	8001e10 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8005e64:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <test_scope+0x5cc>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d027      	beq.n	8005ec0 <test_scope+0x5e8>
 8005e70:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <test_scope+0x5e4>)
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	019b      	lsls	r3, r3, #6
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da01      	bge.n	8005e8a <test_scope+0x5b2>
 8005e86:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005e8a:	131b      	asrs	r3, r3, #12
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e92:	e026      	b.n	8005ee2 <test_scope+0x60a>
 8005e94:	20015f90 	.word	0x20015f90
 8005e98:	20016790 	.word	0x20016790
 8005e9c:	407e0000 	.word	0x407e0000
 8005ea0:	200167f4 	.word	0x200167f4
 8005ea4:	200167f0 	.word	0x200167f0
 8005ea8:	20014790 	.word	0x20014790
 8005eac:	20012790 	.word	0x20012790
 8005eb0:	0001c007 	.word	0x0001c007
 8005eb4:	20014f90 	.word	0x20014f90
 8005eb8:	20012f90 	.word	0x20012f90
 8005ebc:	20015790 	.word	0x20015790
 8005ec0:	4ab9      	ldr	r2, [pc, #740]	; (80061a8 <test_scope+0x8d0>)
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	019b      	lsls	r3, r3, #6
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da01      	bge.n	8005eda <test_scope+0x602>
 8005ed6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005eda:	131b      	asrs	r3, r3, #12
 8005edc:	425b      	negs	r3, r3
 8005ede:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ee2:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8005ee4:	4bb1      	ldr	r3, [pc, #708]	; (80061ac <test_scope+0x8d4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d011      	beq.n	8005f14 <test_scope+0x63c>
 8005ef0:	4aad      	ldr	r2, [pc, #692]	; (80061a8 <test_scope+0x8d0>)
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	019b      	lsls	r3, r3, #6
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	da01      	bge.n	8005f0a <test_scope+0x632>
 8005f06:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f0a:	131b      	asrs	r3, r3, #12
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f12:	e010      	b.n	8005f36 <test_scope+0x65e>
 8005f14:	4aa6      	ldr	r2, [pc, #664]	; (80061b0 <test_scope+0x8d8>)
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	019b      	lsls	r3, r3, #6
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da01      	bge.n	8005f2e <test_scope+0x656>
 8005f2a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f2e:	131b      	asrs	r3, r3, #12
 8005f30:	425b      	negs	r3, r3
 8005f32:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f36:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	0fda      	lsrs	r2, r3, #31
 8005f3c:	4413      	add	r3, r2
 8005f3e:	105b      	asrs	r3, r3, #1
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	33f0      	adds	r3, #240	; 0xf0
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	b21b      	sxth	r3, r3
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	b211      	sxth	r1, r2
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fb ff5e 	bl	8001e10 <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x000001F8 );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	0fda      	lsrs	r2, r3, #31
 8005f58:	4413      	add	r3, r2
 8005f5a:	105b      	asrs	r3, r3, #1
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	33f0      	adds	r3, #240	; 0xf0
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b21b      	sxth	r3, r3
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	b211      	sxth	r1, r2
 8005f68:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fb ff4f 	bl	8001e10 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8005f72:	4b8e      	ldr	r3, [pc, #568]	; (80061ac <test_scope+0x8d4>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d011      	beq.n	8005fa2 <test_scope+0x6ca>
 8005f7e:	4a8d      	ldr	r2, [pc, #564]	; (80061b4 <test_scope+0x8dc>)
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f86:	461a      	mov	r2, r3
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	019b      	lsls	r3, r3, #6
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da01      	bge.n	8005f98 <test_scope+0x6c0>
 8005f94:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f98:	131b      	asrs	r3, r3, #12
 8005f9a:	425b      	negs	r3, r3
 8005f9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005fa0:	e010      	b.n	8005fc4 <test_scope+0x6ec>
 8005fa2:	4a85      	ldr	r2, [pc, #532]	; (80061b8 <test_scope+0x8e0>)
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005faa:	461a      	mov	r2, r3
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	019b      	lsls	r3, r3, #6
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da01      	bge.n	8005fbc <test_scope+0x6e4>
 8005fb8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005fbc:	131b      	asrs	r3, r3, #12
 8005fbe:	425b      	negs	r3, r3
 8005fc0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005fc4:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8005fc6:	4b79      	ldr	r3, [pc, #484]	; (80061ac <test_scope+0x8d4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <test_scope+0x71e>
 8005fd2:	4a79      	ldr	r2, [pc, #484]	; (80061b8 <test_scope+0x8e0>)
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	019b      	lsls	r3, r3, #6
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da01      	bge.n	8005fec <test_scope+0x714>
 8005fe8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005fec:	131b      	asrs	r3, r3, #12
 8005fee:	425b      	negs	r3, r3
 8005ff0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ff4:	e010      	b.n	8006018 <test_scope+0x740>
 8005ff6:	4a6f      	ldr	r2, [pc, #444]	; (80061b4 <test_scope+0x8dc>)
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ffe:	461a      	mov	r2, r3
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	019b      	lsls	r3, r3, #6
 8006008:	2b00      	cmp	r3, #0
 800600a:	da01      	bge.n	8006010 <test_scope+0x738>
 800600c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006010:	131b      	asrs	r3, r3, #12
 8006012:	425b      	negs	r3, r3
 8006014:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006018:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	0fda      	lsrs	r2, r3, #31
 800601e:	4413      	add	r3, r2
 8006020:	105b      	asrs	r3, r3, #1
 8006022:	b29b      	uxth	r3, r3
 8006024:	33f0      	adds	r3, #240	; 0xf0
 8006026:	b29b      	uxth	r3, r3
 8006028:	b21b      	sxth	r3, r3
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	b211      	sxth	r1, r2
 800602e:	2200      	movs	r2, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f7fb feed 	bl	8001e10 <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0xFFFFFFFF );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	0fda      	lsrs	r2, r3, #31
 800603a:	4413      	add	r3, r2
 800603c:	105b      	asrs	r3, r3, #1
 800603e:	b29b      	uxth	r3, r3
 8006040:	33f0      	adds	r3, #240	; 0xf0
 8006042:	b29b      	uxth	r3, r3
 8006044:	b21b      	sxth	r3, r3
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	b211      	sxth	r1, r2
 800604a:	f04f 32ff 	mov.w	r2, #4294967295
 800604e:	4618      	mov	r0, r3
 8006050:	f7fb fede 	bl	8001e10 <lcd_set_pixel>
 8006054:	e1a9      	b.n	80063aa <test_scope+0xad2>
			}
			else
			{
				int x0, y0, y1;
				x0 = jj;//(j*480)/BUFFER_LEN;
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	61fb      	str	r3, [r7, #28]
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 800605a:	4b54      	ldr	r3, [pc, #336]	; (80061ac <test_scope+0x8d4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d011      	beq.n	800608a <test_scope+0x7b2>
 8006066:	4a55      	ldr	r2, [pc, #340]	; (80061bc <test_scope+0x8e4>)
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800606e:	461a      	mov	r2, r3
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	019b      	lsls	r3, r3, #6
 8006078:	2b00      	cmp	r3, #0
 800607a:	da01      	bge.n	8006080 <test_scope+0x7a8>
 800607c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006080:	131b      	asrs	r3, r3, #12
 8006082:	425b      	negs	r3, r3
 8006084:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006088:	e010      	b.n	80060ac <test_scope+0x7d4>
 800608a:	4a4d      	ldr	r2, [pc, #308]	; (80061c0 <test_scope+0x8e8>)
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006092:	461a      	mov	r2, r3
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	019b      	lsls	r3, r3, #6
 800609c:	2b00      	cmp	r3, #0
 800609e:	da01      	bge.n	80060a4 <test_scope+0x7cc>
 80060a0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80060a4:	131b      	asrs	r3, r3, #12
 80060a6:	425b      	negs	r3, r3
 80060a8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80060ac:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 80060ae:	4b3f      	ldr	r3, [pc, #252]	; (80061ac <test_scope+0x8d4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d011      	beq.n	80060de <test_scope+0x806>
 80060ba:	4a41      	ldr	r2, [pc, #260]	; (80061c0 <test_scope+0x8e8>)
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c2:	461a      	mov	r2, r3
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	019b      	lsls	r3, r3, #6
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	da01      	bge.n	80060d4 <test_scope+0x7fc>
 80060d0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80060d4:	131b      	asrs	r3, r3, #12
 80060d6:	425b      	negs	r3, r3
 80060d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80060dc:	e010      	b.n	8006100 <test_scope+0x828>
 80060de:	4a37      	ldr	r2, [pc, #220]	; (80061bc <test_scope+0x8e4>)
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060e6:	461a      	mov	r2, r3
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	019b      	lsls	r3, r3, #6
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	da01      	bge.n	80060f8 <test_scope+0x820>
 80060f4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80060f8:	131b      	asrs	r3, r3, #12
 80060fa:	425b      	negs	r3, r3
 80060fc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006100:	617b      	str	r3, [r7, #20]
				extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
				lcd_set_pixel( x0, y0, 0x00000000 );
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	b21b      	sxth	r3, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	b211      	sxth	r1, r2
 800610a:	2200      	movs	r2, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f7fb fe7f 	bl	8001e10 <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x0001C007 );
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	b21b      	sxth	r3, r3
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	b211      	sxth	r1, r2
 800611a:	4a2a      	ldr	r2, [pc, #168]	; (80061c4 <test_scope+0x8ec>)
 800611c:	4618      	mov	r0, r3
 800611e:	f7fb fe77 	bl	8001e10 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8006122:	4b22      	ldr	r3, [pc, #136]	; (80061ac <test_scope+0x8d4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d011      	beq.n	8006152 <test_scope+0x87a>
 800612e:	4a26      	ldr	r2, [pc, #152]	; (80061c8 <test_scope+0x8f0>)
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006136:	461a      	mov	r2, r3
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	019b      	lsls	r3, r3, #6
 8006140:	2b00      	cmp	r3, #0
 8006142:	da01      	bge.n	8006148 <test_scope+0x870>
 8006144:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006148:	131b      	asrs	r3, r3, #12
 800614a:	425b      	negs	r3, r3
 800614c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006150:	e010      	b.n	8006174 <test_scope+0x89c>
 8006152:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <test_scope+0x8f4>)
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800615a:	461a      	mov	r2, r3
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	019b      	lsls	r3, r3, #6
 8006164:	2b00      	cmp	r3, #0
 8006166:	da01      	bge.n	800616c <test_scope+0x894>
 8006168:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800616c:	131b      	asrs	r3, r3, #12
 800616e:	425b      	negs	r3, r3
 8006170:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006174:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 8006176:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <test_scope+0x8d4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d026      	beq.n	80061d0 <test_scope+0x8f8>
 8006182:	4a12      	ldr	r2, [pc, #72]	; (80061cc <test_scope+0x8f4>)
 8006184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800618a:	461a      	mov	r2, r3
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	019b      	lsls	r3, r3, #6
 8006194:	2b00      	cmp	r3, #0
 8006196:	da01      	bge.n	800619c <test_scope+0x8c4>
 8006198:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800619c:	131b      	asrs	r3, r3, #12
 800619e:	425b      	negs	r3, r3
 80061a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061a4:	e025      	b.n	80061f2 <test_scope+0x91a>
 80061a6:	bf00      	nop
 80061a8:	20013790 	.word	0x20013790
 80061ac:	200167f0 	.word	0x200167f0
 80061b0:	20015790 	.word	0x20015790
 80061b4:	20015f90 	.word	0x20015f90
 80061b8:	20013f90 	.word	0x20013f90
 80061bc:	20014790 	.word	0x20014790
 80061c0:	20012790 	.word	0x20012790
 80061c4:	0001c007 	.word	0x0001c007
 80061c8:	20014f90 	.word	0x20014f90
 80061cc:	20012f90 	.word	0x20012f90
 80061d0:	4a80      	ldr	r2, [pc, #512]	; (80063d4 <test_scope+0xafc>)
 80061d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d8:	461a      	mov	r2, r3
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	019b      	lsls	r3, r3, #6
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da01      	bge.n	80061ea <test_scope+0x912>
 80061e6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80061ea:	131b      	asrs	r3, r3, #12
 80061ec:	425b      	negs	r3, r3
 80061ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061f2:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	b21b      	sxth	r3, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	b211      	sxth	r1, r2
 80061fc:	2200      	movs	r2, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fb fe06 	bl	8001e10 <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x00003F00 );
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	b21b      	sxth	r3, r3
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	b211      	sxth	r1, r2
 800620c:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8006210:	4618      	mov	r0, r3
 8006212:	f7fb fdfd 	bl	8001e10 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8006216:	4b70      	ldr	r3, [pc, #448]	; (80063d8 <test_scope+0xb00>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d011      	beq.n	8006246 <test_scope+0x96e>
 8006222:	4a6e      	ldr	r2, [pc, #440]	; (80063dc <test_scope+0xb04>)
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622a:	461a      	mov	r2, r3
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	019b      	lsls	r3, r3, #6
 8006234:	2b00      	cmp	r3, #0
 8006236:	da01      	bge.n	800623c <test_scope+0x964>
 8006238:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800623c:	131b      	asrs	r3, r3, #12
 800623e:	425b      	negs	r3, r3
 8006240:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006244:	e010      	b.n	8006268 <test_scope+0x990>
 8006246:	4a66      	ldr	r2, [pc, #408]	; (80063e0 <test_scope+0xb08>)
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800624e:	461a      	mov	r2, r3
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	019b      	lsls	r3, r3, #6
 8006258:	2b00      	cmp	r3, #0
 800625a:	da01      	bge.n	8006260 <test_scope+0x988>
 800625c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006260:	131b      	asrs	r3, r3, #12
 8006262:	425b      	negs	r3, r3
 8006264:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006268:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 800626a:	4b5b      	ldr	r3, [pc, #364]	; (80063d8 <test_scope+0xb00>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <test_scope+0x9c2>
 8006276:	4a5a      	ldr	r2, [pc, #360]	; (80063e0 <test_scope+0xb08>)
 8006278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800627e:	461a      	mov	r2, r3
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	019b      	lsls	r3, r3, #6
 8006288:	2b00      	cmp	r3, #0
 800628a:	da01      	bge.n	8006290 <test_scope+0x9b8>
 800628c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006290:	131b      	asrs	r3, r3, #12
 8006292:	425b      	negs	r3, r3
 8006294:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006298:	e010      	b.n	80062bc <test_scope+0x9e4>
 800629a:	4a50      	ldr	r2, [pc, #320]	; (80063dc <test_scope+0xb04>)
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a2:	461a      	mov	r2, r3
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	019b      	lsls	r3, r3, #6
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	da01      	bge.n	80062b4 <test_scope+0x9dc>
 80062b0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80062b4:	131b      	asrs	r3, r3, #12
 80062b6:	425b      	negs	r3, r3
 80062b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80062bc:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	b21b      	sxth	r3, r3
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	b211      	sxth	r1, r2
 80062c6:	2200      	movs	r2, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fb fda1 	bl	8001e10 <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x000001F8 );
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	b21b      	sxth	r3, r3
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	b211      	sxth	r1, r2
 80062d6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fb fd98 	bl	8001e10 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 80062e0:	4b3d      	ldr	r3, [pc, #244]	; (80063d8 <test_scope+0xb00>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d011      	beq.n	8006310 <test_scope+0xa38>
 80062ec:	4a3d      	ldr	r2, [pc, #244]	; (80063e4 <test_scope+0xb0c>)
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f4:	461a      	mov	r2, r3
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	019b      	lsls	r3, r3, #6
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da01      	bge.n	8006306 <test_scope+0xa2e>
 8006302:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006306:	131b      	asrs	r3, r3, #12
 8006308:	425b      	negs	r3, r3
 800630a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800630e:	e010      	b.n	8006332 <test_scope+0xa5a>
 8006310:	4a35      	ldr	r2, [pc, #212]	; (80063e8 <test_scope+0xb10>)
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006318:	461a      	mov	r2, r3
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	019b      	lsls	r3, r3, #6
 8006322:	2b00      	cmp	r3, #0
 8006324:	da01      	bge.n	800632a <test_scope+0xa52>
 8006326:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800632a:	131b      	asrs	r3, r3, #12
 800632c:	425b      	negs	r3, r3
 800632e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006332:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8006334:	4b28      	ldr	r3, [pc, #160]	; (80063d8 <test_scope+0xb00>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d011      	beq.n	8006364 <test_scope+0xa8c>
 8006340:	4a29      	ldr	r2, [pc, #164]	; (80063e8 <test_scope+0xb10>)
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006348:	461a      	mov	r2, r3
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	019b      	lsls	r3, r3, #6
 8006352:	2b00      	cmp	r3, #0
 8006354:	da01      	bge.n	800635a <test_scope+0xa82>
 8006356:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800635a:	131b      	asrs	r3, r3, #12
 800635c:	425b      	negs	r3, r3
 800635e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006362:	e010      	b.n	8006386 <test_scope+0xaae>
 8006364:	4a1f      	ldr	r2, [pc, #124]	; (80063e4 <test_scope+0xb0c>)
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800636c:	461a      	mov	r2, r3
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	019b      	lsls	r3, r3, #6
 8006376:	2b00      	cmp	r3, #0
 8006378:	da01      	bge.n	800637e <test_scope+0xaa6>
 800637a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800637e:	131b      	asrs	r3, r3, #12
 8006380:	425b      	negs	r3, r3
 8006382:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006386:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	b21b      	sxth	r3, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	b211      	sxth	r1, r2
 8006390:	2200      	movs	r2, #0
 8006392:	4618      	mov	r0, r3
 8006394:	f7fb fd3c 	bl	8001e10 <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0xFFFFFFFF );
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	b21b      	sxth	r3, r3
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	b211      	sxth	r1, r2
 80063a0:	f04f 32ff 	mov.w	r2, #4294967295
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fb fd33 	bl	8001e10 <lcd_set_pixel>
		for( int jj = 0; jj < 480; jj++ )
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	3301      	adds	r3, #1
 80063ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80063b6:	f6ff ac33 	blt.w	8005c20 <test_scope+0x348>

		}

		//lcd_rect( 240, 0, 1, 320, 0xFFFFFF00 );
		//printf( "], dtype=np.float32 )\n" );
		i += 1;
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <test_scope+0xb00>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	4a05      	ldr	r2, [pc, #20]	; (80063d8 <test_scope+0xb00>)
 80063c2:	6013      	str	r3, [r2, #0]
		trigger_bck = trigger;
 80063c4:	4a09      	ldr	r2, [pc, #36]	; (80063ec <test_scope+0xb14>)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	6013      	str	r3, [r2, #0]
		//HAL_Delay( 10 );
	}
}
 80063ca:	bf00      	nop
 80063cc:	3750      	adds	r7, #80	; 0x50
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bdb0      	pop	{r4, r5, r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20014f90 	.word	0x20014f90
 80063d8:	200167f0 	.word	0x200167f0
 80063dc:	20015790 	.word	0x20015790
 80063e0:	20013790 	.word	0x20013790
 80063e4:	20015f90 	.word	0x20015f90
 80063e8:	20013f90 	.word	0x20013f90
 80063ec:	200167f4 	.word	0x200167f4

080063f0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80063f4:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <MX_SPI3_Init+0x74>)
 80063f6:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <MX_SPI3_Init+0x78>)
 80063f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <MX_SPI3_Init+0x74>)
 80063fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006400:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006402:	4b18      	ldr	r3, [pc, #96]	; (8006464 <MX_SPI3_Init+0x74>)
 8006404:	2200      	movs	r2, #0
 8006406:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006408:	4b16      	ldr	r3, [pc, #88]	; (8006464 <MX_SPI3_Init+0x74>)
 800640a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800640e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006410:	4b14      	ldr	r3, [pc, #80]	; (8006464 <MX_SPI3_Init+0x74>)
 8006412:	2200      	movs	r2, #0
 8006414:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006416:	4b13      	ldr	r3, [pc, #76]	; (8006464 <MX_SPI3_Init+0x74>)
 8006418:	2200      	movs	r2, #0
 800641a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800641c:	4b11      	ldr	r3, [pc, #68]	; (8006464 <MX_SPI3_Init+0x74>)
 800641e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006422:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006424:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <MX_SPI3_Init+0x74>)
 8006426:	2230      	movs	r2, #48	; 0x30
 8006428:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800642a:	4b0e      	ldr	r3, [pc, #56]	; (8006464 <MX_SPI3_Init+0x74>)
 800642c:	2200      	movs	r2, #0
 800642e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <MX_SPI3_Init+0x74>)
 8006432:	2200      	movs	r2, #0
 8006434:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <MX_SPI3_Init+0x74>)
 8006438:	2200      	movs	r2, #0
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <MX_SPI3_Init+0x74>)
 800643e:	2207      	movs	r2, #7
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006442:	4b08      	ldr	r3, [pc, #32]	; (8006464 <MX_SPI3_Init+0x74>)
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <MX_SPI3_Init+0x74>)
 800644a:	2200      	movs	r2, #0
 800644c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800644e:	4805      	ldr	r0, [pc, #20]	; (8006464 <MX_SPI3_Init+0x74>)
 8006450:	f005 fc9e 	bl	800bd90 <HAL_SPI_Init>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800645a:	f7fe fcc4 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	200167f8 	.word	0x200167f8
 8006468:	40003c00 	.word	0x40003c00

0800646c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006474:	f107 0314 	add.w	r3, r7, #20
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <HAL_SPI_MspInit+0x7c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d128      	bne.n	80064e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800648e:	4b17      	ldr	r3, [pc, #92]	; (80064ec <HAL_SPI_MspInit+0x80>)
 8006490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006492:	4a16      	ldr	r2, [pc, #88]	; (80064ec <HAL_SPI_MspInit+0x80>)
 8006494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006498:	6593      	str	r3, [r2, #88]	; 0x58
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <HAL_SPI_MspInit+0x80>)
 800649c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <HAL_SPI_MspInit+0x80>)
 80064a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064aa:	4a10      	ldr	r2, [pc, #64]	; (80064ec <HAL_SPI_MspInit+0x80>)
 80064ac:	f043 0304 	orr.w	r3, r3, #4
 80064b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064b2:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <HAL_SPI_MspInit+0x80>)
 80064b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80064be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80064c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c4:	2302      	movs	r3, #2
 80064c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064cc:	2300      	movs	r3, #0
 80064ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80064d0:	2306      	movs	r3, #6
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064d4:	f107 0314 	add.w	r3, r7, #20
 80064d8:	4619      	mov	r1, r3
 80064da:	4805      	ldr	r0, [pc, #20]	; (80064f0 <HAL_SPI_MspInit+0x84>)
 80064dc:	f003 fed8 	bl	800a290 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80064e0:	bf00      	nop
 80064e2:	3728      	adds	r7, #40	; 0x28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40003c00 	.word	0x40003c00
 80064ec:	40021000 	.word	0x40021000
 80064f0:	48000800 	.word	0x48000800

080064f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064fa:	4b10      	ldr	r3, [pc, #64]	; (800653c <HAL_MspInit+0x48>)
 80064fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fe:	4a0f      	ldr	r2, [pc, #60]	; (800653c <HAL_MspInit+0x48>)
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	6613      	str	r3, [r2, #96]	; 0x60
 8006506:	4b0d      	ldr	r3, [pc, #52]	; (800653c <HAL_MspInit+0x48>)
 8006508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	607b      	str	r3, [r7, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006512:	4b0a      	ldr	r3, [pc, #40]	; (800653c <HAL_MspInit+0x48>)
 8006514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <HAL_MspInit+0x48>)
 8006518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651c:	6593      	str	r3, [r2, #88]	; 0x58
 800651e:	4b07      	ldr	r3, [pc, #28]	; (800653c <HAL_MspInit+0x48>)
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800652a:	f000 fb97 	bl	8006c5c <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800652e:	2002      	movs	r0, #2
 8006530:	f000 fb80 	bl	8006c34 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40021000 	.word	0x40021000

08006540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006544:	e7fe      	b.n	8006544 <NMI_Handler+0x4>

08006546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006546:	b480      	push	{r7}
 8006548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800654a:	e7fe      	b.n	800654a <HardFault_Handler+0x4>

0800654c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006550:	e7fe      	b.n	8006550 <MemManage_Handler+0x4>

08006552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006552:	b480      	push	{r7}
 8006554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006556:	e7fe      	b.n	8006556 <BusFault_Handler+0x4>

08006558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800655c:	e7fe      	b.n	800655c <UsageFault_Handler+0x4>

0800655e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800655e:	b480      	push	{r7}
 8006560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006562:	bf00      	nop
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006570:	bf00      	nop
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800657a:	b480      	push	{r7}
 800657c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800657e:	bf00      	nop
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800658c:	f000 fb12 	bl	8006bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006590:	bf00      	nop
 8006592:	bd80      	pop	{r7, pc}

08006594 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 8006598:	4802      	ldr	r0, [pc, #8]	; (80065a4 <DMA1_Channel1_IRQHandler+0x10>)
 800659a:	f003 fd2a 	bl	8009ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800659e:	bf00      	nop
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20011718 	.word	0x20011718

080065a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80065ac:	4802      	ldr	r0, [pc, #8]	; (80065b8 <DMA1_Channel2_IRQHandler+0x10>)
 80065ae:	f003 fd20 	bl	8009ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80065b2:	bf00      	nop
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000524 	.word	0x20000524

080065bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80065c0:	4802      	ldr	r0, [pc, #8]	; (80065cc <DMA1_Channel3_IRQHandler+0x10>)
 80065c2:	f003 fd16 	bl	8009ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80065c6:	bf00      	nop
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	200006d0 	.word	0x200006d0

080065d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80065d4:	4802      	ldr	r0, [pc, #8]	; (80065e0 <DMA1_Channel4_IRQHandler+0x10>)
 80065d6:	f003 fd0c 	bl	8009ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80065da:	bf00      	nop
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000730 	.word	0x20000730

080065e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80065e8:	4802      	ldr	r0, [pc, #8]	; (80065f4 <DMA1_Channel5_IRQHandler+0x10>)
 80065ea:	f003 fd02 	bl	8009ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80065ee:	bf00      	nop
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000584 	.word	0x20000584

080065f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80065fc:	4802      	ldr	r0, [pc, #8]	; (8006608 <DMA1_Channel6_IRQHandler+0x10>)
 80065fe:	f003 fcf8 	bl	8009ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006602:	bf00      	nop
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200005e4 	.word	0x200005e4

0800660c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8006610:	4802      	ldr	r0, [pc, #8]	; (800661c <DMA1_Channel7_IRQHandler+0x10>)
 8006612:	f003 fcee 	bl	8009ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006616:	bf00      	nop
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000644 	.word	0x20000644

08006620 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	extern int cndtr1;
	cndtr1 = hdma_adc1.Instance->CNDTR;
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <ADC1_2_IRQHandler+0x1c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	461a      	mov	r2, r3
 800662c:	4b04      	ldr	r3, [pc, #16]	; (8006640 <ADC1_2_IRQHandler+0x20>)
 800662e:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006630:	4804      	ldr	r0, [pc, #16]	; (8006644 <ADC1_2_IRQHandler+0x24>)
 8006632:	f001 f985 	bl	8007940 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006636:	bf00      	nop
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000524 	.word	0x20000524
 8006640:	2001177c 	.word	0x2001177c
 8006644:	20000374 	.word	0x20000374

08006648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	extern int cndtr2;
	cndtr2 = hdma_adc1.Instance->CNDTR;
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <TIM2_IRQHandler+0x1c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	461a      	mov	r2, r3
 8006654:	4b04      	ldr	r3, [pc, #16]	; (8006668 <TIM2_IRQHandler+0x20>)
 8006656:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006658:	4804      	ldr	r0, [pc, #16]	; (800666c <TIM2_IRQHandler+0x24>)
 800665a:	f006 fa79 	bl	800cb50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800665e:	bf00      	nop
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000524 	.word	0x20000524
 8006668:	20011780 	.word	0x20011780
 800666c:	200168ac 	.word	0x200168ac

08006670 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi1);
 8006674:	4802      	ldr	r0, [pc, #8]	; (8006680 <QUADSPI_IRQHandler+0x10>)
 8006676:	f004 f9c7 	bl	800aa08 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800667a:	bf00      	nop
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200116cc 	.word	0x200116cc

08006684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  return 1;
 8006688:	2301      	movs	r3, #1
}
 800668a:	4618      	mov	r0, r3
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <_kill>:

int _kill(int pid, int sig)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800669e:	f018 facd 	bl	801ec3c <__errno>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2216      	movs	r2, #22
 80066a6:	601a      	str	r2, [r3, #0]
  return -1;
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <_exit>:

void _exit (int status)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80066bc:	f04f 31ff 	mov.w	r1, #4294967295
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff ffe7 	bl	8006694 <_kill>
  while (1) {}    /* Make sure we hang here */
 80066c6:	e7fe      	b.n	80066c6 <_exit+0x12>

080066c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e00a      	b.n	80066f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80066da:	f3af 8000 	nop.w
 80066de:	4601      	mov	r1, r0
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	60ba      	str	r2, [r7, #8]
 80066e6:	b2ca      	uxtb	r2, r1
 80066e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	3301      	adds	r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	dbf0      	blt.n	80066da <_read+0x12>
  }

  return len;
 80066f8:	687b      	ldr	r3, [r7, #4]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800670a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800672a:	605a      	str	r2, [r3, #4]
  return 0;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <_isatty>:

int _isatty(int file)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006742:	2301      	movs	r3, #1
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006774:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <_sbrk+0x5c>)
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <_sbrk+0x60>)
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006780:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <_sbrk+0x64>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <_sbrk+0x64>)
 800678a:	4a12      	ldr	r2, [pc, #72]	; (80067d4 <_sbrk+0x68>)
 800678c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <_sbrk+0x64>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4413      	add	r3, r2
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d207      	bcs.n	80067ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800679c:	f018 fa4e 	bl	801ec3c <__errno>
 80067a0:	4603      	mov	r3, r0
 80067a2:	220c      	movs	r2, #12
 80067a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	e009      	b.n	80067c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <_sbrk+0x64>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <_sbrk+0x64>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	4a05      	ldr	r2, [pc, #20]	; (80067d0 <_sbrk+0x64>)
 80067bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067be:	68fb      	ldr	r3, [r7, #12]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20020000 	.word	0x20020000
 80067cc:	00000400 	.word	0x00000400
 80067d0:	2001685c 	.word	0x2001685c
 80067d4:	20016a98 	.word	0x20016a98

080067d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <SystemInit+0x20>)
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e2:	4a05      	ldr	r2, [pc, #20]	; (80067f8 <SystemInit+0x20>)
 80067e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	e000ed00 	.word	0xe000ed00

080067fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006802:	f107 0310 	add.w	r3, r7, #16
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	605a      	str	r2, [r3, #4]
 800680c:	609a      	str	r2, [r3, #8]
 800680e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006810:	1d3b      	adds	r3, r7, #4
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	605a      	str	r2, [r3, #4]
 8006818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800681a:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <MX_TIM1_Init+0x9c>)
 800681c:	4a1f      	ldr	r2, [pc, #124]	; (800689c <MX_TIM1_Init+0xa0>)
 800681e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 8006820:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <MX_TIM1_Init+0x9c>)
 8006822:	2254      	movs	r2, #84	; 0x54
 8006824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006826:	4b1c      	ldr	r3, [pc, #112]	; (8006898 <MX_TIM1_Init+0x9c>)
 8006828:	2200      	movs	r2, #0
 800682a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 800682c:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <MX_TIM1_Init+0x9c>)
 800682e:	2201      	movs	r2, #1
 8006830:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006832:	4b19      	ldr	r3, [pc, #100]	; (8006898 <MX_TIM1_Init+0x9c>)
 8006834:	2200      	movs	r2, #0
 8006836:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006838:	4b17      	ldr	r3, [pc, #92]	; (8006898 <MX_TIM1_Init+0x9c>)
 800683a:	2200      	movs	r2, #0
 800683c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800683e:	4b16      	ldr	r3, [pc, #88]	; (8006898 <MX_TIM1_Init+0x9c>)
 8006840:	2200      	movs	r2, #0
 8006842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006844:	4814      	ldr	r0, [pc, #80]	; (8006898 <MX_TIM1_Init+0x9c>)
 8006846:	f005 ff0d 	bl	800c664 <HAL_TIM_Base_Init>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8006850:	f7fe fac9 	bl	8004de6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006858:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800685a:	f107 0310 	add.w	r3, r7, #16
 800685e:	4619      	mov	r1, r3
 8006860:	480d      	ldr	r0, [pc, #52]	; (8006898 <MX_TIM1_Init+0x9c>)
 8006862:	f006 fb6f 	bl	800cf44 <HAL_TIM_ConfigClockSource>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800686c:	f7fe fabb 	bl	8004de6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006870:	2320      	movs	r3, #32
 8006872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006874:	2300      	movs	r3, #0
 8006876:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800687c:	1d3b      	adds	r3, r7, #4
 800687e:	4619      	mov	r1, r3
 8006880:	4805      	ldr	r0, [pc, #20]	; (8006898 <MX_TIM1_Init+0x9c>)
 8006882:	f007 f927 	bl	800dad4 <HAL_TIMEx_MasterConfigSynchronization>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800688c:	f7fe faab 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006890:	bf00      	nop
 8006892:	3720      	adds	r7, #32
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20016860 	.word	0x20016860
 800689c:	40012c00 	.word	0x40012c00

080068a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08e      	sub	sp, #56	; 0x38
 80068a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	605a      	str	r2, [r3, #4]
 80068b0:	609a      	str	r2, [r3, #8]
 80068b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068b4:	f107 031c 	add.w	r3, r7, #28
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	605a      	str	r2, [r3, #4]
 80068be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80068c0:	463b      	mov	r3, r7
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	605a      	str	r2, [r3, #4]
 80068c8:	609a      	str	r2, [r3, #8]
 80068ca:	60da      	str	r2, [r3, #12]
 80068cc:	611a      	str	r2, [r3, #16]
 80068ce:	615a      	str	r2, [r3, #20]
 80068d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80068d2:	4b2c      	ldr	r3, [pc, #176]	; (8006984 <MX_TIM2_Init+0xe4>)
 80068d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 85-1;
 80068da:	4b2a      	ldr	r3, [pc, #168]	; (8006984 <MX_TIM2_Init+0xe4>)
 80068dc:	2254      	movs	r2, #84	; 0x54
 80068de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068e0:	4b28      	ldr	r3, [pc, #160]	; (8006984 <MX_TIM2_Init+0xe4>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <MX_TIM2_Init+0xe4>)
 80068e8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80068ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068ee:	4b25      	ldr	r3, [pc, #148]	; (8006984 <MX_TIM2_Init+0xe4>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068f4:	4b23      	ldr	r3, [pc, #140]	; (8006984 <MX_TIM2_Init+0xe4>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80068fa:	4822      	ldr	r0, [pc, #136]	; (8006984 <MX_TIM2_Init+0xe4>)
 80068fc:	f005 feb2 	bl	800c664 <HAL_TIM_Base_Init>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8006906:	f7fe fa6e 	bl	8004de6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800690a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006914:	4619      	mov	r1, r3
 8006916:	481b      	ldr	r0, [pc, #108]	; (8006984 <MX_TIM2_Init+0xe4>)
 8006918:	f006 fb14 	bl	800cf44 <HAL_TIM_ConfigClockSource>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8006922:	f7fe fa60 	bl	8004de6 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8006926:	4817      	ldr	r0, [pc, #92]	; (8006984 <MX_TIM2_Init+0xe4>)
 8006928:	f005 ff8b 	bl	800c842 <HAL_TIM_OC_Init>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8006932:	f7fe fa58 	bl	8004de6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800693a:	2300      	movs	r3, #0
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800693e:	f107 031c 	add.w	r3, r7, #28
 8006942:	4619      	mov	r1, r3
 8006944:	480f      	ldr	r0, [pc, #60]	; (8006984 <MX_TIM2_Init+0xe4>)
 8006946:	f007 f8c5 	bl	800dad4 <HAL_TIMEx_MasterConfigSynchronization>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8006950:	f7fe fa49 	bl	8004de6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006954:	2300      	movs	r3, #0
 8006956:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1023;
 8006958:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800695c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006962:	2300      	movs	r3, #0
 8006964:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006966:	463b      	mov	r3, r7
 8006968:	2200      	movs	r2, #0
 800696a:	4619      	mov	r1, r3
 800696c:	4805      	ldr	r0, [pc, #20]	; (8006984 <MX_TIM2_Init+0xe4>)
 800696e:	f006 fa6f 	bl	800ce50 <HAL_TIM_OC_ConfigChannel>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8006978:	f7fe fa35 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800697c:	bf00      	nop
 800697e:	3738      	adds	r7, #56	; 0x38
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200168ac 	.word	0x200168ac

08006988 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800698e:	f107 0310 	add.w	r3, r7, #16
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	605a      	str	r2, [r3, #4]
 8006998:	609a      	str	r2, [r3, #8]
 800699a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800699c:	1d3b      	adds	r3, r7, #4
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <MX_TIM3_Init+0x94>)
 80069a8:	4a1d      	ldr	r2, [pc, #116]	; (8006a20 <MX_TIM3_Init+0x98>)
 80069aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85-1;
 80069ac:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <MX_TIM3_Init+0x94>)
 80069ae:	2254      	movs	r2, #84	; 0x54
 80069b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069b2:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <MX_TIM3_Init+0x94>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80069b8:	4b18      	ldr	r3, [pc, #96]	; (8006a1c <MX_TIM3_Init+0x94>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069be:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <MX_TIM3_Init+0x94>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069c4:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <MX_TIM3_Init+0x94>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80069ca:	4814      	ldr	r0, [pc, #80]	; (8006a1c <MX_TIM3_Init+0x94>)
 80069cc:	f005 fe4a 	bl	800c664 <HAL_TIM_Base_Init>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80069d6:	f7fe fa06 	bl	8004de6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80069da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80069e0:	f107 0310 	add.w	r3, r7, #16
 80069e4:	4619      	mov	r1, r3
 80069e6:	480d      	ldr	r0, [pc, #52]	; (8006a1c <MX_TIM3_Init+0x94>)
 80069e8:	f006 faac 	bl	800cf44 <HAL_TIM_ConfigClockSource>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80069f2:	f7fe f9f8 	bl	8004de6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80069f6:	2320      	movs	r3, #32
 80069f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80069fe:	1d3b      	adds	r3, r7, #4
 8006a00:	4619      	mov	r1, r3
 8006a02:	4806      	ldr	r0, [pc, #24]	; (8006a1c <MX_TIM3_Init+0x94>)
 8006a04:	f007 f866 	bl	800dad4 <HAL_TIMEx_MasterConfigSynchronization>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8006a0e:	f7fe f9ea 	bl	8004de6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006a12:	bf00      	nop
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200168f8 	.word	0x200168f8
 8006a20:	40000400 	.word	0x40000400

08006a24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <HAL_TIM_Base_MspInit+0x8c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d10c      	bne.n	8006a50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a36:	4b1f      	ldr	r3, [pc, #124]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3a:	4a1e      	ldr	r2, [pc, #120]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a40:	6613      	str	r3, [r2, #96]	; 0x60
 8006a42:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006a4e:	e02a      	b.n	8006aa6 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a58:	d114      	bne.n	8006a84 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a5a:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	6593      	str	r3, [r2, #88]	; 0x58
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006a72:	2200      	movs	r2, #0
 8006a74:	2100      	movs	r1, #0
 8006a76:	201c      	movs	r0, #28
 8006a78:	f002 fce9 	bl	800944e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006a7c:	201c      	movs	r0, #28
 8006a7e:	f002 fd00 	bl	8009482 <HAL_NVIC_EnableIRQ>
}
 8006a82:	e010      	b.n	8006aa6 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a0b      	ldr	r2, [pc, #44]	; (8006ab8 <HAL_TIM_Base_MspInit+0x94>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d10b      	bne.n	8006aa6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a92:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a94:	f043 0302 	orr.w	r3, r3, #2
 8006a98:	6593      	str	r3, [r2, #88]	; 0x58
 8006a9a:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <HAL_TIM_Base_MspInit+0x90>)
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	bf00      	nop
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40012c00 	.word	0x40012c00
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40000400 	.word	0x40000400

08006abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006abc:	480d      	ldr	r0, [pc, #52]	; (8006af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006abe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ac0:	480d      	ldr	r0, [pc, #52]	; (8006af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006ac2:	490e      	ldr	r1, [pc, #56]	; (8006afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8006ac4:	4a0e      	ldr	r2, [pc, #56]	; (8006b00 <LoopForever+0xe>)
  movs r3, #0
 8006ac6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006ac8:	e002      	b.n	8006ad0 <LoopCopyDataInit>

08006aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ace:	3304      	adds	r3, #4

08006ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ad4:	d3f9      	bcc.n	8006aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ad6:	4a0b      	ldr	r2, [pc, #44]	; (8006b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006ad8:	4c0b      	ldr	r4, [pc, #44]	; (8006b08 <LoopForever+0x16>)
  movs r3, #0
 8006ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006adc:	e001      	b.n	8006ae2 <LoopFillZerobss>

08006ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ae0:	3204      	adds	r2, #4

08006ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ae4:	d3fb      	bcc.n	8006ade <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ae6:	f7ff fe77 	bl	80067d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006aea:	f018 f8ad 	bl	801ec48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006aee:	f7fd ff83 	bl	80049f8 <main>

08006af2 <LoopForever>:

LoopForever:
    b LoopForever
 8006af2:	e7fe      	b.n	8006af2 <LoopForever>
  ldr   r0, =_estack
 8006af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006afc:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8006b00:	08024608 	.word	0x08024608
  ldr r2, =_sbss
 8006b04:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8006b08:	20016a94 	.word	0x20016a94

08006b0c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006b0c:	e7fe      	b.n	8006b0c <ADC3_IRQHandler>

08006b0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b082      	sub	sp, #8
 8006b12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b18:	2003      	movs	r0, #3
 8006b1a:	f002 fc8d 	bl	8009438 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b1e:	2000      	movs	r0, #0
 8006b20:	f000 f80e 	bl	8006b40 <HAL_InitTick>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	71fb      	strb	r3, [r7, #7]
 8006b2e:	e001      	b.n	8006b34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b30:	f7ff fce0 	bl	80064f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b34:	79fb      	ldrb	r3, [r7, #7]

}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006b4c:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <HAL_InitTick+0x68>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d022      	beq.n	8006b9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006b54:	4b15      	ldr	r3, [pc, #84]	; (8006bac <HAL_InitTick+0x6c>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <HAL_InitTick+0x68>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f002 fc98 	bl	800949e <HAL_SYSTICK_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10f      	bne.n	8006b94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b0f      	cmp	r3, #15
 8006b78:	d809      	bhi.n	8006b8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b82:	f002 fc64 	bl	800944e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <HAL_InitTick+0x70>)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	e007      	b.n	8006b9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	73fb      	strb	r3, [r7, #15]
 8006b92:	e004      	b.n	8006b9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e001      	b.n	8006b9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000010 	.word	0x20000010
 8006bac:	20000008 	.word	0x20000008
 8006bb0:	2000000c 	.word	0x2000000c

08006bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_IncTick+0x1c>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <HAL_IncTick+0x20>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	4a03      	ldr	r2, [pc, #12]	; (8006bd0 <HAL_IncTick+0x1c>)
 8006bc4:	6013      	str	r3, [r2, #0]
}
 8006bc6:	bf00      	nop
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	20016944 	.word	0x20016944
 8006bd4:	20000010 	.word	0x20000010

08006bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return uwTick;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <HAL_GetTick+0x14>)
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20016944 	.word	0x20016944

08006bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bf8:	f7ff ffee 	bl	8006bd8 <HAL_GetTick>
 8006bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d004      	beq.n	8006c14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c0a:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <HAL_Delay+0x40>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c14:	bf00      	nop
 8006c16:	f7ff ffdf 	bl	8006bd8 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d8f7      	bhi.n	8006c16 <HAL_Delay+0x26>
  {
  }
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000010 	.word	0x20000010

08006c34 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f023 0202 	bic.w	r2, r3, #2
 8006c44:	4904      	ldr	r1, [pc, #16]	; (8006c58 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	600b      	str	r3, [r1, #0]
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40010030 	.word	0x40010030

08006c5c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a04      	ldr	r2, [pc, #16]	; (8006c78 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	6013      	str	r3, [r2, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010030 	.word	0x40010030

08006c7c <LL_ADC_SetCommonClock>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	609a      	str	r2, [r3, #8]
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <LL_ADC_SetCommonPathInternalCh>:
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	609a      	str	r2, [r3, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <LL_ADC_GetCommonPathInternalCh>:
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <LL_ADC_SetOffset>:
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3360      	adds	r3, #96	; 0x60
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	4b08      	ldr	r3, [pc, #32]	; (8006d28 <LL_ADC_SetOffset+0x44>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	601a      	str	r2, [r3, #0]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	03fff000 	.word	0x03fff000

08006d2c <LL_ADC_GetOffsetChannel>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3360      	adds	r3, #96	; 0x60
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <LL_ADC_SetOffsetState>:
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3360      	adds	r3, #96	; 0x60
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	601a      	str	r2, [r3, #0]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <LL_ADC_SetOffsetSign>:
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b087      	sub	sp, #28
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3360      	adds	r3, #96	; 0x60
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	601a      	str	r2, [r3, #0]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <LL_ADC_SetOffsetSaturation>:
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3360      	adds	r3, #96	; 0x60
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	431a      	orrs	r2, r3
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	615a      	str	r2, [r3, #20]
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <LL_ADC_REG_SetSequencerRanks>:
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3330      	adds	r3, #48	; 0x30
 8006e56:	461a      	mov	r2, r3
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	0a1b      	lsrs	r3, r3, #8
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	4413      	add	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	211f      	movs	r1, #31
 8006e72:	fa01 f303 	lsl.w	r3, r1, r3
 8006e76:	43db      	mvns	r3, r3
 8006e78:	401a      	ands	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	0e9b      	lsrs	r3, r3, #26
 8006e7e:	f003 011f 	and.w	r1, r3, #31
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f003 031f 	and.w	r3, r3, #31
 8006e88:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	601a      	str	r2, [r3, #0]
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eaa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <LL_ADC_SetChannelSamplingTime>:
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3314      	adds	r3, #20
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	0e5b      	lsrs	r3, r3, #25
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	4413      	add	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	0d1b      	lsrs	r3, r3, #20
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2107      	movs	r1, #7
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	401a      	ands	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	0d1b      	lsrs	r3, r3, #20
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	fa01 f303 	lsl.w	r3, r1, r3
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	601a      	str	r2, [r3, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
	...

08006f1c <LL_ADC_SetChannelSingleDiff>:
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d10a      	bne.n	8006f46 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006f44:	e00a      	b.n	8006f5c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f52:	43db      	mvns	r3, r3
 8006f54:	401a      	ands	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	407f0000 	.word	0x407f0000

08006f6c <LL_ADC_SetAnalogWDMonitChannels>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	0d1b      	lsrs	r3, r3, #20
 8006f82:	f003 0103 	and.w	r1, r3, #3
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f003 0201 	and.w	r2, r3, #1
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4403      	add	r3, r0
 8006f9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006fa6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006faa:	43db      	mvns	r3, r3
 8006fac:	401a      	ands	r2, r3
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	400b      	ands	r3, r1
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	601a      	str	r2, [r3, #0]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <LL_ADC_ConfigAnalogWDThresholds>:
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b087      	sub	sp, #28
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3320      	adds	r3, #32
 8006fd8:	461a      	mov	r2, r3
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	0d1b      	lsrs	r3, r3, #20
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	f003 030c 	and.w	r3, r3, #12
 8006fe4:	4413      	add	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	0419      	lsls	r1, r3, #16
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	601a      	str	r2, [r3, #0]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <LL_ADC_GetMultimode>:
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 031f 	and.w	r3, r3, #31
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <LL_ADC_GetMultiDMATransfer>:
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <LL_ADC_DisableDeepPowerDown>:
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007052:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6093      	str	r3, [r2, #8]
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800707a:	d101      	bne.n	8007080 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <LL_ADC_EnableInternalRegulator>:
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800709e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80070a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	609a      	str	r2, [r3, #8]
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <LL_ADC_IsInternalRegulatorEnabled>:
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ca:	d101      	bne.n	80070d0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <LL_ADC_Enable>:
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80070f2:	f043 0201 	orr.w	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	609a      	str	r2, [r3, #8]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <LL_ADC_Disable>:
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007116:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800711a:	f043 0202 	orr.w	r2, r3, #2
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	609a      	str	r2, [r3, #8]
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <LL_ADC_IsEnabled>:
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <LL_ADC_IsEnabled+0x18>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <LL_ADC_IsEnabled+0x1a>
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <LL_ADC_IsDisableOngoing>:
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b02      	cmp	r3, #2
 8007166:	d101      	bne.n	800716c <LL_ADC_IsDisableOngoing+0x18>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <LL_ADC_IsDisableOngoing+0x1a>
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <LL_ADC_REG_StartConversion>:
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800718a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800718e:	f043 0204 	orr.w	r2, r3, #4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	609a      	str	r2, [r3, #8]
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <LL_ADC_REG_StopConversion>:
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80071b6:	f043 0210 	orr.w	r2, r3, #16
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	609a      	str	r2, [r3, #8]
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <LL_ADC_REG_IsConversionOngoing>:
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d101      	bne.n	80071e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <LL_ADC_INJ_StopConversion>:
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007204:	f043 0220 	orr.w	r2, r3, #32
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	609a      	str	r2, [r3, #8]
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <LL_ADC_INJ_IsConversionOngoing>:
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b08      	cmp	r3, #8
 800722a:	d101      	bne.n	8007230 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <LL_ADC_ClearFlag_AWD1>:
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2280      	movs	r2, #128	; 0x80
 800724a:	601a      	str	r2, [r3, #0]
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_ADC_ClearFlag_AWD2>:
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007266:	601a      	str	r2, [r3, #0]
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <LL_ADC_ClearFlag_AWD3>:
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007282:	601a      	str	r2, [r3, #0]
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <LL_ADC_EnableIT_AWD1>:
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <LL_ADC_EnableIT_AWD2>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	605a      	str	r2, [r3, #4]
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <LL_ADC_EnableIT_AWD3>:
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	605a      	str	r2, [r3, #4]
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <LL_ADC_DisableIT_AWD1>:
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	605a      	str	r2, [r3, #4]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <LL_ADC_DisableIT_AWD2>:
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	605a      	str	r2, [r3, #4]
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b089      	sub	sp, #36	; 0x24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800735c:	2300      	movs	r3, #0
 800735e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e1af      	b.n	80076ca <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7f9 feb1 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff fe68 	bl	8007066 <LL_ADC_IsDeepPowerDownEnabled>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fe4e 	bl	8007042 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff fe83 	bl	80070b6 <LL_ADC_IsInternalRegulatorEnabled>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d115      	bne.n	80073e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff fe67 	bl	800708e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073c0:	4b9f      	ldr	r3, [pc, #636]	; (8007640 <HAL_ADC_Init+0x2f0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	099b      	lsrs	r3, r3, #6
 80073c6:	4a9f      	ldr	r2, [pc, #636]	; (8007644 <HAL_ADC_Init+0x2f4>)
 80073c8:	fba2 2303 	umull	r2, r3, r2, r3
 80073cc:	099b      	lsrs	r3, r3, #6
 80073ce:	3301      	adds	r3, #1
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80073d4:	e002      	b.n	80073dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3b01      	subs	r3, #1
 80073da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f9      	bne.n	80073d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff fe65 	bl	80070b6 <LL_ADC_IsInternalRegulatorEnabled>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10d      	bne.n	800740e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	f043 0210 	orr.w	r2, r3, #16
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007402:	f043 0201 	orr.w	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff fed9 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 8007418:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741e:	f003 0310 	and.w	r3, r3, #16
 8007422:	2b00      	cmp	r3, #0
 8007424:	f040 8148 	bne.w	80076b8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f040 8144 	bne.w	80076b8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007434:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007438:	f043 0202 	orr.w	r2, r3, #2
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fe72 	bl	800712e <LL_ADC_IsEnabled>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d141      	bne.n	80074d4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007458:	d004      	beq.n	8007464 <HAL_ADC_Init+0x114>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a7a      	ldr	r2, [pc, #488]	; (8007648 <HAL_ADC_Init+0x2f8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d10f      	bne.n	8007484 <HAL_ADC_Init+0x134>
 8007464:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007468:	f7ff fe61 	bl	800712e <LL_ADC_IsEnabled>
 800746c:	4604      	mov	r4, r0
 800746e:	4876      	ldr	r0, [pc, #472]	; (8007648 <HAL_ADC_Init+0x2f8>)
 8007470:	f7ff fe5d 	bl	800712e <LL_ADC_IsEnabled>
 8007474:	4603      	mov	r3, r0
 8007476:	4323      	orrs	r3, r4
 8007478:	2b00      	cmp	r3, #0
 800747a:	bf0c      	ite	eq
 800747c:	2301      	moveq	r3, #1
 800747e:	2300      	movne	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	e012      	b.n	80074aa <HAL_ADC_Init+0x15a>
 8007484:	4871      	ldr	r0, [pc, #452]	; (800764c <HAL_ADC_Init+0x2fc>)
 8007486:	f7ff fe52 	bl	800712e <LL_ADC_IsEnabled>
 800748a:	4604      	mov	r4, r0
 800748c:	4870      	ldr	r0, [pc, #448]	; (8007650 <HAL_ADC_Init+0x300>)
 800748e:	f7ff fe4e 	bl	800712e <LL_ADC_IsEnabled>
 8007492:	4603      	mov	r3, r0
 8007494:	431c      	orrs	r4, r3
 8007496:	486f      	ldr	r0, [pc, #444]	; (8007654 <HAL_ADC_Init+0x304>)
 8007498:	f7ff fe49 	bl	800712e <LL_ADC_IsEnabled>
 800749c:	4603      	mov	r3, r0
 800749e:	4323      	orrs	r3, r4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	bf0c      	ite	eq
 80074a4:	2301      	moveq	r3, #1
 80074a6:	2300      	movne	r3, #0
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d012      	beq.n	80074d4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074b6:	d004      	beq.n	80074c2 <HAL_ADC_Init+0x172>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a62      	ldr	r2, [pc, #392]	; (8007648 <HAL_ADC_Init+0x2f8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d101      	bne.n	80074c6 <HAL_ADC_Init+0x176>
 80074c2:	4a65      	ldr	r2, [pc, #404]	; (8007658 <HAL_ADC_Init+0x308>)
 80074c4:	e000      	b.n	80074c8 <HAL_ADC_Init+0x178>
 80074c6:	4a65      	ldr	r2, [pc, #404]	; (800765c <HAL_ADC_Init+0x30c>)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f7ff fbd4 	bl	8006c7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	7f5b      	ldrb	r3, [r3, #29]
 80074d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80074e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80074ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074f4:	4313      	orrs	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d106      	bne.n	8007510 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	3b01      	subs	r3, #1
 8007508:	045b      	lsls	r3, r3, #17
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4313      	orrs	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	4313      	orrs	r3, r2
 800752a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	4b4b      	ldr	r3, [pc, #300]	; (8007660 <HAL_ADC_Init+0x310>)
 8007534:	4013      	ands	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	69b9      	ldr	r1, [r7, #24]
 800753c:	430b      	orrs	r3, r1
 800753e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fe35 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 8007560:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff fe56 	bl	8007218 <LL_ADC_INJ_IsConversionOngoing>
 800756c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d17f      	bne.n	8007674 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d17c      	bne.n	8007674 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800757e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007586:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007588:	4313      	orrs	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007596:	f023 0302 	bic.w	r3, r3, #2
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	69b9      	ldr	r1, [r7, #24]
 80075a0:	430b      	orrs	r3, r1
 80075a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d017      	beq.n	80075dc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80075ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80075c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80075c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6911      	ldr	r1, [r2, #16]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	430b      	orrs	r3, r1
 80075d6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80075da:	e013      	b.n	8007604 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691a      	ldr	r2, [r3, #16]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80075fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007600:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800760a:	2b01      	cmp	r3, #1
 800760c:	d12a      	bne.n	8007664 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007618:	f023 0304 	bic.w	r3, r3, #4
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007624:	4311      	orrs	r1, r2
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800762a:	4311      	orrs	r1, r2
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007630:	430a      	orrs	r2, r1
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0201 	orr.w	r2, r2, #1
 800763c:	611a      	str	r2, [r3, #16]
 800763e:	e019      	b.n	8007674 <HAL_ADC_Init+0x324>
 8007640:	20000008 	.word	0x20000008
 8007644:	053e2d63 	.word	0x053e2d63
 8007648:	50000100 	.word	0x50000100
 800764c:	50000400 	.word	0x50000400
 8007650:	50000500 	.word	0x50000500
 8007654:	50000600 	.word	0x50000600
 8007658:	50000300 	.word	0x50000300
 800765c:	50000700 	.word	0x50000700
 8007660:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d10c      	bne.n	8007696 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f023 010f 	bic.w	r1, r3, #15
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	1e5a      	subs	r2, r3, #1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
 8007694:	e007      	b.n	80076a6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 020f 	bic.w	r2, r2, #15
 80076a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076aa:	f023 0303 	bic.w	r3, r3, #3
 80076ae:	f043 0201 	orr.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80076b6:	e007      	b.n	80076c8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076bc:	f043 0210 	orr.w	r2, r3, #16
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80076c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3724      	adds	r7, #36	; 0x24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd90      	pop	{r4, r7, pc}
 80076d2:	bf00      	nop

080076d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076e8:	d004      	beq.n	80076f4 <HAL_ADC_Start_DMA+0x20>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a5a      	ldr	r2, [pc, #360]	; (8007858 <HAL_ADC_Start_DMA+0x184>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d101      	bne.n	80076f8 <HAL_ADC_Start_DMA+0x24>
 80076f4:	4b59      	ldr	r3, [pc, #356]	; (800785c <HAL_ADC_Start_DMA+0x188>)
 80076f6:	e000      	b.n	80076fa <HAL_ADC_Start_DMA+0x26>
 80076f8:	4b59      	ldr	r3, [pc, #356]	; (8007860 <HAL_ADC_Start_DMA+0x18c>)
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fc85 	bl	800700a <LL_ADC_GetMultimode>
 8007700:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fd5f 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	f040 809b 	bne.w	800784a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_ADC_Start_DMA+0x4e>
 800771e:	2302      	movs	r3, #2
 8007720:	e096      	b.n	8007850 <HAL_ADC_Start_DMA+0x17c>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a4d      	ldr	r2, [pc, #308]	; (8007864 <HAL_ADC_Start_DMA+0x190>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d008      	beq.n	8007746 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b05      	cmp	r3, #5
 800773e:	d002      	beq.n	8007746 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	2b09      	cmp	r3, #9
 8007744:	d17a      	bne.n	800783c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f001 fa6c 	bl	8008c24 <ADC_Enable>
 800774c:	4603      	mov	r3, r0
 800774e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d16d      	bne.n	8007832 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a3a      	ldr	r2, [pc, #232]	; (8007858 <HAL_ADC_Start_DMA+0x184>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <HAL_ADC_Start_DMA+0xb4>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a3b      	ldr	r2, [pc, #236]	; (8007868 <HAL_ADC_Start_DMA+0x194>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d002      	beq.n	8007784 <HAL_ADC_Start_DMA+0xb0>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	e003      	b.n	800778c <HAL_ADC_Start_DMA+0xb8>
 8007784:	4b39      	ldr	r3, [pc, #228]	; (800786c <HAL_ADC_Start_DMA+0x198>)
 8007786:	e001      	b.n	800778c <HAL_ADC_Start_DMA+0xb8>
 8007788:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	4293      	cmp	r3, r2
 8007792:	d002      	beq.n	800779a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d006      	beq.n	80077c0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b6:	f023 0206 	bic.w	r2, r3, #6
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	661a      	str	r2, [r3, #96]	; 0x60
 80077be:	e002      	b.n	80077c6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ca:	4a29      	ldr	r2, [pc, #164]	; (8007870 <HAL_ADC_Start_DMA+0x19c>)
 80077cc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d2:	4a28      	ldr	r2, [pc, #160]	; (8007874 <HAL_ADC_Start_DMA+0x1a0>)
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	4a27      	ldr	r2, [pc, #156]	; (8007878 <HAL_ADC_Start_DMA+0x1a4>)
 80077dc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	221c      	movs	r2, #28
 80077e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0210 	orr.w	r2, r2, #16
 80077fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3340      	adds	r3, #64	; 0x40
 8007818:	4619      	mov	r1, r3
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f002 faad 	bl	8009d7c <HAL_DMA_Start_IT>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff fca5 	bl	800717a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007830:	e00d      	b.n	800784e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800783a:	e008      	b.n	800784e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007848:	e001      	b.n	800784e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800784a:	2302      	movs	r3, #2
 800784c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800784e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	50000100 	.word	0x50000100
 800785c:	50000300 	.word	0x50000300
 8007860:	50000700 	.word	0x50000700
 8007864:	50000600 	.word	0x50000600
 8007868:	50000500 	.word	0x50000500
 800786c:	50000400 	.word	0x50000400
 8007870:	08008da7 	.word	0x08008da7
 8007874:	08008e7f 	.word	0x08008e7f
 8007878:	08008e9b 	.word	0x08008e9b

0800787c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_ADC_Stop_DMA+0x16>
 800788e:	2302      	movs	r3, #2
 8007890:	e051      	b.n	8007936 <HAL_ADC_Stop_DMA+0xba>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800789a:	2103      	movs	r1, #3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 f905 	bl	8008aac <ADC_ConversionStop>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d13f      	bne.n	800792c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0201 	bic.w	r2, r2, #1
 80078ba:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d10f      	bne.n	80078ea <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ce:	4618      	mov	r0, r3
 80078d0:	f002 facf 	bl	8009e72 <HAL_DMA_Abort>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0210 	bic.w	r2, r2, #16
 80078f8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d105      	bne.n	800790c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 f9f1 	bl	8008ce8 <ADC_Disable>
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]
 800790a:	e002      	b.n	8007912 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f9eb 	bl	8008ce8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d109      	bne.n	800792c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	f043 0201 	orr.w	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	; 0x28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007948:	2300      	movs	r3, #0
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007964:	d004      	beq.n	8007970 <HAL_ADC_IRQHandler+0x30>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a8e      	ldr	r2, [pc, #568]	; (8007ba4 <HAL_ADC_IRQHandler+0x264>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d101      	bne.n	8007974 <HAL_ADC_IRQHandler+0x34>
 8007970:	4b8d      	ldr	r3, [pc, #564]	; (8007ba8 <HAL_ADC_IRQHandler+0x268>)
 8007972:	e000      	b.n	8007976 <HAL_ADC_IRQHandler+0x36>
 8007974:	4b8d      	ldr	r3, [pc, #564]	; (8007bac <HAL_ADC_IRQHandler+0x26c>)
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff fb47 	bl	800700a <LL_ADC_GetMultimode>
 800797c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d017      	beq.n	80079b8 <HAL_ADC_IRQHandler+0x78>
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d012      	beq.n	80079b8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007996:	f003 0310 	and.w	r3, r3, #16
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fb62 	bl	8009074 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2202      	movs	r2, #2
 80079b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <HAL_ADC_IRQHandler+0x8c>
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10b      	bne.n	80079e4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8094 	beq.w	8007b00 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 808e 	beq.w	8007b00 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e8:	f003 0310 	and.w	r3, r3, #16
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d105      	bne.n	80079fc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff fa0d 	bl	8006e20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d072      	beq.n	8007af2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a64      	ldr	r2, [pc, #400]	; (8007ba4 <HAL_ADC_IRQHandler+0x264>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d009      	beq.n	8007a2a <HAL_ADC_IRQHandler+0xea>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a65      	ldr	r2, [pc, #404]	; (8007bb0 <HAL_ADC_IRQHandler+0x270>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d002      	beq.n	8007a26 <HAL_ADC_IRQHandler+0xe6>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	e003      	b.n	8007a2e <HAL_ADC_IRQHandler+0xee>
 8007a26:	4b63      	ldr	r3, [pc, #396]	; (8007bb4 <HAL_ADC_IRQHandler+0x274>)
 8007a28:	e001      	b.n	8007a2e <HAL_ADC_IRQHandler+0xee>
 8007a2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d008      	beq.n	8007a48 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b05      	cmp	r3, #5
 8007a40:	d002      	beq.n	8007a48 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	d104      	bne.n	8007a52 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	623b      	str	r3, [r7, #32]
 8007a50:	e014      	b.n	8007a7c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a53      	ldr	r2, [pc, #332]	; (8007ba4 <HAL_ADC_IRQHandler+0x264>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d009      	beq.n	8007a70 <HAL_ADC_IRQHandler+0x130>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a53      	ldr	r2, [pc, #332]	; (8007bb0 <HAL_ADC_IRQHandler+0x270>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d002      	beq.n	8007a6c <HAL_ADC_IRQHandler+0x12c>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	e003      	b.n	8007a74 <HAL_ADC_IRQHandler+0x134>
 8007a6c:	4b51      	ldr	r3, [pc, #324]	; (8007bb4 <HAL_ADC_IRQHandler+0x274>)
 8007a6e:	e001      	b.n	8007a74 <HAL_ADC_IRQHandler+0x134>
 8007a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a74:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d135      	bne.n	8007af2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d12e      	bne.n	8007af2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff fb96 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d11a      	bne.n	8007ada <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 020c 	bic.w	r2, r2, #12
 8007ab2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d112      	bne.n	8007af2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad0:	f043 0201 	orr.w	r2, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ad8:	e00b      	b.n	8007af2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ade:	f043 0210 	orr.w	r2, r3, #16
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aea:	f043 0201 	orr.w	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7fd fdca 	bl	800568c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	220c      	movs	r2, #12
 8007afe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d004      	beq.n	8007b14 <HAL_ADC_IRQHandler+0x1d4>
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10b      	bne.n	8007b2c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80b3 	beq.w	8007c86 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80ad 	beq.w	8007c86 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff f9a8 	bl	8006e9e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007b4e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff f963 	bl	8006e20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b5a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a10      	ldr	r2, [pc, #64]	; (8007ba4 <HAL_ADC_IRQHandler+0x264>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d009      	beq.n	8007b7a <HAL_ADC_IRQHandler+0x23a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <HAL_ADC_IRQHandler+0x270>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d002      	beq.n	8007b76 <HAL_ADC_IRQHandler+0x236>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	e003      	b.n	8007b7e <HAL_ADC_IRQHandler+0x23e>
 8007b76:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <HAL_ADC_IRQHandler+0x274>)
 8007b78:	e001      	b.n	8007b7e <HAL_ADC_IRQHandler+0x23e>
 8007b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d008      	beq.n	8007b98 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2b06      	cmp	r3, #6
 8007b90:	d002      	beq.n	8007b98 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b07      	cmp	r3, #7
 8007b96:	d10f      	bne.n	8007bb8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	623b      	str	r3, [r7, #32]
 8007ba0:	e01f      	b.n	8007be2 <HAL_ADC_IRQHandler+0x2a2>
 8007ba2:	bf00      	nop
 8007ba4:	50000100 	.word	0x50000100
 8007ba8:	50000300 	.word	0x50000300
 8007bac:	50000700 	.word	0x50000700
 8007bb0:	50000500 	.word	0x50000500
 8007bb4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a8b      	ldr	r2, [pc, #556]	; (8007dec <HAL_ADC_IRQHandler+0x4ac>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d009      	beq.n	8007bd6 <HAL_ADC_IRQHandler+0x296>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a8a      	ldr	r2, [pc, #552]	; (8007df0 <HAL_ADC_IRQHandler+0x4b0>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d002      	beq.n	8007bd2 <HAL_ADC_IRQHandler+0x292>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	e003      	b.n	8007bda <HAL_ADC_IRQHandler+0x29a>
 8007bd2:	4b88      	ldr	r3, [pc, #544]	; (8007df4 <HAL_ADC_IRQHandler+0x4b4>)
 8007bd4:	e001      	b.n	8007bda <HAL_ADC_IRQHandler+0x29a>
 8007bd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007bda:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d047      	beq.n	8007c78 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <HAL_ADC_IRQHandler+0x2c2>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d03f      	beq.n	8007c78 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d13a      	bne.n	8007c78 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0c:	2b40      	cmp	r3, #64	; 0x40
 8007c0e:	d133      	bne.n	8007c78 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d12e      	bne.n	8007c78 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fafa 	bl	8007218 <LL_ADC_INJ_IsConversionOngoing>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d11a      	bne.n	8007c60 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c38:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d112      	bne.n	8007c78 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c56:	f043 0201 	orr.w	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c5e:	e00b      	b.n	8007c78 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c64:	f043 0210 	orr.w	r2, r3, #16
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c70:	f043 0201 	orr.w	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 f9dd 	bl	8009038 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2260      	movs	r2, #96	; 0x60
 8007c84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d011      	beq.n	8007cb4 <HAL_ADC_IRQHandler+0x374>
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fd fd26 	bl	80056f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2280      	movs	r2, #128	; 0x80
 8007cb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d012      	beq.n	8007ce4 <HAL_ADC_IRQHandler+0x3a4>
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00d      	beq.n	8007ce4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ccc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7fd fd45 	bl	8005764 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ce2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d012      	beq.n	8007d14 <HAL_ADC_IRQHandler+0x3d4>
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00d      	beq.n	8007d14 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 f9ab 	bl	8009060 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f003 0310 	and.w	r3, r3, #16
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d043      	beq.n	8007da6 <HAL_ADC_IRQHandler+0x466>
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d03e      	beq.n	8007da6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8007d30:	2301      	movs	r3, #1
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
 8007d34:	e021      	b.n	8007d7a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d015      	beq.n	8007d68 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d44:	d004      	beq.n	8007d50 <HAL_ADC_IRQHandler+0x410>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a28      	ldr	r2, [pc, #160]	; (8007dec <HAL_ADC_IRQHandler+0x4ac>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d101      	bne.n	8007d54 <HAL_ADC_IRQHandler+0x414>
 8007d50:	4b29      	ldr	r3, [pc, #164]	; (8007df8 <HAL_ADC_IRQHandler+0x4b8>)
 8007d52:	e000      	b.n	8007d56 <HAL_ADC_IRQHandler+0x416>
 8007d54:	4b29      	ldr	r3, [pc, #164]	; (8007dfc <HAL_ADC_IRQHandler+0x4bc>)
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff f965 	bl	8007026 <LL_ADC_GetMultiDMATransfer>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8007d62:	2301      	movs	r3, #1
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
 8007d66:	e008      	b.n	8007d7a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8007d76:	2301      	movs	r3, #1
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d10e      	bne.n	8007d9e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d90:	f043 0202 	orr.w	r2, r3, #2
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f831 	bl	8007e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2210      	movs	r2, #16
 8007da4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d018      	beq.n	8007de2 <HAL_ADC_IRQHandler+0x4a2>
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d013      	beq.n	8007de2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dca:	f043 0208 	orr.w	r2, r3, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dda:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 f935 	bl	800904c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007de2:	bf00      	nop
 8007de4:	3728      	adds	r7, #40	; 0x28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	50000100 	.word	0x50000100
 8007df0:	50000500 	.word	0x50000500
 8007df4:	50000400 	.word	0x50000400
 8007df8:	50000300 	.word	0x50000300
 8007dfc:	50000700 	.word	0x50000700

08007e00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b0b6      	sub	sp, #216	; 0xd8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d102      	bne.n	8007e38 <HAL_ADC_ConfigChannel+0x24>
 8007e32:	2302      	movs	r3, #2
 8007e34:	f000 bc13 	b.w	800865e <HAL_ADC_ConfigChannel+0x84a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff f9c0 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 83f3 	bne.w	8008638 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6859      	ldr	r1, [r3, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f7fe fff1 	bl	8006e46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff f9ae 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 8007e6e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff f9ce 	bl	8007218 <LL_ADC_INJ_IsConversionOngoing>
 8007e7c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f040 81d9 	bne.w	800823c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f040 81d4 	bne.w	800823c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e9c:	d10f      	bne.n	8007ebe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	f7ff f80b 	bl	8006ec4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe ff9f 	bl	8006dfa <LL_ADC_SetSamplingTimeCommonConfig>
 8007ebc:	e00e      	b.n	8007edc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	6819      	ldr	r1, [r3, #0]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7fe fffa 	bl	8006ec4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe ff8f 	bl	8006dfa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	695a      	ldr	r2, [r3, #20]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	08db      	lsrs	r3, r3, #3
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d022      	beq.n	8007f44 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6919      	ldr	r1, [r3, #16]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f0e:	f7fe fee9 	bl	8006ce4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6919      	ldr	r1, [r3, #16]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f7fe ff35 	bl	8006d8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	6919      	ldr	r1, [r3, #16]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	7f1b      	ldrb	r3, [r3, #28]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d102      	bne.n	8007f3a <HAL_ADC_ConfigChannel+0x126>
 8007f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f38:	e000      	b.n	8007f3c <HAL_ADC_ConfigChannel+0x128>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f7fe ff41 	bl	8006dc4 <LL_ADC_SetOffsetSaturation>
 8007f42:	e17b      	b.n	800823c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe feee 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10a      	bne.n	8007f70 <HAL_ADC_ConfigChannel+0x15c>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fe fee3 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 8007f66:	4603      	mov	r3, r0
 8007f68:	0e9b      	lsrs	r3, r3, #26
 8007f6a:	f003 021f 	and.w	r2, r3, #31
 8007f6e:	e01e      	b.n	8007fae <HAL_ADC_ConfigChannel+0x19a>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fed8 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f86:	fa93 f3a3 	rbit	r3, r3
 8007f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007f9e:	2320      	movs	r3, #32
 8007fa0:	e004      	b.n	8007fac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fa6:	fab3 f383 	clz	r3, r3
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <HAL_ADC_ConfigChannel+0x1b2>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	0e9b      	lsrs	r3, r3, #26
 8007fc0:	f003 031f 	and.w	r3, r3, #31
 8007fc4:	e018      	b.n	8007ff8 <HAL_ADC_ConfigChannel+0x1e4>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007fd2:	fa93 f3a3 	rbit	r3, r3
 8007fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8007fea:	2320      	movs	r3, #32
 8007fec:	e004      	b.n	8007ff8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ff2:	fab3 f383 	clz	r3, r3
 8007ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d106      	bne.n	800800a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f7fe fea7 	bl	8006d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2101      	movs	r1, #1
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe fe8b 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 8008016:	4603      	mov	r3, r0
 8008018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <HAL_ADC_ConfigChannel+0x222>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2101      	movs	r1, #1
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fe80 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 800802c:	4603      	mov	r3, r0
 800802e:	0e9b      	lsrs	r3, r3, #26
 8008030:	f003 021f 	and.w	r2, r3, #31
 8008034:	e01e      	b.n	8008074 <HAL_ADC_ConfigChannel+0x260>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2101      	movs	r1, #1
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe fe75 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 8008042:	4603      	mov	r3, r0
 8008044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800804c:	fa93 f3a3 	rbit	r3, r3
 8008050:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800805c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008064:	2320      	movs	r3, #32
 8008066:	e004      	b.n	8008072 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800806c:	fab3 f383 	clz	r3, r3
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800807c:	2b00      	cmp	r3, #0
 800807e:	d105      	bne.n	800808c <HAL_ADC_ConfigChannel+0x278>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	0e9b      	lsrs	r3, r3, #26
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	e018      	b.n	80080be <HAL_ADC_ConfigChannel+0x2aa>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008098:	fa93 f3a3 	rbit	r3, r3
 800809c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80080a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80080a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80080b0:	2320      	movs	r3, #32
 80080b2:	e004      	b.n	80080be <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80080b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080b8:	fab3 f383 	clz	r3, r3
 80080bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80080be:	429a      	cmp	r2, r3
 80080c0:	d106      	bne.n	80080d0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2200      	movs	r2, #0
 80080c8:	2101      	movs	r1, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fe44 	bl	8006d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2102      	movs	r1, #2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe fe28 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 80080dc:	4603      	mov	r3, r0
 80080de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <HAL_ADC_ConfigChannel+0x2e8>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2102      	movs	r1, #2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe fe1d 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 80080f2:	4603      	mov	r3, r0
 80080f4:	0e9b      	lsrs	r3, r3, #26
 80080f6:	f003 021f 	and.w	r2, r3, #31
 80080fa:	e01e      	b.n	800813a <HAL_ADC_ConfigChannel+0x326>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2102      	movs	r1, #2
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fe12 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 8008108:	4603      	mov	r3, r0
 800810a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800810e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008112:	fa93 f3a3 	rbit	r3, r3
 8008116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800811a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800811e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800812a:	2320      	movs	r3, #32
 800812c:	e004      	b.n	8008138 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800812e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008132:	fab3 f383 	clz	r3, r3
 8008136:	b2db      	uxtb	r3, r3
 8008138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008142:	2b00      	cmp	r3, #0
 8008144:	d105      	bne.n	8008152 <HAL_ADC_ConfigChannel+0x33e>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	0e9b      	lsrs	r3, r3, #26
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	e016      	b.n	8008180 <HAL_ADC_ConfigChannel+0x36c>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800815a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800815e:	fa93 f3a3 	rbit	r3, r3
 8008162:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800816a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008172:	2320      	movs	r3, #32
 8008174:	e004      	b.n	8008180 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800817a:	fab3 f383 	clz	r3, r3
 800817e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008180:	429a      	cmp	r2, r3
 8008182:	d106      	bne.n	8008192 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2200      	movs	r2, #0
 800818a:	2102      	movs	r1, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe fde3 	bl	8006d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2103      	movs	r1, #3
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fdc7 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 800819e:	4603      	mov	r3, r0
 80081a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <HAL_ADC_ConfigChannel+0x3aa>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2103      	movs	r1, #3
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fdbc 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 80081b4:	4603      	mov	r3, r0
 80081b6:	0e9b      	lsrs	r3, r3, #26
 80081b8:	f003 021f 	and.w	r2, r3, #31
 80081bc:	e017      	b.n	80081ee <HAL_ADC_ConfigChannel+0x3da>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2103      	movs	r1, #3
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fdb1 	bl	8006d2c <LL_ADC_GetOffsetChannel>
 80081ca:	4603      	mov	r3, r0
 80081cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081d0:	fa93 f3a3 	rbit	r3, r3
 80081d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80081d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80081da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80081e0:	2320      	movs	r3, #32
 80081e2:	e003      	b.n	80081ec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80081e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e6:	fab3 f383 	clz	r3, r3
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <HAL_ADC_ConfigChannel+0x3f2>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	0e9b      	lsrs	r3, r3, #26
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	e011      	b.n	800822a <HAL_ADC_ConfigChannel+0x416>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800820c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800820e:	fa93 f3a3 	rbit	r3, r3
 8008212:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008216:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800821e:	2320      	movs	r3, #32
 8008220:	e003      	b.n	800822a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008224:	fab3 f383 	clz	r3, r3
 8008228:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800822a:	429a      	cmp	r2, r3
 800822c:	d106      	bne.n	800823c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2200      	movs	r2, #0
 8008234:	2103      	movs	r1, #3
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fd8e 	bl	8006d58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe ff74 	bl	800712e <LL_ADC_IsEnabled>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 813d 	bne.w	80084c8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6819      	ldr	r1, [r3, #0]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	461a      	mov	r2, r3
 800825c:	f7fe fe5e 	bl	8006f1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4aa2      	ldr	r2, [pc, #648]	; (80084f0 <HAL_ADC_ConfigChannel+0x6dc>)
 8008266:	4293      	cmp	r3, r2
 8008268:	f040 812e 	bne.w	80084c8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10b      	bne.n	8008294 <HAL_ADC_ConfigChannel+0x480>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	0e9b      	lsrs	r3, r3, #26
 8008282:	3301      	adds	r3, #1
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	2b09      	cmp	r3, #9
 800828a:	bf94      	ite	ls
 800828c:	2301      	movls	r3, #1
 800828e:	2300      	movhi	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	e019      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x4b4>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800829a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800829c:	fa93 f3a3 	rbit	r3, r3
 80082a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80082a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80082a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80082ac:	2320      	movs	r3, #32
 80082ae:	e003      	b.n	80082b8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80082b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082b2:	fab3 f383 	clz	r3, r3
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	3301      	adds	r3, #1
 80082ba:	f003 031f 	and.w	r3, r3, #31
 80082be:	2b09      	cmp	r3, #9
 80082c0:	bf94      	ite	ls
 80082c2:	2301      	movls	r3, #1
 80082c4:	2300      	movhi	r3, #0
 80082c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d079      	beq.n	80083c0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d107      	bne.n	80082e8 <HAL_ADC_ConfigChannel+0x4d4>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	0e9b      	lsrs	r3, r3, #26
 80082de:	3301      	adds	r3, #1
 80082e0:	069b      	lsls	r3, r3, #26
 80082e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082e6:	e015      	b.n	8008314 <HAL_ADC_ConfigChannel+0x500>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082f0:	fa93 f3a3 	rbit	r3, r3
 80082f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80082f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80082fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008300:	2320      	movs	r3, #32
 8008302:	e003      	b.n	800830c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008306:	fab3 f383 	clz	r3, r3
 800830a:	b2db      	uxtb	r3, r3
 800830c:	3301      	adds	r3, #1
 800830e:	069b      	lsls	r3, r3, #26
 8008310:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <HAL_ADC_ConfigChannel+0x520>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	0e9b      	lsrs	r3, r3, #26
 8008326:	3301      	adds	r3, #1
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	2101      	movs	r1, #1
 800832e:	fa01 f303 	lsl.w	r3, r1, r3
 8008332:	e017      	b.n	8008364 <HAL_ADC_ConfigChannel+0x550>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800833a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800833c:	fa93 f3a3 	rbit	r3, r3
 8008340:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008344:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800834c:	2320      	movs	r3, #32
 800834e:	e003      	b.n	8008358 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008352:	fab3 f383 	clz	r3, r3
 8008356:	b2db      	uxtb	r3, r3
 8008358:	3301      	adds	r3, #1
 800835a:	f003 031f 	and.w	r3, r3, #31
 800835e:	2101      	movs	r1, #1
 8008360:	fa01 f303 	lsl.w	r3, r1, r3
 8008364:	ea42 0103 	orr.w	r1, r2, r3
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <HAL_ADC_ConfigChannel+0x576>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	0e9b      	lsrs	r3, r3, #26
 800837a:	3301      	adds	r3, #1
 800837c:	f003 021f 	and.w	r2, r3, #31
 8008380:	4613      	mov	r3, r2
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	4413      	add	r3, r2
 8008386:	051b      	lsls	r3, r3, #20
 8008388:	e018      	b.n	80083bc <HAL_ADC_ConfigChannel+0x5a8>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	fa93 f3a3 	rbit	r3, r3
 8008396:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800839c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80083a2:	2320      	movs	r3, #32
 80083a4:	e003      	b.n	80083ae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	fab3 f383 	clz	r3, r3
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	3301      	adds	r3, #1
 80083b0:	f003 021f 	and.w	r2, r3, #31
 80083b4:	4613      	mov	r3, r2
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	4413      	add	r3, r2
 80083ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083bc:	430b      	orrs	r3, r1
 80083be:	e07e      	b.n	80084be <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d107      	bne.n	80083dc <HAL_ADC_ConfigChannel+0x5c8>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	0e9b      	lsrs	r3, r3, #26
 80083d2:	3301      	adds	r3, #1
 80083d4:	069b      	lsls	r3, r3, #26
 80083d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80083da:	e015      	b.n	8008408 <HAL_ADC_ConfigChannel+0x5f4>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	fa93 f3a3 	rbit	r3, r3
 80083e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80083f4:	2320      	movs	r3, #32
 80083f6:	e003      	b.n	8008400 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	fab3 f383 	clz	r3, r3
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	3301      	adds	r3, #1
 8008402:	069b      	lsls	r3, r3, #26
 8008404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008410:	2b00      	cmp	r3, #0
 8008412:	d109      	bne.n	8008428 <HAL_ADC_ConfigChannel+0x614>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	0e9b      	lsrs	r3, r3, #26
 800841a:	3301      	adds	r3, #1
 800841c:	f003 031f 	and.w	r3, r3, #31
 8008420:	2101      	movs	r1, #1
 8008422:	fa01 f303 	lsl.w	r3, r1, r3
 8008426:	e017      	b.n	8008458 <HAL_ADC_ConfigChannel+0x644>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	fa93 f3a3 	rbit	r3, r3
 8008434:	61fb      	str	r3, [r7, #28]
  return result;
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008440:	2320      	movs	r3, #32
 8008442:	e003      	b.n	800844c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	fab3 f383 	clz	r3, r3
 800844a:	b2db      	uxtb	r3, r3
 800844c:	3301      	adds	r3, #1
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	2101      	movs	r1, #1
 8008454:	fa01 f303 	lsl.w	r3, r1, r3
 8008458:	ea42 0103 	orr.w	r1, r2, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10d      	bne.n	8008484 <HAL_ADC_ConfigChannel+0x670>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	0e9b      	lsrs	r3, r3, #26
 800846e:	3301      	adds	r3, #1
 8008470:	f003 021f 	and.w	r2, r3, #31
 8008474:	4613      	mov	r3, r2
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	4413      	add	r3, r2
 800847a:	3b1e      	subs	r3, #30
 800847c:	051b      	lsls	r3, r3, #20
 800847e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008482:	e01b      	b.n	80084bc <HAL_ADC_ConfigChannel+0x6a8>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	fa93 f3a3 	rbit	r3, r3
 8008490:	613b      	str	r3, [r7, #16]
  return result;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800849c:	2320      	movs	r3, #32
 800849e:	e003      	b.n	80084a8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	fab3 f383 	clz	r3, r3
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	3301      	adds	r3, #1
 80084aa:	f003 021f 	and.w	r2, r3, #31
 80084ae:	4613      	mov	r3, r2
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	4413      	add	r3, r2
 80084b4:	3b1e      	subs	r3, #30
 80084b6:	051b      	lsls	r3, r3, #20
 80084b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80084bc:	430b      	orrs	r3, r1
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	6892      	ldr	r2, [r2, #8]
 80084c2:	4619      	mov	r1, r3
 80084c4:	f7fe fcfe 	bl	8006ec4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <HAL_ADC_ConfigChannel+0x6e0>)
 80084ce:	4013      	ands	r3, r2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 80be 	beq.w	8008652 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084de:	d004      	beq.n	80084ea <HAL_ADC_ConfigChannel+0x6d6>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a04      	ldr	r2, [pc, #16]	; (80084f8 <HAL_ADC_ConfigChannel+0x6e4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d10a      	bne.n	8008500 <HAL_ADC_ConfigChannel+0x6ec>
 80084ea:	4b04      	ldr	r3, [pc, #16]	; (80084fc <HAL_ADC_ConfigChannel+0x6e8>)
 80084ec:	e009      	b.n	8008502 <HAL_ADC_ConfigChannel+0x6ee>
 80084ee:	bf00      	nop
 80084f0:	407f0000 	.word	0x407f0000
 80084f4:	80080000 	.word	0x80080000
 80084f8:	50000100 	.word	0x50000100
 80084fc:	50000300 	.word	0x50000300
 8008500:	4b59      	ldr	r3, [pc, #356]	; (8008668 <HAL_ADC_ConfigChannel+0x854>)
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe fbe0 	bl	8006cc8 <LL_ADC_GetCommonPathInternalCh>
 8008508:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a56      	ldr	r2, [pc, #344]	; (800866c <HAL_ADC_ConfigChannel+0x858>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <HAL_ADC_ConfigChannel+0x70c>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a55      	ldr	r2, [pc, #340]	; (8008670 <HAL_ADC_ConfigChannel+0x85c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d13a      	bne.n	8008596 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d134      	bne.n	8008596 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008534:	d005      	beq.n	8008542 <HAL_ADC_ConfigChannel+0x72e>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a4e      	ldr	r2, [pc, #312]	; (8008674 <HAL_ADC_ConfigChannel+0x860>)
 800853c:	4293      	cmp	r3, r2
 800853e:	f040 8085 	bne.w	800864c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800854a:	d004      	beq.n	8008556 <HAL_ADC_ConfigChannel+0x742>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a49      	ldr	r2, [pc, #292]	; (8008678 <HAL_ADC_ConfigChannel+0x864>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d101      	bne.n	800855a <HAL_ADC_ConfigChannel+0x746>
 8008556:	4a49      	ldr	r2, [pc, #292]	; (800867c <HAL_ADC_ConfigChannel+0x868>)
 8008558:	e000      	b.n	800855c <HAL_ADC_ConfigChannel+0x748>
 800855a:	4a43      	ldr	r2, [pc, #268]	; (8008668 <HAL_ADC_ConfigChannel+0x854>)
 800855c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008564:	4619      	mov	r1, r3
 8008566:	4610      	mov	r0, r2
 8008568:	f7fe fb9b 	bl	8006ca2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800856c:	4b44      	ldr	r3, [pc, #272]	; (8008680 <HAL_ADC_ConfigChannel+0x86c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	099b      	lsrs	r3, r3, #6
 8008572:	4a44      	ldr	r2, [pc, #272]	; (8008684 <HAL_ADC_ConfigChannel+0x870>)
 8008574:	fba2 2303 	umull	r2, r3, r2, r3
 8008578:	099b      	lsrs	r3, r3, #6
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	4613      	mov	r3, r2
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008586:	e002      	b.n	800858e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3b01      	subs	r3, #1
 800858c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1f9      	bne.n	8008588 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008594:	e05a      	b.n	800864c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a3b      	ldr	r2, [pc, #236]	; (8008688 <HAL_ADC_ConfigChannel+0x874>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d125      	bne.n	80085ec <HAL_ADC_ConfigChannel+0x7d8>
 80085a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80085a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d11f      	bne.n	80085ec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a31      	ldr	r2, [pc, #196]	; (8008678 <HAL_ADC_ConfigChannel+0x864>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d104      	bne.n	80085c0 <HAL_ADC_ConfigChannel+0x7ac>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a34      	ldr	r2, [pc, #208]	; (800868c <HAL_ADC_ConfigChannel+0x878>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d047      	beq.n	8008650 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085c8:	d004      	beq.n	80085d4 <HAL_ADC_ConfigChannel+0x7c0>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a2a      	ldr	r2, [pc, #168]	; (8008678 <HAL_ADC_ConfigChannel+0x864>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d101      	bne.n	80085d8 <HAL_ADC_ConfigChannel+0x7c4>
 80085d4:	4a29      	ldr	r2, [pc, #164]	; (800867c <HAL_ADC_ConfigChannel+0x868>)
 80085d6:	e000      	b.n	80085da <HAL_ADC_ConfigChannel+0x7c6>
 80085d8:	4a23      	ldr	r2, [pc, #140]	; (8008668 <HAL_ADC_ConfigChannel+0x854>)
 80085da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80085de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7fe fb5c 	bl	8006ca2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80085ea:	e031      	b.n	8008650 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a27      	ldr	r2, [pc, #156]	; (8008690 <HAL_ADC_ConfigChannel+0x87c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d12d      	bne.n	8008652 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80085f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80085fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d127      	bne.n	8008652 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a1c      	ldr	r2, [pc, #112]	; (8008678 <HAL_ADC_ConfigChannel+0x864>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d022      	beq.n	8008652 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008614:	d004      	beq.n	8008620 <HAL_ADC_ConfigChannel+0x80c>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a17      	ldr	r2, [pc, #92]	; (8008678 <HAL_ADC_ConfigChannel+0x864>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d101      	bne.n	8008624 <HAL_ADC_ConfigChannel+0x810>
 8008620:	4a16      	ldr	r2, [pc, #88]	; (800867c <HAL_ADC_ConfigChannel+0x868>)
 8008622:	e000      	b.n	8008626 <HAL_ADC_ConfigChannel+0x812>
 8008624:	4a10      	ldr	r2, [pc, #64]	; (8008668 <HAL_ADC_ConfigChannel+0x854>)
 8008626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800862a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f7fe fb36 	bl	8006ca2 <LL_ADC_SetCommonPathInternalCh>
 8008636:	e00c      	b.n	8008652 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800863c:	f043 0220 	orr.w	r2, r3, #32
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800864a:	e002      	b.n	8008652 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800864c:	bf00      	nop
 800864e:	e000      	b.n	8008652 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008650:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800865a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800865e:	4618      	mov	r0, r3
 8008660:	37d8      	adds	r7, #216	; 0xd8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	50000700 	.word	0x50000700
 800866c:	c3210000 	.word	0xc3210000
 8008670:	90c00010 	.word	0x90c00010
 8008674:	50000600 	.word	0x50000600
 8008678:	50000100 	.word	0x50000100
 800867c:	50000300 	.word	0x50000300
 8008680:	20000008 	.word	0x20000008
 8008684:	053e2d63 	.word	0x053e2d63
 8008688:	c7520000 	.word	0xc7520000
 800868c:	50000500 	.word	0x50000500
 8008690:	cb840000 	.word	0xcb840000

08008694 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08e      	sub	sp, #56	; 0x38
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086ac:	d003      	beq.n	80086b6 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80086b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_ADC_AnalogWDGConfig+0x30>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e1ea      	b.n	8008a9a <HAL_ADC_AnalogWDGConfig+0x406>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fd7a 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 80086d6:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fe fd9b 	bl	8007218 <LL_ADC_INJ_IsConversionOngoing>
 80086e2:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 8175 	bne.w	80089d6 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 8171 	bne.w	80089d6 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a90      	ldr	r2, [pc, #576]	; (800893c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	f040 808d 	bne.w	800881a <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008708:	d034      	beq.n	8008774 <HAL_ADC_AnalogWDGConfig+0xe0>
 800870a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800870e:	d856      	bhi.n	80087be <HAL_ADC_AnalogWDGConfig+0x12a>
 8008710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008714:	d04b      	beq.n	80087ae <HAL_ADC_AnalogWDGConfig+0x11a>
 8008716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800871a:	d850      	bhi.n	80087be <HAL_ADC_AnalogWDGConfig+0x12a>
 800871c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008720:	d01b      	beq.n	800875a <HAL_ADC_AnalogWDGConfig+0xc6>
 8008722:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008726:	d84a      	bhi.n	80087be <HAL_ADC_AnalogWDGConfig+0x12a>
 8008728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800872c:	d037      	beq.n	800879e <HAL_ADC_AnalogWDGConfig+0x10a>
 800872e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008732:	d844      	bhi.n	80087be <HAL_ADC_AnalogWDGConfig+0x12a>
 8008734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008738:	d029      	beq.n	800878e <HAL_ADC_AnalogWDGConfig+0xfa>
 800873a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800873e:	d13e      	bne.n	80087be <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6818      	ldr	r0, [r3, #0]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800874c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008750:	461a      	mov	r2, r3
 8008752:	497a      	ldr	r1, [pc, #488]	; (800893c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008754:	f7fe fc0a 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8008758:	e039      	b.n	80087ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008766:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800876a:	461a      	mov	r2, r3
 800876c:	4973      	ldr	r1, [pc, #460]	; (800893c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800876e:	f7fe fbfd 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8008772:	e02c      	b.n	80087ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008780:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8008784:	461a      	mov	r2, r3
 8008786:	496d      	ldr	r1, [pc, #436]	; (800893c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008788:	f7fe fbf0 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 800878c:	e01f      	b.n	80087ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a6b      	ldr	r2, [pc, #428]	; (8008940 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8008794:	4969      	ldr	r1, [pc, #420]	; (800893c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fbe8 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800879c:	e017      	b.n	80087ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a68      	ldr	r2, [pc, #416]	; (8008944 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 80087a4:	4965      	ldr	r1, [pc, #404]	; (800893c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fbe0 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80087ac:	e00f      	b.n	80087ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a65      	ldr	r2, [pc, #404]	; (8008948 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80087b4:	4961      	ldr	r1, [pc, #388]	; (800893c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe fbd8 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80087bc:	e007      	b.n	80087ce <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	495d      	ldr	r1, [pc, #372]	; (800893c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fbd0 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80087cc:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	699a      	ldr	r2, [r3, #24]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fd22 	bl	800723e <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	7b1b      	ldrb	r3, [r3, #12]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d105      	bne.n	800880e <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe fd42 	bl	8007290 <LL_ADC_EnableIT_AWD1>
 800880c:	e0e3      	b.n	80089d6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe fd6c 	bl	80072f0 <LL_ADC_DisableIT_AWD1>
 8008818:	e0dd      	b.n	80089d6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008822:	d01d      	beq.n	8008860 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8008824:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008828:	f200 8092 	bhi.w	8008950 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800882c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008830:	d07b      	beq.n	800892a <HAL_ADC_AnalogWDGConfig+0x296>
 8008832:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008836:	f200 808b 	bhi.w	8008950 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800883a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800883e:	d00f      	beq.n	8008860 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8008840:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008844:	f200 8084 	bhi.w	8008950 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800884c:	d06d      	beq.n	800892a <HAL_ADC_AnalogWDGConfig+0x296>
 800884e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008852:	d87d      	bhi.n	8008950 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008858:	d067      	beq.n	800892a <HAL_ADC_AnalogWDGConfig+0x296>
 800885a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800885e:	d177      	bne.n	8008950 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a39      	ldr	r2, [pc, #228]	; (800894c <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d12f      	bne.n	80088ca <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008872:	2b00      	cmp	r3, #0
 8008874:	d108      	bne.n	8008888 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	0e9b      	lsrs	r3, r3, #26
 800887c:	f003 031f 	and.w	r3, r3, #31
 8008880:	2201      	movs	r2, #1
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	e016      	b.n	80088b6 <HAL_ADC_AnalogWDGConfig+0x222>
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	fa93 f3a3 	rbit	r3, r3
 8008894:	61bb      	str	r3, [r7, #24]
  return result;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80088a0:	2320      	movs	r3, #32
 80088a2:	e003      	b.n	80088ac <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	fab3 f383 	clz	r3, r3
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	2201      	movs	r2, #1
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6812      	ldr	r2, [r2, #0]
 80088c2:	430b      	orrs	r3, r1
 80088c4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80088c8:	e04b      	b.n	8008962 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d108      	bne.n	80088e8 <HAL_ADC_AnalogWDGConfig+0x254>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	0e9b      	lsrs	r3, r3, #26
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	2201      	movs	r2, #1
 80088e2:	fa02 f303 	lsl.w	r3, r2, r3
 80088e6:	e016      	b.n	8008916 <HAL_ADC_AnalogWDGConfig+0x282>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	fa93 f3a3 	rbit	r3, r3
 80088f4:	60fb      	str	r3, [r7, #12]
  return result;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8008900:	2320      	movs	r3, #32
 8008902:	e003      	b.n	800890c <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	fab3 f383 	clz	r3, r3
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	2201      	movs	r2, #1
 8008912:	fa02 f303 	lsl.w	r3, r2, r3
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6812      	ldr	r2, [r2, #0]
 800891a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	430b      	orrs	r3, r1
 8008924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8008928:	e01b      	b.n	8008962 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a05      	ldr	r2, [pc, #20]	; (8008948 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008934:	4619      	mov	r1, r3
 8008936:	f7fe fb19 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800893a:	e012      	b.n	8008962 <HAL_ADC_AnalogWDGConfig+0x2ce>
 800893c:	7dc00000 	.word	0x7dc00000
 8008940:	0087ffff 	.word	0x0087ffff
 8008944:	0107ffff 	.word	0x0107ffff
 8008948:	0187ffff 	.word	0x0187ffff
 800894c:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2200      	movs	r2, #0
 800895a:	4619      	mov	r1, r3
 800895c:	f7fe fb06 	bl	8006f6c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008960:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a4f      	ldr	r2, [pc, #316]	; (8008aa4 <HAL_ADC_AnalogWDGConfig+0x410>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d11a      	bne.n	80089a2 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008970:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fc6b 	bl	8007258 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	7b1b      	ldrb	r3, [r3, #12]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d105      	bne.n	8008996 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fc8e 	bl	80072b0 <LL_ADC_EnableIT_AWD2>
 8008994:	e01f      	b.n	80089d6 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fcb8 	bl	8007310 <LL_ADC_DisableIT_AWD2>
 80089a0:	e019      	b.n	80089d6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fc5e 	bl	8007274 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	7b1b      	ldrb	r3, [r3, #12]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d105      	bne.n	80089cc <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe fc83 	bl	80072d0 <LL_ADC_EnableIT_AWD3>
 80089ca:	e004      	b.n	80089d6 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fcad 	bl	8007330 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a33      	ldr	r2, [pc, #204]	; (8008aa8 <HAL_ADC_AnalogWDGConfig+0x414>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d118      	bne.n	8008a12 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	08db      	lsrs	r3, r3, #3
 80089ec:	f003 0303 	and.w	r3, r3, #3
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	695a      	ldr	r2, [r3, #20]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	08db      	lsrs	r3, r3, #3
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a10:	e035      	b.n	8008a7e <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f003 0318 	and.w	r3, r3, #24
 8008a1c:	2b18      	cmp	r3, #24
 8008a1e:	d00f      	beq.n	8008a40 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	691a      	ldr	r2, [r3, #16]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	08db      	lsrs	r3, r3, #3
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	f1c3 0302 	rsb	r3, r3, #2
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	f003 031e 	and.w	r3, r3, #30
 8008a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3e:	e002      	b.n	8008a46 <HAL_ADC_AnalogWDGConfig+0x3b2>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f003 0318 	and.w	r3, r3, #24
 8008a52:	2b18      	cmp	r3, #24
 8008a54:	d00f      	beq.n	8008a76 <HAL_ADC_AnalogWDGConfig+0x3e2>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	695a      	ldr	r2, [r3, #20]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	08db      	lsrs	r3, r3, #3
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	f1c3 0302 	rsb	r3, r3, #2
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	f003 031e 	and.w	r3, r3, #30
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
 8008a74:	e002      	b.n	8008a7c <HAL_ADC_AnalogWDGConfig+0x3e8>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6819      	ldr	r1, [r3, #0]
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a8a:	f7fe fa9c 	bl	8006fc6 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3738      	adds	r7, #56	; 0x38
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	0017ffff 	.word	0x0017ffff
 8008aa8:	7dc00000 	.word	0x7dc00000

08008aac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fb81 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 8008ac8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe fba2 	bl	8007218 <LL_ADC_INJ_IsConversionOngoing>
 8008ad4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 8098 	beq.w	8008c14 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d02a      	beq.n	8008b48 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7f5b      	ldrb	r3, [r3, #29]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d126      	bne.n	8008b48 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	7f1b      	ldrb	r3, [r3, #28]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d122      	bne.n	8008b48 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008b02:	2301      	movs	r3, #1
 8008b04:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008b06:	e014      	b.n	8008b32 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	4a45      	ldr	r2, [pc, #276]	; (8008c20 <ADC_ConversionStop+0x174>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d90d      	bls.n	8008b2c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b14:	f043 0210 	orr.w	r2, r3, #16
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b20:	f043 0201 	orr.w	r2, r3, #1
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e074      	b.n	8008c16 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3c:	2b40      	cmp	r3, #64	; 0x40
 8008b3e:	d1e3      	bne.n	8008b08 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2240      	movs	r2, #64	; 0x40
 8008b46:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d014      	beq.n	8008b78 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fb39 	bl	80071ca <LL_ADC_REG_IsConversionOngoing>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00c      	beq.n	8008b78 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe faf6 	bl	8007154 <LL_ADC_IsDisableOngoing>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d104      	bne.n	8008b78 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fb15 	bl	80071a2 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d014      	beq.n	8008ba8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fb48 	bl	8007218 <LL_ADC_INJ_IsConversionOngoing>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00c      	beq.n	8008ba8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fade 	bl	8007154 <LL_ADC_IsDisableOngoing>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d104      	bne.n	8008ba8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe fb24 	bl	80071f0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d005      	beq.n	8008bba <ADC_ConversionStop+0x10e>
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d105      	bne.n	8008bc0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	617b      	str	r3, [r7, #20]
        break;
 8008bb8:	e005      	b.n	8008bc6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008bba:	2308      	movs	r3, #8
 8008bbc:	617b      	str	r3, [r7, #20]
        break;
 8008bbe:	e002      	b.n	8008bc6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	617b      	str	r3, [r7, #20]
        break;
 8008bc4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008bc6:	f7fe f807 	bl	8006bd8 <HAL_GetTick>
 8008bca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008bcc:	e01b      	b.n	8008c06 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008bce:	f7fe f803 	bl	8006bd8 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	2b05      	cmp	r3, #5
 8008bda:	d914      	bls.n	8008c06 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689a      	ldr	r2, [r3, #8]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	4013      	ands	r3, r2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00d      	beq.n	8008c06 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bee:	f043 0210 	orr.w	r2, r3, #16
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bfa:	f043 0201 	orr.w	r2, r3, #1
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e007      	b.n	8008c16 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1dc      	bne.n	8008bce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	a33fffff 	.word	0xa33fffff

08008c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe fa7c 	bl	800712e <LL_ADC_IsEnabled>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d14d      	bne.n	8008cd8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	4b28      	ldr	r3, [pc, #160]	; (8008ce4 <ADC_Enable+0xc0>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00d      	beq.n	8008c66 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4e:	f043 0210 	orr.w	r2, r3, #16
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c5a:	f043 0201 	orr.w	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e039      	b.n	8008cda <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe fa37 	bl	80070de <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008c70:	f7fd ffb2 	bl	8006bd8 <HAL_GetTick>
 8008c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c76:	e028      	b.n	8008cca <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe fa56 	bl	800712e <LL_ADC_IsEnabled>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d104      	bne.n	8008c92 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fa26 	bl	80070de <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c92:	f7fd ffa1 	bl	8006bd8 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d914      	bls.n	8008cca <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d00d      	beq.n	8008cca <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb2:	f043 0210 	orr.w	r2, r3, #16
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cbe:	f043 0201 	orr.w	r2, r3, #1
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e007      	b.n	8008cda <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d1cf      	bne.n	8008c78 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	8000003f 	.word	0x8000003f

08008ce8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe fa2d 	bl	8007154 <LL_ADC_IsDisableOngoing>
 8008cfa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fa14 	bl	800712e <LL_ADC_IsEnabled>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d047      	beq.n	8008d9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d144      	bne.n	8008d9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f003 030d 	and.w	r3, r3, #13
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d10c      	bne.n	8008d3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe f9ee 	bl	8007106 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2203      	movs	r2, #3
 8008d30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008d32:	f7fd ff51 	bl	8006bd8 <HAL_GetTick>
 8008d36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d38:	e029      	b.n	8008d8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3e:	f043 0210 	orr.w	r2, r3, #16
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d4a:	f043 0201 	orr.w	r2, r3, #1
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e023      	b.n	8008d9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008d56:	f7fd ff3f 	bl	8006bd8 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d914      	bls.n	8008d8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00d      	beq.n	8008d8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d76:	f043 0210 	orr.w	r2, r3, #16
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d82:	f043 0201 	orr.w	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e007      	b.n	8008d9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1dc      	bne.n	8008d56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d14b      	bne.n	8008e58 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0308 	and.w	r3, r3, #8
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d021      	beq.n	8008e1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe f81e 	bl	8006e20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d032      	beq.n	8008e50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d12b      	bne.n	8008e50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d11f      	bne.n	8008e50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e14:	f043 0201 	orr.w	r2, r3, #1
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e1c:	e018      	b.n	8008e50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d111      	bne.n	8008e50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e48:	f043 0201 	orr.w	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7fc fc1b 	bl	800568c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008e56:	e00e      	b.n	8008e76 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7fe ffcb 	bl	8007e00 <HAL_ADC_ErrorCallback>
}
 8008e6a:	e004      	b.n	8008e76 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f7fc fbf3 	bl	8005678 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e92:	bf00      	nop
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eb8:	f043 0204 	orr.w	r2, r3, #4
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7fe ff9d 	bl	8007e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <LL_ADC_IsEnabled>:
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <LL_ADC_IsEnabled+0x18>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e000      	b.n	8008ee8 <LL_ADC_IsEnabled+0x1a>
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <LL_ADC_StartCalibration>:
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008f06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f10:	4313      	orrs	r3, r2
 8008f12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	609a      	str	r2, [r3, #8]
}
 8008f1a:	bf00      	nop
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <LL_ADC_IsCalibrationOnGoing>:
{
 8008f26:	b480      	push	{r7}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f3a:	d101      	bne.n	8008f40 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e000      	b.n	8008f42 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <LL_ADC_REG_IsConversionOngoing>:
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 0304 	and.w	r3, r3, #4
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d101      	bne.n	8008f66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e000      	b.n	8008f68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_ADCEx_Calibration_Start+0x1c>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e04d      	b.n	800902c <HAL_ADCEx_Calibration_Start+0xb8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff fea5 	bl	8008ce8 <ADC_Disable>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d136      	bne.n	8009016 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008fb0:	f023 0302 	bic.w	r3, r3, #2
 8008fb4:	f043 0202 	orr.w	r2, r3, #2
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff ff96 	bl	8008ef4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008fc8:	e014      	b.n	8008ff4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4a18      	ldr	r2, [pc, #96]	; (8009034 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d90d      	bls.n	8008ff4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fdc:	f023 0312 	bic.w	r3, r3, #18
 8008fe0:	f043 0210 	orr.w	r2, r3, #16
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e01b      	b.n	800902c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff ff94 	bl	8008f26 <LL_ADC_IsCalibrationOnGoing>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e2      	bne.n	8008fca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009008:	f023 0303 	bic.w	r3, r3, #3
 800900c:	f043 0201 	orr.w	r2, r3, #1
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	65da      	str	r2, [r3, #92]	; 0x5c
 8009014:	e005      	b.n	8009022 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901a:	f043 0210 	orr.w	r2, r3, #16
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	0004de01 	.word	0x0004de01

08009038 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009088:	b590      	push	{r4, r7, lr}
 800908a:	b0a1      	sub	sp, #132	; 0x84
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d101      	bne.n	80090a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80090a2:	2302      	movs	r3, #2
 80090a4:	e0e7      	b.n	8009276 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80090ae:	2300      	movs	r3, #0
 80090b0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80090b2:	2300      	movs	r3, #0
 80090b4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090be:	d102      	bne.n	80090c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80090c0:	4b6f      	ldr	r3, [pc, #444]	; (8009280 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80090c2:	60bb      	str	r3, [r7, #8]
 80090c4:	e009      	b.n	80090da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a6e      	ldr	r2, [pc, #440]	; (8009284 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d102      	bne.n	80090d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80090d0:	4b6d      	ldr	r3, [pc, #436]	; (8009288 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80090d2:	60bb      	str	r3, [r7, #8]
 80090d4:	e001      	b.n	80090da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80090d6:	2300      	movs	r3, #0
 80090d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10b      	bne.n	80090f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e4:	f043 0220 	orr.w	r2, r3, #32
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0be      	b.n	8009276 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff ff27 	bl	8008f4e <LL_ADC_REG_IsConversionOngoing>
 8009100:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff ff21 	bl	8008f4e <LL_ADC_REG_IsConversionOngoing>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	f040 80a0 	bne.w	8009254 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009116:	2b00      	cmp	r3, #0
 8009118:	f040 809c 	bne.w	8009254 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009124:	d004      	beq.n	8009130 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a55      	ldr	r2, [pc, #340]	; (8009280 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d101      	bne.n	8009134 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8009130:	4b56      	ldr	r3, [pc, #344]	; (800928c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009132:	e000      	b.n	8009136 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8009134:	4b56      	ldr	r3, [pc, #344]	; (8009290 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8009136:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d04b      	beq.n	80091d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	6859      	ldr	r1, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009152:	035b      	lsls	r3, r3, #13
 8009154:	430b      	orrs	r3, r1
 8009156:	431a      	orrs	r2, r3
 8009158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800915a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009164:	d004      	beq.n	8009170 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a45      	ldr	r2, [pc, #276]	; (8009280 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10f      	bne.n	8009190 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8009170:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009174:	f7ff feab 	bl	8008ece <LL_ADC_IsEnabled>
 8009178:	4604      	mov	r4, r0
 800917a:	4841      	ldr	r0, [pc, #260]	; (8009280 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800917c:	f7ff fea7 	bl	8008ece <LL_ADC_IsEnabled>
 8009180:	4603      	mov	r3, r0
 8009182:	4323      	orrs	r3, r4
 8009184:	2b00      	cmp	r3, #0
 8009186:	bf0c      	ite	eq
 8009188:	2301      	moveq	r3, #1
 800918a:	2300      	movne	r3, #0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	e012      	b.n	80091b6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8009190:	483c      	ldr	r0, [pc, #240]	; (8009284 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009192:	f7ff fe9c 	bl	8008ece <LL_ADC_IsEnabled>
 8009196:	4604      	mov	r4, r0
 8009198:	483b      	ldr	r0, [pc, #236]	; (8009288 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800919a:	f7ff fe98 	bl	8008ece <LL_ADC_IsEnabled>
 800919e:	4603      	mov	r3, r0
 80091a0:	431c      	orrs	r4, r3
 80091a2:	483c      	ldr	r0, [pc, #240]	; (8009294 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80091a4:	f7ff fe93 	bl	8008ece <LL_ADC_IsEnabled>
 80091a8:	4603      	mov	r3, r0
 80091aa:	4323      	orrs	r3, r4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bf0c      	ite	eq
 80091b0:	2301      	moveq	r3, #1
 80091b2:	2300      	movne	r3, #0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d056      	beq.n	8009268 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80091ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80091c2:	f023 030f 	bic.w	r3, r3, #15
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	6811      	ldr	r1, [r2, #0]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	6892      	ldr	r2, [r2, #8]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	431a      	orrs	r2, r3
 80091d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091d6:	e047      	b.n	8009268 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80091d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ec:	d004      	beq.n	80091f8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a23      	ldr	r2, [pc, #140]	; (8009280 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d10f      	bne.n	8009218 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80091f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80091fc:	f7ff fe67 	bl	8008ece <LL_ADC_IsEnabled>
 8009200:	4604      	mov	r4, r0
 8009202:	481f      	ldr	r0, [pc, #124]	; (8009280 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009204:	f7ff fe63 	bl	8008ece <LL_ADC_IsEnabled>
 8009208:	4603      	mov	r3, r0
 800920a:	4323      	orrs	r3, r4
 800920c:	2b00      	cmp	r3, #0
 800920e:	bf0c      	ite	eq
 8009210:	2301      	moveq	r3, #1
 8009212:	2300      	movne	r3, #0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	e012      	b.n	800923e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009218:	481a      	ldr	r0, [pc, #104]	; (8009284 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800921a:	f7ff fe58 	bl	8008ece <LL_ADC_IsEnabled>
 800921e:	4604      	mov	r4, r0
 8009220:	4819      	ldr	r0, [pc, #100]	; (8009288 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009222:	f7ff fe54 	bl	8008ece <LL_ADC_IsEnabled>
 8009226:	4603      	mov	r3, r0
 8009228:	431c      	orrs	r4, r3
 800922a:	481a      	ldr	r0, [pc, #104]	; (8009294 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800922c:	f7ff fe4f 	bl	8008ece <LL_ADC_IsEnabled>
 8009230:	4603      	mov	r3, r0
 8009232:	4323      	orrs	r3, r4
 8009234:	2b00      	cmp	r3, #0
 8009236:	bf0c      	ite	eq
 8009238:	2301      	moveq	r3, #1
 800923a:	2300      	movne	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d012      	beq.n	8009268 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800924a:	f023 030f 	bic.w	r3, r3, #15
 800924e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009250:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009252:	e009      	b.n	8009268 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009258:	f043 0220 	orr.w	r2, r3, #32
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009266:	e000      	b.n	800926a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009268:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009272:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009276:	4618      	mov	r0, r3
 8009278:	3784      	adds	r7, #132	; 0x84
 800927a:	46bd      	mov	sp, r7
 800927c:	bd90      	pop	{r4, r7, pc}
 800927e:	bf00      	nop
 8009280:	50000100 	.word	0x50000100
 8009284:	50000400 	.word	0x50000400
 8009288:	50000500 	.word	0x50000500
 800928c:	50000300 	.word	0x50000300
 8009290:	50000700 	.word	0x50000700
 8009294:	50000600 	.word	0x50000600

08009298 <__NVIC_SetPriorityGrouping>:
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <__NVIC_SetPriorityGrouping+0x44>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80092b4:	4013      	ands	r3, r2
 80092b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80092c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80092c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80092ca:	4a04      	ldr	r2, [pc, #16]	; (80092dc <__NVIC_SetPriorityGrouping+0x44>)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	60d3      	str	r3, [r2, #12]
}
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	e000ed00 	.word	0xe000ed00

080092e0 <__NVIC_GetPriorityGrouping>:
{
 80092e0:	b480      	push	{r7}
 80092e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80092e4:	4b04      	ldr	r3, [pc, #16]	; (80092f8 <__NVIC_GetPriorityGrouping+0x18>)
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	0a1b      	lsrs	r3, r3, #8
 80092ea:	f003 0307 	and.w	r3, r3, #7
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	e000ed00 	.word	0xe000ed00

080092fc <__NVIC_EnableIRQ>:
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800930a:	2b00      	cmp	r3, #0
 800930c:	db0b      	blt.n	8009326 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	f003 021f 	and.w	r2, r3, #31
 8009314:	4907      	ldr	r1, [pc, #28]	; (8009334 <__NVIC_EnableIRQ+0x38>)
 8009316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	2001      	movs	r0, #1
 800931e:	fa00 f202 	lsl.w	r2, r0, r2
 8009322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	e000e100 	.word	0xe000e100

08009338 <__NVIC_SetPriority>:
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009348:	2b00      	cmp	r3, #0
 800934a:	db0a      	blt.n	8009362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	b2da      	uxtb	r2, r3
 8009350:	490c      	ldr	r1, [pc, #48]	; (8009384 <__NVIC_SetPriority+0x4c>)
 8009352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009356:	0112      	lsls	r2, r2, #4
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	440b      	add	r3, r1
 800935c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009360:	e00a      	b.n	8009378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	b2da      	uxtb	r2, r3
 8009366:	4908      	ldr	r1, [pc, #32]	; (8009388 <__NVIC_SetPriority+0x50>)
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	3b04      	subs	r3, #4
 8009370:	0112      	lsls	r2, r2, #4
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	440b      	add	r3, r1
 8009376:	761a      	strb	r2, [r3, #24]
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	e000e100 	.word	0xe000e100
 8009388:	e000ed00 	.word	0xe000ed00

0800938c <NVIC_EncodePriority>:
{
 800938c:	b480      	push	{r7}
 800938e:	b089      	sub	sp, #36	; 0x24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f1c3 0307 	rsb	r3, r3, #7
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	bf28      	it	cs
 80093aa:	2304      	movcs	r3, #4
 80093ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	3304      	adds	r3, #4
 80093b2:	2b06      	cmp	r3, #6
 80093b4:	d902      	bls.n	80093bc <NVIC_EncodePriority+0x30>
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	3b03      	subs	r3, #3
 80093ba:	e000      	b.n	80093be <NVIC_EncodePriority+0x32>
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093c0:	f04f 32ff 	mov.w	r2, #4294967295
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ca:	43da      	mvns	r2, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	401a      	ands	r2, r3
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80093d4:	f04f 31ff 	mov.w	r1, #4294967295
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	fa01 f303 	lsl.w	r3, r1, r3
 80093de:	43d9      	mvns	r1, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093e4:	4313      	orrs	r3, r2
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3724      	adds	r7, #36	; 0x24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <SysTick_Config>:
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3b01      	subs	r3, #1
 8009400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009404:	d301      	bcc.n	800940a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009406:	2301      	movs	r3, #1
 8009408:	e00f      	b.n	800942a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800940a:	4a0a      	ldr	r2, [pc, #40]	; (8009434 <SysTick_Config+0x40>)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3b01      	subs	r3, #1
 8009410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009412:	210f      	movs	r1, #15
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	f7ff ff8e 	bl	8009338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800941c:	4b05      	ldr	r3, [pc, #20]	; (8009434 <SysTick_Config+0x40>)
 800941e:	2200      	movs	r2, #0
 8009420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009422:	4b04      	ldr	r3, [pc, #16]	; (8009434 <SysTick_Config+0x40>)
 8009424:	2207      	movs	r2, #7
 8009426:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	e000e010 	.word	0xe000e010

08009438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff ff29 	bl	8009298 <__NVIC_SetPriorityGrouping>
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b086      	sub	sp, #24
 8009452:	af00      	add	r7, sp, #0
 8009454:	4603      	mov	r3, r0
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800945c:	f7ff ff40 	bl	80092e0 <__NVIC_GetPriorityGrouping>
 8009460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	6978      	ldr	r0, [r7, #20]
 8009468:	f7ff ff90 	bl	800938c <NVIC_EncodePriority>
 800946c:	4602      	mov	r2, r0
 800946e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff ff5f 	bl	8009338 <__NVIC_SetPriority>
}
 800947a:	bf00      	nop
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	4603      	mov	r3, r0
 800948a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800948c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff ff33 	bl	80092fc <__NVIC_EnableIRQ>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff ffa4 	bl	80093f4 <SysTick_Config>
 80094ac:	4603      	mov	r3, r0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e014      	b.n	80094f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	791b      	ldrb	r3, [r3, #4]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7f8 f803 	bl	80014e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b082      	sub	sp, #8
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	795b      	ldrb	r3, [r3, #5]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d101      	bne.n	8009510 <HAL_DAC_Start+0x16>
 800950c:	2302      	movs	r3, #2
 800950e:	e043      	b.n	8009598 <HAL_DAC_Start+0x9e>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2202      	movs	r2, #2
 800951a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6819      	ldr	r1, [r3, #0]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	f003 0310 	and.w	r3, r3, #16
 8009528:	2201      	movs	r2, #1
 800952a:	409a      	lsls	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009534:	2001      	movs	r0, #1
 8009536:	f7fd fb5b 	bl	8006bf0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10f      	bne.n	8009560 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800954a:	2b02      	cmp	r3, #2
 800954c:	d11d      	bne.n	800958a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0201 	orr.w	r2, r2, #1
 800955c:	605a      	str	r2, [r3, #4]
 800955e:	e014      	b.n	800958a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	f003 0310 	and.w	r3, r3, #16
 8009570:	2102      	movs	r1, #2
 8009572:	fa01 f303 	lsl.w	r3, r1, r3
 8009576:	429a      	cmp	r2, r3
 8009578:	d107      	bne.n	800958a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f042 0202 	orr.w	r2, r2, #2
 8009588:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	795b      	ldrb	r3, [r3, #5]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d101      	bne.n	80095be <HAL_DAC_Start_DMA+0x1e>
 80095ba:	2302      	movs	r3, #2
 80095bc:	e0ae      	b.n	800971c <HAL_DAC_Start_DMA+0x17c>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2202      	movs	r2, #2
 80095c8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d12f      	bne.n	8009630 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	4a53      	ldr	r2, [pc, #332]	; (8009724 <HAL_DAC_Start_DMA+0x184>)
 80095d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	4a52      	ldr	r2, [pc, #328]	; (8009728 <HAL_DAC_Start_DMA+0x188>)
 80095de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	4a51      	ldr	r2, [pc, #324]	; (800972c <HAL_DAC_Start_DMA+0x18c>)
 80095e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095f6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d013      	beq.n	8009626 <HAL_DAC_Start_DMA+0x86>
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	2b08      	cmp	r3, #8
 8009602:	d845      	bhi.n	8009690 <HAL_DAC_Start_DMA+0xf0>
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <HAL_DAC_Start_DMA+0x72>
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	2b04      	cmp	r3, #4
 800960e:	d005      	beq.n	800961c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009610:	e03e      	b.n	8009690 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3308      	adds	r3, #8
 8009618:	613b      	str	r3, [r7, #16]
        break;
 800961a:	e03c      	b.n	8009696 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	330c      	adds	r3, #12
 8009622:	613b      	str	r3, [r7, #16]
        break;
 8009624:	e037      	b.n	8009696 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3310      	adds	r3, #16
 800962c:	613b      	str	r3, [r7, #16]
        break;
 800962e:	e032      	b.n	8009696 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	4a3e      	ldr	r2, [pc, #248]	; (8009730 <HAL_DAC_Start_DMA+0x190>)
 8009636:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	4a3d      	ldr	r2, [pc, #244]	; (8009734 <HAL_DAC_Start_DMA+0x194>)
 800963e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	4a3c      	ldr	r2, [pc, #240]	; (8009738 <HAL_DAC_Start_DMA+0x198>)
 8009646:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009656:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	2b08      	cmp	r3, #8
 800965c:	d013      	beq.n	8009686 <HAL_DAC_Start_DMA+0xe6>
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	2b08      	cmp	r3, #8
 8009662:	d817      	bhi.n	8009694 <HAL_DAC_Start_DMA+0xf4>
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <HAL_DAC_Start_DMA+0xd2>
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	2b04      	cmp	r3, #4
 800966e:	d005      	beq.n	800967c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009670:	e010      	b.n	8009694 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3314      	adds	r3, #20
 8009678:	613b      	str	r3, [r7, #16]
        break;
 800967a:	e00c      	b.n	8009696 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3318      	adds	r3, #24
 8009682:	613b      	str	r3, [r7, #16]
        break;
 8009684:	e007      	b.n	8009696 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	331c      	adds	r3, #28
 800968c:	613b      	str	r3, [r7, #16]
        break;
 800968e:	e002      	b.n	8009696 <HAL_DAC_Start_DMA+0xf6>
        break;
 8009690:	bf00      	nop
 8009692:	e000      	b.n	8009696 <HAL_DAC_Start_DMA+0xf6>
        break;
 8009694:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d111      	bne.n	80096c0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6898      	ldr	r0, [r3, #8]
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	f000 fb61 	bl	8009d7c <HAL_DMA_Start_IT>
 80096ba:	4603      	mov	r3, r0
 80096bc:	75fb      	strb	r3, [r7, #23]
 80096be:	e010      	b.n	80096e2 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80096ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	68d8      	ldr	r0, [r3, #12]
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	f000 fb4f 	bl	8009d7c <HAL_DMA_Start_IT>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10f      	bne.n	800970e <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2201      	movs	r2, #1
 80096fc:	409a      	lsls	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009706:	2001      	movs	r0, #1
 8009708:	f7fd fa72 	bl	8006bf0 <HAL_Delay>
 800970c:	e005      	b.n	800971a <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f043 0204 	orr.w	r2, r3, #4
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	08009b19 	.word	0x08009b19
 8009728:	08009b3b 	.word	0x08009b3b
 800972c:	08009b57 	.word	0x08009b57
 8009730:	08009bc1 	.word	0x08009bc1
 8009734:	08009be3 	.word	0x08009be3
 8009738:	08009bff 	.word	0x08009bff

0800973c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800974a:	2300      	movs	r3, #0
 800974c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d105      	bne.n	800976c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4413      	add	r3, r2
 8009766:	3308      	adds	r3, #8
 8009768:	617b      	str	r3, [r7, #20]
 800976a:	e004      	b.n	8009776 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4413      	add	r3, r2
 8009772:	3314      	adds	r3, #20
 8009774:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	461a      	mov	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08a      	sub	sp, #40	; 0x28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	795b      	ldrb	r3, [r3, #5]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d101      	bne.n	80097e0 <HAL_DAC_ConfigChannel+0x18>
 80097dc:	2302      	movs	r3, #2
 80097de:	e192      	b.n	8009b06 <HAL_DAC_ConfigChannel+0x33e>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2201      	movs	r2, #1
 80097e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2202      	movs	r2, #2
 80097ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d174      	bne.n	80098de <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80097f4:	f7fd f9f0 	bl	8006bd8 <HAL_GetTick>
 80097f8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d134      	bne.n	800986a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009800:	e011      	b.n	8009826 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009802:	f7fd f9e9 	bl	8006bd8 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b01      	cmp	r3, #1
 800980e:	d90a      	bls.n	8009826 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f043 0208 	orr.w	r2, r3, #8
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2203      	movs	r2, #3
 8009820:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	e16f      	b.n	8009b06 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e6      	bne.n	8009802 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8009834:	2001      	movs	r0, #1
 8009836:	f7fd f9db 	bl	8006bf0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009842:	641a      	str	r2, [r3, #64]	; 0x40
 8009844:	e01e      	b.n	8009884 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009846:	f7fd f9c7 	bl	8006bd8 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b01      	cmp	r3, #1
 8009852:	d90a      	bls.n	800986a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f043 0208 	orr.w	r2, r3, #8
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2203      	movs	r2, #3
 8009864:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e14d      	b.n	8009b06 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	2b00      	cmp	r3, #0
 8009872:	dbe8      	blt.n	8009846 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8009874:	2001      	movs	r0, #1
 8009876:	f7fd f9bb 	bl	8006bf0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009882:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009894:	fa01 f303 	lsl.w	r3, r1, r3
 8009898:	43db      	mvns	r3, r3
 800989a:	ea02 0103 	and.w	r1, r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f003 0310 	and.w	r3, r3, #16
 80098a8:	409a      	lsls	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f003 0310 	and.w	r3, r3, #16
 80098be:	21ff      	movs	r1, #255	; 0xff
 80098c0:	fa01 f303 	lsl.w	r3, r1, r3
 80098c4:	43db      	mvns	r3, r3
 80098c6:	ea02 0103 	and.w	r1, r2, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f003 0310 	and.w	r3, r3, #16
 80098d4:	409a      	lsls	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	430a      	orrs	r2, r1
 80098dc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d11d      	bne.n	8009922 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f003 0310 	and.w	r3, r3, #16
 80098f4:	221f      	movs	r2, #31
 80098f6:	fa02 f303 	lsl.w	r3, r2, r3
 80098fa:	43db      	mvns	r3, r3
 80098fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fe:	4013      	ands	r3, r2
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f003 0310 	and.w	r3, r3, #16
 800990e:	69ba      	ldr	r2, [r7, #24]
 8009910:	fa02 f303 	lsl.w	r3, r2, r3
 8009914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009916:	4313      	orrs	r3, r2
 8009918:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009920:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	2207      	movs	r2, #7
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	43db      	mvns	r3, r3
 8009938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993a:	4013      	ands	r3, r2
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d102      	bne.n	800994c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8009946:	2300      	movs	r3, #0
 8009948:	623b      	str	r3, [r7, #32]
 800994a:	e00f      	b.n	800996c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d102      	bne.n	800995a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009954:	2301      	movs	r3, #1
 8009956:	623b      	str	r3, [r7, #32]
 8009958:	e008      	b.n	800996c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d102      	bne.n	8009968 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009962:	2301      	movs	r3, #1
 8009964:	623b      	str	r3, [r7, #32]
 8009966:	e001      	b.n	800996c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009968:	2300      	movs	r3, #0
 800996a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	4313      	orrs	r3, r2
 8009976:	6a3a      	ldr	r2, [r7, #32]
 8009978:	4313      	orrs	r3, r2
 800997a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f003 0310 	and.w	r3, r3, #16
 8009982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009986:	fa02 f303 	lsl.w	r3, r2, r3
 800998a:	43db      	mvns	r3, r3
 800998c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998e:	4013      	ands	r3, r2
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	791b      	ldrb	r3, [r3, #4]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d102      	bne.n	80099a0 <HAL_DAC_ConfigChannel+0x1d8>
 800999a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800999e:	e000      	b.n	80099a2 <HAL_DAC_ConfigChannel+0x1da>
 80099a0:	2300      	movs	r3, #0
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f003 0310 	and.w	r3, r3, #16
 80099ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099b2:	fa02 f303 	lsl.w	r3, r2, r3
 80099b6:	43db      	mvns	r3, r3
 80099b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ba:	4013      	ands	r3, r2
 80099bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	795b      	ldrb	r3, [r3, #5]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d102      	bne.n	80099cc <HAL_DAC_ConfigChannel+0x204>
 80099c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ca:	e000      	b.n	80099ce <HAL_DAC_ConfigChannel+0x206>
 80099cc:	2300      	movs	r3, #0
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80099da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d114      	bne.n	8009a0e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80099e4:	f001 ff34 	bl	800b850 <HAL_RCC_GetHCLKFreq>
 80099e8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	4a48      	ldr	r2, [pc, #288]	; (8009b10 <HAL_DAC_ConfigChannel+0x348>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d904      	bls.n	80099fc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
 80099fa:	e00f      	b.n	8009a1c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4a45      	ldr	r2, [pc, #276]	; (8009b14 <HAL_DAC_ConfigChannel+0x34c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d90a      	bls.n	8009a1a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a0c:	e006      	b.n	8009a1c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a14:	4313      	orrs	r3, r2
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
 8009a18:	e000      	b.n	8009a1c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8009a1a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6819      	ldr	r1, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f003 0310 	and.w	r3, r3, #16
 8009a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009a46:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4a:	43da      	mvns	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	400a      	ands	r2, r1
 8009a52:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f003 0310 	and.w	r3, r3, #16
 8009a62:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	43db      	mvns	r3, r3
 8009a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6e:	4013      	ands	r3, r2
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	fa02 f303 	lsl.w	r3, r2, r3
 8009a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a86:	4313      	orrs	r3, r2
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a90:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6819      	ldr	r1, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	22c0      	movs	r2, #192	; 0xc0
 8009aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa4:	43da      	mvns	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	400a      	ands	r2, r1
 8009aac:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	089b      	lsrs	r3, r3, #2
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	089b      	lsrs	r3, r3, #2
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009ac6:	69ba      	ldr	r2, [r7, #24]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009adc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	ea02 0103 	and.w	r1, r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f003 0310 	and.w	r3, r3, #16
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	409a      	lsls	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2201      	movs	r2, #1
 8009afc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3728      	adds	r7, #40	; 0x28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	09896800 	.word	0x09896800
 8009b14:	04c4b400 	.word	0x04c4b400

08009b18 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff fe30 	bl	800978c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	711a      	strb	r2, [r3, #4]
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7ff fe29 	bl	80097a0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	f043 0204 	orr.w	r2, r3, #4
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff fe1f 	bl	80097b4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	711a      	strb	r2, [r3, #4]
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7ff ffd8 	bl	8009b84 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	711a      	strb	r2, [r3, #4]
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff ffd1 	bl	8009b98 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	f043 0204 	orr.w	r2, r3, #4
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f7ff ffc7 	bl	8009bac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	711a      	strb	r2, [r3, #4]
}
 8009c24:	bf00      	nop
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e08d      	b.n	8009d5a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	461a      	mov	r2, r3
 8009c44:	4b47      	ldr	r3, [pc, #284]	; (8009d64 <HAL_DMA_Init+0x138>)
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d80f      	bhi.n	8009c6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4b45      	ldr	r3, [pc, #276]	; (8009d68 <HAL_DMA_Init+0x13c>)
 8009c52:	4413      	add	r3, r2
 8009c54:	4a45      	ldr	r2, [pc, #276]	; (8009d6c <HAL_DMA_Init+0x140>)
 8009c56:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5a:	091b      	lsrs	r3, r3, #4
 8009c5c:	009a      	lsls	r2, r3, #2
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a42      	ldr	r2, [pc, #264]	; (8009d70 <HAL_DMA_Init+0x144>)
 8009c66:	641a      	str	r2, [r3, #64]	; 0x40
 8009c68:	e00e      	b.n	8009c88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	4b40      	ldr	r3, [pc, #256]	; (8009d74 <HAL_DMA_Init+0x148>)
 8009c72:	4413      	add	r3, r2
 8009c74:	4a3d      	ldr	r2, [pc, #244]	; (8009d6c <HAL_DMA_Init+0x140>)
 8009c76:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7a:	091b      	lsrs	r3, r3, #4
 8009c7c:	009a      	lsls	r2, r3, #2
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a3c      	ldr	r2, [pc, #240]	; (8009d78 <HAL_DMA_Init+0x14c>)
 8009c86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fa76 	bl	800a1cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ce8:	d102      	bne.n	8009cf0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf8:	b2d2      	uxtb	r2, r2
 8009cfa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009d04:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d010      	beq.n	8009d30 <HAL_DMA_Init+0x104>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d80c      	bhi.n	8009d30 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa96 	bl	800a248 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009d2c:	605a      	str	r2, [r3, #4]
 8009d2e:	e008      	b.n	8009d42 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	40020407 	.word	0x40020407
 8009d68:	bffdfff8 	.word	0xbffdfff8
 8009d6c:	cccccccd 	.word	0xcccccccd
 8009d70:	40020000 	.word	0x40020000
 8009d74:	bffdfbf8 	.word	0xbffdfbf8
 8009d78:	40020400 	.word	0x40020400

08009d7c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_DMA_Start_IT+0x20>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e066      	b.n	8009e6a <HAL_DMA_Start_IT+0xee>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d155      	bne.n	8009e5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f022 0201 	bic.w	r2, r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 f9bb 	bl	800a150 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d008      	beq.n	8009df4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f042 020e 	orr.w	r2, r2, #14
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	e00f      	b.n	8009e14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0204 	bic.w	r2, r2, #4
 8009e02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 020a 	orr.w	r2, r2, #10
 8009e12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e30:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f042 0201 	orr.w	r2, r2, #1
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	e005      	b.n	8009e68 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009e64:	2302      	movs	r3, #2
 8009e66:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d005      	beq.n	8009e96 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2204      	movs	r2, #4
 8009e8e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	73fb      	strb	r3, [r7, #15]
 8009e94:	e037      	b.n	8009f06 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f022 020e 	bic.w	r2, r2, #14
 8009ea4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009eb4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f022 0201 	bic.w	r2, r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eca:	f003 021f 	and.w	r2, r3, #31
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8009ed8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ee2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00c      	beq.n	8009f06 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009efa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009f04:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d00d      	beq.n	8009f58 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	73fb      	strb	r3, [r7, #15]
 8009f56:	e047      	b.n	8009fe8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 020e 	bic.w	r2, r2, #14
 8009f66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0201 	bic.w	r2, r2, #1
 8009f76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8c:	f003 021f 	and.w	r2, r3, #31
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	2101      	movs	r1, #1
 8009f96:	fa01 f202 	lsl.w	r2, r1, r2
 8009f9a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009fa4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009fc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d003      	beq.n	8009fe8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	4798      	blx	r3
    }
  }
  return status;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00e:	f003 031f 	and.w	r3, r3, #31
 800a012:	2204      	movs	r2, #4
 800a014:	409a      	lsls	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	4013      	ands	r3, r2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d026      	beq.n	800a06c <HAL_DMA_IRQHandler+0x7a>
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d021      	beq.n	800a06c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0320 	and.w	r3, r3, #32
 800a032:	2b00      	cmp	r3, #0
 800a034:	d107      	bne.n	800a046 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0204 	bic.w	r2, r2, #4
 800a044:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04a:	f003 021f 	and.w	r2, r3, #31
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	2104      	movs	r1, #4
 800a054:	fa01 f202 	lsl.w	r2, r1, r2
 800a058:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d071      	beq.n	800a146 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a06a:	e06c      	b.n	800a146 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a070:	f003 031f 	and.w	r3, r3, #31
 800a074:	2202      	movs	r2, #2
 800a076:	409a      	lsls	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d02e      	beq.n	800a0de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d029      	beq.n	800a0de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0320 	and.w	r3, r3, #32
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10b      	bne.n	800a0b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 020a 	bic.w	r2, r2, #10
 800a0a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b4:	f003 021f 	and.w	r2, r3, #31
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0bc:	2102      	movs	r1, #2
 800a0be:	fa01 f202 	lsl.w	r2, r1, r2
 800a0c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d038      	beq.n	800a146 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a0dc:	e033      	b.n	800a146 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e2:	f003 031f 	and.w	r3, r3, #31
 800a0e6:	2208      	movs	r2, #8
 800a0e8:	409a      	lsls	r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d02a      	beq.n	800a148 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f003 0308 	and.w	r3, r3, #8
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d025      	beq.n	800a148 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 020e 	bic.w	r2, r2, #14
 800a10a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a110:	f003 021f 	and.w	r2, r3, #31
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a118:	2101      	movs	r1, #1
 800a11a:	fa01 f202 	lsl.w	r2, r1, r2
 800a11e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d004      	beq.n	800a148 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a146:	bf00      	nop
 800a148:	bf00      	nop
}
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a166:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d004      	beq.n	800a17a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a178:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17e:	f003 021f 	and.w	r2, r3, #31
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	2101      	movs	r1, #1
 800a188:	fa01 f202 	lsl.w	r2, r1, r2
 800a18c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	2b10      	cmp	r3, #16
 800a19c:	d108      	bne.n	800a1b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a1ae:	e007      	b.n	800a1c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	60da      	str	r2, [r3, #12]
}
 800a1c0:	bf00      	nop
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4b16      	ldr	r3, [pc, #88]	; (800a234 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d802      	bhi.n	800a1e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a1e0:	4b15      	ldr	r3, [pc, #84]	; (800a238 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	e001      	b.n	800a1ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a1e6:	4b15      	ldr	r3, [pc, #84]	; (800a23c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a1e8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	3b08      	subs	r3, #8
 800a1f6:	4a12      	ldr	r2, [pc, #72]	; (800a240 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1fc:	091b      	lsrs	r3, r3, #4
 800a1fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a204:	089b      	lsrs	r3, r3, #2
 800a206:	009a      	lsls	r2, r3, #2
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	4413      	add	r3, r2
 800a20c:	461a      	mov	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a0b      	ldr	r2, [pc, #44]	; (800a244 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a216:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f003 031f 	and.w	r3, r3, #31
 800a21e:	2201      	movs	r2, #1
 800a220:	409a      	lsls	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a226:	bf00      	nop
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40020407 	.word	0x40020407
 800a238:	40020800 	.word	0x40020800
 800a23c:	40020820 	.word	0x40020820
 800a240:	cccccccd 	.word	0xcccccccd
 800a244:	40020880 	.word	0x40020880

0800a248 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a25c:	4413      	add	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	461a      	mov	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a08      	ldr	r2, [pc, #32]	; (800a28c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a26a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3b01      	subs	r3, #1
 800a270:	f003 031f 	and.w	r3, r3, #31
 800a274:	2201      	movs	r2, #1
 800a276:	409a      	lsls	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a27c:	bf00      	nop
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	1000823f 	.word	0x1000823f
 800a28c:	40020940 	.word	0x40020940

0800a290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a29e:	e15a      	b.n	800a556 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 814c 	beq.w	800a550 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f003 0303 	and.w	r3, r3, #3
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d005      	beq.n	800a2d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d130      	bne.n	800a332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	2203      	movs	r2, #3
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	43db      	mvns	r3, r3
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a306:	2201      	movs	r2, #1
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	43db      	mvns	r3, r3
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4013      	ands	r3, r2
 800a314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	091b      	lsrs	r3, r3, #4
 800a31c:	f003 0201 	and.w	r2, r3, #1
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	fa02 f303 	lsl.w	r3, r2, r3
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	4313      	orrs	r3, r2
 800a32a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d017      	beq.n	800a36e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	2203      	movs	r2, #3
 800a34a:	fa02 f303 	lsl.w	r3, r2, r3
 800a34e:	43db      	mvns	r3, r3
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	4013      	ands	r3, r2
 800a354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	689a      	ldr	r2, [r3, #8]
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	fa02 f303 	lsl.w	r3, r2, r3
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	4313      	orrs	r3, r2
 800a366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b02      	cmp	r3, #2
 800a378:	d123      	bne.n	800a3c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	08da      	lsrs	r2, r3, #3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	3208      	adds	r2, #8
 800a382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	220f      	movs	r2, #15
 800a392:	fa02 f303 	lsl.w	r3, r2, r3
 800a396:	43db      	mvns	r3, r3
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	4013      	ands	r3, r2
 800a39c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	691a      	ldr	r2, [r3, #16]
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f003 0307 	and.w	r3, r3, #7
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	08da      	lsrs	r2, r3, #3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	3208      	adds	r2, #8
 800a3bc:	6939      	ldr	r1, [r7, #16]
 800a3be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	2203      	movs	r2, #3
 800a3ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d2:	43db      	mvns	r3, r3
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f003 0203 	and.w	r2, r3, #3
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 80a6 	beq.w	800a550 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a404:	4b5b      	ldr	r3, [pc, #364]	; (800a574 <HAL_GPIO_Init+0x2e4>)
 800a406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a408:	4a5a      	ldr	r2, [pc, #360]	; (800a574 <HAL_GPIO_Init+0x2e4>)
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	6613      	str	r3, [r2, #96]	; 0x60
 800a410:	4b58      	ldr	r3, [pc, #352]	; (800a574 <HAL_GPIO_Init+0x2e4>)
 800a412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	60bb      	str	r3, [r7, #8]
 800a41a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a41c:	4a56      	ldr	r2, [pc, #344]	; (800a578 <HAL_GPIO_Init+0x2e8>)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	089b      	lsrs	r3, r3, #2
 800a422:	3302      	adds	r3, #2
 800a424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f003 0303 	and.w	r3, r3, #3
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	220f      	movs	r2, #15
 800a434:	fa02 f303 	lsl.w	r3, r2, r3
 800a438:	43db      	mvns	r3, r3
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	4013      	ands	r3, r2
 800a43e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a446:	d01f      	beq.n	800a488 <HAL_GPIO_Init+0x1f8>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a4c      	ldr	r2, [pc, #304]	; (800a57c <HAL_GPIO_Init+0x2ec>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d019      	beq.n	800a484 <HAL_GPIO_Init+0x1f4>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a4b      	ldr	r2, [pc, #300]	; (800a580 <HAL_GPIO_Init+0x2f0>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d013      	beq.n	800a480 <HAL_GPIO_Init+0x1f0>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a4a      	ldr	r2, [pc, #296]	; (800a584 <HAL_GPIO_Init+0x2f4>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d00d      	beq.n	800a47c <HAL_GPIO_Init+0x1ec>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a49      	ldr	r2, [pc, #292]	; (800a588 <HAL_GPIO_Init+0x2f8>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d007      	beq.n	800a478 <HAL_GPIO_Init+0x1e8>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a48      	ldr	r2, [pc, #288]	; (800a58c <HAL_GPIO_Init+0x2fc>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d101      	bne.n	800a474 <HAL_GPIO_Init+0x1e4>
 800a470:	2305      	movs	r3, #5
 800a472:	e00a      	b.n	800a48a <HAL_GPIO_Init+0x1fa>
 800a474:	2306      	movs	r3, #6
 800a476:	e008      	b.n	800a48a <HAL_GPIO_Init+0x1fa>
 800a478:	2304      	movs	r3, #4
 800a47a:	e006      	b.n	800a48a <HAL_GPIO_Init+0x1fa>
 800a47c:	2303      	movs	r3, #3
 800a47e:	e004      	b.n	800a48a <HAL_GPIO_Init+0x1fa>
 800a480:	2302      	movs	r3, #2
 800a482:	e002      	b.n	800a48a <HAL_GPIO_Init+0x1fa>
 800a484:	2301      	movs	r3, #1
 800a486:	e000      	b.n	800a48a <HAL_GPIO_Init+0x1fa>
 800a488:	2300      	movs	r3, #0
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	f002 0203 	and.w	r2, r2, #3
 800a490:	0092      	lsls	r2, r2, #2
 800a492:	4093      	lsls	r3, r2
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4313      	orrs	r3, r2
 800a498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a49a:	4937      	ldr	r1, [pc, #220]	; (800a578 <HAL_GPIO_Init+0x2e8>)
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	089b      	lsrs	r3, r3, #2
 800a4a0:	3302      	adds	r3, #2
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4a8:	4b39      	ldr	r3, [pc, #228]	; (800a590 <HAL_GPIO_Init+0x300>)
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a4cc:	4a30      	ldr	r2, [pc, #192]	; (800a590 <HAL_GPIO_Init+0x300>)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a4d2:	4b2f      	ldr	r3, [pc, #188]	; (800a590 <HAL_GPIO_Init+0x300>)
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	43db      	mvns	r3, r3
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4013      	ands	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a4f6:	4a26      	ldr	r2, [pc, #152]	; (800a590 <HAL_GPIO_Init+0x300>)
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a4fc:	4b24      	ldr	r3, [pc, #144]	; (800a590 <HAL_GPIO_Init+0x300>)
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	43db      	mvns	r3, r3
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4013      	ands	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a520:	4a1b      	ldr	r2, [pc, #108]	; (800a590 <HAL_GPIO_Init+0x300>)
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a526:	4b1a      	ldr	r3, [pc, #104]	; (800a590 <HAL_GPIO_Init+0x300>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	43db      	mvns	r3, r3
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	4013      	ands	r3, r2
 800a534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4313      	orrs	r3, r2
 800a548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a54a:	4a11      	ldr	r2, [pc, #68]	; (800a590 <HAL_GPIO_Init+0x300>)
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	3301      	adds	r3, #1
 800a554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	fa22 f303 	lsr.w	r3, r2, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	f47f ae9d 	bne.w	800a2a0 <HAL_GPIO_Init+0x10>
  }
}
 800a566:	bf00      	nop
 800a568:	bf00      	nop
 800a56a:	371c      	adds	r7, #28
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	40021000 	.word	0x40021000
 800a578:	40010000 	.word	0x40010000
 800a57c:	48000400 	.word	0x48000400
 800a580:	48000800 	.word	0x48000800
 800a584:	48000c00 	.word	0x48000c00
 800a588:	48001000 	.word	0x48001000
 800a58c:	48001400 	.word	0x48001400
 800a590:	40010400 	.word	0x40010400

0800a594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	807b      	strh	r3, [r7, #2]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5a4:	787b      	ldrb	r3, [r7, #1]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a5aa:	887a      	ldrh	r2, [r7, #2]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a5b0:	e002      	b.n	800a5b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a5b2:	887a      	ldrh	r2, [r7, #2]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e0bb      	b.n	800a752 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	d101      	bne.n	800a5ea <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e0b3      	b.n	800a752 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d101      	bne.n	800a5fa <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e0ab      	b.n	800a752 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5fa:	4b58      	ldr	r3, [pc, #352]	; (800a75c <HAL_OPAMP_Init+0x198>)
 800a5fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5fe:	4a57      	ldr	r2, [pc, #348]	; (800a75c <HAL_OPAMP_Init+0x198>)
 800a600:	f043 0301 	orr.w	r3, r3, #1
 800a604:	6613      	str	r3, [r2, #96]	; 0x60
 800a606:	4b55      	ldr	r3, [pc, #340]	; (800a75c <HAL_OPAMP_Init+0x198>)
 800a608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	60bb      	str	r3, [r7, #8]
 800a610:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d103      	bne.n	800a626 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7fa fc92 	bl	8004f50 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	2b40      	cmp	r3, #64	; 0x40
 800a632:	d003      	beq.n	800a63c <HAL_OPAMP_Init+0x78>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	2b60      	cmp	r3, #96	; 0x60
 800a63a:	d133      	bne.n	800a6a4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f023 0110 	bic.w	r1, r3, #16
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	4b41      	ldr	r3, [pc, #260]	; (800a760 <HAL_OPAMP_Init+0x19c>)
 800a65a:	4013      	ands	r3, r2
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	6851      	ldr	r1, [r2, #4]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6892      	ldr	r2, [r2, #8]
 800a664:	4311      	orrs	r1, r2
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	6912      	ldr	r2, [r2, #16]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	7d09      	ldrb	r1, [r1, #20]
 800a670:	2901      	cmp	r1, #1
 800a672:	d102      	bne.n	800a67a <HAL_OPAMP_Init+0xb6>
 800a674:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a678:	e000      	b.n	800a67c <HAL_OPAMP_Init+0xb8>
 800a67a:	2100      	movs	r1, #0
 800a67c:	4311      	orrs	r1, r2
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a682:	4311      	orrs	r1, r2
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a688:	4311      	orrs	r1, r2
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a68e:	04d2      	lsls	r2, r2, #19
 800a690:	4311      	orrs	r1, r2
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a696:	0612      	lsls	r2, r2, #24
 800a698:	4311      	orrs	r1, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6812      	ldr	r2, [r2, #0]
 800a69e:	430b      	orrs	r3, r1
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	e035      	b.n	800a710 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f023 0110 	bic.w	r1, r3, #16
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	4b27      	ldr	r3, [pc, #156]	; (800a760 <HAL_OPAMP_Init+0x19c>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	6851      	ldr	r1, [r2, #4]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6892      	ldr	r2, [r2, #8]
 800a6cc:	4311      	orrs	r1, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	68d2      	ldr	r2, [r2, #12]
 800a6d2:	4311      	orrs	r1, r2
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	6912      	ldr	r2, [r2, #16]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	7d09      	ldrb	r1, [r1, #20]
 800a6de:	2901      	cmp	r1, #1
 800a6e0:	d102      	bne.n	800a6e8 <HAL_OPAMP_Init+0x124>
 800a6e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6e6:	e000      	b.n	800a6ea <HAL_OPAMP_Init+0x126>
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4311      	orrs	r1, r2
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6f0:	4311      	orrs	r1, r2
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a6f6:	4311      	orrs	r1, r2
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a6fc:	04d2      	lsls	r2, r2, #19
 800a6fe:	4311      	orrs	r1, r2
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a704:	0612      	lsls	r2, r2, #24
 800a706:	4311      	orrs	r1, r2
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	6812      	ldr	r2, [r2, #0]
 800a70c:	430b      	orrs	r3, r1
 800a70e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	2b00      	cmp	r3, #0
 800a718:	db10      	blt.n	800a73c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	699a      	ldr	r2, [r3, #24]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	69db      	ldr	r3, [r3, #28]
 800a72c:	431a      	orrs	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	431a      	orrs	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	d103      	bne.n	800a750 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	40021000 	.word	0x40021000
 800a760:	e0003e11 	.word	0xe0003e11

0800a764 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d102      	bne.n	800a77c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	73fb      	strb	r3, [r7, #15]
 800a77a:	e01d      	b.n	800a7b8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b05      	cmp	r3, #5
 800a786:	d102      	bne.n	800a78e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	73fb      	strb	r3, [r7, #15]
 800a78c:	e014      	b.n	800a7b8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b01      	cmp	r3, #1
 800a798:	d10c      	bne.n	800a7b4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f042 0201 	orr.w	r2, r2, #1
 800a7a8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800a7b2:	e001      	b.n	800a7b8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d141      	bne.n	800a85a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7d6:	4b4b      	ldr	r3, [pc, #300]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e2:	d131      	bne.n	800a848 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a7e4:	4b47      	ldr	r3, [pc, #284]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7ea:	4a46      	ldr	r2, [pc, #280]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7f4:	4b43      	ldr	r3, [pc, #268]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a7fc:	4a41      	ldr	r2, [pc, #260]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a804:	4b40      	ldr	r3, [pc, #256]	; (800a908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2232      	movs	r2, #50	; 0x32
 800a80a:	fb02 f303 	mul.w	r3, r2, r3
 800a80e:	4a3f      	ldr	r2, [pc, #252]	; (800a90c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a810:	fba2 2303 	umull	r2, r3, r2, r3
 800a814:	0c9b      	lsrs	r3, r3, #18
 800a816:	3301      	adds	r3, #1
 800a818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a81a:	e002      	b.n	800a822 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3b01      	subs	r3, #1
 800a820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a822:	4b38      	ldr	r3, [pc, #224]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a82a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a82e:	d102      	bne.n	800a836 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1f2      	bne.n	800a81c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a836:	4b33      	ldr	r3, [pc, #204]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a83e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a842:	d158      	bne.n	800a8f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a844:	2303      	movs	r3, #3
 800a846:	e057      	b.n	800a8f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a848:	4b2e      	ldr	r3, [pc, #184]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a84e:	4a2d      	ldr	r2, [pc, #180]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a858:	e04d      	b.n	800a8f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a860:	d141      	bne.n	800a8e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a862:	4b28      	ldr	r3, [pc, #160]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a86a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a86e:	d131      	bne.n	800a8d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a870:	4b24      	ldr	r3, [pc, #144]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a876:	4a23      	ldr	r2, [pc, #140]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a87c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a880:	4b20      	ldr	r3, [pc, #128]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a888:	4a1e      	ldr	r2, [pc, #120]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a88a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a88e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a890:	4b1d      	ldr	r3, [pc, #116]	; (800a908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2232      	movs	r2, #50	; 0x32
 800a896:	fb02 f303 	mul.w	r3, r2, r3
 800a89a:	4a1c      	ldr	r2, [pc, #112]	; (800a90c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a89c:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a0:	0c9b      	lsrs	r3, r3, #18
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8a6:	e002      	b.n	800a8ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8ae:	4b15      	ldr	r3, [pc, #84]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ba:	d102      	bne.n	800a8c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1f2      	bne.n	800a8a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a8c2:	4b10      	ldr	r3, [pc, #64]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ce:	d112      	bne.n	800a8f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e011      	b.n	800a8f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8da:	4a0a      	ldr	r2, [pc, #40]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a8e4:	e007      	b.n	800a8f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a8e6:	4b07      	ldr	r3, [pc, #28]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a8ee:	4a05      	ldr	r2, [pc, #20]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	40007000 	.word	0x40007000
 800a908:	20000008 	.word	0x20000008
 800a90c:	431bde83 	.word	0x431bde83

0800a910 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af02      	add	r7, sp, #8
 800a916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a918:	f7fc f95e 	bl	8006bd8 <HAL_GetTick>
 800a91c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e069      	b.n	800a9fc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10b      	bne.n	800a94c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7fa fc03 	bl	8005148 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a942:	f241 3188 	movw	r1, #5000	; 0x1388
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fa54 	bl	800adf4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	021a      	lsls	r2, r3, #8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	2120      	movs	r1, #32
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa7f 	bl	800ae76 <QSPI_WaitFlagStateUntilTimeout>
 800a978:	4603      	mov	r3, r0
 800a97a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a97c:	7afb      	ldrb	r3, [r7, #11]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d137      	bne.n	800a9f2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a98c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	6852      	ldr	r2, [r2, #4]
 800a994:	0611      	lsls	r1, r2, #24
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	68d2      	ldr	r2, [r2, #12]
 800a99a:	4311      	orrs	r1, r2
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	69d2      	ldr	r2, [r2, #28]
 800a9a0:	4311      	orrs	r1, r2
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	6a12      	ldr	r2, [r2, #32]
 800a9a6:	4311      	orrs	r1, r2
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	6812      	ldr	r2, [r2, #0]
 800a9ac:	430b      	orrs	r3, r1
 800a9ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	4b13      	ldr	r3, [pc, #76]	; (800aa04 <HAL_QSPI_Init+0xf4>)
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6912      	ldr	r2, [r2, #16]
 800a9be:	0411      	lsls	r1, r2, #16
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	6952      	ldr	r2, [r2, #20]
 800a9c4:	4311      	orrs	r1, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6992      	ldr	r2, [r2, #24]
 800a9ca:	4311      	orrs	r1, r2
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f042 0201 	orr.w	r2, r2, #1
 800a9e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a9fa:	7afb      	ldrb	r3, [r7, #11]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	ffe0f8fe 	.word	0xffe0f8fe

0800aa08 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d064      	beq.n	800aaf4 <HAL_QSPI_IRQHandler+0xec>
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d05f      	beq.n	800aaf4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3320      	adds	r3, #32
 800aa3a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b12      	cmp	r3, #18
 800aa46:	d125      	bne.n	800aa94 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa48:	e01c      	b.n	800aa84 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00f      	beq.n	800aa72 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	1e5a      	subs	r2, r3, #1
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa70:	e008      	b.n	800aa84 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa80:	601a      	str	r2, [r3, #0]
          break;
 800aa82:	e033      	b.n	800aaec <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f003 0304 	and.w	r3, r3, #4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1db      	bne.n	800aa4a <HAL_QSPI_IRQHandler+0x42>
 800aa92:	e02b      	b.n	800aaec <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b22      	cmp	r3, #34	; 0x22
 800aa9e:	d125      	bne.n	800aaec <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aaa0:	e01d      	b.n	800aade <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d010      	beq.n	800aacc <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	7812      	ldrb	r2, [r2, #0]
 800aab2:	b2d2      	uxtb	r2, r2
 800aab4:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac4:	1e5a      	subs	r2, r3, #1
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	639a      	str	r2, [r3, #56]	; 0x38
 800aaca:	e008      	b.n	800aade <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aada:	601a      	str	r2, [r3, #0]
          break;
 800aadc:	e006      	b.n	800aaec <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1da      	bne.n	800aaa2 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f963 	bl	800adb8 <HAL_QSPI_FifoThresholdCallback>
 800aaf2:	e13c      	b.n	800ad6e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 80b0 	beq.w	800ac60 <HAL_QSPI_IRQHandler+0x258>
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 80aa 	beq.w	800ac60 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2202      	movs	r2, #2
 800ab12:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800ab22:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b12      	cmp	r3, #18
 800ab2e:	d120      	bne.n	800ab72 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0304 	and.w	r3, r3, #4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d011      	beq.n	800ab62 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f022 0204 	bic.w	r2, r2, #4
 800ab4c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f022 0201 	bic.w	r2, r2, #1
 800ab60:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7fa faa0 	bl	80050b0 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ab70:	e0fa      	b.n	800ad68 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b22      	cmp	r3, #34	; 0x22
 800ab7c:	d143      	bne.n	800ac06 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d012      	beq.n	800abb2 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f022 0204 	bic.w	r2, r2, #4
 800ab9a:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f022 0201 	bic.w	r2, r2, #1
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	e021      	b.n	800abf6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3320      	adds	r3, #32
 800abb8:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800abba:	e013      	b.n	800abe4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d017      	beq.n	800abf4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	7812      	ldrb	r2, [r2, #0]
 800abcc:	b2d2      	uxtb	r2, r2
 800abce:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abde:	1e5a      	subs	r2, r3, #1
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1e4      	bne.n	800abbc <HAL_QSPI_IRQHandler+0x1b4>
 800abf2:	e000      	b.n	800abf6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800abf4:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7fa fa66 	bl	80050d0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ac04:	e0b0      	b.n	800ad68 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d107      	bne.n	800ac22 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f8c2 	bl	800ada4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ac20:	e0a2      	b.n	800ad68 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b08      	cmp	r3, #8
 800ac2c:	f040 809c 	bne.w	800ad68 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	695a      	ldr	r2, [r3, #20]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ac3e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f89d 	bl	800ad90 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ac56:	e087      	b.n	800ad68 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f88f 	bl	800ad7c <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ac5e:	e083      	b.n	800ad68 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f003 0308 	and.w	r3, r3, #8
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d01f      	beq.n	800acaa <HAL_QSPI_IRQHandler+0x2a2>
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d01a      	beq.n	800acaa <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2208      	movs	r2, #8
 800ac7a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00b      	beq.n	800aca2 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800ac98:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f892 	bl	800adcc <HAL_QSPI_StatusMatchCallback>
 800aca8:	e061      	b.n	800ad6e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d047      	beq.n	800ad44 <HAL_QSPI_IRQHandler+0x33c>
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d042      	beq.n	800ad44 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2201      	movs	r2, #1
 800acc4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800acd4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acda:	f043 0202 	orr.w	r2, r3, #2
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 0304 	and.w	r3, r3, #4
 800acec:	2b00      	cmp	r3, #0
 800acee:	d021      	beq.n	800ad34 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0204 	bic.w	r2, r2, #4
 800acfe:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad04:	4a1c      	ldr	r2, [pc, #112]	; (800ad78 <HAL_QSPI_IRQHandler+0x370>)
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7ff f909 	bl	8009f24 <HAL_DMA_Abort_IT>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d029      	beq.n	800ad6c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad1c:	f043 0204 	orr.w	r2, r3, #4
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f825 	bl	800ad7c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ad32:	e01b      	b.n	800ad6c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f81d 	bl	800ad7c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ad42:	e013      	b.n	800ad6c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f003 0310 	and.w	r3, r3, #16
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00f      	beq.n	800ad6e <HAL_QSPI_IRQHandler+0x366>
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00a      	beq.n	800ad6e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2210      	movs	r2, #16
 800ad5e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f83d 	bl	800ade0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800ad66:	e002      	b.n	800ad6e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ad68:	bf00      	nop
 800ad6a:	e000      	b.n	800ad6e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ad6c:	bf00      	nop
}
 800ad6e:	bf00      	nop
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	0800ae11 	.word	0x0800ae11

0800ad7c <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b08      	cmp	r3, #8
 800ae34:	d114      	bne.n	800ae60 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ae4c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f042 0202 	orr.w	r2, r2, #2
 800ae5c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800ae5e:	e006      	b.n	800ae6e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7ff ff87 	bl	800ad7c <HAL_QSPI_ErrorCallback>
}
 800ae6e:	bf00      	nop
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b084      	sub	sp, #16
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	603b      	str	r3, [r7, #0]
 800ae82:	4613      	mov	r3, r2
 800ae84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae86:	e01a      	b.n	800aebe <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d016      	beq.n	800aebe <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae90:	f7fb fea2 	bl	8006bd8 <HAL_GetTick>
 800ae94:	4602      	mov	r2, r0
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d302      	bcc.n	800aea6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10b      	bne.n	800aebe <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2204      	movs	r2, #4
 800aeaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb2:	f043 0201 	orr.w	r2, r3, #1
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e00e      	b.n	800aedc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689a      	ldr	r2, [r3, #8]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4013      	ands	r3, r2
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bf14      	ite	ne
 800aecc:	2301      	movne	r3, #1
 800aece:	2300      	moveq	r3, #0
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	461a      	mov	r2, r3
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d1d6      	bne.n	800ae88 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e306      	b.n	800b504 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d075      	beq.n	800afee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af02:	4b97      	ldr	r3, [pc, #604]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f003 030c 	and.w	r3, r3, #12
 800af0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af0c:	4b94      	ldr	r3, [pc, #592]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	2b0c      	cmp	r3, #12
 800af1a:	d102      	bne.n	800af22 <HAL_RCC_OscConfig+0x3e>
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d002      	beq.n	800af28 <HAL_RCC_OscConfig+0x44>
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2b08      	cmp	r3, #8
 800af26:	d10b      	bne.n	800af40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af28:	4b8d      	ldr	r3, [pc, #564]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d05b      	beq.n	800afec <HAL_RCC_OscConfig+0x108>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d157      	bne.n	800afec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e2e1      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af48:	d106      	bne.n	800af58 <HAL_RCC_OscConfig+0x74>
 800af4a:	4b85      	ldr	r3, [pc, #532]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a84      	ldr	r2, [pc, #528]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	e01d      	b.n	800af94 <HAL_RCC_OscConfig+0xb0>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af60:	d10c      	bne.n	800af7c <HAL_RCC_OscConfig+0x98>
 800af62:	4b7f      	ldr	r3, [pc, #508]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a7e      	ldr	r2, [pc, #504]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	4b7c      	ldr	r3, [pc, #496]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a7b      	ldr	r2, [pc, #492]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	e00b      	b.n	800af94 <HAL_RCC_OscConfig+0xb0>
 800af7c:	4b78      	ldr	r3, [pc, #480]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a77      	ldr	r2, [pc, #476]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	4b75      	ldr	r3, [pc, #468]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a74      	ldr	r2, [pc, #464]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800af8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d013      	beq.n	800afc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af9c:	f7fb fe1c 	bl	8006bd8 <HAL_GetTick>
 800afa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afa4:	f7fb fe18 	bl	8006bd8 <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b64      	cmp	r3, #100	; 0x64
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e2a6      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afb6:	4b6a      	ldr	r3, [pc, #424]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0f0      	beq.n	800afa4 <HAL_RCC_OscConfig+0xc0>
 800afc2:	e014      	b.n	800afee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc4:	f7fb fe08 	bl	8006bd8 <HAL_GetTick>
 800afc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afca:	e008      	b.n	800afde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afcc:	f7fb fe04 	bl	8006bd8 <HAL_GetTick>
 800afd0:	4602      	mov	r2, r0
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	2b64      	cmp	r3, #100	; 0x64
 800afd8:	d901      	bls.n	800afde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e292      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afde:	4b60      	ldr	r3, [pc, #384]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1f0      	bne.n	800afcc <HAL_RCC_OscConfig+0xe8>
 800afea:	e000      	b.n	800afee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d075      	beq.n	800b0e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800affa:	4b59      	ldr	r3, [pc, #356]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f003 030c 	and.w	r3, r3, #12
 800b002:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b004:	4b56      	ldr	r3, [pc, #344]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	f003 0303 	and.w	r3, r3, #3
 800b00c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	2b0c      	cmp	r3, #12
 800b012:	d102      	bne.n	800b01a <HAL_RCC_OscConfig+0x136>
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d002      	beq.n	800b020 <HAL_RCC_OscConfig+0x13c>
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	2b04      	cmp	r3, #4
 800b01e:	d11f      	bne.n	800b060 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b020:	4b4f      	ldr	r3, [pc, #316]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d005      	beq.n	800b038 <HAL_RCC_OscConfig+0x154>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e265      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b038:	4b49      	ldr	r3, [pc, #292]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	061b      	lsls	r3, r3, #24
 800b046:	4946      	ldr	r1, [pc, #280]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b04c:	4b45      	ldr	r3, [pc, #276]	; (800b164 <HAL_RCC_OscConfig+0x280>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	f7fb fd75 	bl	8006b40 <HAL_InitTick>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d043      	beq.n	800b0e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e251      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d023      	beq.n	800b0b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b068:	4b3d      	ldr	r3, [pc, #244]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a3c      	ldr	r2, [pc, #240]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b06e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b074:	f7fb fdb0 	bl	8006bd8 <HAL_GetTick>
 800b078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b07a:	e008      	b.n	800b08e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b07c:	f7fb fdac 	bl	8006bd8 <HAL_GetTick>
 800b080:	4602      	mov	r2, r0
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	2b02      	cmp	r3, #2
 800b088:	d901      	bls.n	800b08e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e23a      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b08e:	4b34      	ldr	r3, [pc, #208]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0f0      	beq.n	800b07c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b09a:	4b31      	ldr	r3, [pc, #196]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	061b      	lsls	r3, r3, #24
 800b0a8:	492d      	ldr	r1, [pc, #180]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	604b      	str	r3, [r1, #4]
 800b0ae:	e01a      	b.n	800b0e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0b0:	4b2b      	ldr	r3, [pc, #172]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a2a      	ldr	r2, [pc, #168]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b0b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0bc:	f7fb fd8c 	bl	8006bd8 <HAL_GetTick>
 800b0c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0c2:	e008      	b.n	800b0d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0c4:	f7fb fd88 	bl	8006bd8 <HAL_GetTick>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d901      	bls.n	800b0d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	e216      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0d6:	4b22      	ldr	r3, [pc, #136]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1f0      	bne.n	800b0c4 <HAL_RCC_OscConfig+0x1e0>
 800b0e2:	e000      	b.n	800b0e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0308 	and.w	r3, r3, #8
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d041      	beq.n	800b176 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	695b      	ldr	r3, [r3, #20]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d01c      	beq.n	800b134 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0fa:	4b19      	ldr	r3, [pc, #100]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b0fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b100:	4a17      	ldr	r2, [pc, #92]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b10a:	f7fb fd65 	bl	8006bd8 <HAL_GetTick>
 800b10e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b110:	e008      	b.n	800b124 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b112:	f7fb fd61 	bl	8006bd8 <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d901      	bls.n	800b124 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b120:	2303      	movs	r3, #3
 800b122:	e1ef      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b124:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0ef      	beq.n	800b112 <HAL_RCC_OscConfig+0x22e>
 800b132:	e020      	b.n	800b176 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b134:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b13a:	4a09      	ldr	r2, [pc, #36]	; (800b160 <HAL_RCC_OscConfig+0x27c>)
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b144:	f7fb fd48 	bl	8006bd8 <HAL_GetTick>
 800b148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b14a:	e00d      	b.n	800b168 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b14c:	f7fb fd44 	bl	8006bd8 <HAL_GetTick>
 800b150:	4602      	mov	r2, r0
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	2b02      	cmp	r3, #2
 800b158:	d906      	bls.n	800b168 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b15a:	2303      	movs	r3, #3
 800b15c:	e1d2      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
 800b15e:	bf00      	nop
 800b160:	40021000 	.word	0x40021000
 800b164:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b168:	4b8c      	ldr	r3, [pc, #560]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b16a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b16e:	f003 0302 	and.w	r3, r3, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1ea      	bne.n	800b14c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0304 	and.w	r3, r3, #4
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f000 80a6 	beq.w	800b2d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b184:	2300      	movs	r3, #0
 800b186:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b188:	4b84      	ldr	r3, [pc, #528]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b18a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b18c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <HAL_RCC_OscConfig+0x2b4>
 800b194:	2301      	movs	r3, #1
 800b196:	e000      	b.n	800b19a <HAL_RCC_OscConfig+0x2b6>
 800b198:	2300      	movs	r3, #0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00d      	beq.n	800b1ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b19e:	4b7f      	ldr	r3, [pc, #508]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a2:	4a7e      	ldr	r2, [pc, #504]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b1a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b1aa:	4b7c      	ldr	r3, [pc, #496]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1ba:	4b79      	ldr	r3, [pc, #484]	; (800b3a0 <HAL_RCC_OscConfig+0x4bc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d118      	bne.n	800b1f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1c6:	4b76      	ldr	r3, [pc, #472]	; (800b3a0 <HAL_RCC_OscConfig+0x4bc>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a75      	ldr	r2, [pc, #468]	; (800b3a0 <HAL_RCC_OscConfig+0x4bc>)
 800b1cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1d2:	f7fb fd01 	bl	8006bd8 <HAL_GetTick>
 800b1d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1d8:	e008      	b.n	800b1ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1da:	f7fb fcfd 	bl	8006bd8 <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d901      	bls.n	800b1ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e18b      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1ec:	4b6c      	ldr	r3, [pc, #432]	; (800b3a0 <HAL_RCC_OscConfig+0x4bc>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d0f0      	beq.n	800b1da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d108      	bne.n	800b212 <HAL_RCC_OscConfig+0x32e>
 800b200:	4b66      	ldr	r3, [pc, #408]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b206:	4a65      	ldr	r2, [pc, #404]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b208:	f043 0301 	orr.w	r3, r3, #1
 800b20c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b210:	e024      	b.n	800b25c <HAL_RCC_OscConfig+0x378>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	2b05      	cmp	r3, #5
 800b218:	d110      	bne.n	800b23c <HAL_RCC_OscConfig+0x358>
 800b21a:	4b60      	ldr	r3, [pc, #384]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b220:	4a5e      	ldr	r2, [pc, #376]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b222:	f043 0304 	orr.w	r3, r3, #4
 800b226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b22a:	4b5c      	ldr	r3, [pc, #368]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b230:	4a5a      	ldr	r2, [pc, #360]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b232:	f043 0301 	orr.w	r3, r3, #1
 800b236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b23a:	e00f      	b.n	800b25c <HAL_RCC_OscConfig+0x378>
 800b23c:	4b57      	ldr	r3, [pc, #348]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b242:	4a56      	ldr	r2, [pc, #344]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b244:	f023 0301 	bic.w	r3, r3, #1
 800b248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b24c:	4b53      	ldr	r3, [pc, #332]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b252:	4a52      	ldr	r2, [pc, #328]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b254:	f023 0304 	bic.w	r3, r3, #4
 800b258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d016      	beq.n	800b292 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b264:	f7fb fcb8 	bl	8006bd8 <HAL_GetTick>
 800b268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b26a:	e00a      	b.n	800b282 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b26c:	f7fb fcb4 	bl	8006bd8 <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d901      	bls.n	800b282 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e140      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b282:	4b46      	ldr	r3, [pc, #280]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d0ed      	beq.n	800b26c <HAL_RCC_OscConfig+0x388>
 800b290:	e015      	b.n	800b2be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b292:	f7fb fca1 	bl	8006bd8 <HAL_GetTick>
 800b296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b298:	e00a      	b.n	800b2b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b29a:	f7fb fc9d 	bl	8006bd8 <HAL_GetTick>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d901      	bls.n	800b2b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e129      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b2b0:	4b3a      	ldr	r3, [pc, #232]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2b6:	f003 0302 	and.w	r3, r3, #2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1ed      	bne.n	800b29a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b2be:	7ffb      	ldrb	r3, [r7, #31]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d105      	bne.n	800b2d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2c4:	4b35      	ldr	r3, [pc, #212]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c8:	4a34      	ldr	r2, [pc, #208]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b2ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0320 	and.w	r3, r3, #32
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d03c      	beq.n	800b356 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01c      	beq.n	800b31e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b2e4:	4b2d      	ldr	r3, [pc, #180]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b2e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2ea:	4a2c      	ldr	r2, [pc, #176]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b2ec:	f043 0301 	orr.w	r3, r3, #1
 800b2f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2f4:	f7fb fc70 	bl	8006bd8 <HAL_GetTick>
 800b2f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2fa:	e008      	b.n	800b30e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2fc:	f7fb fc6c 	bl	8006bd8 <HAL_GetTick>
 800b300:	4602      	mov	r2, r0
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	2b02      	cmp	r3, #2
 800b308:	d901      	bls.n	800b30e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b30a:	2303      	movs	r3, #3
 800b30c:	e0fa      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b30e:	4b23      	ldr	r3, [pc, #140]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b314:	f003 0302 	and.w	r3, r3, #2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0ef      	beq.n	800b2fc <HAL_RCC_OscConfig+0x418>
 800b31c:	e01b      	b.n	800b356 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b31e:	4b1f      	ldr	r3, [pc, #124]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b324:	4a1d      	ldr	r2, [pc, #116]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b326:	f023 0301 	bic.w	r3, r3, #1
 800b32a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b32e:	f7fb fc53 	bl	8006bd8 <HAL_GetTick>
 800b332:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b334:	e008      	b.n	800b348 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b336:	f7fb fc4f 	bl	8006bd8 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	2b02      	cmp	r3, #2
 800b342:	d901      	bls.n	800b348 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e0dd      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b348:	4b14      	ldr	r3, [pc, #80]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b34a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b34e:	f003 0302 	and.w	r3, r3, #2
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1ef      	bne.n	800b336 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f000 80d1 	beq.w	800b502 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b360:	4b0e      	ldr	r3, [pc, #56]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f003 030c 	and.w	r3, r3, #12
 800b368:	2b0c      	cmp	r3, #12
 800b36a:	f000 808b 	beq.w	800b484 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	2b02      	cmp	r3, #2
 800b374:	d15e      	bne.n	800b434 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b376:	4b09      	ldr	r3, [pc, #36]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a08      	ldr	r2, [pc, #32]	; (800b39c <HAL_RCC_OscConfig+0x4b8>)
 800b37c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b382:	f7fb fc29 	bl	8006bd8 <HAL_GetTick>
 800b386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b388:	e00c      	b.n	800b3a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b38a:	f7fb fc25 	bl	8006bd8 <HAL_GetTick>
 800b38e:	4602      	mov	r2, r0
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	d905      	bls.n	800b3a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b398:	2303      	movs	r3, #3
 800b39a:	e0b3      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
 800b39c:	40021000 	.word	0x40021000
 800b3a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3a4:	4b59      	ldr	r3, [pc, #356]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1ec      	bne.n	800b38a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3b0:	4b56      	ldr	r3, [pc, #344]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b3b2:	68da      	ldr	r2, [r3, #12]
 800b3b4:	4b56      	ldr	r3, [pc, #344]	; (800b510 <HAL_RCC_OscConfig+0x62c>)
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	6a11      	ldr	r1, [r2, #32]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3c0:	3a01      	subs	r2, #1
 800b3c2:	0112      	lsls	r2, r2, #4
 800b3c4:	4311      	orrs	r1, r2
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b3ca:	0212      	lsls	r2, r2, #8
 800b3cc:	4311      	orrs	r1, r2
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3d2:	0852      	lsrs	r2, r2, #1
 800b3d4:	3a01      	subs	r2, #1
 800b3d6:	0552      	lsls	r2, r2, #21
 800b3d8:	4311      	orrs	r1, r2
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b3de:	0852      	lsrs	r2, r2, #1
 800b3e0:	3a01      	subs	r2, #1
 800b3e2:	0652      	lsls	r2, r2, #25
 800b3e4:	4311      	orrs	r1, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b3ea:	06d2      	lsls	r2, r2, #27
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	4947      	ldr	r1, [pc, #284]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3f4:	4b45      	ldr	r3, [pc, #276]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a44      	ldr	r2, [pc, #272]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b3fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b400:	4b42      	ldr	r3, [pc, #264]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	4a41      	ldr	r2, [pc, #260]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b40a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b40c:	f7fb fbe4 	bl	8006bd8 <HAL_GetTick>
 800b410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b412:	e008      	b.n	800b426 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b414:	f7fb fbe0 	bl	8006bd8 <HAL_GetTick>
 800b418:	4602      	mov	r2, r0
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d901      	bls.n	800b426 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e06e      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b426:	4b39      	ldr	r3, [pc, #228]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0f0      	beq.n	800b414 <HAL_RCC_OscConfig+0x530>
 800b432:	e066      	b.n	800b502 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b434:	4b35      	ldr	r3, [pc, #212]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a34      	ldr	r2, [pc, #208]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b43a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b43e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b440:	4b32      	ldr	r3, [pc, #200]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	4a31      	ldr	r2, [pc, #196]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b446:	f023 0303 	bic.w	r3, r3, #3
 800b44a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b44c:	4b2f      	ldr	r3, [pc, #188]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	4a2e      	ldr	r2, [pc, #184]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b452:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b45a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b45c:	f7fb fbbc 	bl	8006bd8 <HAL_GetTick>
 800b460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b462:	e008      	b.n	800b476 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b464:	f7fb fbb8 	bl	8006bd8 <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d901      	bls.n	800b476 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e046      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b476:	4b25      	ldr	r3, [pc, #148]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1f0      	bne.n	800b464 <HAL_RCC_OscConfig+0x580>
 800b482:	e03e      	b.n	800b502 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	69db      	ldr	r3, [r3, #28]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d101      	bne.n	800b490 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e039      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b490:	4b1e      	ldr	r3, [pc, #120]	; (800b50c <HAL_RCC_OscConfig+0x628>)
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f003 0203 	and.w	r2, r3, #3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a1b      	ldr	r3, [r3, #32]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d12c      	bne.n	800b4fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d123      	bne.n	800b4fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d11b      	bne.n	800b4fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d113      	bne.n	800b4fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e0:	085b      	lsrs	r3, r3, #1
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d109      	bne.n	800b4fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f4:	085b      	lsrs	r3, r3, #1
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d001      	beq.n	800b502 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e000      	b.n	800b504 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	40021000 	.word	0x40021000
 800b510:	019f800c 	.word	0x019f800c

0800b514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e11e      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b52c:	4b91      	ldr	r3, [pc, #580]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 030f 	and.w	r3, r3, #15
 800b534:	683a      	ldr	r2, [r7, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d910      	bls.n	800b55c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b53a:	4b8e      	ldr	r3, [pc, #568]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f023 020f 	bic.w	r2, r3, #15
 800b542:	498c      	ldr	r1, [pc, #560]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	4313      	orrs	r3, r2
 800b548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b54a:	4b8a      	ldr	r3, [pc, #552]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d001      	beq.n	800b55c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e106      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d073      	beq.n	800b650 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d129      	bne.n	800b5c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b570:	4b81      	ldr	r3, [pc, #516]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0f4      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b580:	f000 f972 	bl	800b868 <RCC_GetSysClockFreqFromPLLSource>
 800b584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	4a7c      	ldr	r2, [pc, #496]	; (800b77c <HAL_RCC_ClockConfig+0x268>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d93f      	bls.n	800b60e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b58e:	4b7a      	ldr	r3, [pc, #488]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d009      	beq.n	800b5ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d033      	beq.n	800b60e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d12f      	bne.n	800b60e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b5ae:	4b72      	ldr	r3, [pc, #456]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5b6:	4a70      	ldr	r2, [pc, #448]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b5be:	2380      	movs	r3, #128	; 0x80
 800b5c0:	617b      	str	r3, [r7, #20]
 800b5c2:	e024      	b.n	800b60e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d107      	bne.n	800b5dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b5cc:	4b6a      	ldr	r3, [pc, #424]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d109      	bne.n	800b5ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e0c6      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5dc:	4b66      	ldr	r3, [pc, #408]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e0be      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b5ec:	f000 f8ce 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800b5f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	4a61      	ldr	r2, [pc, #388]	; (800b77c <HAL_RCC_ClockConfig+0x268>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d909      	bls.n	800b60e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b5fa:	4b5f      	ldr	r3, [pc, #380]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b602:	4a5d      	ldr	r2, [pc, #372]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b608:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b60a:	2380      	movs	r3, #128	; 0x80
 800b60c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b60e:	4b5a      	ldr	r3, [pc, #360]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	f023 0203 	bic.w	r2, r3, #3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	4957      	ldr	r1, [pc, #348]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b61c:	4313      	orrs	r3, r2
 800b61e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b620:	f7fb fada 	bl	8006bd8 <HAL_GetTick>
 800b624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b626:	e00a      	b.n	800b63e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b628:	f7fb fad6 	bl	8006bd8 <HAL_GetTick>
 800b62c:	4602      	mov	r2, r0
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	f241 3288 	movw	r2, #5000	; 0x1388
 800b636:	4293      	cmp	r3, r2
 800b638:	d901      	bls.n	800b63e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e095      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b63e:	4b4e      	ldr	r3, [pc, #312]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f003 020c 	and.w	r2, r3, #12
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d1eb      	bne.n	800b628 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0302 	and.w	r3, r3, #2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d023      	beq.n	800b6a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b00      	cmp	r3, #0
 800b666:	d005      	beq.n	800b674 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b668:	4b43      	ldr	r3, [pc, #268]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	4a42      	ldr	r2, [pc, #264]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b66e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b672:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d007      	beq.n	800b690 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b680:	4b3d      	ldr	r3, [pc, #244]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b688:	4a3b      	ldr	r2, [pc, #236]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b68a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b68e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b690:	4b39      	ldr	r3, [pc, #228]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	4936      	ldr	r1, [pc, #216]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	608b      	str	r3, [r1, #8]
 800b6a2:	e008      	b.n	800b6b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2b80      	cmp	r3, #128	; 0x80
 800b6a8:	d105      	bne.n	800b6b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b6aa:	4b33      	ldr	r3, [pc, #204]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	4a32      	ldr	r2, [pc, #200]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b6b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b6b6:	4b2f      	ldr	r3, [pc, #188]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 030f 	and.w	r3, r3, #15
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d21d      	bcs.n	800b700 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6c4:	4b2b      	ldr	r3, [pc, #172]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f023 020f 	bic.w	r2, r3, #15
 800b6cc:	4929      	ldr	r1, [pc, #164]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b6d4:	f7fb fa80 	bl	8006bd8 <HAL_GetTick>
 800b6d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6da:	e00a      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6dc:	f7fb fa7c 	bl	8006bd8 <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d901      	bls.n	800b6f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b6ee:	2303      	movs	r3, #3
 800b6f0:	e03b      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6f2:	4b20      	ldr	r3, [pc, #128]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 030f 	and.w	r3, r3, #15
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d1ed      	bne.n	800b6dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b70c:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	4917      	ldr	r1, [pc, #92]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0308 	and.w	r3, r3, #8
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b72a:	4b13      	ldr	r3, [pc, #76]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	490f      	ldr	r1, [pc, #60]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b73a:	4313      	orrs	r3, r2
 800b73c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b73e:	f000 f825 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800b742:	4602      	mov	r2, r0
 800b744:	4b0c      	ldr	r3, [pc, #48]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	091b      	lsrs	r3, r3, #4
 800b74a:	f003 030f 	and.w	r3, r3, #15
 800b74e:	490c      	ldr	r1, [pc, #48]	; (800b780 <HAL_RCC_ClockConfig+0x26c>)
 800b750:	5ccb      	ldrb	r3, [r1, r3]
 800b752:	f003 031f 	and.w	r3, r3, #31
 800b756:	fa22 f303 	lsr.w	r3, r2, r3
 800b75a:	4a0a      	ldr	r2, [pc, #40]	; (800b784 <HAL_RCC_ClockConfig+0x270>)
 800b75c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b75e:	4b0a      	ldr	r3, [pc, #40]	; (800b788 <HAL_RCC_ClockConfig+0x274>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	f7fb f9ec 	bl	8006b40 <HAL_InitTick>
 800b768:	4603      	mov	r3, r0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	40022000 	.word	0x40022000
 800b778:	40021000 	.word	0x40021000
 800b77c:	04c4b400 	.word	0x04c4b400
 800b780:	08022b0c 	.word	0x08022b0c
 800b784:	20000008 	.word	0x20000008
 800b788:	2000000c 	.word	0x2000000c

0800b78c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b792:	4b2c      	ldr	r3, [pc, #176]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	f003 030c 	and.w	r3, r3, #12
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d102      	bne.n	800b7a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b79e:	4b2a      	ldr	r3, [pc, #168]	; (800b848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b7a0:	613b      	str	r3, [r7, #16]
 800b7a2:	e047      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b7a4:	4b27      	ldr	r3, [pc, #156]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f003 030c 	and.w	r3, r3, #12
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d102      	bne.n	800b7b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b7b0:	4b26      	ldr	r3, [pc, #152]	; (800b84c <HAL_RCC_GetSysClockFreq+0xc0>)
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	e03e      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b7b6:	4b23      	ldr	r3, [pc, #140]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f003 030c 	and.w	r3, r3, #12
 800b7be:	2b0c      	cmp	r3, #12
 800b7c0:	d136      	bne.n	800b830 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b7c2:	4b20      	ldr	r3, [pc, #128]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f003 0303 	and.w	r3, r3, #3
 800b7ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b7cc:	4b1d      	ldr	r3, [pc, #116]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	091b      	lsrs	r3, r3, #4
 800b7d2:	f003 030f 	and.w	r3, r3, #15
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	d10c      	bne.n	800b7fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b7e0:	4a1a      	ldr	r2, [pc, #104]	; (800b84c <HAL_RCC_GetSysClockFreq+0xc0>)
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e8:	4a16      	ldr	r2, [pc, #88]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7ea:	68d2      	ldr	r2, [r2, #12]
 800b7ec:	0a12      	lsrs	r2, r2, #8
 800b7ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b7f2:	fb02 f303 	mul.w	r3, r2, r3
 800b7f6:	617b      	str	r3, [r7, #20]
      break;
 800b7f8:	e00c      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b7fa:	4a13      	ldr	r2, [pc, #76]	; (800b848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b802:	4a10      	ldr	r2, [pc, #64]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b804:	68d2      	ldr	r2, [r2, #12]
 800b806:	0a12      	lsrs	r2, r2, #8
 800b808:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b80c:	fb02 f303 	mul.w	r3, r2, r3
 800b810:	617b      	str	r3, [r7, #20]
      break;
 800b812:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b814:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	0e5b      	lsrs	r3, r3, #25
 800b81a:	f003 0303 	and.w	r3, r3, #3
 800b81e:	3301      	adds	r3, #1
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82c:	613b      	str	r3, [r7, #16]
 800b82e:	e001      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b830:	2300      	movs	r3, #0
 800b832:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b834:	693b      	ldr	r3, [r7, #16]
}
 800b836:	4618      	mov	r0, r3
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	40021000 	.word	0x40021000
 800b848:	00f42400 	.word	0x00f42400
 800b84c:	016e3600 	.word	0x016e3600

0800b850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b850:	b480      	push	{r7}
 800b852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b854:	4b03      	ldr	r3, [pc, #12]	; (800b864 <HAL_RCC_GetHCLKFreq+0x14>)
 800b856:	681b      	ldr	r3, [r3, #0]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20000008 	.word	0x20000008

0800b868 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b86e:	4b1e      	ldr	r3, [pc, #120]	; (800b8e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	f003 0303 	and.w	r3, r3, #3
 800b876:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b878:	4b1b      	ldr	r3, [pc, #108]	; (800b8e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	091b      	lsrs	r3, r3, #4
 800b87e:	f003 030f 	and.w	r3, r3, #15
 800b882:	3301      	adds	r3, #1
 800b884:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d10c      	bne.n	800b8a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b88c:	4a17      	ldr	r2, [pc, #92]	; (800b8ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	fbb2 f3f3 	udiv	r3, r2, r3
 800b894:	4a14      	ldr	r2, [pc, #80]	; (800b8e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b896:	68d2      	ldr	r2, [r2, #12]
 800b898:	0a12      	lsrs	r2, r2, #8
 800b89a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b89e:	fb02 f303 	mul.w	r3, r2, r3
 800b8a2:	617b      	str	r3, [r7, #20]
    break;
 800b8a4:	e00c      	b.n	800b8c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b8a6:	4a12      	ldr	r2, [pc, #72]	; (800b8f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ae:	4a0e      	ldr	r2, [pc, #56]	; (800b8e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b8b0:	68d2      	ldr	r2, [r2, #12]
 800b8b2:	0a12      	lsrs	r2, r2, #8
 800b8b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8b8:	fb02 f303 	mul.w	r3, r2, r3
 800b8bc:	617b      	str	r3, [r7, #20]
    break;
 800b8be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8c0:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	0e5b      	lsrs	r3, r3, #25
 800b8c6:	f003 0303 	and.w	r3, r3, #3
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b8da:	687b      	ldr	r3, [r7, #4]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	371c      	adds	r7, #28
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	40021000 	.word	0x40021000
 800b8ec:	016e3600 	.word	0x016e3600
 800b8f0:	00f42400 	.word	0x00f42400

0800b8f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b900:	2300      	movs	r3, #0
 800b902:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 8098 	beq.w	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b912:	2300      	movs	r3, #0
 800b914:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b916:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b91a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10d      	bne.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b922:	4b40      	ldr	r3, [pc, #256]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b926:	4a3f      	ldr	r2, [pc, #252]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b92c:	6593      	str	r3, [r2, #88]	; 0x58
 800b92e:	4b3d      	ldr	r3, [pc, #244]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b936:	60bb      	str	r3, [r7, #8]
 800b938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b93a:	2301      	movs	r3, #1
 800b93c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b93e:	4b3a      	ldr	r3, [pc, #232]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a39      	ldr	r2, [pc, #228]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b948:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b94a:	f7fb f945 	bl	8006bd8 <HAL_GetTick>
 800b94e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b950:	e009      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b952:	f7fb f941 	bl	8006bd8 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d902      	bls.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	74fb      	strb	r3, [r7, #19]
        break;
 800b964:	e005      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b966:	4b30      	ldr	r3, [pc, #192]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d0ef      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b972:	7cfb      	ldrb	r3, [r7, #19]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d159      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b978:	4b2a      	ldr	r3, [pc, #168]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b97a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b97e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b982:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d01e      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	429a      	cmp	r2, r3
 800b992:	d019      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b994:	4b23      	ldr	r3, [pc, #140]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b99a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b99e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b9a0:	4b20      	ldr	r3, [pc, #128]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9a6:	4a1f      	ldr	r2, [pc, #124]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b9b0:	4b1c      	ldr	r3, [pc, #112]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9b6:	4a1b      	ldr	r2, [pc, #108]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b9c0:	4a18      	ldr	r2, [pc, #96]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d016      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d2:	f7fb f901 	bl	8006bd8 <HAL_GetTick>
 800b9d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9d8:	e00b      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9da:	f7fb f8fd 	bl	8006bd8 <HAL_GetTick>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d902      	bls.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	74fb      	strb	r3, [r7, #19]
            break;
 800b9f0:	e006      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9f8:	f003 0302 	and.w	r3, r3, #2
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0ec      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ba00:	7cfb      	ldrb	r3, [r7, #19]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10b      	bne.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba06:	4b07      	ldr	r3, [pc, #28]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba14:	4903      	ldr	r1, [pc, #12]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba16:	4313      	orrs	r3, r2
 800ba18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ba1c:	e008      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba1e:	7cfb      	ldrb	r3, [r7, #19]
 800ba20:	74bb      	strb	r3, [r7, #18]
 800ba22:	e005      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ba24:	40021000 	.word	0x40021000
 800ba28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2c:	7cfb      	ldrb	r3, [r7, #19]
 800ba2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ba30:	7c7b      	ldrb	r3, [r7, #17]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d105      	bne.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba36:	4ba7      	ldr	r3, [pc, #668]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba3a:	4aa6      	ldr	r2, [pc, #664]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00a      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba4e:	4ba1      	ldr	r3, [pc, #644]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba54:	f023 0203 	bic.w	r2, r3, #3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	499d      	ldr	r1, [pc, #628]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0302 	and.w	r3, r3, #2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00a      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ba70:	4b98      	ldr	r3, [pc, #608]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba76:	f023 020c 	bic.w	r2, r3, #12
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	4995      	ldr	r1, [pc, #596]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba80:	4313      	orrs	r3, r2
 800ba82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0304 	and.w	r3, r3, #4
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00a      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ba92:	4b90      	ldr	r3, [pc, #576]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	498c      	ldr	r1, [pc, #560]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baa2:	4313      	orrs	r3, r2
 800baa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00a      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bab4:	4b87      	ldr	r3, [pc, #540]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	4984      	ldr	r1, [pc, #528]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bac4:	4313      	orrs	r3, r2
 800bac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 0310 	and.w	r3, r3, #16
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bad6:	4b7f      	ldr	r3, [pc, #508]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800badc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	695b      	ldr	r3, [r3, #20]
 800bae4:	497b      	ldr	r1, [pc, #492]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bae6:	4313      	orrs	r3, r2
 800bae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 0320 	and.w	r3, r3, #32
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00a      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800baf8:	4b76      	ldr	r3, [pc, #472]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bafe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	4973      	ldr	r1, [pc, #460]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bb1a:	4b6e      	ldr	r3, [pc, #440]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	496a      	ldr	r1, [pc, #424]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00a      	beq.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bb3c:	4b65      	ldr	r3, [pc, #404]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	4962      	ldr	r1, [pc, #392]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bb5e:	4b5d      	ldr	r3, [pc, #372]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	4959      	ldr	r1, [pc, #356]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00a      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb80:	4b54      	ldr	r3, [pc, #336]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb86:	f023 0203 	bic.w	r2, r3, #3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	4951      	ldr	r1, [pc, #324]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00a      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bba2:	4b4c      	ldr	r3, [pc, #304]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bba8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	4948      	ldr	r1, [pc, #288]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d015      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bbc4:	4b43      	ldr	r3, [pc, #268]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd2:	4940      	ldr	r1, [pc, #256]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbe2:	d105      	bne.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbe4:	4b3b      	ldr	r3, [pc, #236]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	4a3a      	ldr	r2, [pc, #232]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d015      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bbfc:	4b35      	ldr	r3, [pc, #212]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc0a:	4932      	ldr	r1, [pc, #200]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc1a:	d105      	bne.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc1c:	4b2d      	ldr	r3, [pc, #180]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	4a2c      	ldr	r2, [pc, #176]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d015      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc34:	4b27      	ldr	r3, [pc, #156]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc42:	4924      	ldr	r1, [pc, #144]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc44:	4313      	orrs	r3, r2
 800bc46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc52:	d105      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc54:	4b1f      	ldr	r3, [pc, #124]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	4a1e      	ldr	r2, [pc, #120]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d015      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc6c:	4b19      	ldr	r3, [pc, #100]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7a:	4916      	ldr	r1, [pc, #88]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc8a:	d105      	bne.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc8c:	4b11      	ldr	r3, [pc, #68]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	4a10      	ldr	r2, [pc, #64]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d019      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bca4:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	4908      	ldr	r1, [pc, #32]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcc2:	d109      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bcc4:	4b03      	ldr	r3, [pc, #12]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	4a02      	ldr	r2, [pc, #8]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcce:	60d3      	str	r3, [r2, #12]
 800bcd0:	e002      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bcd2:	bf00      	nop
 800bcd4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d015      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bce4:	4b29      	ldr	r3, [pc, #164]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf2:	4926      	ldr	r1, [pc, #152]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd02:	d105      	bne.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bd04:	4b21      	ldr	r3, [pc, #132]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	4a20      	ldr	r2, [pc, #128]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d015      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bd1c:	4b1b      	ldr	r3, [pc, #108]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd2a:	4918      	ldr	r1, [pc, #96]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd3a:	d105      	bne.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bd3c:	4b13      	ldr	r3, [pc, #76]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	4a12      	ldr	r2, [pc, #72]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d015      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bd54:	4b0d      	ldr	r3, [pc, #52]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd62:	490a      	ldr	r1, [pc, #40]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd64:	4313      	orrs	r3, r2
 800bd66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd72:	d105      	bne.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd74:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	4a04      	ldr	r2, [pc, #16]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bd80:	7cbb      	ldrb	r3, [r7, #18]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	40021000 	.word	0x40021000

0800bd90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e09d      	b.n	800bede <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d108      	bne.n	800bdbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdb2:	d009      	beq.n	800bdc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	61da      	str	r2, [r3, #28]
 800bdba:	e005      	b.n	800bdc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d106      	bne.n	800bde8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7fa fb42 	bl	800646c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2202      	movs	r2, #2
 800bdec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be08:	d902      	bls.n	800be10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	e002      	b.n	800be16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800be10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800be1e:	d007      	beq.n	800be30 <HAL_SPI_Init+0xa0>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be28:	d002      	beq.n	800be30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800be40:	431a      	orrs	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	f003 0302 	and.w	r3, r3, #2
 800be4a:	431a      	orrs	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	431a      	orrs	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	69db      	ldr	r3, [r3, #28]
 800be64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be68:	431a      	orrs	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be72:	ea42 0103 	orr.w	r1, r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	699b      	ldr	r3, [r3, #24]
 800be8a:	0c1b      	lsrs	r3, r3, #16
 800be8c:	f003 0204 	and.w	r2, r3, #4
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be94:	f003 0310 	and.w	r3, r3, #16
 800be98:	431a      	orrs	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9e:	f003 0308 	and.w	r3, r3, #8
 800bea2:	431a      	orrs	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800beac:	ea42 0103 	orr.w	r1, r2, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	430a      	orrs	r2, r1
 800bebc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	69da      	ldr	r2, [r3, #28]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800becc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b08a      	sub	sp, #40	; 0x28
 800beea:	af00      	add	r7, sp, #0
 800beec:	60f8      	str	r0, [r7, #12]
 800beee:	60b9      	str	r1, [r7, #8]
 800bef0:	607a      	str	r2, [r7, #4]
 800bef2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bef4:	2301      	movs	r3, #1
 800bef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d101      	bne.n	800bf0c <HAL_SPI_TransmitReceive+0x26>
 800bf08:	2302      	movs	r3, #2
 800bf0a:	e1fb      	b.n	800c304 <HAL_SPI_TransmitReceive+0x41e>
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf14:	f7fa fe60 	bl	8006bd8 <HAL_GetTick>
 800bf18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bf28:	887b      	ldrh	r3, [r7, #2]
 800bf2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800bf2c:	887b      	ldrh	r3, [r7, #2]
 800bf2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf30:	7efb      	ldrb	r3, [r7, #27]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d00e      	beq.n	800bf54 <HAL_SPI_TransmitReceive+0x6e>
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf3c:	d106      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d102      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x66>
 800bf46:	7efb      	ldrb	r3, [r7, #27]
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d003      	beq.n	800bf54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bf52:	e1cd      	b.n	800c2f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <HAL_SPI_TransmitReceive+0x80>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <HAL_SPI_TransmitReceive+0x80>
 800bf60:	887b      	ldrh	r3, [r7, #2]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d103      	bne.n	800bf6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bf6c:	e1c0      	b.n	800c2f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d003      	beq.n	800bf82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2205      	movs	r2, #5
 800bf7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	887a      	ldrh	r2, [r7, #2]
 800bf92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	887a      	ldrh	r2, [r7, #2]
 800bf9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	887a      	ldrh	r2, [r7, #2]
 800bfa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	887a      	ldrh	r2, [r7, #2]
 800bfae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bfc4:	d802      	bhi.n	800bfcc <HAL_SPI_TransmitReceive+0xe6>
 800bfc6:	8a3b      	ldrh	r3, [r7, #16]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d908      	bls.n	800bfde <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bfda:	605a      	str	r2, [r3, #4]
 800bfdc:	e007      	b.n	800bfee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bfec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff8:	2b40      	cmp	r3, #64	; 0x40
 800bffa:	d007      	beq.n	800c00c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c00a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c014:	d97c      	bls.n	800c110 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <HAL_SPI_TransmitReceive+0x13e>
 800c01e:	8a7b      	ldrh	r3, [r7, #18]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d169      	bne.n	800c0f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c028:	881a      	ldrh	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c034:	1c9a      	adds	r2, r3, #2
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c03e:	b29b      	uxth	r3, r3
 800c040:	3b01      	subs	r3, #1
 800c042:	b29a      	uxth	r2, r3
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c048:	e056      	b.n	800c0f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b02      	cmp	r3, #2
 800c056:	d11b      	bne.n	800c090 <HAL_SPI_TransmitReceive+0x1aa>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d016      	beq.n	800c090 <HAL_SPI_TransmitReceive+0x1aa>
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	2b01      	cmp	r3, #1
 800c066:	d113      	bne.n	800c090 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06c:	881a      	ldrh	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c078:	1c9a      	adds	r2, r3, #2
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c082:	b29b      	uxth	r3, r3
 800c084:	3b01      	subs	r3, #1
 800c086:	b29a      	uxth	r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c08c:	2300      	movs	r3, #0
 800c08e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	f003 0301 	and.w	r3, r3, #1
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d11c      	bne.n	800c0d8 <HAL_SPI_TransmitReceive+0x1f2>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d016      	beq.n	800c0d8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	68da      	ldr	r2, [r3, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b4:	b292      	uxth	r2, r2
 800c0b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0bc:	1c9a      	adds	r2, r3, #2
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c0d8:	f7fa fd7e 	bl	8006bd8 <HAL_GetTick>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d807      	bhi.n	800c0f8 <HAL_SPI_TransmitReceive+0x212>
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ee:	d003      	beq.n	800c0f8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c0f6:	e0fb      	b.n	800c2f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1a3      	bne.n	800c04a <HAL_SPI_TransmitReceive+0x164>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c108:	b29b      	uxth	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d19d      	bne.n	800c04a <HAL_SPI_TransmitReceive+0x164>
 800c10e:	e0df      	b.n	800c2d0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d003      	beq.n	800c120 <HAL_SPI_TransmitReceive+0x23a>
 800c118:	8a7b      	ldrh	r3, [r7, #18]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	f040 80cb 	bne.w	800c2b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c124:	b29b      	uxth	r3, r3
 800c126:	2b01      	cmp	r3, #1
 800c128:	d912      	bls.n	800c150 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	881a      	ldrh	r2, [r3, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13a:	1c9a      	adds	r2, r3, #2
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c144:	b29b      	uxth	r3, r3
 800c146:	3b02      	subs	r3, #2
 800c148:	b29a      	uxth	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c14e:	e0b2      	b.n	800c2b6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	330c      	adds	r3, #12
 800c15a:	7812      	ldrb	r2, [r2, #0]
 800c15c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	3b01      	subs	r3, #1
 800c170:	b29a      	uxth	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c176:	e09e      	b.n	800c2b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	f003 0302 	and.w	r3, r3, #2
 800c182:	2b02      	cmp	r3, #2
 800c184:	d134      	bne.n	800c1f0 <HAL_SPI_TransmitReceive+0x30a>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d02f      	beq.n	800c1f0 <HAL_SPI_TransmitReceive+0x30a>
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	2b01      	cmp	r3, #1
 800c194:	d12c      	bne.n	800c1f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d912      	bls.n	800c1c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a4:	881a      	ldrh	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b0:	1c9a      	adds	r2, r3, #2
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	3b02      	subs	r3, #2
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c1c4:	e012      	b.n	800c1ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	330c      	adds	r3, #12
 800c1d0:	7812      	ldrb	r2, [r2, #0]
 800c1d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d8:	1c5a      	adds	r2, r3, #1
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d148      	bne.n	800c290 <HAL_SPI_TransmitReceive+0x3aa>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c204:	b29b      	uxth	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d042      	beq.n	800c290 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c210:	b29b      	uxth	r3, r3
 800c212:	2b01      	cmp	r3, #1
 800c214:	d923      	bls.n	800c25e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68da      	ldr	r2, [r3, #12]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c220:	b292      	uxth	r2, r2
 800c222:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c228:	1c9a      	adds	r2, r3, #2
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c234:	b29b      	uxth	r3, r3
 800c236:	3b02      	subs	r3, #2
 800c238:	b29a      	uxth	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c246:	b29b      	uxth	r3, r3
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d81f      	bhi.n	800c28c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c25a:	605a      	str	r2, [r3, #4]
 800c25c:	e016      	b.n	800c28c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f103 020c 	add.w	r2, r3, #12
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26a:	7812      	ldrb	r2, [r2, #0]
 800c26c:	b2d2      	uxtb	r2, r2
 800c26e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c274:	1c5a      	adds	r2, r3, #1
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c280:	b29b      	uxth	r3, r3
 800c282:	3b01      	subs	r3, #1
 800c284:	b29a      	uxth	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c28c:	2301      	movs	r3, #1
 800c28e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c290:	f7fa fca2 	bl	8006bd8 <HAL_GetTick>
 800c294:	4602      	mov	r2, r0
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d803      	bhi.n	800c2a8 <HAL_SPI_TransmitReceive+0x3c2>
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a6:	d102      	bne.n	800c2ae <HAL_SPI_TransmitReceive+0x3c8>
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d103      	bne.n	800c2b6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c2b4:	e01c      	b.n	800c2f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f47f af5b 	bne.w	800c178 <HAL_SPI_TransmitReceive+0x292>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f47f af54 	bne.w	800c178 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2d0:	69fa      	ldr	r2, [r7, #28]
 800c2d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 f937 	bl	800c548 <SPI_EndRxTxTransaction>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d006      	beq.n	800c2ee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	661a      	str	r2, [r3, #96]	; 0x60
 800c2ec:	e000      	b.n	800c2f0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c2ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c304:	4618      	mov	r0, r3
 800c306:	3728      	adds	r7, #40	; 0x28
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	603b      	str	r3, [r7, #0]
 800c318:	4613      	mov	r3, r2
 800c31a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c31c:	f7fa fc5c 	bl	8006bd8 <HAL_GetTick>
 800c320:	4602      	mov	r2, r0
 800c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c324:	1a9b      	subs	r3, r3, r2
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	4413      	add	r3, r2
 800c32a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c32c:	f7fa fc54 	bl	8006bd8 <HAL_GetTick>
 800c330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c332:	4b39      	ldr	r3, [pc, #228]	; (800c418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	015b      	lsls	r3, r3, #5
 800c338:	0d1b      	lsrs	r3, r3, #20
 800c33a:	69fa      	ldr	r2, [r7, #28]
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
 800c340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c342:	e054      	b.n	800c3ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34a:	d050      	beq.n	800c3ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c34c:	f7fa fc44 	bl	8006bd8 <HAL_GetTick>
 800c350:	4602      	mov	r2, r0
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	69fa      	ldr	r2, [r7, #28]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d902      	bls.n	800c362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d13d      	bne.n	800c3de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c37a:	d111      	bne.n	800c3a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c384:	d004      	beq.n	800c390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c38e:	d107      	bne.n	800c3a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c39e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3a8:	d10f      	bne.n	800c3ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e017      	b.n	800c40e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	689a      	ldr	r2, [r3, #8]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	bf0c      	ite	eq
 800c3fe:	2301      	moveq	r3, #1
 800c400:	2300      	movne	r3, #0
 800c402:	b2db      	uxtb	r3, r3
 800c404:	461a      	mov	r2, r3
 800c406:	79fb      	ldrb	r3, [r7, #7]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d19b      	bne.n	800c344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3720      	adds	r7, #32
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20000008 	.word	0x20000008

0800c41c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08a      	sub	sp, #40	; 0x28
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c42e:	f7fa fbd3 	bl	8006bd8 <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	1a9b      	subs	r3, r3, r2
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	4413      	add	r3, r2
 800c43c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c43e:	f7fa fbcb 	bl	8006bd8 <HAL_GetTick>
 800c442:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	330c      	adds	r3, #12
 800c44a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c44c:	4b3d      	ldr	r3, [pc, #244]	; (800c544 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	4613      	mov	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	00da      	lsls	r2, r3, #3
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	0d1b      	lsrs	r3, r3, #20
 800c45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c45e:	fb02 f303 	mul.w	r3, r2, r3
 800c462:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c464:	e060      	b.n	800c528 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c46c:	d107      	bne.n	800c47e <SPI_WaitFifoStateUntilTimeout+0x62>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d104      	bne.n	800c47e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c484:	d050      	beq.n	800c528 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c486:	f7fa fba7 	bl	8006bd8 <HAL_GetTick>
 800c48a:	4602      	mov	r2, r0
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c492:	429a      	cmp	r2, r3
 800c494:	d902      	bls.n	800c49c <SPI_WaitFifoStateUntilTimeout+0x80>
 800c496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d13d      	bne.n	800c518 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c4aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4b4:	d111      	bne.n	800c4da <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4be:	d004      	beq.n	800c4ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4c8:	d107      	bne.n	800c4da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4e2:	d10f      	bne.n	800c504 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c502:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c514:	2303      	movs	r3, #3
 800c516:	e010      	b.n	800c53a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c51e:	2300      	movs	r3, #0
 800c520:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	3b01      	subs	r3, #1
 800c526:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689a      	ldr	r2, [r3, #8]
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	4013      	ands	r3, r2
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d196      	bne.n	800c466 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3728      	adds	r7, #40	; 0x28
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20000008 	.word	0x20000008

0800c548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af02      	add	r7, sp, #8
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff ff5b 	bl	800c41c <SPI_WaitFifoStateUntilTimeout>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d007      	beq.n	800c57c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c570:	f043 0220 	orr.w	r2, r3, #32
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c578:	2303      	movs	r3, #3
 800c57a:	e027      	b.n	800c5cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2200      	movs	r2, #0
 800c584:	2180      	movs	r1, #128	; 0x80
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fec0 	bl	800c30c <SPI_WaitFlagStateUntilTimeout>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d007      	beq.n	800c5a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c596:	f043 0220 	orr.w	r2, r3, #32
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	e014      	b.n	800c5cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	f7ff ff34 	bl	800c41c <SPI_WaitFifoStateUntilTimeout>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d007      	beq.n	800c5ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5be:	f043 0220 	orr.w	r2, r3, #32
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e000      	b.n	800c5cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d101      	bne.n	800c5ea <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e038      	b.n	800c65c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7f5 f95a 	bl	80018b8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	3308      	adds	r3, #8
 800c60c:	4619      	mov	r1, r3
 800c60e:	4610      	mov	r0, r2
 800c610:	f001 fb3c 	bl	800dc8c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6818      	ldr	r0, [r3, #0]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	461a      	mov	r2, r3
 800c61e:	68b9      	ldr	r1, [r7, #8]
 800c620:	f001 fc02 	bl	800de28 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6858      	ldr	r0, [r3, #4]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c630:	6879      	ldr	r1, [r7, #4]
 800c632:	f001 fc4b 	bl	800decc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	6892      	ldr	r2, [r2, #8]
 800c63e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	6892      	ldr	r2, [r2, #8]
 800c64a:	f041 0101 	orr.w	r1, r1, #1
 800c64e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	e049      	b.n	800c70a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7fa f9ca 	bl	8006a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2202      	movs	r2, #2
 800c694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	f000 fd82 	bl	800d1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b01      	cmp	r3, #1
 800c726:	d001      	beq.n	800c72c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	e04c      	b.n	800c7c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2202      	movs	r2, #2
 800c730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a26      	ldr	r2, [pc, #152]	; (800c7d4 <HAL_TIM_Base_Start+0xc0>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d022      	beq.n	800c784 <HAL_TIM_Base_Start+0x70>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c746:	d01d      	beq.n	800c784 <HAL_TIM_Base_Start+0x70>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a22      	ldr	r2, [pc, #136]	; (800c7d8 <HAL_TIM_Base_Start+0xc4>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d018      	beq.n	800c784 <HAL_TIM_Base_Start+0x70>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a21      	ldr	r2, [pc, #132]	; (800c7dc <HAL_TIM_Base_Start+0xc8>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d013      	beq.n	800c784 <HAL_TIM_Base_Start+0x70>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a1f      	ldr	r2, [pc, #124]	; (800c7e0 <HAL_TIM_Base_Start+0xcc>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d00e      	beq.n	800c784 <HAL_TIM_Base_Start+0x70>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a1e      	ldr	r2, [pc, #120]	; (800c7e4 <HAL_TIM_Base_Start+0xd0>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d009      	beq.n	800c784 <HAL_TIM_Base_Start+0x70>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a1c      	ldr	r2, [pc, #112]	; (800c7e8 <HAL_TIM_Base_Start+0xd4>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d004      	beq.n	800c784 <HAL_TIM_Base_Start+0x70>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a1b      	ldr	r2, [pc, #108]	; (800c7ec <HAL_TIM_Base_Start+0xd8>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d115      	bne.n	800c7b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	689a      	ldr	r2, [r3, #8]
 800c78a:	4b19      	ldr	r3, [pc, #100]	; (800c7f0 <HAL_TIM_Base_Start+0xdc>)
 800c78c:	4013      	ands	r3, r2
 800c78e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b06      	cmp	r3, #6
 800c794:	d015      	beq.n	800c7c2 <HAL_TIM_Base_Start+0xae>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c79c:	d011      	beq.n	800c7c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f042 0201 	orr.w	r2, r2, #1
 800c7ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7ae:	e008      	b.n	800c7c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f042 0201 	orr.w	r2, r2, #1
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	e000      	b.n	800c7c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	40012c00 	.word	0x40012c00
 800c7d8:	40000400 	.word	0x40000400
 800c7dc:	40000800 	.word	0x40000800
 800c7e0:	40000c00 	.word	0x40000c00
 800c7e4:	40013400 	.word	0x40013400
 800c7e8:	40014000 	.word	0x40014000
 800c7ec:	40015000 	.word	0x40015000
 800c7f0:	00010007 	.word	0x00010007

0800c7f4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6a1a      	ldr	r2, [r3, #32]
 800c802:	f241 1311 	movw	r3, #4369	; 0x1111
 800c806:	4013      	ands	r3, r2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10f      	bne.n	800c82c <HAL_TIM_Base_Stop+0x38>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6a1a      	ldr	r2, [r3, #32]
 800c812:	f244 4344 	movw	r3, #17476	; 0x4444
 800c816:	4013      	ands	r3, r2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d107      	bne.n	800c82c <HAL_TIM_Base_Stop+0x38>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f022 0201 	bic.w	r2, r2, #1
 800c82a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	e049      	b.n	800c8e8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d106      	bne.n	800c86e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f841 	bl	800c8f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2202      	movs	r2, #2
 800c872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	3304      	adds	r3, #4
 800c87e:	4619      	mov	r1, r3
 800c880:	4610      	mov	r0, r2
 800c882:	f000 fc93 	bl	800d1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c914:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c91c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c924:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c92c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d108      	bne.n	800c946 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c934:	7bbb      	ldrb	r3, [r7, #14]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d105      	bne.n	800c946 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c93a:	7b7b      	ldrb	r3, [r7, #13]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d102      	bne.n	800c946 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c940:	7b3b      	ldrb	r3, [r7, #12]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d001      	beq.n	800c94a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e059      	b.n	800c9fe <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2202      	movs	r2, #2
 800c94e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2202      	movs	r2, #2
 800c956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2202      	movs	r2, #2
 800c95e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2202      	movs	r2, #2
 800c966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f042 0202 	orr.w	r2, r2, #2
 800c978:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68da      	ldr	r2, [r3, #12]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f042 0204 	orr.w	r2, r2, #4
 800c988:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2201      	movs	r2, #1
 800c990:	2100      	movs	r1, #0
 800c992:	4618      	mov	r0, r3
 800c994:	f001 f878 	bl	800da88 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2201      	movs	r2, #1
 800c99e:	2104      	movs	r1, #4
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f001 f871 	bl	800da88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a17      	ldr	r2, [pc, #92]	; (800ca08 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d018      	beq.n	800c9e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a15      	ldr	r2, [pc, #84]	; (800ca0c <HAL_TIM_OnePulse_Start_IT+0x108>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d013      	beq.n	800c9e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a14      	ldr	r2, [pc, #80]	; (800ca10 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d00e      	beq.n	800c9e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a12      	ldr	r2, [pc, #72]	; (800ca14 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d009      	beq.n	800c9e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a11      	ldr	r2, [pc, #68]	; (800ca18 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d004      	beq.n	800c9e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a0f      	ldr	r2, [pc, #60]	; (800ca1c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d101      	bne.n	800c9e6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e000      	b.n	800c9e8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d007      	beq.n	800c9fc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	40012c00 	.word	0x40012c00
 800ca0c:	40013400 	.word	0x40013400
 800ca10:	40014000 	.word	0x40014000
 800ca14:	40014400 	.word	0x40014400
 800ca18:	40014800 	.word	0x40014800
 800ca1c:	40015000 	.word	0x40015000

0800ca20 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68da      	ldr	r2, [r3, #12]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f022 0202 	bic.w	r2, r2, #2
 800ca38:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68da      	ldr	r2, [r3, #12]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f022 0204 	bic.w	r2, r2, #4
 800ca48:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	2100      	movs	r1, #0
 800ca52:	4618      	mov	r0, r3
 800ca54:	f001 f818 	bl	800da88 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2104      	movs	r1, #4
 800ca60:	4618      	mov	r0, r3
 800ca62:	f001 f811 	bl	800da88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a33      	ldr	r2, [pc, #204]	; (800cb38 <HAL_TIM_OnePulse_Stop_IT+0x118>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d018      	beq.n	800caa2 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a31      	ldr	r2, [pc, #196]	; (800cb3c <HAL_TIM_OnePulse_Stop_IT+0x11c>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d013      	beq.n	800caa2 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a30      	ldr	r2, [pc, #192]	; (800cb40 <HAL_TIM_OnePulse_Stop_IT+0x120>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d00e      	beq.n	800caa2 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a2e      	ldr	r2, [pc, #184]	; (800cb44 <HAL_TIM_OnePulse_Stop_IT+0x124>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d009      	beq.n	800caa2 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a2d      	ldr	r2, [pc, #180]	; (800cb48 <HAL_TIM_OnePulse_Stop_IT+0x128>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d004      	beq.n	800caa2 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a2b      	ldr	r2, [pc, #172]	; (800cb4c <HAL_TIM_OnePulse_Stop_IT+0x12c>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d101      	bne.n	800caa6 <HAL_TIM_OnePulse_Stop_IT+0x86>
 800caa2:	2301      	movs	r3, #1
 800caa4:	e000      	b.n	800caa8 <HAL_TIM_OnePulse_Stop_IT+0x88>
 800caa6:	2300      	movs	r3, #0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d017      	beq.n	800cadc <HAL_TIM_OnePulse_Stop_IT+0xbc>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6a1a      	ldr	r2, [r3, #32]
 800cab2:	f241 1311 	movw	r3, #4369	; 0x1111
 800cab6:	4013      	ands	r3, r2
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10f      	bne.n	800cadc <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6a1a      	ldr	r2, [r3, #32]
 800cac2:	f244 4344 	movw	r3, #17476	; 0x4444
 800cac6:	4013      	ands	r3, r2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d107      	bne.n	800cadc <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cada:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6a1a      	ldr	r2, [r3, #32]
 800cae2:	f241 1311 	movw	r3, #4369	; 0x1111
 800cae6:	4013      	ands	r3, r2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10f      	bne.n	800cb0c <HAL_TIM_OnePulse_Stop_IT+0xec>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6a1a      	ldr	r2, [r3, #32]
 800caf2:	f244 4344 	movw	r3, #17476	; 0x4444
 800caf6:	4013      	ands	r3, r2
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d107      	bne.n	800cb0c <HAL_TIM_OnePulse_Stop_IT+0xec>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f022 0201 	bic.w	r2, r2, #1
 800cb0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	40012c00 	.word	0x40012c00
 800cb3c:	40013400 	.word	0x40013400
 800cb40:	40014000 	.word	0x40014000
 800cb44:	40014400 	.word	0x40014400
 800cb48:	40014800 	.word	0x40014800
 800cb4c:	40015000 	.word	0x40015000

0800cb50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	f003 0302 	and.w	r3, r3, #2
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d122      	bne.n	800cbac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	f003 0302 	and.w	r3, r3, #2
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d11b      	bne.n	800cbac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f06f 0202 	mvn.w	r2, #2
 800cb7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	699b      	ldr	r3, [r3, #24]
 800cb8a:	f003 0303 	and.w	r3, r3, #3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 faec 	bl	800d170 <HAL_TIM_IC_CaptureCallback>
 800cb98:	e005      	b.n	800cba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7f8 fe48 	bl	8005830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 faef 	bl	800d184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	f003 0304 	and.w	r3, r3, #4
 800cbb6:	2b04      	cmp	r3, #4
 800cbb8:	d122      	bne.n	800cc00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	f003 0304 	and.w	r3, r3, #4
 800cbc4:	2b04      	cmp	r3, #4
 800cbc6:	d11b      	bne.n	800cc00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f06f 0204 	mvn.w	r2, #4
 800cbd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2202      	movs	r2, #2
 800cbd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 fac2 	bl	800d170 <HAL_TIM_IC_CaptureCallback>
 800cbec:	e005      	b.n	800cbfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7f8 fe1e 	bl	8005830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fac5 	bl	800d184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	f003 0308 	and.w	r3, r3, #8
 800cc0a:	2b08      	cmp	r3, #8
 800cc0c:	d122      	bne.n	800cc54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	f003 0308 	and.w	r3, r3, #8
 800cc18:	2b08      	cmp	r3, #8
 800cc1a:	d11b      	bne.n	800cc54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f06f 0208 	mvn.w	r2, #8
 800cc24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2204      	movs	r2, #4
 800cc2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	f003 0303 	and.w	r3, r3, #3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fa98 	bl	800d170 <HAL_TIM_IC_CaptureCallback>
 800cc40:	e005      	b.n	800cc4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7f8 fdf4 	bl	8005830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fa9b 	bl	800d184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	f003 0310 	and.w	r3, r3, #16
 800cc5e:	2b10      	cmp	r3, #16
 800cc60:	d122      	bne.n	800cca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	f003 0310 	and.w	r3, r3, #16
 800cc6c:	2b10      	cmp	r3, #16
 800cc6e:	d11b      	bne.n	800cca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f06f 0210 	mvn.w	r2, #16
 800cc78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2208      	movs	r2, #8
 800cc7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	69db      	ldr	r3, [r3, #28]
 800cc86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fa6e 	bl	800d170 <HAL_TIM_IC_CaptureCallback>
 800cc94:	e005      	b.n	800cca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7f8 fdca 	bl	8005830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 fa71 	bl	800d184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	f003 0301 	and.w	r3, r3, #1
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d10e      	bne.n	800ccd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	f003 0301 	and.w	r3, r3, #1
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d107      	bne.n	800ccd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f06f 0201 	mvn.w	r2, #1
 800cccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fa44 	bl	800d15c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccde:	2b80      	cmp	r3, #128	; 0x80
 800cce0:	d10e      	bne.n	800cd00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccec:	2b80      	cmp	r3, #128	; 0x80
 800ccee:	d107      	bne.n	800cd00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ccf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 ff8a 	bl	800dc14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd0e:	d10e      	bne.n	800cd2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd1a:	2b80      	cmp	r3, #128	; 0x80
 800cd1c:	d107      	bne.n	800cd2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 ff7d 	bl	800dc28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd38:	2b40      	cmp	r3, #64	; 0x40
 800cd3a:	d10e      	bne.n	800cd5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd46:	2b40      	cmp	r3, #64	; 0x40
 800cd48:	d107      	bne.n	800cd5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fa1f 	bl	800d198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	f003 0320 	and.w	r3, r3, #32
 800cd64:	2b20      	cmp	r3, #32
 800cd66:	d10e      	bne.n	800cd86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	f003 0320 	and.w	r3, r3, #32
 800cd72:	2b20      	cmp	r3, #32
 800cd74:	d107      	bne.n	800cd86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f06f 0220 	mvn.w	r2, #32
 800cd7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 ff3d 	bl	800dc00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd94:	d10f      	bne.n	800cdb6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cda0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cda4:	d107      	bne.n	800cdb6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cdae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 ff43 	bl	800dc3c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cdc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdc4:	d10f      	bne.n	800cde6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cdd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdd4:	d107      	bne.n	800cde6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cdde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 ff35 	bl	800dc50 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdf4:	d10f      	bne.n	800ce16 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce04:	d107      	bne.n	800ce16 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ce0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 ff27 	bl	800dc64 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce24:	d10f      	bne.n	800ce46 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce34:	d107      	bne.n	800ce46 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ce3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 ff19 	bl	800dc78 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d101      	bne.n	800ce6e <HAL_TIM_OC_ConfigChannel+0x1e>
 800ce6a:	2302      	movs	r3, #2
 800ce6c:	e066      	b.n	800cf3c <HAL_TIM_OC_ConfigChannel+0xec>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2201      	movs	r2, #1
 800ce72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2b14      	cmp	r3, #20
 800ce7a:	d857      	bhi.n	800cf2c <HAL_TIM_OC_ConfigChannel+0xdc>
 800ce7c:	a201      	add	r2, pc, #4	; (adr r2, 800ce84 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ce7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce82:	bf00      	nop
 800ce84:	0800ced9 	.word	0x0800ced9
 800ce88:	0800cf2d 	.word	0x0800cf2d
 800ce8c:	0800cf2d 	.word	0x0800cf2d
 800ce90:	0800cf2d 	.word	0x0800cf2d
 800ce94:	0800cee7 	.word	0x0800cee7
 800ce98:	0800cf2d 	.word	0x0800cf2d
 800ce9c:	0800cf2d 	.word	0x0800cf2d
 800cea0:	0800cf2d 	.word	0x0800cf2d
 800cea4:	0800cef5 	.word	0x0800cef5
 800cea8:	0800cf2d 	.word	0x0800cf2d
 800ceac:	0800cf2d 	.word	0x0800cf2d
 800ceb0:	0800cf2d 	.word	0x0800cf2d
 800ceb4:	0800cf03 	.word	0x0800cf03
 800ceb8:	0800cf2d 	.word	0x0800cf2d
 800cebc:	0800cf2d 	.word	0x0800cf2d
 800cec0:	0800cf2d 	.word	0x0800cf2d
 800cec4:	0800cf11 	.word	0x0800cf11
 800cec8:	0800cf2d 	.word	0x0800cf2d
 800cecc:	0800cf2d 	.word	0x0800cf2d
 800ced0:	0800cf2d 	.word	0x0800cf2d
 800ced4:	0800cf1f 	.word	0x0800cf1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68b9      	ldr	r1, [r7, #8]
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 fa0c 	bl	800d2fc <TIM_OC1_SetConfig>
      break;
 800cee4:	e025      	b.n	800cf32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68b9      	ldr	r1, [r7, #8]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f000 fa9f 	bl	800d430 <TIM_OC2_SetConfig>
      break;
 800cef2:	e01e      	b.n	800cf32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68b9      	ldr	r1, [r7, #8]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 fb2c 	bl	800d558 <TIM_OC3_SetConfig>
      break;
 800cf00:	e017      	b.n	800cf32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	68b9      	ldr	r1, [r7, #8]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 fbb7 	bl	800d67c <TIM_OC4_SetConfig>
      break;
 800cf0e:	e010      	b.n	800cf32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68b9      	ldr	r1, [r7, #8]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f000 fc44 	bl	800d7a4 <TIM_OC5_SetConfig>
      break;
 800cf1c:	e009      	b.n	800cf32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68b9      	ldr	r1, [r7, #8]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 fca7 	bl	800d878 <TIM_OC6_SetConfig>
      break;
 800cf2a:	e002      	b.n	800cf32 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	75fb      	strb	r3, [r7, #23]
      break;
 800cf30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d101      	bne.n	800cf60 <HAL_TIM_ConfigClockSource+0x1c>
 800cf5c:	2302      	movs	r3, #2
 800cf5e:	e0ee      	b.n	800d13e <HAL_TIM_ConfigClockSource+0x1fa>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2202      	movs	r2, #2
 800cf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cf7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cf82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a6b      	ldr	r2, [pc, #428]	; (800d148 <HAL_TIM_ConfigClockSource+0x204>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	f000 80b9 	beq.w	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfa0:	4a69      	ldr	r2, [pc, #420]	; (800d148 <HAL_TIM_ConfigClockSource+0x204>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	f200 80be 	bhi.w	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfa8:	4a68      	ldr	r2, [pc, #416]	; (800d14c <HAL_TIM_ConfigClockSource+0x208>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	f000 80b1 	beq.w	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfb0:	4a66      	ldr	r2, [pc, #408]	; (800d14c <HAL_TIM_ConfigClockSource+0x208>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	f200 80b6 	bhi.w	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfb8:	4a65      	ldr	r2, [pc, #404]	; (800d150 <HAL_TIM_ConfigClockSource+0x20c>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	f000 80a9 	beq.w	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfc0:	4a63      	ldr	r2, [pc, #396]	; (800d150 <HAL_TIM_ConfigClockSource+0x20c>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	f200 80ae 	bhi.w	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfc8:	4a62      	ldr	r2, [pc, #392]	; (800d154 <HAL_TIM_ConfigClockSource+0x210>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	f000 80a1 	beq.w	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfd0:	4a60      	ldr	r2, [pc, #384]	; (800d154 <HAL_TIM_ConfigClockSource+0x210>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	f200 80a6 	bhi.w	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfd8:	4a5f      	ldr	r2, [pc, #380]	; (800d158 <HAL_TIM_ConfigClockSource+0x214>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	f000 8099 	beq.w	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfe0:	4a5d      	ldr	r2, [pc, #372]	; (800d158 <HAL_TIM_ConfigClockSource+0x214>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	f200 809e 	bhi.w	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfe8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cfec:	f000 8091 	beq.w	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800cff0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cff4:	f200 8096 	bhi.w	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800cff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cffc:	f000 8089 	beq.w	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800d000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d004:	f200 808e 	bhi.w	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d00c:	d03e      	beq.n	800d08c <HAL_TIM_ConfigClockSource+0x148>
 800d00e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d012:	f200 8087 	bhi.w	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d01a:	f000 8086 	beq.w	800d12a <HAL_TIM_ConfigClockSource+0x1e6>
 800d01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d022:	d87f      	bhi.n	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d024:	2b70      	cmp	r3, #112	; 0x70
 800d026:	d01a      	beq.n	800d05e <HAL_TIM_ConfigClockSource+0x11a>
 800d028:	2b70      	cmp	r3, #112	; 0x70
 800d02a:	d87b      	bhi.n	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d02c:	2b60      	cmp	r3, #96	; 0x60
 800d02e:	d050      	beq.n	800d0d2 <HAL_TIM_ConfigClockSource+0x18e>
 800d030:	2b60      	cmp	r3, #96	; 0x60
 800d032:	d877      	bhi.n	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d034:	2b50      	cmp	r3, #80	; 0x50
 800d036:	d03c      	beq.n	800d0b2 <HAL_TIM_ConfigClockSource+0x16e>
 800d038:	2b50      	cmp	r3, #80	; 0x50
 800d03a:	d873      	bhi.n	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d03c:	2b40      	cmp	r3, #64	; 0x40
 800d03e:	d058      	beq.n	800d0f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800d040:	2b40      	cmp	r3, #64	; 0x40
 800d042:	d86f      	bhi.n	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d044:	2b30      	cmp	r3, #48	; 0x30
 800d046:	d064      	beq.n	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800d048:	2b30      	cmp	r3, #48	; 0x30
 800d04a:	d86b      	bhi.n	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d04c:	2b20      	cmp	r3, #32
 800d04e:	d060      	beq.n	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800d050:	2b20      	cmp	r3, #32
 800d052:	d867      	bhi.n	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
 800d054:	2b00      	cmp	r3, #0
 800d056:	d05c      	beq.n	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800d058:	2b10      	cmp	r3, #16
 800d05a:	d05a      	beq.n	800d112 <HAL_TIM_ConfigClockSource+0x1ce>
 800d05c:	e062      	b.n	800d124 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	6899      	ldr	r1, [r3, #8]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	685a      	ldr	r2, [r3, #4]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	f000 fceb 	bl	800da48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	609a      	str	r2, [r3, #8]
      break;
 800d08a:	e04f      	b.n	800d12c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6818      	ldr	r0, [r3, #0]
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	6899      	ldr	r1, [r3, #8]
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	685a      	ldr	r2, [r3, #4]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	f000 fcd4 	bl	800da48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0ae:	609a      	str	r2, [r3, #8]
      break;
 800d0b0:	e03c      	b.n	800d12c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	6859      	ldr	r1, [r3, #4]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f000 fc46 	bl	800d950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2150      	movs	r1, #80	; 0x50
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 fc9f 	bl	800da0e <TIM_ITRx_SetConfig>
      break;
 800d0d0:	e02c      	b.n	800d12c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6818      	ldr	r0, [r3, #0]
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	6859      	ldr	r1, [r3, #4]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	f000 fc65 	bl	800d9ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2160      	movs	r1, #96	; 0x60
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 fc8f 	bl	800da0e <TIM_ITRx_SetConfig>
      break;
 800d0f0:	e01c      	b.n	800d12c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	6859      	ldr	r1, [r3, #4]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	461a      	mov	r2, r3
 800d100:	f000 fc26 	bl	800d950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2140      	movs	r1, #64	; 0x40
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 fc7f 	bl	800da0e <TIM_ITRx_SetConfig>
      break;
 800d110:	e00c      	b.n	800d12c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4619      	mov	r1, r3
 800d11c:	4610      	mov	r0, r2
 800d11e:	f000 fc76 	bl	800da0e <TIM_ITRx_SetConfig>
      break;
 800d122:	e003      	b.n	800d12c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	73fb      	strb	r3, [r7, #15]
      break;
 800d128:	e000      	b.n	800d12c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800d12a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	00100070 	.word	0x00100070
 800d14c:	00100050 	.word	0x00100050
 800d150:	00100040 	.word	0x00100040
 800d154:	00100030 	.word	0x00100030
 800d158:	00100020 	.word	0x00100020

0800d15c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a46      	ldr	r2, [pc, #280]	; (800d2d8 <TIM_Base_SetConfig+0x12c>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d017      	beq.n	800d1f4 <TIM_Base_SetConfig+0x48>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ca:	d013      	beq.n	800d1f4 <TIM_Base_SetConfig+0x48>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a43      	ldr	r2, [pc, #268]	; (800d2dc <TIM_Base_SetConfig+0x130>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d00f      	beq.n	800d1f4 <TIM_Base_SetConfig+0x48>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a42      	ldr	r2, [pc, #264]	; (800d2e0 <TIM_Base_SetConfig+0x134>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d00b      	beq.n	800d1f4 <TIM_Base_SetConfig+0x48>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a41      	ldr	r2, [pc, #260]	; (800d2e4 <TIM_Base_SetConfig+0x138>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d007      	beq.n	800d1f4 <TIM_Base_SetConfig+0x48>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a40      	ldr	r2, [pc, #256]	; (800d2e8 <TIM_Base_SetConfig+0x13c>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d003      	beq.n	800d1f4 <TIM_Base_SetConfig+0x48>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a3f      	ldr	r2, [pc, #252]	; (800d2ec <TIM_Base_SetConfig+0x140>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d108      	bne.n	800d206 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	4313      	orrs	r3, r2
 800d204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a33      	ldr	r2, [pc, #204]	; (800d2d8 <TIM_Base_SetConfig+0x12c>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d023      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d214:	d01f      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a30      	ldr	r2, [pc, #192]	; (800d2dc <TIM_Base_SetConfig+0x130>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d01b      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4a2f      	ldr	r2, [pc, #188]	; (800d2e0 <TIM_Base_SetConfig+0x134>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d017      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a2e      	ldr	r2, [pc, #184]	; (800d2e4 <TIM_Base_SetConfig+0x138>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d013      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a2d      	ldr	r2, [pc, #180]	; (800d2e8 <TIM_Base_SetConfig+0x13c>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d00f      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a2d      	ldr	r2, [pc, #180]	; (800d2f0 <TIM_Base_SetConfig+0x144>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d00b      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a2c      	ldr	r2, [pc, #176]	; (800d2f4 <TIM_Base_SetConfig+0x148>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d007      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a2b      	ldr	r2, [pc, #172]	; (800d2f8 <TIM_Base_SetConfig+0x14c>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d003      	beq.n	800d256 <TIM_Base_SetConfig+0xaa>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a26      	ldr	r2, [pc, #152]	; (800d2ec <TIM_Base_SetConfig+0x140>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d108      	bne.n	800d268 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d25c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	4313      	orrs	r3, r2
 800d266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	4313      	orrs	r3, r2
 800d274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	689a      	ldr	r2, [r3, #8]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a12      	ldr	r2, [pc, #72]	; (800d2d8 <TIM_Base_SetConfig+0x12c>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d013      	beq.n	800d2bc <TIM_Base_SetConfig+0x110>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a14      	ldr	r2, [pc, #80]	; (800d2e8 <TIM_Base_SetConfig+0x13c>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d00f      	beq.n	800d2bc <TIM_Base_SetConfig+0x110>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a14      	ldr	r2, [pc, #80]	; (800d2f0 <TIM_Base_SetConfig+0x144>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d00b      	beq.n	800d2bc <TIM_Base_SetConfig+0x110>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a13      	ldr	r2, [pc, #76]	; (800d2f4 <TIM_Base_SetConfig+0x148>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d007      	beq.n	800d2bc <TIM_Base_SetConfig+0x110>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a12      	ldr	r2, [pc, #72]	; (800d2f8 <TIM_Base_SetConfig+0x14c>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d003      	beq.n	800d2bc <TIM_Base_SetConfig+0x110>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a0d      	ldr	r2, [pc, #52]	; (800d2ec <TIM_Base_SetConfig+0x140>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d103      	bne.n	800d2c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	691a      	ldr	r2, [r3, #16]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	615a      	str	r2, [r3, #20]
}
 800d2ca:	bf00      	nop
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	40012c00 	.word	0x40012c00
 800d2dc:	40000400 	.word	0x40000400
 800d2e0:	40000800 	.word	0x40000800
 800d2e4:	40000c00 	.word	0x40000c00
 800d2e8:	40013400 	.word	0x40013400
 800d2ec:	40015000 	.word	0x40015000
 800d2f0:	40014000 	.word	0x40014000
 800d2f4:	40014400 	.word	0x40014400
 800d2f8:	40014800 	.word	0x40014800

0800d2fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a1b      	ldr	r3, [r3, #32]
 800d30a:	f023 0201 	bic.w	r2, r3, #1
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4313      	orrs	r3, r2
 800d340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	f023 0302 	bic.w	r3, r3, #2
 800d348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	4313      	orrs	r3, r2
 800d352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a30      	ldr	r2, [pc, #192]	; (800d418 <TIM_OC1_SetConfig+0x11c>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d013      	beq.n	800d384 <TIM_OC1_SetConfig+0x88>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a2f      	ldr	r2, [pc, #188]	; (800d41c <TIM_OC1_SetConfig+0x120>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d00f      	beq.n	800d384 <TIM_OC1_SetConfig+0x88>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a2e      	ldr	r2, [pc, #184]	; (800d420 <TIM_OC1_SetConfig+0x124>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d00b      	beq.n	800d384 <TIM_OC1_SetConfig+0x88>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a2d      	ldr	r2, [pc, #180]	; (800d424 <TIM_OC1_SetConfig+0x128>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d007      	beq.n	800d384 <TIM_OC1_SetConfig+0x88>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a2c      	ldr	r2, [pc, #176]	; (800d428 <TIM_OC1_SetConfig+0x12c>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d003      	beq.n	800d384 <TIM_OC1_SetConfig+0x88>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a2b      	ldr	r2, [pc, #172]	; (800d42c <TIM_OC1_SetConfig+0x130>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d10c      	bne.n	800d39e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	f023 0308 	bic.w	r3, r3, #8
 800d38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	697a      	ldr	r2, [r7, #20]
 800d392:	4313      	orrs	r3, r2
 800d394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	f023 0304 	bic.w	r3, r3, #4
 800d39c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4a1d      	ldr	r2, [pc, #116]	; (800d418 <TIM_OC1_SetConfig+0x11c>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d013      	beq.n	800d3ce <TIM_OC1_SetConfig+0xd2>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a1c      	ldr	r2, [pc, #112]	; (800d41c <TIM_OC1_SetConfig+0x120>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d00f      	beq.n	800d3ce <TIM_OC1_SetConfig+0xd2>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a1b      	ldr	r2, [pc, #108]	; (800d420 <TIM_OC1_SetConfig+0x124>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d00b      	beq.n	800d3ce <TIM_OC1_SetConfig+0xd2>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4a1a      	ldr	r2, [pc, #104]	; (800d424 <TIM_OC1_SetConfig+0x128>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d007      	beq.n	800d3ce <TIM_OC1_SetConfig+0xd2>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4a19      	ldr	r2, [pc, #100]	; (800d428 <TIM_OC1_SetConfig+0x12c>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d003      	beq.n	800d3ce <TIM_OC1_SetConfig+0xd2>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4a18      	ldr	r2, [pc, #96]	; (800d42c <TIM_OC1_SetConfig+0x130>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d111      	bne.n	800d3f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	685a      	ldr	r2, [r3, #4]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	621a      	str	r2, [r3, #32]
}
 800d40c:	bf00      	nop
 800d40e:	371c      	adds	r7, #28
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	40012c00 	.word	0x40012c00
 800d41c:	40013400 	.word	0x40013400
 800d420:	40014000 	.word	0x40014000
 800d424:	40014400 	.word	0x40014400
 800d428:	40014800 	.word	0x40014800
 800d42c:	40015000 	.word	0x40015000

0800d430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d430:	b480      	push	{r7}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	f023 0210 	bic.w	r2, r3, #16
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d45e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d46a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	021b      	lsls	r3, r3, #8
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	4313      	orrs	r3, r2
 800d476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	f023 0320 	bic.w	r3, r3, #32
 800d47e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	011b      	lsls	r3, r3, #4
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	4313      	orrs	r3, r2
 800d48a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a2c      	ldr	r2, [pc, #176]	; (800d540 <TIM_OC2_SetConfig+0x110>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d007      	beq.n	800d4a4 <TIM_OC2_SetConfig+0x74>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a2b      	ldr	r2, [pc, #172]	; (800d544 <TIM_OC2_SetConfig+0x114>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d003      	beq.n	800d4a4 <TIM_OC2_SetConfig+0x74>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a2a      	ldr	r2, [pc, #168]	; (800d548 <TIM_OC2_SetConfig+0x118>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d10d      	bne.n	800d4c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	011b      	lsls	r3, r3, #4
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a1f      	ldr	r2, [pc, #124]	; (800d540 <TIM_OC2_SetConfig+0x110>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d013      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xc0>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a1e      	ldr	r2, [pc, #120]	; (800d544 <TIM_OC2_SetConfig+0x114>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d00f      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xc0>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4a1e      	ldr	r2, [pc, #120]	; (800d54c <TIM_OC2_SetConfig+0x11c>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d00b      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xc0>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a1d      	ldr	r2, [pc, #116]	; (800d550 <TIM_OC2_SetConfig+0x120>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d007      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xc0>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a1c      	ldr	r2, [pc, #112]	; (800d554 <TIM_OC2_SetConfig+0x124>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d003      	beq.n	800d4f0 <TIM_OC2_SetConfig+0xc0>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a17      	ldr	r2, [pc, #92]	; (800d548 <TIM_OC2_SetConfig+0x118>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d113      	bne.n	800d518 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d4f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	4313      	orrs	r3, r2
 800d50a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	693a      	ldr	r2, [r7, #16]
 800d514:	4313      	orrs	r3, r2
 800d516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	621a      	str	r2, [r3, #32]
}
 800d532:	bf00      	nop
 800d534:	371c      	adds	r7, #28
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	40012c00 	.word	0x40012c00
 800d544:	40013400 	.word	0x40013400
 800d548:	40015000 	.word	0x40015000
 800d54c:	40014000 	.word	0x40014000
 800d550:	40014400 	.word	0x40014400
 800d554:	40014800 	.word	0x40014800

0800d558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d558:	b480      	push	{r7}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f023 0303 	bic.w	r3, r3, #3
 800d592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d5a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	021b      	lsls	r3, r3, #8
 800d5ac:	697a      	ldr	r2, [r7, #20]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	4a2b      	ldr	r2, [pc, #172]	; (800d664 <TIM_OC3_SetConfig+0x10c>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d007      	beq.n	800d5ca <TIM_OC3_SetConfig+0x72>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4a2a      	ldr	r2, [pc, #168]	; (800d668 <TIM_OC3_SetConfig+0x110>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d003      	beq.n	800d5ca <TIM_OC3_SetConfig+0x72>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4a29      	ldr	r2, [pc, #164]	; (800d66c <TIM_OC3_SetConfig+0x114>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d10d      	bne.n	800d5e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	021b      	lsls	r3, r3, #8
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a1e      	ldr	r2, [pc, #120]	; (800d664 <TIM_OC3_SetConfig+0x10c>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d013      	beq.n	800d616 <TIM_OC3_SetConfig+0xbe>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a1d      	ldr	r2, [pc, #116]	; (800d668 <TIM_OC3_SetConfig+0x110>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d00f      	beq.n	800d616 <TIM_OC3_SetConfig+0xbe>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a1d      	ldr	r2, [pc, #116]	; (800d670 <TIM_OC3_SetConfig+0x118>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d00b      	beq.n	800d616 <TIM_OC3_SetConfig+0xbe>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	4a1c      	ldr	r2, [pc, #112]	; (800d674 <TIM_OC3_SetConfig+0x11c>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d007      	beq.n	800d616 <TIM_OC3_SetConfig+0xbe>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a1b      	ldr	r2, [pc, #108]	; (800d678 <TIM_OC3_SetConfig+0x120>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d003      	beq.n	800d616 <TIM_OC3_SetConfig+0xbe>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a16      	ldr	r2, [pc, #88]	; (800d66c <TIM_OC3_SetConfig+0x114>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d113      	bne.n	800d63e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d61c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	695b      	ldr	r3, [r3, #20]
 800d62a:	011b      	lsls	r3, r3, #4
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	4313      	orrs	r3, r2
 800d630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	699b      	ldr	r3, [r3, #24]
 800d636:	011b      	lsls	r3, r3, #4
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	693a      	ldr	r2, [r7, #16]
 800d642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	685a      	ldr	r2, [r3, #4]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	621a      	str	r2, [r3, #32]
}
 800d658:	bf00      	nop
 800d65a:	371c      	adds	r7, #28
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr
 800d664:	40012c00 	.word	0x40012c00
 800d668:	40013400 	.word	0x40013400
 800d66c:	40015000 	.word	0x40015000
 800d670:	40014000 	.word	0x40014000
 800d674:	40014400 	.word	0x40014400
 800d678:	40014800 	.word	0x40014800

0800d67c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b087      	sub	sp, #28
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	69db      	ldr	r3, [r3, #28]
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d6aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	021b      	lsls	r3, r3, #8
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	031b      	lsls	r3, r3, #12
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a2c      	ldr	r2, [pc, #176]	; (800d78c <TIM_OC4_SetConfig+0x110>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d007      	beq.n	800d6f0 <TIM_OC4_SetConfig+0x74>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a2b      	ldr	r2, [pc, #172]	; (800d790 <TIM_OC4_SetConfig+0x114>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d003      	beq.n	800d6f0 <TIM_OC4_SetConfig+0x74>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a2a      	ldr	r2, [pc, #168]	; (800d794 <TIM_OC4_SetConfig+0x118>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d10d      	bne.n	800d70c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	031b      	lsls	r3, r3, #12
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	4313      	orrs	r3, r2
 800d702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d70a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a1f      	ldr	r2, [pc, #124]	; (800d78c <TIM_OC4_SetConfig+0x110>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d013      	beq.n	800d73c <TIM_OC4_SetConfig+0xc0>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a1e      	ldr	r2, [pc, #120]	; (800d790 <TIM_OC4_SetConfig+0x114>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d00f      	beq.n	800d73c <TIM_OC4_SetConfig+0xc0>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a1e      	ldr	r2, [pc, #120]	; (800d798 <TIM_OC4_SetConfig+0x11c>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d00b      	beq.n	800d73c <TIM_OC4_SetConfig+0xc0>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a1d      	ldr	r2, [pc, #116]	; (800d79c <TIM_OC4_SetConfig+0x120>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d007      	beq.n	800d73c <TIM_OC4_SetConfig+0xc0>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a1c      	ldr	r2, [pc, #112]	; (800d7a0 <TIM_OC4_SetConfig+0x124>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d003      	beq.n	800d73c <TIM_OC4_SetConfig+0xc0>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a17      	ldr	r2, [pc, #92]	; (800d794 <TIM_OC4_SetConfig+0x118>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d113      	bne.n	800d764 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d742:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d74a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	019b      	lsls	r3, r3, #6
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	4313      	orrs	r3, r2
 800d756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	019b      	lsls	r3, r3, #6
 800d75e:	693a      	ldr	r2, [r7, #16]
 800d760:	4313      	orrs	r3, r2
 800d762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	685a      	ldr	r2, [r3, #4]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	697a      	ldr	r2, [r7, #20]
 800d77c:	621a      	str	r2, [r3, #32]
}
 800d77e:	bf00      	nop
 800d780:	371c      	adds	r7, #28
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	40012c00 	.word	0x40012c00
 800d790:	40013400 	.word	0x40013400
 800d794:	40015000 	.word	0x40015000
 800d798:	40014000 	.word	0x40014000
 800d79c:	40014400 	.word	0x40014400
 800d7a0:	40014800 	.word	0x40014800

0800d7a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a1b      	ldr	r3, [r3, #32]
 800d7be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d7e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	041b      	lsls	r3, r3, #16
 800d7f0:	693a      	ldr	r2, [r7, #16]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a19      	ldr	r2, [pc, #100]	; (800d860 <TIM_OC5_SetConfig+0xbc>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d013      	beq.n	800d826 <TIM_OC5_SetConfig+0x82>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a18      	ldr	r2, [pc, #96]	; (800d864 <TIM_OC5_SetConfig+0xc0>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d00f      	beq.n	800d826 <TIM_OC5_SetConfig+0x82>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a17      	ldr	r2, [pc, #92]	; (800d868 <TIM_OC5_SetConfig+0xc4>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d00b      	beq.n	800d826 <TIM_OC5_SetConfig+0x82>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a16      	ldr	r2, [pc, #88]	; (800d86c <TIM_OC5_SetConfig+0xc8>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d007      	beq.n	800d826 <TIM_OC5_SetConfig+0x82>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a15      	ldr	r2, [pc, #84]	; (800d870 <TIM_OC5_SetConfig+0xcc>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d003      	beq.n	800d826 <TIM_OC5_SetConfig+0x82>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a14      	ldr	r2, [pc, #80]	; (800d874 <TIM_OC5_SetConfig+0xd0>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d109      	bne.n	800d83a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d82c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	021b      	lsls	r3, r3, #8
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	4313      	orrs	r3, r2
 800d838:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	697a      	ldr	r2, [r7, #20]
 800d83e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	685a      	ldr	r2, [r3, #4]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	621a      	str	r2, [r3, #32]
}
 800d854:	bf00      	nop
 800d856:	371c      	adds	r7, #28
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	40012c00 	.word	0x40012c00
 800d864:	40013400 	.word	0x40013400
 800d868:	40014000 	.word	0x40014000
 800d86c:	40014400 	.word	0x40014400
 800d870:	40014800 	.word	0x40014800
 800d874:	40015000 	.word	0x40015000

0800d878 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d878:	b480      	push	{r7}
 800d87a:	b087      	sub	sp, #28
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	021b      	lsls	r3, r3, #8
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	051b      	lsls	r3, r3, #20
 800d8c6:	693a      	ldr	r2, [r7, #16]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a1a      	ldr	r2, [pc, #104]	; (800d938 <TIM_OC6_SetConfig+0xc0>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d013      	beq.n	800d8fc <TIM_OC6_SetConfig+0x84>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a19      	ldr	r2, [pc, #100]	; (800d93c <TIM_OC6_SetConfig+0xc4>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d00f      	beq.n	800d8fc <TIM_OC6_SetConfig+0x84>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a18      	ldr	r2, [pc, #96]	; (800d940 <TIM_OC6_SetConfig+0xc8>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d00b      	beq.n	800d8fc <TIM_OC6_SetConfig+0x84>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a17      	ldr	r2, [pc, #92]	; (800d944 <TIM_OC6_SetConfig+0xcc>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d007      	beq.n	800d8fc <TIM_OC6_SetConfig+0x84>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a16      	ldr	r2, [pc, #88]	; (800d948 <TIM_OC6_SetConfig+0xd0>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d003      	beq.n	800d8fc <TIM_OC6_SetConfig+0x84>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4a15      	ldr	r2, [pc, #84]	; (800d94c <TIM_OC6_SetConfig+0xd4>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d109      	bne.n	800d910 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d902:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	695b      	ldr	r3, [r3, #20]
 800d908:	029b      	lsls	r3, r3, #10
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	693a      	ldr	r2, [r7, #16]
 800d928:	621a      	str	r2, [r3, #32]
}
 800d92a:	bf00      	nop
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	40012c00 	.word	0x40012c00
 800d93c:	40013400 	.word	0x40013400
 800d940:	40014000 	.word	0x40014000
 800d944:	40014400 	.word	0x40014400
 800d948:	40014800 	.word	0x40014800
 800d94c:	40015000 	.word	0x40015000

0800d950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6a1b      	ldr	r3, [r3, #32]
 800d960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	f023 0201 	bic.w	r2, r3, #1
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d97a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	011b      	lsls	r3, r3, #4
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	4313      	orrs	r3, r2
 800d984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	f023 030a 	bic.w	r3, r3, #10
 800d98c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	4313      	orrs	r3, r2
 800d994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	693a      	ldr	r2, [r7, #16]
 800d99a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	621a      	str	r2, [r3, #32]
}
 800d9a2:	bf00      	nop
 800d9a4:	371c      	adds	r7, #28
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr

0800d9ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9ae:	b480      	push	{r7}
 800d9b0:	b087      	sub	sp, #28
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	60f8      	str	r0, [r7, #12]
 800d9b6:	60b9      	str	r1, [r7, #8]
 800d9b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	f023 0210 	bic.w	r2, r3, #16
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	699b      	ldr	r3, [r3, #24]
 800d9ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6a1b      	ldr	r3, [r3, #32]
 800d9d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	031b      	lsls	r3, r3, #12
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d9ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	011b      	lsls	r3, r3, #4
 800d9f0:	693a      	ldr	r2, [r7, #16]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	697a      	ldr	r2, [r7, #20]
 800d9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	621a      	str	r2, [r3, #32]
}
 800da02:	bf00      	nop
 800da04:	371c      	adds	r7, #28
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da0e:	b480      	push	{r7}
 800da10:	b085      	sub	sp, #20
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800da24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4313      	orrs	r3, r2
 800da30:	f043 0307 	orr.w	r3, r3, #7
 800da34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	609a      	str	r2, [r3, #8]
}
 800da3c:	bf00      	nop
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	021a      	lsls	r2, r3, #8
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	431a      	orrs	r2, r3
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	4313      	orrs	r3, r2
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	4313      	orrs	r3, r2
 800da74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	609a      	str	r2, [r3, #8]
}
 800da7c:	bf00      	nop
 800da7e:	371c      	adds	r7, #28
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da88:	b480      	push	{r7}
 800da8a:	b087      	sub	sp, #28
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f003 031f 	and.w	r3, r3, #31
 800da9a:	2201      	movs	r2, #1
 800da9c:	fa02 f303 	lsl.w	r3, r2, r3
 800daa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6a1a      	ldr	r2, [r3, #32]
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	43db      	mvns	r3, r3
 800daaa:	401a      	ands	r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6a1a      	ldr	r2, [r3, #32]
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	f003 031f 	and.w	r3, r3, #31
 800daba:	6879      	ldr	r1, [r7, #4]
 800dabc:	fa01 f303 	lsl.w	r3, r1, r3
 800dac0:	431a      	orrs	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	621a      	str	r2, [r3, #32]
}
 800dac6:	bf00      	nop
 800dac8:	371c      	adds	r7, #28
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
	...

0800dad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d101      	bne.n	800daec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dae8:	2302      	movs	r3, #2
 800daea:	e074      	b.n	800dbd6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2202      	movs	r2, #2
 800daf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a34      	ldr	r2, [pc, #208]	; (800dbe4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d009      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a33      	ldr	r2, [pc, #204]	; (800dbe8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d004      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a31      	ldr	r2, [pc, #196]	; (800dbec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d108      	bne.n	800db3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	4313      	orrs	r3, r2
 800db3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800db42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	4313      	orrs	r3, r2
 800db50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4a21      	ldr	r2, [pc, #132]	; (800dbe4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d022      	beq.n	800dbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db6c:	d01d      	beq.n	800dbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a1f      	ldr	r2, [pc, #124]	; (800dbf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d018      	beq.n	800dbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a1d      	ldr	r2, [pc, #116]	; (800dbf4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d013      	beq.n	800dbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a1c      	ldr	r2, [pc, #112]	; (800dbf8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d00e      	beq.n	800dbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a15      	ldr	r2, [pc, #84]	; (800dbe8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d009      	beq.n	800dbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a18      	ldr	r2, [pc, #96]	; (800dbfc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d004      	beq.n	800dbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a11      	ldr	r2, [pc, #68]	; (800dbec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d10c      	bne.n	800dbc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	40012c00 	.word	0x40012c00
 800dbe8:	40013400 	.word	0x40013400
 800dbec:	40015000 	.word	0x40015000
 800dbf0:	40000400 	.word	0x40000400
 800dbf4:	40000800 	.word	0x40000800
 800dbf8:	40000c00 	.word	0x40000c00
 800dbfc:	40014000 	.word	0x40014000

0800dc00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dc44:	bf00      	nop
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dc58:	bf00      	nop
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b087      	sub	sp, #28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dca0:	683a      	ldr	r2, [r7, #0]
 800dca2:	6812      	ldr	r2, [r2, #0]
 800dca4:	f023 0101 	bic.w	r1, r3, #1
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	2b08      	cmp	r3, #8
 800dcb4:	d102      	bne.n	800dcbc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800dcb6:	2340      	movs	r3, #64	; 0x40
 800dcb8:	617b      	str	r3, [r7, #20]
 800dcba:	e001      	b.n	800dcc0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800dccc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800dcd2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800dcd8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800dcde:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800dce4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800dcea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800dcf0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800dcf6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800dcfc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800dd02:	4313      	orrs	r3, r2
 800dd04:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0a:	693a      	ldr	r2, [r7, #16]
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	4313      	orrs	r3, r2
 800dd18:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	4313      	orrs	r3, r2
 800dd22:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd28:	693a      	ldr	r2, [r7, #16]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800dd2e:	4b3d      	ldr	r3, [pc, #244]	; (800de24 <FMC_NORSRAM_Init+0x198>)
 800dd30:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd38:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd40:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800dd48:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800dd50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	43db      	mvns	r3, r3
 800dd60:	ea02 0103 	and.w	r1, r2, r3
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	4319      	orrs	r1, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd7a:	d10c      	bne.n	800dd96 <FMC_NORSRAM_Init+0x10a>
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d008      	beq.n	800dd96 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd90:	431a      	orrs	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d006      	beq.n	800ddac <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda6:	431a      	orrs	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d12f      	bne.n	800de16 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a1b      	ldr	r3, [r3, #32]
 800ddba:	0c1b      	lsrs	r3, r3, #16
 800ddbc:	041b      	lsls	r3, r3, #16
 800ddbe:	683a      	ldr	r2, [r7, #0]
 800ddc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ddc2:	431a      	orrs	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b04      	cmp	r3, #4
 800ddce:	d014      	beq.n	800ddfa <FMC_NORSRAM_Init+0x16e>
 800ddd0:	2b04      	cmp	r3, #4
 800ddd2:	d819      	bhi.n	800de08 <FMC_NORSRAM_Init+0x17c>
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <FMC_NORSRAM_Init+0x152>
 800ddd8:	2b02      	cmp	r3, #2
 800ddda:	d007      	beq.n	800ddec <FMC_NORSRAM_Init+0x160>
 800dddc:	e014      	b.n	800de08 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	621a      	str	r2, [r3, #32]
        break;
 800ddea:	e014      	b.n	800de16 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6a1b      	ldr	r3, [r3, #32]
 800ddf0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	621a      	str	r2, [r3, #32]
        break;
 800ddf8:	e00d      	b.n	800de16 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	621a      	str	r2, [r3, #32]
        break;
 800de06:	e006      	b.n	800de16 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6a1b      	ldr	r3, [r3, #32]
 800de0c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	621a      	str	r2, [r3, #32]
        break;
 800de14:	bf00      	nop
    }
  }

  return HAL_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	371c      	adds	r7, #28
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	0008fb7f 	.word	0x0008fb7f

0800de28 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800de28:	b480      	push	{r7}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	1c5a      	adds	r2, r3, #1
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	011b      	lsls	r3, r3, #4
 800de48:	431a      	orrs	r2, r3
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	021b      	lsls	r3, r3, #8
 800de50:	431a      	orrs	r2, r3
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	079b      	lsls	r3, r3, #30
 800de58:	431a      	orrs	r2, r3
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	691b      	ldr	r3, [r3, #16]
 800de5e:	041b      	lsls	r3, r3, #16
 800de60:	431a      	orrs	r2, r3
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	3b01      	subs	r3, #1
 800de68:	051b      	lsls	r3, r3, #20
 800de6a:	431a      	orrs	r2, r3
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	699b      	ldr	r3, [r3, #24]
 800de70:	3b02      	subs	r3, #2
 800de72:	061b      	lsls	r3, r3, #24
 800de74:	ea42 0103 	orr.w	r1, r2, r3
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	69db      	ldr	r3, [r3, #28]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	3201      	adds	r2, #1
 800de80:	4319      	orrs	r1, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de94:	d113      	bne.n	800debe <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800de9e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	695b      	ldr	r3, [r3, #20]
 800dea4:	3b01      	subs	r3, #1
 800dea6:	051b      	lsls	r3, r3, #20
 800dea8:	697a      	ldr	r2, [r7, #20]
 800deaa:	4313      	orrs	r3, r2
 800deac:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	431a      	orrs	r2, r3
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	371c      	adds	r7, #28
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dee0:	d121      	bne.n	800df26 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deea:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	6819      	ldr	r1, [r3, #0]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	011b      	lsls	r3, r3, #4
 800def8:	4319      	orrs	r1, r3
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	021b      	lsls	r3, r3, #8
 800df00:	4319      	orrs	r1, r3
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	079b      	lsls	r3, r3, #30
 800df08:	4319      	orrs	r1, r3
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	69db      	ldr	r3, [r3, #28]
 800df0e:	4319      	orrs	r1, r3
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	041b      	lsls	r3, r3, #16
 800df16:	430b      	orrs	r3, r1
 800df18:	ea42 0103 	orr.w	r1, r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800df24:	e005      	b.n	800df32 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800df2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <setpixel>:
#include "framebuf.h"

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

void setpixel(const tFramebuf *fb, unsigned int x, unsigned int y, uint32_t col) {
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
 800df4c:	603b      	str	r3, [r7, #0]
	((uint16_t *)fb->buf)[x + y * fb->stride] = col;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	891b      	ldrh	r3, [r3, #8]
 800df56:	4619      	mov	r1, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	fb03 f101 	mul.w	r1, r3, r1
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	440b      	add	r3, r1
 800df62:	005b      	lsls	r3, r3, #1
 800df64:	4413      	add	r3, r2
 800df66:	683a      	ldr	r2, [r7, #0]
 800df68:	b292      	uxth	r2, r2
 800df6a:	801a      	strh	r2, [r3, #0]
}
 800df6c:	bf00      	nop
 800df6e:	3714      	adds	r7, #20
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <setpixel_checked>:

void setpixel_checked(const tFramebuf *fb, int x, int y, int col, int mask) {
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
    if (mask && 0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d017      	beq.n	800dfbc <setpixel_checked+0x44>
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	db14      	blt.n	800dfbc <setpixel_checked+0x44>
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	889b      	ldrh	r3, [r3, #4]
 800df96:	461a      	mov	r2, r3
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	4293      	cmp	r3, r2
 800df9c:	da0e      	bge.n	800dfbc <setpixel_checked+0x44>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	db0b      	blt.n	800dfbc <setpixel_checked+0x44>
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	88db      	ldrh	r3, [r3, #6]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4293      	cmp	r3, r2
 800dfae:	da05      	bge.n	800dfbc <setpixel_checked+0x44>
        setpixel(fb, x, y, col);
 800dfb0:	68b9      	ldr	r1, [r7, #8]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	68f8      	ldr	r0, [r7, #12]
 800dfb8:	f7ff ffc2 	bl	800df40 <setpixel>
    }
}
 800dfbc:	bf00      	nop
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <fill_rect>:

uint32_t getpixel(const tFramebuf *fb, unsigned int x, unsigned int y) {
	return ((uint16_t *)fb->buf)[x + y * fb->stride];
}

void fill_rect(const tFramebuf *fb, int x, int y, int w, int h, uint32_t col) {
 800dfc4:	b480      	push	{r7}
 800dfc6:	b089      	sub	sp, #36	; 0x24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
 800dfd0:	603b      	str	r3, [r7, #0]
    if (h < 1 || w < 1 || x + w <= 0 || y + h <= 0 || y >= fb->height || x >= fb->width) {
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	dd66      	ble.n	800e0a6 <fill_rect+0xe2>
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	dd63      	ble.n	800e0a6 <fill_rect+0xe2>
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	dd5e      	ble.n	800e0a6 <fill_rect+0xe2>
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfec:	4413      	add	r3, r2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	dd59      	ble.n	800e0a6 <fill_rect+0xe2>
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	88db      	ldrh	r3, [r3, #6]
 800dff6:	461a      	mov	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4293      	cmp	r3, r2
 800dffc:	da53      	bge.n	800e0a6 <fill_rect+0xe2>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	889b      	ldrh	r3, [r3, #4]
 800e002:	461a      	mov	r2, r3
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	4293      	cmp	r3, r2
 800e008:	da4d      	bge.n	800e0a6 <fill_rect+0xe2>
        // No operation needed.
        return;
    }

    // clip to the framebuffer
    int xend = MIN(fb->width, x + w);
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	4413      	add	r3, r2
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	8892      	ldrh	r2, [r2, #4]
 800e014:	4293      	cmp	r3, r2
 800e016:	bfa8      	it	ge
 800e018:	4613      	movge	r3, r2
 800e01a:	617b      	str	r3, [r7, #20]
    int yend = MIN(fb->height, y + h);
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e020:	4413      	add	r3, r2
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	88d2      	ldrh	r2, [r2, #6]
 800e026:	4293      	cmp	r3, r2
 800e028:	bfa8      	it	ge
 800e02a:	4613      	movge	r3, r2
 800e02c:	613b      	str	r3, [r7, #16]
    x = MAX(x, 0);
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e034:	60bb      	str	r3, [r7, #8]
    y = MAX(y, 0);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e03c:	607b      	str	r3, [r7, #4]

    w = xend - x;
 800e03e:	697a      	ldr	r2, [r7, #20]
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	603b      	str	r3, [r7, #0]
    h = yend - y;
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	1ad3      	subs	r3, r2, r3
 800e04c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *b = &((uint16_t *)fb->buf)[x + y * fb->stride];
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	891b      	ldrh	r3, [r3, #8]
 800e056:	4619      	mov	r1, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	fb03 f101 	mul.w	r1, r3, r1
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	440b      	add	r3, r1
 800e062:	005b      	lsls	r3, r3, #1
 800e064:	4413      	add	r3, r2
 800e066:	61fb      	str	r3, [r7, #28]
    while (h--) {
 800e068:	e017      	b.n	800e09a <fill_rect+0xd6>
    	for (unsigned int ww = w; ww; --ww) {
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	61bb      	str	r3, [r7, #24]
 800e06e:	e008      	b.n	800e082 <fill_rect+0xbe>
            *b++ = col;
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	1c9a      	adds	r2, r3, #2
 800e074:	61fa      	str	r2, [r7, #28]
 800e076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e078:	b292      	uxth	r2, r2
 800e07a:	801a      	strh	r2, [r3, #0]
    	for (unsigned int ww = w; ww; --ww) {
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	3b01      	subs	r3, #1
 800e080:	61bb      	str	r3, [r7, #24]
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1f3      	bne.n	800e070 <fill_rect+0xac>
        }
        b += fb->stride - w;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	891b      	ldrh	r3, [r3, #8]
 800e08c:	461a      	mov	r2, r3
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	005b      	lsls	r3, r3, #1
 800e094:	69fa      	ldr	r2, [r7, #28]
 800e096:	4413      	add	r3, r2
 800e098:	61fb      	str	r3, [r7, #28]
    while (h--) {
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	1e5a      	subs	r2, r3, #1
 800e09e:	62ba      	str	r2, [r7, #40]	; 0x28
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1e2      	bne.n	800e06a <fill_rect+0xa6>
 800e0a4:	e000      	b.n	800e0a8 <fill_rect+0xe4>
        return;
 800e0a6:	bf00      	nop
    }

}
 800e0a8:	3724      	adds	r7, #36	; 0x24
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <framebuf_init>:

void framebuf_init(tFramebuf *fb, uint16_t width, uint16_t height, char *buf ) {
 800e0b2:	b480      	push	{r7}
 800e0b4:	b085      	sub	sp, #20
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	60f8      	str	r0, [r7, #12]
 800e0ba:	607b      	str	r3, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	817b      	strh	r3, [r7, #10]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	813b      	strh	r3, [r7, #8]
    fb->width = width;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	897a      	ldrh	r2, [r7, #10]
 800e0c8:	809a      	strh	r2, [r3, #4]
    fb->height = height;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	893a      	ldrh	r2, [r7, #8]
 800e0ce:	80da      	strh	r2, [r3, #6]
	fb->buf = buf;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	601a      	str	r2, [r3, #0]
	fb->stride = fb->width;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	889a      	ldrh	r2, [r3, #4]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	811a      	strh	r2, [r3, #8]
}
 800e0de:	bf00      	nop
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr

0800e0ea <framebuf_fill>:

void framebuf_fill( const tFramebuf *fb, uint32_t col ) {
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af02      	add	r7, sp, #8
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	6039      	str	r1, [r7, #0]
    fill_rect( fb, 0, 0, fb->width, fb->height, col);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	889b      	ldrh	r3, [r3, #4]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	88db      	ldrh	r3, [r3, #6]
 800e0fe:	461a      	mov	r2, r3
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	9301      	str	r3, [sp, #4]
 800e104:	9200      	str	r2, [sp, #0]
 800e106:	460b      	mov	r3, r1
 800e108:	2200      	movs	r2, #0
 800e10a:	2100      	movs	r1, #0
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff ff59 	bl	800dfc4 <fill_rect>
}
 800e112:	bf00      	nop
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <framebuf_fill_rect>:

void framebuf_fill_rect( const tFramebuf *fb, int x, int y, int w, int h, uint32_t col ) {
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b086      	sub	sp, #24
 800e11e:	af02      	add	r7, sp, #8
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	60b9      	str	r1, [r7, #8]
 800e124:	607a      	str	r2, [r7, #4]
 800e126:	603b      	str	r3, [r7, #0]
    fill_rect( fb, x, y, w, h, col );
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	9301      	str	r3, [sp, #4]
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	68b9      	ldr	r1, [r7, #8]
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f7ff ff44 	bl	800dfc4 <fill_rect>
}
 800e13c:	bf00      	nop
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <framebuf_pixel>:

void framebuf_pixel( const tFramebuf *fb, int x, int y, uint32_t col ) {
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]
 800e150:	603b      	str	r3, [r7, #0]
    if (0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	2b00      	cmp	r3, #0
 800e156:	db14      	blt.n	800e182 <framebuf_pixel+0x3e>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	889b      	ldrh	r3, [r3, #4]
 800e15c:	461a      	mov	r2, r3
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	4293      	cmp	r3, r2
 800e162:	da0e      	bge.n	800e182 <framebuf_pixel+0x3e>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	db0b      	blt.n	800e182 <framebuf_pixel+0x3e>
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	88db      	ldrh	r3, [r3, #6]
 800e16e:	461a      	mov	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4293      	cmp	r3, r2
 800e174:	da05      	bge.n	800e182 <framebuf_pixel+0x3e>
		setpixel( fb, x, y,  col );
 800e176:	68b9      	ldr	r1, [r7, #8]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f7ff fedf 	bl	800df40 <setpixel>
    }
}
 800e182:	bf00      	nop
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <framebuf_hline>:

void framebuf_hline( const tFramebuf *fb, int x, int y, int w, uint32_t col ) {
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b086      	sub	sp, #24
 800e18e:	af02      	add	r7, sp, #8
 800e190:	60f8      	str	r0, [r7, #12]
 800e192:	60b9      	str	r1, [r7, #8]
 800e194:	607a      	str	r2, [r7, #4]
 800e196:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, w, 1, col );
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	9301      	str	r3, [sp, #4]
 800e19c:	2301      	movs	r3, #1
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	68b9      	ldr	r1, [r7, #8]
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7ff ff0c 	bl	800dfc4 <fill_rect>
}
 800e1ac:	bf00      	nop
 800e1ae:	3710      	adds	r7, #16
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <framebuf_vline>:

void framebuf_vline( const tFramebuf *fb, int x, int y, int h, uint32_t col ) {
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af02      	add	r7, sp, #8
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
 800e1c0:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, 1, h, col );
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	9301      	str	r3, [sp, #4]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	9300      	str	r3, [sp, #0]
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	68b9      	ldr	r1, [r7, #8]
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f7ff fef7 	bl	800dfc4 <fill_rect>
}
 800e1d6:	bf00      	nop
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <line>:
	fill_rect( fb, x, y + h - 1, w, 1, col );
	fill_rect( fb, x, y, 1, h, col );
	fill_rect( fb, x + w - 1, y, 1, h, col );
}

void line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b08c      	sub	sp, #48	; 0x30
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	60f8      	str	r0, [r7, #12]
 800e1e6:	60b9      	str	r1, [r7, #8]
 800e1e8:	607a      	str	r2, [r7, #4]
 800e1ea:	603b      	str	r3, [r7, #0]
	int dx = x2 - x1;
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int sx;
    if (dx > 0) {
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	dd02      	ble.n	800e200 <line+0x22>
        sx = 1;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1fe:	e005      	b.n	800e20c <line+0x2e>
    } else {
        dx = -dx;
 800e200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e202:	425b      	negs	r3, r3
 800e204:	62fb      	str	r3, [r7, #44]	; 0x2c
        sx = -1;
 800e206:	f04f 33ff 	mov.w	r3, #4294967295
 800e20a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    int dy = y2 - y1;
 800e20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
    int sy;
    if (dy > 0) {
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	2b00      	cmp	r3, #0
 800e218:	dd02      	ble.n	800e220 <line+0x42>
        sy = 1;
 800e21a:	2301      	movs	r3, #1
 800e21c:	623b      	str	r3, [r7, #32]
 800e21e:	e005      	b.n	800e22c <line+0x4e>
    } else {
        dy = -dy;
 800e220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e222:	425b      	negs	r3, r3
 800e224:	627b      	str	r3, [r7, #36]	; 0x24
        sy = -1;
 800e226:	f04f 33ff 	mov.w	r3, #4294967295
 800e22a:	623b      	str	r3, [r7, #32]
    }

    int steep;
    if (dy > dx) {
 800e22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	429a      	cmp	r2, r3
 800e232:	dd14      	ble.n	800e25e <line+0x80>
        int temp;
        temp = x1;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	613b      	str	r3, [r7, #16]
        x1 = y1;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	60bb      	str	r3, [r7, #8]
        y1 = temp;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	607b      	str	r3, [r7, #4]
        temp = dx;
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	613b      	str	r3, [r7, #16]
        dx = dy;
 800e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e246:	62fb      	str	r3, [r7, #44]	; 0x2c
        dy = temp;
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	627b      	str	r3, [r7, #36]	; 0x24
        temp = sx;
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	613b      	str	r3, [r7, #16]
        sx = sy;
 800e250:	6a3b      	ldr	r3, [r7, #32]
 800e252:	62bb      	str	r3, [r7, #40]	; 0x28
        sy = temp;
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	623b      	str	r3, [r7, #32]
        steep = 1;
 800e258:	2301      	movs	r3, #1
 800e25a:	61fb      	str	r3, [r7, #28]
 800e25c:	e001      	b.n	800e262 <line+0x84>
    } else {
        steep = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	61fb      	str	r3, [r7, #28]
    }

    int e = 2 * dy - dx;
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	005a      	lsls	r2, r3, #1
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800e26c:	2300      	movs	r3, #0
 800e26e:	617b      	str	r3, [r7, #20]
 800e270:	e04c      	b.n	800e30c <line+0x12e>
        if (steep) {
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d018      	beq.n	800e2aa <line+0xcc>
            if (0 <= y1 && y1 < fb->width && 0 <= x1 && x1 < fb->height) {
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	db37      	blt.n	800e2ee <line+0x110>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	889b      	ldrh	r3, [r3, #4]
 800e282:	461a      	mov	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4293      	cmp	r3, r2
 800e288:	da31      	bge.n	800e2ee <line+0x110>
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	db2e      	blt.n	800e2ee <line+0x110>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	88db      	ldrh	r3, [r3, #6]
 800e294:	461a      	mov	r2, r3
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	4293      	cmp	r3, r2
 800e29a:	da28      	bge.n	800e2ee <line+0x110>
                setpixel(fb, y1, x1, col);
 800e29c:	6879      	ldr	r1, [r7, #4]
 800e29e:	68ba      	ldr	r2, [r7, #8]
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff fe4c 	bl	800df40 <setpixel>
 800e2a8:	e021      	b.n	800e2ee <line+0x110>
            }
        } else {
            if (0 <= x1 && x1 < fb->width && 0 <= y1 && y1 < fb->height) {
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	db1e      	blt.n	800e2ee <line+0x110>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	889b      	ldrh	r3, [r3, #4]
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	da18      	bge.n	800e2ee <line+0x110>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	db15      	blt.n	800e2ee <line+0x110>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	88db      	ldrh	r3, [r3, #6]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	da0f      	bge.n	800e2ee <line+0x110>
                setpixel(fb, x1, y1, col);
 800e2ce:	68b9      	ldr	r1, [r7, #8]
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f7ff fe33 	bl	800df40 <setpixel>
            }
        }
        while (e >= 0) {
 800e2da:	e008      	b.n	800e2ee <line+0x110>
            y1 += sy;
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	607b      	str	r3, [r7, #4]
            e -= 2 * dx;
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	69ba      	ldr	r2, [r7, #24]
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	61bb      	str	r3, [r7, #24]
        while (e >= 0) {
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	daf3      	bge.n	800e2dc <line+0xfe>
        }
        x1 += sx;
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	4413      	add	r3, r2
 800e2fa:	60bb      	str	r3, [r7, #8]
        e += 2 * dy;
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	005b      	lsls	r3, r3, #1
 800e300:	69ba      	ldr	r2, [r7, #24]
 800e302:	4413      	add	r3, r2
 800e304:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	3301      	adds	r3, #1
 800e30a:	617b      	str	r3, [r7, #20]
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e310:	429a      	cmp	r2, r3
 800e312:	dbae      	blt.n	800e272 <line+0x94>
    }

    if (0 <= x2 && x2 < fb->width && 0 <= y2 && y2 < fb->height) {
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	db14      	blt.n	800e344 <line+0x166>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	889b      	ldrh	r3, [r3, #4]
 800e31e:	461a      	mov	r2, r3
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	4293      	cmp	r3, r2
 800e324:	da0e      	bge.n	800e344 <line+0x166>
 800e326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e328:	2b00      	cmp	r3, #0
 800e32a:	db0b      	blt.n	800e344 <line+0x166>
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	88db      	ldrh	r3, [r3, #6]
 800e330:	461a      	mov	r2, r3
 800e332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e334:	4293      	cmp	r3, r2
 800e336:	da05      	bge.n	800e344 <line+0x166>
        setpixel(fb, x2, y2, col);
 800e338:	6839      	ldr	r1, [r7, #0]
 800e33a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7ff fdfe 	bl	800df40 <setpixel>
    }
}
 800e344:	bf00      	nop
 800e346:	3730      	adds	r7, #48	; 0x30
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <framebuf_line>:

void framebuf_line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af02      	add	r7, sp, #8
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	603b      	str	r3, [r7, #0]
    line( fb, x1, y1, x2, y2, col );
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	9301      	str	r3, [sp, #4]
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	68b9      	ldr	r1, [r7, #8]
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f7ff ff38 	bl	800e1de <line>
}
 800e36e:	bf00      	nop
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <framebuf_circle>:
        }
    }
}
*/

void framebuf_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800e376:	b580      	push	{r7, lr}
 800e378:	b088      	sub	sp, #32
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	60f8      	str	r0, [r7, #12]
 800e37e:	60b9      	str	r1, [r7, #8]
 800e380:	607a      	str	r2, [r7, #4]
 800e382:	603b      	str	r3, [r7, #0]
    int x = 0;
 800e384:	2300      	movs	r3, #0
 800e386:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	005b      	lsls	r3, r3, #1
 800e390:	f1c3 0303 	rsb	r3, r3, #3
 800e394:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e396:	e067      	b.n	800e468 <framebuf_circle+0xf2>
        framebuf_pixel(fb, xc + x, yc + y, col);
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	18d1      	adds	r1, r2, r3
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	441a      	add	r2, r3
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f7ff fecc 	bl	800e144 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc + y, col);
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	1ad1      	subs	r1, r2, r3
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	441a      	add	r2, r3
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f7ff fec2 	bl	800e144 <framebuf_pixel>
        framebuf_pixel(fb, xc + x, yc - y, col);
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	18d1      	adds	r1, r2, r3
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	1ad2      	subs	r2, r2, r3
 800e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f7ff feb8 	bl	800e144 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc - y, col);
 800e3d4:	68ba      	ldr	r2, [r7, #8]
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	1ad1      	subs	r1, r2, r3
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	1ad2      	subs	r2, r2, r3
 800e3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f7ff feae 	bl	800e144 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc + x, col);
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	18d1      	adds	r1, r2, r3
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	441a      	add	r2, r3
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f7ff fea4 	bl	800e144 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc + x, col);
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	1ad1      	subs	r1, r2, r3
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	441a      	add	r2, r3
 800e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f7ff fe9a 	bl	800e144 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc - x, col);
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	18d1      	adds	r1, r2, r3
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	1ad2      	subs	r2, r2, r3
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f7ff fe90 	bl	800e144 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc - x, col);
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	1ad1      	subs	r1, r2, r3
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	1ad2      	subs	r2, r2, r3
 800e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f7ff fe86 	bl	800e144 <framebuf_pixel>

        if (d < 0) {
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	da06      	bge.n	800e44c <framebuf_circle+0xd6>
            d = d + 4 * x + 6;
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	009a      	lsls	r2, r3, #2
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	4413      	add	r3, r2
 800e446:	3306      	adds	r3, #6
 800e448:	617b      	str	r3, [r7, #20]
 800e44a:	e00a      	b.n	800e462 <framebuf_circle+0xec>
        } else {
            d = d + 4 * (x - y) + 10;
 800e44c:	69fa      	ldr	r2, [r7, #28]
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	009a      	lsls	r2, r3, #2
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	4413      	add	r3, r2
 800e458:	330a      	adds	r3, #10
 800e45a:	617b      	str	r3, [r7, #20]
            y--;
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	3b01      	subs	r3, #1
 800e460:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	3301      	adds	r3, #1
 800e466:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e468:	69fa      	ldr	r2, [r7, #28]
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	dd93      	ble.n	800e398 <framebuf_circle+0x22>
    }
}
 800e470:	bf00      	nop
 800e472:	bf00      	nop
 800e474:	3720      	adds	r7, #32
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <framebuf_circle_quadrant>:
#define QUADRANT_0   0x01
#define QUADRANT_90  0x02
#define QUADRANT_180 0x04
#define QUADRANT_270 0x08
void framebuf_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b088      	sub	sp, #32
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	607a      	str	r2, [r7, #4]
 800e486:	603b      	str	r3, [r7, #0]
    int x = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	f1c3 0303 	rsb	r3, r3, #3
 800e498:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e49a:	e07f      	b.n	800e59c <framebuf_circle_quadrant+0x122>
        if (quadrant & QUADRANT_0) {
 800e49c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e4a0:	f003 0301 	and.w	r3, r3, #1
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d013      	beq.n	800e4d0 <framebuf_circle_quadrant+0x56>
            framebuf_pixel(fb, xc + x, yc + y, col);
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	18d1      	adds	r1, r2, r3
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	441a      	add	r2, r3
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7ff fe44 	bl	800e144 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc + x, col);
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	18d1      	adds	r1, r2, r3
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	441a      	add	r2, r3
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	f7ff fe3a 	bl	800e144 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_90) {
 800e4d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e4d4:	f003 0302 	and.w	r3, r3, #2
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d013      	beq.n	800e504 <framebuf_circle_quadrant+0x8a>
            framebuf_pixel(fb, xc - x, yc + y, col);
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	69fb      	ldr	r3, [r7, #28]
 800e4e0:	1ad1      	subs	r1, r2, r3
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	441a      	add	r2, r3
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff fe2a 	bl	800e144 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc + x, col);
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	1ad1      	subs	r1, r2, r3
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	441a      	add	r2, r3
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f7ff fe20 	bl	800e144 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_180) {
 800e504:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e508:	f003 0304 	and.w	r3, r3, #4
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d013      	beq.n	800e538 <framebuf_circle_quadrant+0xbe>
            framebuf_pixel(fb, xc - x, yc - y, col);
 800e510:	68ba      	ldr	r2, [r7, #8]
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	1ad1      	subs	r1, r2, r3
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	1ad2      	subs	r2, r2, r3
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f7ff fe10 	bl	800e144 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc - x, col);
 800e524:	68ba      	ldr	r2, [r7, #8]
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	1ad1      	subs	r1, r2, r3
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	1ad2      	subs	r2, r2, r3
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	68f8      	ldr	r0, [r7, #12]
 800e534:	f7ff fe06 	bl	800e144 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_270) {
 800e538:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e53c:	f003 0308 	and.w	r3, r3, #8
 800e540:	2b00      	cmp	r3, #0
 800e542:	d013      	beq.n	800e56c <framebuf_circle_quadrant+0xf2>
            framebuf_pixel(fb, xc + x, yc - y, col);
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	18d1      	adds	r1, r2, r3
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	1ad2      	subs	r2, r2, r3
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f7ff fdf6 	bl	800e144 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc - x, col);
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	18d1      	adds	r1, r2, r3
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	1ad2      	subs	r2, r2, r3
 800e564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f7ff fdec 	bl	800e144 <framebuf_pixel>
        }

        if (d < 0) {
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	da06      	bge.n	800e580 <framebuf_circle_quadrant+0x106>
            d = d + 4 * x + 6;
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	009a      	lsls	r2, r3, #2
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	4413      	add	r3, r2
 800e57a:	3306      	adds	r3, #6
 800e57c:	617b      	str	r3, [r7, #20]
 800e57e:	e00a      	b.n	800e596 <framebuf_circle_quadrant+0x11c>
        } else {
            d = d + 4 * (x - y) + 10;
 800e580:	69fa      	ldr	r2, [r7, #28]
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	1ad3      	subs	r3, r2, r3
 800e586:	009a      	lsls	r2, r3, #2
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	4413      	add	r3, r2
 800e58c:	330a      	adds	r3, #10
 800e58e:	617b      	str	r3, [r7, #20]
            y--;
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	3b01      	subs	r3, #1
 800e594:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	3301      	adds	r3, #1
 800e59a:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e59c:	69fa      	ldr	r2, [r7, #28]
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	f77f af7b 	ble.w	800e49c <framebuf_circle_quadrant+0x22>
    }
}
 800e5a6:	bf00      	nop
 800e5a8:	bf00      	nop
 800e5aa:	3720      	adds	r7, #32
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <framebuf_fill_circle>:

void framebuf_fill_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b08a      	sub	sp, #40	; 0x28
 800e5b4:	af02      	add	r7, sp, #8
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
 800e5bc:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800e5be:	68ba      	ldr	r2, [r7, #8]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	1ad1      	subs	r1, r2, r3
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	005a      	lsls	r2, r3, #1
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	f7ff fdda 	bl	800e18a <framebuf_hline>

    int x = 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	005b      	lsls	r3, r3, #1
 800e5e2:	f1c3 0303 	rsb	r3, r3, #3
 800e5e6:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e5e8:	e055      	b.n	800e696 <framebuf_fill_circle+0xe6>
        if (y > 0) {
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	dd1b      	ble.n	800e628 <framebuf_fill_circle+0x78>
            framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	1ad1      	subs	r1, r2, r3
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	1ad2      	subs	r2, r2, r3
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	0058      	lsls	r0, r3, #1
 800e600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	4603      	mov	r3, r0
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f7ff fdbf 	bl	800e18a <framebuf_hline>
            framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	1ad1      	subs	r1, r2, r3
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	441a      	add	r2, r3
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	0058      	lsls	r0, r3, #1
 800e61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	4603      	mov	r3, r0
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f7ff fdb1 	bl	800e18a <framebuf_hline>
        }

        if (x > 0) {
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	dd1b      	ble.n	800e666 <framebuf_fill_circle+0xb6>
            framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	1ad1      	subs	r1, r2, r3
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	1ad2      	subs	r2, r2, r3
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	0058      	lsls	r0, r3, #1
 800e63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	4603      	mov	r3, r0
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f7ff fda0 	bl	800e18a <framebuf_hline>
            framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	1ad1      	subs	r1, r2, r3
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	441a      	add	r2, r3
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	0058      	lsls	r0, r3, #1
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	4603      	mov	r3, r0
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f7ff fd92 	bl	800e18a <framebuf_hline>
        }

        if (d < 0) {
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	da06      	bge.n	800e67a <framebuf_fill_circle+0xca>
            d = d + 4 * x + 6;
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	009a      	lsls	r2, r3, #2
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	4413      	add	r3, r2
 800e674:	3306      	adds	r3, #6
 800e676:	617b      	str	r3, [r7, #20]
 800e678:	e00a      	b.n	800e690 <framebuf_fill_circle+0xe0>
        } else {
            d = d + 4 * (x - y) + 10;
 800e67a:	69fa      	ldr	r2, [r7, #28]
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	1ad3      	subs	r3, r2, r3
 800e680:	009a      	lsls	r2, r3, #2
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	4413      	add	r3, r2
 800e686:	330a      	adds	r3, #10
 800e688:	617b      	str	r3, [r7, #20]
            y--;
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	3b01      	subs	r3, #1
 800e68e:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	3301      	adds	r3, #1
 800e694:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e696:	69fa      	ldr	r2, [r7, #28]
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	dda5      	ble.n	800e5ea <framebuf_fill_circle+0x3a>
    }
}
 800e69e:	bf00      	nop
 800e6a0:	bf00      	nop
 800e6a2:	3720      	adds	r7, #32
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <framebuf_fill_circle_quadrant>:

void framebuf_fill_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08a      	sub	sp, #40	; 0x28
 800e6ac:	af02      	add	r7, sp, #8
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	1ad1      	subs	r1, r2, r3
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	005a      	lsls	r2, r3, #1
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff fd5e 	bl	800e18a <framebuf_hline>

    int x = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	005b      	lsls	r3, r3, #1
 800e6da:	f1c3 0303 	rsb	r3, r3, #3
 800e6de:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e6e0:	e0ab      	b.n	800e83a <framebuf_fill_circle_quadrant+0x192>
        if (quadrant & QUADRANT_0) {
 800e6e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d01e      	beq.n	800e72c <framebuf_fill_circle_quadrant+0x84>
            if (y > 0) {
 800e6ee:	69bb      	ldr	r3, [r7, #24]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	dd1b      	ble.n	800e72c <framebuf_fill_circle_quadrant+0x84>
                framebuf_hline(fb, xc + x, yc - y, 2 * x, col);
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	18d1      	adds	r1, r2, r3
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	1ad2      	subs	r2, r2, r3
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	0058      	lsls	r0, r3, #1
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	9300      	str	r3, [sp, #0]
 800e708:	4603      	mov	r3, r0
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f7ff fd3d 	bl	800e18a <framebuf_hline>
                framebuf_hline(fb, xc + x, yc + y, 2 * x, col);
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	18d1      	adds	r1, r2, r3
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	441a      	add	r2, r3
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	0058      	lsls	r0, r3, #1
 800e720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e722:	9300      	str	r3, [sp, #0]
 800e724:	4603      	mov	r3, r0
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f7ff fd2f 	bl	800e18a <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_90) {
 800e72c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e730:	f003 0302 	and.w	r3, r3, #2
 800e734:	2b00      	cmp	r3, #0
 800e736:	d01e      	beq.n	800e776 <framebuf_fill_circle_quadrant+0xce>
            if (x > 0) {
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	dd1b      	ble.n	800e776 <framebuf_fill_circle_quadrant+0xce>
                framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	1ad1      	subs	r1, r2, r3
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	1ad2      	subs	r2, r2, r3
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	0058      	lsls	r0, r3, #1
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	4603      	mov	r3, r0
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7ff fd18 	bl	800e18a <framebuf_hline>
                framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	1ad1      	subs	r1, r2, r3
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	441a      	add	r2, r3
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	0058      	lsls	r0, r3, #1
 800e76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	4603      	mov	r3, r0
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f7ff fd0a 	bl	800e18a <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_180) {
 800e776:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e77a:	f003 0304 	and.w	r3, r3, #4
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d01e      	beq.n	800e7c0 <framebuf_fill_circle_quadrant+0x118>
            if (y > 0) {
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	2b00      	cmp	r3, #0
 800e786:	dd1b      	ble.n	800e7c0 <framebuf_fill_circle_quadrant+0x118>
                framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800e788:	68ba      	ldr	r2, [r7, #8]
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	1ad1      	subs	r1, r2, r3
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	1ad2      	subs	r2, r2, r3
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	0058      	lsls	r0, r3, #1
 800e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	4603      	mov	r3, r0
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7ff fcf3 	bl	800e18a <framebuf_hline>
                framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	1ad1      	subs	r1, r2, r3
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	441a      	add	r2, r3
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	0058      	lsls	r0, r3, #1
 800e7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f7ff fce5 	bl	800e18a <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_270) {
 800e7c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e7c4:	f003 0308 	and.w	r3, r3, #8
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d01e      	beq.n	800e80a <framebuf_fill_circle_quadrant+0x162>
            if (x > 0) {
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	dd1b      	ble.n	800e80a <framebuf_fill_circle_quadrant+0x162>
                framebuf_hline(fb, xc + y, yc - x, 2 * y, col);
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	18d1      	adds	r1, r2, r3
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	1ad2      	subs	r2, r2, r3
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	0058      	lsls	r0, r3, #1
 800e7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f7ff fcce 	bl	800e18a <framebuf_hline>
                framebuf_hline(fb, xc + y, yc + x, 2 * y, col);
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	18d1      	adds	r1, r2, r3
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	441a      	add	r2, r3
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	0058      	lsls	r0, r3, #1
 800e7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	4603      	mov	r3, r0
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f7ff fcc0 	bl	800e18a <framebuf_hline>
            }
        }

        if (d < 0) {
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	da06      	bge.n	800e81e <framebuf_fill_circle_quadrant+0x176>
            d = d + 4 * x + 6;
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	009a      	lsls	r2, r3, #2
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	4413      	add	r3, r2
 800e818:	3306      	adds	r3, #6
 800e81a:	617b      	str	r3, [r7, #20]
 800e81c:	e00a      	b.n	800e834 <framebuf_fill_circle_quadrant+0x18c>
        } else {
            d = d + 4 * (x - y) + 10;
 800e81e:	69fa      	ldr	r2, [r7, #28]
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	1ad3      	subs	r3, r2, r3
 800e824:	009a      	lsls	r2, r3, #2
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	4413      	add	r3, r2
 800e82a:	330a      	adds	r3, #10
 800e82c:	617b      	str	r3, [r7, #20]
            y--;
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	3b01      	subs	r3, #1
 800e832:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	3301      	adds	r3, #1
 800e838:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e83a:	69fa      	ldr	r2, [r7, #28]
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	429a      	cmp	r2, r3
 800e840:	f77f af4f 	ble.w	800e6e2 <framebuf_fill_circle_quadrant+0x3a>
    }
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop
 800e848:	3720      	adds	r7, #32
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
	...

0800e850 <nk_buffer_init_fixed>:
    b->grow_factor = 2.0f;
    b->pool = *a;
}
NK_API void
nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
    NK_ASSERT(b);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d105      	bne.n	800e86e <nk_buffer_init_fixed+0x1e>
 800e862:	4b1b      	ldr	r3, [pc, #108]	; (800e8d0 <nk_buffer_init_fixed+0x80>)
 800e864:	4a1b      	ldr	r2, [pc, #108]	; (800e8d4 <nk_buffer_init_fixed+0x84>)
 800e866:	2136      	movs	r1, #54	; 0x36
 800e868:	481b      	ldr	r0, [pc, #108]	; (800e8d8 <nk_buffer_init_fixed+0x88>)
 800e86a:	f00f fbeb 	bl	801e044 <__assert_func>
    NK_ASSERT(m);
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d105      	bne.n	800e880 <nk_buffer_init_fixed+0x30>
 800e874:	4b19      	ldr	r3, [pc, #100]	; (800e8dc <nk_buffer_init_fixed+0x8c>)
 800e876:	4a17      	ldr	r2, [pc, #92]	; (800e8d4 <nk_buffer_init_fixed+0x84>)
 800e878:	2137      	movs	r1, #55	; 0x37
 800e87a:	4817      	ldr	r0, [pc, #92]	; (800e8d8 <nk_buffer_init_fixed+0x88>)
 800e87c:	f00f fbe2 	bl	801e044 <__assert_func>
    NK_ASSERT(size);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d105      	bne.n	800e892 <nk_buffer_init_fixed+0x42>
 800e886:	4b16      	ldr	r3, [pc, #88]	; (800e8e0 <nk_buffer_init_fixed+0x90>)
 800e888:	4a12      	ldr	r2, [pc, #72]	; (800e8d4 <nk_buffer_init_fixed+0x84>)
 800e88a:	2138      	movs	r1, #56	; 0x38
 800e88c:	4812      	ldr	r0, [pc, #72]	; (800e8d8 <nk_buffer_init_fixed+0x88>)
 800e88e:	f00f fbd9 	bl	801e044 <__assert_func>
    if (!b || !m || !size) return;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d016      	beq.n	800e8c6 <nk_buffer_init_fixed+0x76>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d013      	beq.n	800e8c6 <nk_buffer_init_fixed+0x76>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d010      	beq.n	800e8c6 <nk_buffer_init_fixed+0x76>

    nk_zero(b, sizeof(*b));
 800e8a4:	213c      	movs	r1, #60	; 0x3c
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f00d fed4 	bl	801c654 <nk_zero>
    b->type = NK_BUFFER_FIXED;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	771a      	strb	r2, [r3, #28]
    b->memory.ptr = m;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	621a      	str	r2, [r3, #32]
    b->memory.size = size;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	625a      	str	r2, [r3, #36]	; 0x24
    b->size = size;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	639a      	str	r2, [r3, #56]	; 0x38
 800e8c4:	e000      	b.n	800e8c8 <nk_buffer_init_fixed+0x78>
    if (!b || !m || !size) return;
 800e8c6:	bf00      	nop
}
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	08021ae4 	.word	0x08021ae4
 800e8d4:	080237b4 	.word	0x080237b4
 800e8d8:	08021ae8 	.word	0x08021ae8
 800e8dc:	08021b18 	.word	0x08021b18
 800e8e0:	08021b1c 	.word	0x08021b1c

0800e8e4 <nk_buffer_align>:
NK_LIB void*
nk_buffer_align(void *unaligned,
    nk_size align, nk_size *alignment,
    enum nk_buffer_allocation_type type)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
 800e8f0:	70fb      	strb	r3, [r7, #3]
    void *memory = 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	617b      	str	r3, [r7, #20]
    switch (type) {
 800e8f6:	78fb      	ldrb	r3, [r7, #3]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d018      	beq.n	800e92e <nk_buffer_align+0x4a>
    default:
    case NK_BUFFER_MAX:
    case NK_BUFFER_FRONT:
        if (align) {
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00f      	beq.n	800e922 <nk_buffer_align+0x3e>
            memory = NK_ALIGN_PTR(unaligned, align);
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	3b01      	subs	r3, #1
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	4413      	add	r3, r2
 800e90a:	461a      	mov	r2, r3
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	425b      	negs	r3, r3
 800e910:	4013      	ands	r3, r2
 800e912:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800e914:	697a      	ldr	r2, [r7, #20]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	461a      	mov	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800e920:	e01a      	b.n	800e958 <nk_buffer_align+0x74>
            memory = unaligned;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	601a      	str	r2, [r3, #0]
        break;
 800e92c:	e014      	b.n	800e958 <nk_buffer_align+0x74>
    case NK_BUFFER_BACK:
        if (align) {
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00b      	beq.n	800e94c <nk_buffer_align+0x68>
            memory = NK_ALIGN_PTR_BACK(unaligned, align);
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	425a      	negs	r2, r3
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	4013      	ands	r3, r2
 800e93c:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)unaligned - (nk_byte*)memory);
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	461a      	mov	r2, r3
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800e94a:	e004      	b.n	800e956 <nk_buffer_align+0x72>
            memory = unaligned;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]
        break;
 800e956:	bf00      	nop
    }
    return memory;
 800e958:	697b      	ldr	r3, [r7, #20]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	371c      	adds	r7, #28
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr
	...

0800e968 <nk_buffer_realloc>:
NK_LIB void*
nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b08a      	sub	sp, #40	; 0x28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
    void *temp;
    nk_size buffer_size;

    NK_ASSERT(b);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d105      	bne.n	800e986 <nk_buffer_realloc+0x1e>
 800e97a:	4b3c      	ldr	r3, [pc, #240]	; (800ea6c <nk_buffer_realloc+0x104>)
 800e97c:	4a3c      	ldr	r2, [pc, #240]	; (800ea70 <nk_buffer_realloc+0x108>)
 800e97e:	2165      	movs	r1, #101	; 0x65
 800e980:	483c      	ldr	r0, [pc, #240]	; (800ea74 <nk_buffer_realloc+0x10c>)
 800e982:	f00f fb5f 	bl	801e044 <__assert_func>
    NK_ASSERT(size);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d105      	bne.n	800e998 <nk_buffer_realloc+0x30>
 800e98c:	4b3a      	ldr	r3, [pc, #232]	; (800ea78 <nk_buffer_realloc+0x110>)
 800e98e:	4a38      	ldr	r2, [pc, #224]	; (800ea70 <nk_buffer_realloc+0x108>)
 800e990:	2166      	movs	r1, #102	; 0x66
 800e992:	4838      	ldr	r0, [pc, #224]	; (800ea74 <nk_buffer_realloc+0x10c>)
 800e994:	f00f fb56 	bl	801e044 <__assert_func>
    if (!b || !size || !b->pool.alloc || !b->pool.free)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00a      	beq.n	800e9b4 <nk_buffer_realloc+0x4c>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d007      	beq.n	800e9b4 <nk_buffer_realloc+0x4c>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	695b      	ldr	r3, [r3, #20]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d003      	beq.n	800e9b4 <nk_buffer_realloc+0x4c>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d101      	bne.n	800e9b8 <nk_buffer_realloc+0x50>
        return 0;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	e054      	b.n	800ea62 <nk_buffer_realloc+0xfa>

    buffer_size = b->memory.size;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
    temp = b->pool.alloc(b->pool.userdata, b->memory.ptr, capacity);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	695b      	ldr	r3, [r3, #20]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	6a11      	ldr	r1, [r2, #32]
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	6900      	ldr	r0, [r0, #16]
 800e9cc:	4798      	blx	r3
 800e9ce:	6238      	str	r0, [r7, #32]
    NK_ASSERT(temp);
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d105      	bne.n	800e9e2 <nk_buffer_realloc+0x7a>
 800e9d6:	4b29      	ldr	r3, [pc, #164]	; (800ea7c <nk_buffer_realloc+0x114>)
 800e9d8:	4a25      	ldr	r2, [pc, #148]	; (800ea70 <nk_buffer_realloc+0x108>)
 800e9da:	216c      	movs	r1, #108	; 0x6c
 800e9dc:	4825      	ldr	r0, [pc, #148]	; (800ea74 <nk_buffer_realloc+0x10c>)
 800e9de:	f00f fb31 	bl	801e044 <__assert_func>
    if (!temp) return 0;
 800e9e2:	6a3b      	ldr	r3, [r7, #32]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d101      	bne.n	800e9ec <nk_buffer_realloc+0x84>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	e03a      	b.n	800ea62 <nk_buffer_realloc+0xfa>

    *size = capacity;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	68ba      	ldr	r2, [r7, #8]
 800e9f0:	601a      	str	r2, [r3, #0]
    if (temp != b->memory.ptr) {
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6a1b      	ldr	r3, [r3, #32]
 800e9f6:	6a3a      	ldr	r2, [r7, #32]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d00d      	beq.n	800ea18 <nk_buffer_realloc+0xb0>
        NK_MEMCPY(temp, b->memory.ptr, buffer_size);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea02:	4619      	mov	r1, r3
 800ea04:	6a38      	ldr	r0, [r7, #32]
 800ea06:	f00d fcd5 	bl	801c3b4 <nk_memcopy>
        b->pool.free(b->pool.userdata, b->memory.ptr);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	699b      	ldr	r3, [r3, #24]
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	6a11      	ldr	r1, [r2, #32]
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	6910      	ldr	r0, [r2, #16]
 800ea16:	4798      	blx	r3
    }

    if (b->size == buffer_size) {
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d104      	bne.n	800ea2c <nk_buffer_realloc+0xc4>
        /* no back buffer so just set correct size */
        b->size = capacity;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	68ba      	ldr	r2, [r7, #8]
 800ea26:	639a      	str	r2, [r3, #56]	; 0x38
        return temp;
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	e01a      	b.n	800ea62 <nk_buffer_realloc+0xfa>
    } else {
        /* copy back buffer to the end of the new buffer */
        void *dst, *src;
        nk_size back_size;
        back_size = buffer_size - b->size;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea32:	1ad3      	subs	r3, r2, r3
 800ea34:	61fb      	str	r3, [r7, #28]
        dst = nk_ptr_add(void, temp, capacity - back_size);
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	6a3a      	ldr	r2, [r7, #32]
 800ea3e:	4413      	add	r3, r2
 800ea40:	61bb      	str	r3, [r7, #24]
        src = nk_ptr_add(void, temp, b->size);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea46:	6a3a      	ldr	r2, [r7, #32]
 800ea48:	4413      	add	r3, r2
 800ea4a:	617b      	str	r3, [r7, #20]
        NK_MEMCPY(dst, src, back_size);
 800ea4c:	69fa      	ldr	r2, [r7, #28]
 800ea4e:	6979      	ldr	r1, [r7, #20]
 800ea50:	69b8      	ldr	r0, [r7, #24]
 800ea52:	f00d fcaf 	bl	801c3b4 <nk_memcopy>
        b->size = capacity - back_size;
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	1ad2      	subs	r2, r2, r3
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    return temp;
 800ea60:	6a3b      	ldr	r3, [r7, #32]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3728      	adds	r7, #40	; 0x28
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	08021ae4 	.word	0x08021ae4
 800ea70:	080237cc 	.word	0x080237cc
 800ea74:	08021ae8 	.word	0x08021ae8
 800ea78:	08021b1c 	.word	0x08021b1c
 800ea7c:	08021b24 	.word	0x08021b24

0800ea80 <nk_buffer_alloc>:
NK_LIB void*
nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,
    nk_size size, nk_size align)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b08a      	sub	sp, #40	; 0x28
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	607a      	str	r2, [r7, #4]
 800ea8a:	603b      	str	r3, [r7, #0]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	72fb      	strb	r3, [r7, #11]
    int full;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d105      	bne.n	800eaa2 <nk_buffer_alloc+0x22>
 800ea96:	4b7a      	ldr	r3, [pc, #488]	; (800ec80 <nk_buffer_alloc+0x200>)
 800ea98:	4a7a      	ldr	r2, [pc, #488]	; (800ec84 <nk_buffer_alloc+0x204>)
 800ea9a:	218e      	movs	r1, #142	; 0x8e
 800ea9c:	487a      	ldr	r0, [pc, #488]	; (800ec88 <nk_buffer_alloc+0x208>)
 800ea9e:	f00f fad1 	bl	801e044 <__assert_func>
    NK_ASSERT(size);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d105      	bne.n	800eab4 <nk_buffer_alloc+0x34>
 800eaa8:	4b78      	ldr	r3, [pc, #480]	; (800ec8c <nk_buffer_alloc+0x20c>)
 800eaaa:	4a76      	ldr	r2, [pc, #472]	; (800ec84 <nk_buffer_alloc+0x204>)
 800eaac:	218f      	movs	r1, #143	; 0x8f
 800eaae:	4876      	ldr	r0, [pc, #472]	; (800ec88 <nk_buffer_alloc+0x208>)
 800eab0:	f00f fac8 	bl	801e044 <__assert_func>
    if (!b || !size) return 0;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <nk_buffer_alloc+0x40>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <nk_buffer_alloc+0x44>
 800eac0:	2300      	movs	r3, #0
 800eac2:	e0d9      	b.n	800ec78 <nk_buffer_alloc+0x1f8>
    b->needed += size;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	441a      	add	r2, r3
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	631a      	str	r2, [r3, #48]	; 0x30

    /* calculate total size with needed alignment + size */
    if (type == NK_BUFFER_FRONT)
 800ead0:	7afb      	ldrb	r3, [r7, #11]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d106      	bne.n	800eae4 <nk_buffer_alloc+0x64>
        unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6a1a      	ldr	r2, [r3, #32]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	4413      	add	r3, r2
 800eae0:	623b      	str	r3, [r7, #32]
 800eae2:	e007      	b.n	800eaf4 <nk_buffer_alloc+0x74>
    else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6a1a      	ldr	r2, [r3, #32]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	1acb      	subs	r3, r1, r3
 800eaf0:	4413      	add	r3, r2
 800eaf2:	623b      	str	r3, [r7, #32]
    memory = nk_buffer_align(unaligned, align, &alignment, type);
 800eaf4:	7afb      	ldrb	r3, [r7, #11]
 800eaf6:	f107 0214 	add.w	r2, r7, #20
 800eafa:	6839      	ldr	r1, [r7, #0]
 800eafc:	6a38      	ldr	r0, [r7, #32]
 800eafe:	f7ff fef1 	bl	800e8e4 <nk_buffer_align>
 800eb02:	61f8      	str	r0, [r7, #28]

    /* check if buffer has enough memory*/
    if (type == NK_BUFFER_FRONT)
 800eb04:	7afb      	ldrb	r3, [r7, #11]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d10e      	bne.n	800eb28 <nk_buffer_alloc+0xa8>
        full = ((b->allocated + size + alignment) > b->size);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	441a      	add	r2, r3
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	441a      	add	r2, r3
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	bf8c      	ite	hi
 800eb1e:	2301      	movhi	r3, #1
 800eb20:	2300      	movls	r3, #0
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	627b      	str	r3, [r7, #36]	; 0x24
 800eb26:	e012      	b.n	800eb4e <nk_buffer_alloc+0xce>
    else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb2c:	6979      	ldr	r1, [r7, #20]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4419      	add	r1, r3
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb36:	428b      	cmp	r3, r1
 800eb38:	bf28      	it	cs
 800eb3a:	460b      	movcs	r3, r1
 800eb3c:	1ad2      	subs	r2, r2, r3
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb42:	429a      	cmp	r2, r3
 800eb44:	bf94      	ite	ls
 800eb46:	2301      	movls	r3, #1
 800eb48:	2300      	movhi	r3, #0
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	627b      	str	r3, [r7, #36]	; 0x24

    if (full) {
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d071      	beq.n	800ec38 <nk_buffer_alloc+0x1b8>
        nk_size capacity;
        if (b->type != NK_BUFFER_DYNAMIC)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	7f1b      	ldrb	r3, [r3, #28]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d001      	beq.n	800eb60 <nk_buffer_alloc+0xe0>
            return 0;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	e08b      	b.n	800ec78 <nk_buffer_alloc+0x1f8>
        NK_ASSERT(b->pool.alloc && b->pool.free);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	695b      	ldr	r3, [r3, #20]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d003      	beq.n	800eb70 <nk_buffer_alloc+0xf0>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	699b      	ldr	r3, [r3, #24]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d105      	bne.n	800eb7c <nk_buffer_alloc+0xfc>
 800eb70:	4b47      	ldr	r3, [pc, #284]	; (800ec90 <nk_buffer_alloc+0x210>)
 800eb72:	4a44      	ldr	r2, [pc, #272]	; (800ec84 <nk_buffer_alloc+0x204>)
 800eb74:	21a2      	movs	r1, #162	; 0xa2
 800eb76:	4844      	ldr	r0, [pc, #272]	; (800ec88 <nk_buffer_alloc+0x208>)
 800eb78:	f00f fa64 	bl	801e044 <__assert_func>
        if (b->type != NK_BUFFER_DYNAMIC || !b->pool.alloc || !b->pool.free)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	7f1b      	ldrb	r3, [r3, #28]
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d107      	bne.n	800eb94 <nk_buffer_alloc+0x114>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	695b      	ldr	r3, [r3, #20]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d003      	beq.n	800eb94 <nk_buffer_alloc+0x114>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d101      	bne.n	800eb98 <nk_buffer_alloc+0x118>
            return 0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	e06f      	b.n	800ec78 <nk_buffer_alloc+0x1f8>

        /* buffer is full so allocate bigger buffer if dynamic */
        capacity = (nk_size)((float)b->memory.size * b->grow_factor);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9c:	ee07 3a90 	vmov	s15, r3
 800eba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ebaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebb2:	ee17 3a90 	vmov	r3, s15
 800ebb6:	61bb      	str	r3, [r7, #24]
        capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f005 fcdf 	bl	8014584 <nk_round_up_pow2>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d208      	bcs.n	800ebe0 <nk_buffer_alloc+0x160>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f005 fcd4 	bl	8014584 <nk_round_up_pow2>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	e000      	b.n	800ebe2 <nk_buffer_alloc+0x162>
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	61bb      	str	r3, [r7, #24]
        b->memory.ptr = nk_buffer_realloc(b, capacity, &b->memory.size);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	3324      	adds	r3, #36	; 0x24
 800ebe8:	461a      	mov	r2, r3
 800ebea:	69b9      	ldr	r1, [r7, #24]
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f7ff febb 	bl	800e968 <nk_buffer_realloc>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	621a      	str	r2, [r3, #32]
        if (!b->memory.ptr) return 0;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6a1b      	ldr	r3, [r3, #32]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <nk_buffer_alloc+0x184>
 800ec00:	2300      	movs	r3, #0
 800ec02:	e039      	b.n	800ec78 <nk_buffer_alloc+0x1f8>

        /* align newly allocated pointer */
        if (type == NK_BUFFER_FRONT)
 800ec04:	7afb      	ldrb	r3, [r7, #11]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d106      	bne.n	800ec18 <nk_buffer_alloc+0x198>
            unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	6a1a      	ldr	r2, [r3, #32]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec12:	4413      	add	r3, r2
 800ec14:	623b      	str	r3, [r7, #32]
 800ec16:	e007      	b.n	800ec28 <nk_buffer_alloc+0x1a8>
        else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6a1a      	ldr	r2, [r3, #32]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	1acb      	subs	r3, r1, r3
 800ec24:	4413      	add	r3, r2
 800ec26:	623b      	str	r3, [r7, #32]
        memory = nk_buffer_align(unaligned, align, &alignment, type);
 800ec28:	7afb      	ldrb	r3, [r7, #11]
 800ec2a:	f107 0214 	add.w	r2, r7, #20
 800ec2e:	6839      	ldr	r1, [r7, #0]
 800ec30:	6a38      	ldr	r0, [r7, #32]
 800ec32:	f7ff fe57 	bl	800e8e4 <nk_buffer_align>
 800ec36:	61f8      	str	r0, [r7, #28]
    }
    if (type == NK_BUFFER_FRONT)
 800ec38:	7afb      	ldrb	r3, [r7, #11]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d108      	bne.n	800ec50 <nk_buffer_alloc+0x1d0>
        b->allocated += size + alignment;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec42:	6979      	ldr	r1, [r7, #20]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	440b      	add	r3, r1
 800ec48:	441a      	add	r2, r3
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec4e:	e007      	b.n	800ec60 <nk_buffer_alloc+0x1e0>
    else b->size -= (size + alignment);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec54:	6979      	ldr	r1, [r7, #20]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	440b      	add	r3, r1
 800ec5a:	1ad2      	subs	r2, r2, r3
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	639a      	str	r2, [r3, #56]	; 0x38
    b->needed += alignment;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	441a      	add	r2, r3
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	631a      	str	r2, [r3, #48]	; 0x30
    b->calls++;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec70:	1c5a      	adds	r2, r3, #1
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	635a      	str	r2, [r3, #52]	; 0x34
    return memory;
 800ec76:	69fb      	ldr	r3, [r7, #28]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3728      	adds	r7, #40	; 0x28
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	08021ae4 	.word	0x08021ae4
 800ec84:	080237e0 	.word	0x080237e0
 800ec88:	08021ae8 	.word	0x08021ae8
 800ec8c:	08021b1c 	.word	0x08021b1c
 800ec90:	08021b2c 	.word	0x08021b2c

0800ec94 <nk_buffer_reset>:
        buffer->marker[type].offset = buffer->size;
    else buffer->marker[type].offset = buffer->allocated;
}
NK_API void
nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(buffer);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d105      	bne.n	800ecb2 <nk_buffer_reset+0x1e>
 800eca6:	4b2c      	ldr	r3, [pc, #176]	; (800ed58 <nk_buffer_reset+0xc4>)
 800eca8:	4a2c      	ldr	r2, [pc, #176]	; (800ed5c <nk_buffer_reset+0xc8>)
 800ecaa:	21ce      	movs	r1, #206	; 0xce
 800ecac:	482c      	ldr	r0, [pc, #176]	; (800ed60 <nk_buffer_reset+0xcc>)
 800ecae:	f00f f9c9 	bl	801e044 <__assert_func>
    if (!buffer) return;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d04b      	beq.n	800ed50 <nk_buffer_reset+0xbc>
    if (type == NK_BUFFER_BACK) {
 800ecb8:	78fb      	ldrb	r3, [r7, #3]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d124      	bne.n	800ed08 <nk_buffer_reset+0x74>
        /* reset back buffer either back to marker or empty */
        buffer->needed -= (buffer->memory.size - buffer->marker[type].offset);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecc2:	78fb      	ldrb	r3, [r7, #3]
 800ecc4:	6879      	ldr	r1, [r7, #4]
 800ecc6:	00db      	lsls	r3, r3, #3
 800ecc8:	440b      	add	r3, r1
 800ecca:	6859      	ldr	r1, [r3, #4]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd0:	1acb      	subs	r3, r1, r3
 800ecd2:	441a      	add	r2, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800ecd8:	78fa      	ldrb	r2, [r7, #3]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d007      	beq.n	800ecf4 <nk_buffer_reset+0x60>
            buffer->size = buffer->marker[type].offset;
 800ece4:	78fb      	ldrb	r3, [r7, #3]
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	00db      	lsls	r3, r3, #3
 800ecea:	4413      	add	r3, r2
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	639a      	str	r2, [r3, #56]	; 0x38
 800ecf2:	e003      	b.n	800ecfc <nk_buffer_reset+0x68>
        else buffer->size = buffer->memory.size;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	639a      	str	r2, [r3, #56]	; 0x38
        buffer->marker[type].active = nk_false;
 800ecfc:	78fa      	ldrb	r2, [r7, #3]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2100      	movs	r1, #0
 800ed02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800ed06:	e024      	b.n	800ed52 <nk_buffer_reset+0xbe>
    } else {
        /* reset front buffer either back to back marker or empty */
        buffer->needed -= (buffer->allocated - buffer->marker[type].offset);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed0c:	78fb      	ldrb	r3, [r7, #3]
 800ed0e:	6879      	ldr	r1, [r7, #4]
 800ed10:	00db      	lsls	r3, r3, #3
 800ed12:	440b      	add	r3, r1
 800ed14:	6859      	ldr	r1, [r3, #4]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed1a:	1acb      	subs	r3, r1, r3
 800ed1c:	441a      	add	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800ed22:	78fa      	ldrb	r2, [r7, #3]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d007      	beq.n	800ed3e <nk_buffer_reset+0xaa>
            buffer->allocated = buffer->marker[type].offset;
 800ed2e:	78fb      	ldrb	r3, [r7, #3]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	00db      	lsls	r3, r3, #3
 800ed34:	4413      	add	r3, r2
 800ed36:	685a      	ldr	r2, [r3, #4]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ed3c:	e002      	b.n	800ed44 <nk_buffer_reset+0xb0>
        else buffer->allocated = 0;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	62da      	str	r2, [r3, #44]	; 0x2c
        buffer->marker[type].active = nk_false;
 800ed44:	78fa      	ldrb	r2, [r7, #3]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2100      	movs	r1, #0
 800ed4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800ed4e:	e000      	b.n	800ed52 <nk_buffer_reset+0xbe>
    if (!buffer) return;
 800ed50:	bf00      	nop
    }
}
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	08021b4c 	.word	0x08021b4c
 800ed5c:	080237f0 	.word	0x080237f0
 800ed60:	08021ae8 	.word	0x08021ae8

0800ed64 <nk_buffer_clear>:
NK_API void
nk_buffer_clear(struct nk_buffer *b)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d105      	bne.n	800ed7e <nk_buffer_clear+0x1a>
 800ed72:	4b0d      	ldr	r3, [pc, #52]	; (800eda8 <nk_buffer_clear+0x44>)
 800ed74:	4a0d      	ldr	r2, [pc, #52]	; (800edac <nk_buffer_clear+0x48>)
 800ed76:	21e3      	movs	r1, #227	; 0xe3
 800ed78:	480d      	ldr	r0, [pc, #52]	; (800edb0 <nk_buffer_clear+0x4c>)
 800ed7a:	f00f f963 	bl	801e044 <__assert_func>
    if (!b) return;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00d      	beq.n	800eda0 <nk_buffer_clear+0x3c>
    b->allocated = 0;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	62da      	str	r2, [r3, #44]	; 0x2c
    b->size = b->memory.size;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	639a      	str	r2, [r3, #56]	; 0x38
    b->calls = 0;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	635a      	str	r2, [r3, #52]	; 0x34
    b->needed = 0;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	631a      	str	r2, [r3, #48]	; 0x30
 800ed9e:	e000      	b.n	800eda2 <nk_buffer_clear+0x3e>
    if (!b) return;
 800eda0:	bf00      	nop
}
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	08021ae4 	.word	0x08021ae4
 800edac:	08023800 	.word	0x08023800
 800edb0:	08021ae8 	.word	0x08021ae8

0800edb4 <nk_draw_symbol>:
 * ===============================================================*/
NK_LIB void
nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,
    struct nk_rect content, struct nk_color background, struct nk_color foreground,
    float border_width, const struct nk_user_font *font)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b0a0      	sub	sp, #128	; 0x80
 800edb8:	af02      	add	r7, sp, #8
 800edba:	6278      	str	r0, [r7, #36]	; 0x24
 800edbc:	eeb0 6a40 	vmov.f32	s12, s0
 800edc0:	eef0 6a60 	vmov.f32	s13, s1
 800edc4:	eeb0 7a41 	vmov.f32	s14, s2
 800edc8:	eef0 7a61 	vmov.f32	s15, s3
 800edcc:	60fa      	str	r2, [r7, #12]
 800edce:	60bb      	str	r3, [r7, #8]
 800edd0:	ed87 2a01 	vstr	s4, [r7, #4]
 800edd4:	460b      	mov	r3, r1
 800edd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edda:	ed87 6a04 	vstr	s12, [r7, #16]
 800edde:	edc7 6a05 	vstr	s13, [r7, #20]
 800ede2:	ed87 7a06 	vstr	s14, [r7, #24]
 800ede6:	edc7 7a07 	vstr	s15, [r7, #28]
    switch (type) {
 800edea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edee:	3b01      	subs	r3, #1
 800edf0:	2b0b      	cmp	r3, #11
 800edf2:	f200 815e 	bhi.w	800f0b2 <nk_draw_symbol+0x2fe>
 800edf6:	a201      	add	r2, pc, #4	; (adr r2, 800edfc <nk_draw_symbol+0x48>)
 800edf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfc:	0800ee2d 	.word	0x0800ee2d
 800ee00:	0800ee2d 	.word	0x0800ee2d
 800ee04:	0800eeb5 	.word	0x0800eeb5
 800ee08:	0800eeb5 	.word	0x0800eeb5
 800ee0c:	0800eeb5 	.word	0x0800eeb5
 800ee10:	0800eeb5 	.word	0x0800eeb5
 800ee14:	0800f017 	.word	0x0800f017
 800ee18:	0800f017 	.word	0x0800f017
 800ee1c:	0800f017 	.word	0x0800f017
 800ee20:	0800f017 	.word	0x0800f017
 800ee24:	0800ee2d 	.word	0x0800ee2d
 800ee28:	0800ee2d 	.word	0x0800ee2d
    case NK_SYMBOL_X:
    case NK_SYMBOL_UNDERSCORE:
    case NK_SYMBOL_PLUS:
    case NK_SYMBOL_MINUS: {
        /* single character text symbol */
        const char *X = (type == NK_SYMBOL_X) ? "x":
 800ee2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d00d      	beq.n	800ee50 <nk_draw_symbol+0x9c>
 800ee34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d007      	beq.n	800ee4c <nk_draw_symbol+0x98>
 800ee3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee40:	2b0b      	cmp	r3, #11
 800ee42:	d101      	bne.n	800ee48 <nk_draw_symbol+0x94>
 800ee44:	4b9e      	ldr	r3, [pc, #632]	; (800f0c0 <nk_draw_symbol+0x30c>)
 800ee46:	e004      	b.n	800ee52 <nk_draw_symbol+0x9e>
 800ee48:	4b9e      	ldr	r3, [pc, #632]	; (800f0c4 <nk_draw_symbol+0x310>)
 800ee4a:	e002      	b.n	800ee52 <nk_draw_symbol+0x9e>
 800ee4c:	4b9e      	ldr	r3, [pc, #632]	; (800f0c8 <nk_draw_symbol+0x314>)
 800ee4e:	e000      	b.n	800ee52 <nk_draw_symbol+0x9e>
 800ee50:	4b9e      	ldr	r3, [pc, #632]	; (800f0cc <nk_draw_symbol+0x318>)
 800ee52:	673b      	str	r3, [r7, #112]	; 0x70
            (type == NK_SYMBOL_UNDERSCORE) ? "_":
            (type == NK_SYMBOL_PLUS) ? "+": "-";
        struct nk_text text;
        text.padding = nk_vec2(0,0);
 800ee54:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800f0d0 <nk_draw_symbol+0x31c>
 800ee58:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800f0d0 <nk_draw_symbol+0x31c>
 800ee5c:	f005 fc6e 	bl	801473c <nk_vec2>
 800ee60:	eeb0 7a40 	vmov.f32	s14, s0
 800ee64:	eef0 7a60 	vmov.f32	s15, s1
 800ee68:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800ee6c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        text.background = background;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	64bb      	str	r3, [r7, #72]	; 0x48
        text.text = foreground;
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	64fb      	str	r3, [r7, #76]	; 0x4c
        nk_widget_text(out, content, X, 1, &text, NK_TEXT_CENTERED, font);
 800ee78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ee7c:	ed97 6a04 	vldr	s12, [r7, #16]
 800ee80:	edd7 6a05 	vldr	s13, [r7, #20]
 800ee84:	ed97 7a06 	vldr	s14, [r7, #24]
 800ee88:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee90:	9301      	str	r3, [sp, #4]
 800ee92:	2312      	movs	r3, #18
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	4613      	mov	r3, r2
 800ee98:	2201      	movs	r2, #1
 800ee9a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ee9c:	eeb0 0a46 	vmov.f32	s0, s12
 800eea0:	eef0 0a66 	vmov.f32	s1, s13
 800eea4:	eeb0 1a47 	vmov.f32	s2, s14
 800eea8:	eef0 1a67 	vmov.f32	s3, s15
 800eeac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeae:	f00c fa13 	bl	801b2d8 <nk_widget_text>
    } break;
 800eeb2:	e101      	b.n	800f0b8 <nk_draw_symbol+0x304>
    case NK_SYMBOL_CIRCLE_SOLID:
    case NK_SYMBOL_CIRCLE_OUTLINE:
    case NK_SYMBOL_RECT_SOLID:
    case NK_SYMBOL_RECT_OUTLINE: {
        /* simple empty/filled shapes */
        if (type == NK_SYMBOL_RECT_SOLID || type == NK_SYMBOL_RECT_OUTLINE) {
 800eeb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eeb8:	2b05      	cmp	r3, #5
 800eeba:	d003      	beq.n	800eec4 <nk_draw_symbol+0x110>
 800eebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eec0:	2b06      	cmp	r3, #6
 800eec2:	d155      	bne.n	800ef70 <nk_draw_symbol+0x1bc>
            nk_fill_rect(out, content,  0, foreground);
 800eec4:	ed97 6a04 	vldr	s12, [r7, #16]
 800eec8:	edd7 6a05 	vldr	s13, [r7, #20]
 800eecc:	ed97 7a06 	vldr	s14, [r7, #24]
 800eed0:	edd7 7a07 	vldr	s15, [r7, #28]
 800eed4:	68b9      	ldr	r1, [r7, #8]
 800eed6:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800f0d0 <nk_draw_symbol+0x31c>
 800eeda:	eeb0 0a46 	vmov.f32	s0, s12
 800eede:	eef0 0a66 	vmov.f32	s1, s13
 800eee2:	eeb0 1a47 	vmov.f32	s2, s14
 800eee6:	eef0 1a67 	vmov.f32	s3, s15
 800eeea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeec:	f002 fe18 	bl	8011b20 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800eef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eef4:	2b06      	cmp	r3, #6
 800eef6:	f040 808d 	bne.w	800f014 <nk_draw_symbol+0x260>
                nk_fill_rect(out, nk_shrink_rect(content, border_width), 0, background);
 800eefa:	ed97 6a04 	vldr	s12, [r7, #16]
 800eefe:	edd7 6a05 	vldr	s13, [r7, #20]
 800ef02:	ed97 7a06 	vldr	s14, [r7, #24]
 800ef06:	edd7 7a07 	vldr	s15, [r7, #28]
 800ef0a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ef0e:	eeb0 0a46 	vmov.f32	s0, s12
 800ef12:	eef0 0a66 	vmov.f32	s1, s13
 800ef16:	eeb0 1a47 	vmov.f32	s2, s14
 800ef1a:	eef0 1a67 	vmov.f32	s3, s15
 800ef1e:	f005 fb8d 	bl	801463c <nk_shrink_rect>
 800ef22:	eeb0 6a40 	vmov.f32	s12, s0
 800ef26:	eef0 6a60 	vmov.f32	s13, s1
 800ef2a:	eeb0 7a41 	vmov.f32	s14, s2
 800ef2e:	eef0 7a61 	vmov.f32	s15, s3
 800ef32:	ed87 6a14 	vstr	s12, [r7, #80]	; 0x50
 800ef36:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 800ef3a:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 800ef3e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800ef42:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800ef46:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800ef4a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ef4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ef52:	68f9      	ldr	r1, [r7, #12]
 800ef54:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 800f0d0 <nk_draw_symbol+0x31c>
 800ef58:	eeb0 0a46 	vmov.f32	s0, s12
 800ef5c:	eef0 0a66 	vmov.f32	s1, s13
 800ef60:	eeb0 1a47 	vmov.f32	s2, s14
 800ef64:	eef0 1a67 	vmov.f32	s3, s15
 800ef68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef6a:	f002 fdd9 	bl	8011b20 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800ef6e:	e051      	b.n	800f014 <nk_draw_symbol+0x260>
        } else {
            nk_fill_circle(out, content, foreground);
 800ef70:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef74:	edd7 6a05 	vldr	s13, [r7, #20]
 800ef78:	ed97 7a06 	vldr	s14, [r7, #24]
 800ef7c:	edd7 7a07 	vldr	s15, [r7, #28]
 800ef80:	68b9      	ldr	r1, [r7, #8]
 800ef82:	eeb0 0a46 	vmov.f32	s0, s12
 800ef86:	eef0 0a66 	vmov.f32	s1, s13
 800ef8a:	eeb0 1a47 	vmov.f32	s2, s14
 800ef8e:	eef0 1a67 	vmov.f32	s3, s15
 800ef92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef94:	f002 feba 	bl	8011d0c <nk_fill_circle>
            if (type == NK_SYMBOL_CIRCLE_OUTLINE)
 800ef98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef9c:	2b04      	cmp	r3, #4
 800ef9e:	f040 808a 	bne.w	800f0b6 <nk_draw_symbol+0x302>
                nk_fill_circle(out, nk_shrink_rect(content, 1), background);
 800efa2:	ed97 6a04 	vldr	s12, [r7, #16]
 800efa6:	edd7 6a05 	vldr	s13, [r7, #20]
 800efaa:	ed97 7a06 	vldr	s14, [r7, #24]
 800efae:	edd7 7a07 	vldr	s15, [r7, #28]
 800efb2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800efb6:	eeb0 0a46 	vmov.f32	s0, s12
 800efba:	eef0 0a66 	vmov.f32	s1, s13
 800efbe:	eeb0 1a47 	vmov.f32	s2, s14
 800efc2:	eef0 1a67 	vmov.f32	s3, s15
 800efc6:	f005 fb39 	bl	801463c <nk_shrink_rect>
 800efca:	eeb0 6a40 	vmov.f32	s12, s0
 800efce:	eef0 6a60 	vmov.f32	s13, s1
 800efd2:	eeb0 7a41 	vmov.f32	s14, s2
 800efd6:	eef0 7a61 	vmov.f32	s15, s3
 800efda:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 800efde:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 800efe2:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 800efe6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800efea:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800efee:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800eff2:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800eff6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800effa:	68f9      	ldr	r1, [r7, #12]
 800effc:	eeb0 0a46 	vmov.f32	s0, s12
 800f000:	eef0 0a66 	vmov.f32	s1, s13
 800f004:	eeb0 1a47 	vmov.f32	s2, s14
 800f008:	eef0 1a67 	vmov.f32	s3, s15
 800f00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f00e:	f002 fe7d 	bl	8011d0c <nk_fill_circle>
        }
    } break;
 800f012:	e050      	b.n	800f0b6 <nk_draw_symbol+0x302>
 800f014:	e04f      	b.n	800f0b6 <nk_draw_symbol+0x302>
    case NK_SYMBOL_TRIANGLE_DOWN:
    case NK_SYMBOL_TRIANGLE_LEFT:
    case NK_SYMBOL_TRIANGLE_RIGHT: {
        enum nk_heading heading;
        struct nk_vec2 points[3];
        heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
 800f016:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f01a:	2b0a      	cmp	r3, #10
 800f01c:	d00d      	beq.n	800f03a <nk_draw_symbol+0x286>
 800f01e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f022:	2b09      	cmp	r3, #9
 800f024:	d007      	beq.n	800f036 <nk_draw_symbol+0x282>
 800f026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f02a:	2b07      	cmp	r3, #7
 800f02c:	d101      	bne.n	800f032 <nk_draw_symbol+0x27e>
 800f02e:	2300      	movs	r3, #0
 800f030:	e004      	b.n	800f03c <nk_draw_symbol+0x288>
 800f032:	2302      	movs	r3, #2
 800f034:	e002      	b.n	800f03c <nk_draw_symbol+0x288>
 800f036:	2303      	movs	r3, #3
 800f038:	e000      	b.n	800f03c <nk_draw_symbol+0x288>
 800f03a:	2301      	movs	r3, #1
 800f03c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            (type == NK_SYMBOL_TRIANGLE_LEFT) ? NK_LEFT:
            (type == NK_SYMBOL_TRIANGLE_UP) ? NK_UP: NK_DOWN;
        nk_triangle_from_direction(points, content, 0, 0, heading);
 800f040:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800f044:	ed97 6a04 	vldr	s12, [r7, #16]
 800f048:	edd7 6a05 	vldr	s13, [r7, #20]
 800f04c:	ed97 7a06 	vldr	s14, [r7, #24]
 800f050:	edd7 7a07 	vldr	s15, [r7, #28]
 800f054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f058:	4611      	mov	r1, r2
 800f05a:	eddf 2a1d 	vldr	s5, [pc, #116]	; 800f0d0 <nk_draw_symbol+0x31c>
 800f05e:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 800f0d0 <nk_draw_symbol+0x31c>
 800f062:	eeb0 0a46 	vmov.f32	s0, s12
 800f066:	eef0 0a66 	vmov.f32	s1, s13
 800f06a:	eeb0 1a47 	vmov.f32	s2, s14
 800f06e:	eef0 1a67 	vmov.f32	s3, s15
 800f072:	4618      	mov	r0, r3
 800f074:	f005 fc34 	bl	80148e0 <nk_triangle_from_direction>
        nk_fill_triangle(out, points[0].x, points[0].y, points[1].x, points[1].y,
 800f078:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f07c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f080:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800f084:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800f088:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800f08c:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 800f090:	68b9      	ldr	r1, [r7, #8]
 800f092:	eef0 2a45 	vmov.f32	s5, s10
 800f096:	eeb0 2a65 	vmov.f32	s4, s11
 800f09a:	eef0 1a46 	vmov.f32	s3, s12
 800f09e:	eeb0 1a66 	vmov.f32	s2, s13
 800f0a2:	eef0 0a47 	vmov.f32	s1, s14
 800f0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800f0aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0ac:	f002 ff18 	bl	8011ee0 <nk_fill_triangle>
            points[2].x, points[2].y, foreground);
    } break;
 800f0b0:	e002      	b.n	800f0b8 <nk_draw_symbol+0x304>
    default:
    case NK_SYMBOL_NONE:
    case NK_SYMBOL_MAX: break;
 800f0b2:	bf00      	nop
 800f0b4:	e000      	b.n	800f0b8 <nk_draw_symbol+0x304>
    } break;
 800f0b6:	bf00      	nop
    }
}
 800f0b8:	bf00      	nop
 800f0ba:	3778      	adds	r7, #120	; 0x78
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	08021b68 	.word	0x08021b68
 800f0c4:	08021b6c 	.word	0x08021b6c
 800f0c8:	08021b70 	.word	0x08021b70
 800f0cc:	08021b74 	.word	0x08021b74
 800f0d0:	00000000 	.word	0x00000000

0800f0d4 <nk_button_behavior>:
NK_LIB nk_bool
nk_button_behavior(nk_flags *state, struct nk_rect r,
    const struct nk_input *i, enum nk_button_behavior behavior)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b08a      	sub	sp, #40	; 0x28
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	61f8      	str	r0, [r7, #28]
 800f0dc:	eeb0 6a40 	vmov.f32	s12, s0
 800f0e0:	eef0 6a60 	vmov.f32	s13, s1
 800f0e4:	eeb0 7a41 	vmov.f32	s14, s2
 800f0e8:	eef0 7a61 	vmov.f32	s15, s3
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	ed87 6a03 	vstr	s12, [r7, #12]
 800f0f4:	edc7 6a04 	vstr	s13, [r7, #16]
 800f0f8:	ed87 7a05 	vstr	s14, [r7, #20]
 800f0fc:	edc7 7a06 	vstr	s15, [r7, #24]
 800f100:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800f102:	2300      	movs	r3, #0
 800f104:	627b      	str	r3, [r7, #36]	; 0x24
    nk_widget_state_reset(state);
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f003 0302 	and.w	r3, r3, #2
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d003      	beq.n	800f11a <nk_button_behavior+0x46>
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	2206      	movs	r2, #6
 800f116:	601a      	str	r2, [r3, #0]
 800f118:	e002      	b.n	800f120 <nk_button_behavior+0x4c>
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	2204      	movs	r2, #4
 800f11e:	601a      	str	r2, [r3, #0]
    if (!i) return 0;
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d101      	bne.n	800f12a <nk_button_behavior+0x56>
 800f126:	2300      	movs	r3, #0
 800f128:	e088      	b.n	800f23c <nk_button_behavior+0x168>
    if (nk_input_is_mouse_hovering_rect(i, r)) {
 800f12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f12e:	edd7 6a04 	vldr	s13, [r7, #16]
 800f132:	ed97 7a05 	vldr	s14, [r7, #20]
 800f136:	edd7 7a06 	vldr	s15, [r7, #24]
 800f13a:	eeb0 0a46 	vmov.f32	s0, s12
 800f13e:	eef0 0a66 	vmov.f32	s1, s13
 800f142:	eeb0 1a47 	vmov.f32	s2, s14
 800f146:	eef0 1a67 	vmov.f32	s3, s15
 800f14a:	68b8      	ldr	r0, [r7, #8]
 800f14c:	f004 f929 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d032      	beq.n	800f1bc <nk_button_behavior+0xe8>
        *state = NK_WIDGET_STATE_HOVERED;
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	2212      	movs	r2, #18
 800f15a:	601a      	str	r2, [r3, #0]
        if (nk_input_is_mouse_down(i, NK_BUTTON_LEFT))
 800f15c:	2100      	movs	r1, #0
 800f15e:	68b8      	ldr	r0, [r7, #8]
 800f160:	f004 f9c3 	bl	80134ea <nk_input_is_mouse_down>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d002      	beq.n	800f170 <nk_button_behavior+0x9c>
            *state = NK_WIDGET_STATE_ACTIVE;
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	2222      	movs	r2, #34	; 0x22
 800f16e:	601a      	str	r2, [r3, #0]
        if (nk_input_has_mouse_click_in_button_rect(i, NK_BUTTON_LEFT, r)) {
 800f170:	ed97 6a03 	vldr	s12, [r7, #12]
 800f174:	edd7 6a04 	vldr	s13, [r7, #16]
 800f178:	ed97 7a05 	vldr	s14, [r7, #20]
 800f17c:	edd7 7a06 	vldr	s15, [r7, #24]
 800f180:	eeb0 0a46 	vmov.f32	s0, s12
 800f184:	eef0 0a66 	vmov.f32	s1, s13
 800f188:	eeb0 1a47 	vmov.f32	s2, s14
 800f18c:	eef0 1a67 	vmov.f32	s3, s15
 800f190:	2100      	movs	r1, #0
 800f192:	68b8      	ldr	r0, [r7, #8]
 800f194:	f004 f843 	bl	801321e <nk_input_has_mouse_click_in_button_rect>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00e      	beq.n	800f1bc <nk_button_behavior+0xe8>
            ret = (behavior != NK_BUTTON_DEFAULT) ?
                nk_input_is_mouse_down(i, NK_BUTTON_LEFT):
 800f19e:	79fb      	ldrb	r3, [r7, #7]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d005      	beq.n	800f1b0 <nk_button_behavior+0xdc>
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	68b8      	ldr	r0, [r7, #8]
 800f1a8:	f004 f99f 	bl	80134ea <nk_input_is_mouse_down>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	e004      	b.n	800f1ba <nk_button_behavior+0xe6>
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
                nk_input_is_mouse_released(i, NK_BUTTON_LEFT);
#else
                nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	68b8      	ldr	r0, [r7, #8]
 800f1b4:	f004 f9b1 	bl	801351a <nk_input_is_mouse_pressed>
 800f1b8:	4603      	mov	r3, r0
            ret = (behavior != NK_BUTTON_DEFAULT) ?
 800f1ba:	627b      	str	r3, [r7, #36]	; 0x24
#endif
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(i, r))
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f003 0310 	and.w	r3, r3, #16
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d01c      	beq.n	800f202 <nk_button_behavior+0x12e>
 800f1c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1cc:	edd7 6a04 	vldr	s13, [r7, #16]
 800f1d0:	ed97 7a05 	vldr	s14, [r7, #20]
 800f1d4:	edd7 7a06 	vldr	s15, [r7, #24]
 800f1d8:	eeb0 0a46 	vmov.f32	s0, s12
 800f1dc:	eef0 0a66 	vmov.f32	s1, s13
 800f1e0:	eeb0 1a47 	vmov.f32	s2, s14
 800f1e4:	eef0 1a67 	vmov.f32	s3, s15
 800f1e8:	68b8      	ldr	r0, [r7, #8]
 800f1ea:	f004 f92c 	bl	8013446 <nk_input_is_mouse_prev_hovering_rect>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d106      	bne.n	800f202 <nk_button_behavior+0x12e>
        *state |= NK_WIDGET_STATE_ENTERED;
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f043 0208 	orr.w	r2, r3, #8
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	601a      	str	r2, [r3, #0]
 800f200:	e01b      	b.n	800f23a <nk_button_behavior+0x166>
    else if (nk_input_is_mouse_prev_hovering_rect(i, r))
 800f202:	ed97 6a03 	vldr	s12, [r7, #12]
 800f206:	edd7 6a04 	vldr	s13, [r7, #16]
 800f20a:	ed97 7a05 	vldr	s14, [r7, #20]
 800f20e:	edd7 7a06 	vldr	s15, [r7, #24]
 800f212:	eeb0 0a46 	vmov.f32	s0, s12
 800f216:	eef0 0a66 	vmov.f32	s1, s13
 800f21a:	eeb0 1a47 	vmov.f32	s2, s14
 800f21e:	eef0 1a67 	vmov.f32	s3, s15
 800f222:	68b8      	ldr	r0, [r7, #8]
 800f224:	f004 f90f 	bl	8013446 <nk_input_is_mouse_prev_hovering_rect>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d005      	beq.n	800f23a <nk_button_behavior+0x166>
        *state |= NK_WIDGET_STATE_LEFT;
 800f22e:	69fb      	ldr	r3, [r7, #28]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	601a      	str	r2, [r3, #0]
    return ret;
 800f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3728      	adds	r7, #40	; 0x28
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <nk_draw_button>:
NK_LIB const struct nk_style_item*
nk_draw_button(struct nk_command_buffer *out,
    const struct nk_rect *bounds, nk_flags state,
    const struct nk_style_button *style)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b086      	sub	sp, #24
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
 800f250:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    if (state & NK_WIDGET_STATE_HOVER)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f003 0310 	and.w	r3, r3, #16
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d003      	beq.n	800f264 <nk_draw_button+0x20>
        background = &style->hover;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	331c      	adds	r3, #28
 800f260:	617b      	str	r3, [r7, #20]
 800f262:	e00a      	b.n	800f27a <nk_draw_button+0x36>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f003 0320 	and.w	r3, r3, #32
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d003      	beq.n	800f276 <nk_draw_button+0x32>
        background = &style->active;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	3338      	adds	r3, #56	; 0x38
 800f272:	617b      	str	r3, [r7, #20]
 800f274:	e001      	b.n	800f27a <nk_draw_button+0x36>
    else background = &style->normal;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	617b      	str	r3, [r7, #20]

    switch(background->type) {
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d01e      	beq.n	800f2c0 <nk_draw_button+0x7c>
 800f282:	2b02      	cmp	r3, #2
 800f284:	dc71      	bgt.n	800f36a <nk_draw_button+0x126>
 800f286:	2b00      	cmp	r3, #0
 800f288:	d033      	beq.n	800f2f2 <nk_draw_button+0xae>
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d16d      	bne.n	800f36a <nk_draw_button+0x126>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	1d19      	adds	r1, r3, #4
 800f292:	4a38      	ldr	r2, [pc, #224]	; (800f374 <nk_draw_button+0x130>)
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	ed93 6a00 	vldr	s12, [r3]
 800f29a:	edd3 6a01 	vldr	s13, [r3, #4]
 800f29e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f2a2:	edd3 7a03 	vldr	s15, [r3, #12]
 800f2a6:	6812      	ldr	r2, [r2, #0]
 800f2a8:	eeb0 0a46 	vmov.f32	s0, s12
 800f2ac:	eef0 0a66 	vmov.f32	s1, s13
 800f2b0:	eeb0 1a47 	vmov.f32	s2, s14
 800f2b4:	eef0 1a67 	vmov.f32	s3, s15
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f002 ff8b 	bl	80121d4 <nk_draw_image>
            break;
 800f2be:	e054      	b.n	800f36a <nk_draw_button+0x126>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	1d19      	adds	r1, r3, #4
 800f2c4:	4a2b      	ldr	r2, [pc, #172]	; (800f374 <nk_draw_button+0x130>)
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	ed93 6a00 	vldr	s12, [r3]
 800f2cc:	edd3 6a01 	vldr	s13, [r3, #4]
 800f2d0:	ed93 7a02 	vldr	s14, [r3, #8]
 800f2d4:	edd3 7a03 	vldr	s15, [r3, #12]
 800f2d8:	6812      	ldr	r2, [r2, #0]
 800f2da:	eeb0 0a46 	vmov.f32	s0, s12
 800f2de:	eef0 0a66 	vmov.f32	s1, s13
 800f2e2:	eeb0 1a47 	vmov.f32	s2, s14
 800f2e6:	eef0 1a67 	vmov.f32	s3, s15
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f003 f864 	bl	80123b8 <nk_draw_nine_slice>
            break;
 800f2f0:	e03b      	b.n	800f36a <nk_draw_button+0x126>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800f2f8:	697a      	ldr	r2, [r7, #20]
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	ed93 6a00 	vldr	s12, [r3]
 800f300:	edd3 6a01 	vldr	s13, [r3, #4]
 800f304:	ed93 7a02 	vldr	s14, [r3, #8]
 800f308:	edd3 7a03 	vldr	s15, [r3, #12]
 800f30c:	6851      	ldr	r1, [r2, #4]
 800f30e:	eeb0 2a65 	vmov.f32	s4, s11
 800f312:	eeb0 0a46 	vmov.f32	s0, s12
 800f316:	eef0 0a66 	vmov.f32	s1, s13
 800f31a:	eeb0 1a47 	vmov.f32	s2, s14
 800f31e:	eef0 1a67 	vmov.f32	s3, s15
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f002 fbfc 	bl	8011b20 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	ed93 5a1b 	vldr	s10, [r3, #108]	; 0x6c
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	ed93 6a00 	vldr	s12, [r3]
 800f33c:	edd3 6a01 	vldr	s13, [r3, #4]
 800f340:	ed93 7a02 	vldr	s14, [r3, #8]
 800f344:	edd3 7a03 	vldr	s15, [r3, #12]
 800f348:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f34a:	eef0 2a45 	vmov.f32	s5, s10
 800f34e:	eeb0 2a65 	vmov.f32	s4, s11
 800f352:	eeb0 0a46 	vmov.f32	s0, s12
 800f356:	eef0 0a66 	vmov.f32	s1, s13
 800f35a:	eeb0 1a47 	vmov.f32	s2, s14
 800f35e:	eef0 1a67 	vmov.f32	s3, s15
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f002 fad4 	bl	8011910 <nk_stroke_rect>
            break;
 800f368:	bf00      	nop
    }
    return background;
 800f36a:	697b      	ldr	r3, [r7, #20]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	08023810 	.word	0x08023810

0800f378 <nk_do_button>:
NK_LIB nk_bool
nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,
    const struct nk_style_button *style, const struct nk_input *in,
    enum nk_button_behavior behavior, struct nk_rect *content)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08c      	sub	sp, #48	; 0x30
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	61f8      	str	r0, [r7, #28]
 800f380:	61b9      	str	r1, [r7, #24]
 800f382:	eeb0 6a40 	vmov.f32	s12, s0
 800f386:	eef0 6a60 	vmov.f32	s13, s1
 800f38a:	eeb0 7a41 	vmov.f32	s14, s2
 800f38e:	eef0 7a61 	vmov.f32	s15, s3
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	603b      	str	r3, [r7, #0]
 800f396:	ed87 6a02 	vstr	s12, [r7, #8]
 800f39a:	edc7 6a03 	vstr	s13, [r7, #12]
 800f39e:	ed87 7a04 	vstr	s14, [r7, #16]
 800f3a2:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect bounds;
    NK_ASSERT(style);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d105      	bne.n	800f3b8 <nk_do_button+0x40>
 800f3ac:	4b5d      	ldr	r3, [pc, #372]	; (800f524 <nk_do_button+0x1ac>)
 800f3ae:	4a5e      	ldr	r2, [pc, #376]	; (800f528 <nk_do_button+0x1b0>)
 800f3b0:	2179      	movs	r1, #121	; 0x79
 800f3b2:	485e      	ldr	r0, [pc, #376]	; (800f52c <nk_do_button+0x1b4>)
 800f3b4:	f00e fe46 	bl	801e044 <__assert_func>
    NK_ASSERT(state);
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d105      	bne.n	800f3ca <nk_do_button+0x52>
 800f3be:	4b5c      	ldr	r3, [pc, #368]	; (800f530 <nk_do_button+0x1b8>)
 800f3c0:	4a59      	ldr	r2, [pc, #356]	; (800f528 <nk_do_button+0x1b0>)
 800f3c2:	217a      	movs	r1, #122	; 0x7a
 800f3c4:	4859      	ldr	r0, [pc, #356]	; (800f52c <nk_do_button+0x1b4>)
 800f3c6:	f00e fe3d 	bl	801e044 <__assert_func>
    NK_ASSERT(out);
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d105      	bne.n	800f3dc <nk_do_button+0x64>
 800f3d0:	4b58      	ldr	r3, [pc, #352]	; (800f534 <nk_do_button+0x1bc>)
 800f3d2:	4a55      	ldr	r2, [pc, #340]	; (800f528 <nk_do_button+0x1b0>)
 800f3d4:	217b      	movs	r1, #123	; 0x7b
 800f3d6:	4855      	ldr	r0, [pc, #340]	; (800f52c <nk_do_button+0x1b4>)
 800f3d8:	f00e fe34 	bl	801e044 <__assert_func>
    if (!out || !style)
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d002      	beq.n	800f3e8 <nk_do_button+0x70>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d101      	bne.n	800f3ec <nk_do_button+0x74>
        return nk_false;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	e097      	b.n	800f51c <nk_do_button+0x1a4>

    /* calculate button content space */
    content->x = r.x + style->padding.x + style->border + style->rounding;
 800f3ec:	ed97 7a02 	vldr	s14, [r7, #8]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800f3f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f400:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f40a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f410:	edc3 7a00 	vstr	s15, [r3]
    content->y = r.y + style->padding.y + style->border + style->rounding;
 800f414:	ed97 7a03 	vldr	s14, [r7, #12]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800f41e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f432:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f438:	edc3 7a01 	vstr	s15, [r3, #4]
    content->w = r.w - (2 * style->padding.x + style->border + style->rounding*2);
 800f43c:	ed97 7a04 	vldr	s14, [r7, #16]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800f446:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f450:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f45a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f45e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f462:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f468:	edc3 7a02 	vstr	s15, [r3, #8]
    content->h = r.h - (2 * style->padding.y + style->border + style->rounding*2);
 800f46c:	ed97 7a05 	vldr	s14, [r7, #20]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800f476:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f480:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f48a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f492:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f498:	edc3 7a03 	vstr	s15, [r3, #12]

    /* execute button behavior */
    bounds.x = r.x - style->touch_padding.x;
 800f49c:	ed97 7a02 	vldr	s14, [r7, #8]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f4a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4aa:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.y = r.y - style->touch_padding.y;
 800f4ae:	ed97 7a03 	vldr	s14, [r7, #12]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f4b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    bounds.w = r.w + 2 * style->touch_padding.x;
 800f4c0:	ed97 7a04 	vldr	s14, [r7, #16]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f4ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4d2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    bounds.h = r.h + 2 * style->touch_padding.y;
 800f4d6:	ed97 7a05 	vldr	s14, [r7, #20]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f4e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f4e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return nk_button_behavior(state, bounds, in, behavior);
 800f4ec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f4f0:	ed97 6a08 	vldr	s12, [r7, #32]
 800f4f4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800f4f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f4fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f500:	461a      	mov	r2, r3
 800f502:	6839      	ldr	r1, [r7, #0]
 800f504:	eeb0 0a46 	vmov.f32	s0, s12
 800f508:	eef0 0a66 	vmov.f32	s1, s13
 800f50c:	eeb0 1a47 	vmov.f32	s2, s14
 800f510:	eef0 1a67 	vmov.f32	s3, s15
 800f514:	69f8      	ldr	r0, [r7, #28]
 800f516:	f7ff fddd 	bl	800f0d4 <nk_button_behavior>
 800f51a:	4603      	mov	r3, r0
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3730      	adds	r7, #48	; 0x30
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	08021b78 	.word	0x08021b78
 800f528:	08023814 	.word	0x08023814
 800f52c:	08021b80 	.word	0x08021b80
 800f530:	08021b9c 	.word	0x08021b9c
 800f534:	08021ba4 	.word	0x08021ba4

0800f538 <nk_draw_button_text>:
NK_LIB void
nk_draw_button_text(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content, nk_flags state,
    const struct nk_style_button *style, const char *txt, int len,
    nk_flags text_alignment, const struct nk_user_font *font)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b08c      	sub	sp, #48	; 0x30
 800f53c:	af02      	add	r7, sp, #8
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
 800f544:	603b      	str	r3, [r7, #0]
    struct nk_text text;
    const struct nk_style_item *background;
    background = nk_draw_button(out, bounds, state, style);
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	683a      	ldr	r2, [r7, #0]
 800f54a:	68b9      	ldr	r1, [r7, #8]
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f7ff fe79 	bl	800f244 <nk_draw_button>
 800f552:	6278      	str	r0, [r7, #36]	; 0x24

    /* select correct colors/images */
    if (background->type == NK_STYLE_ITEM_COLOR)
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d103      	bne.n	800f564 <nk_draw_button_text+0x2c>
        text.background = background->data.color;
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	61fb      	str	r3, [r7, #28]
 800f562:	e002      	b.n	800f56a <nk_draw_button_text+0x32>
    else text.background = style->text_background;
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f568:	61fb      	str	r3, [r7, #28]
    if (state & NK_WIDGET_STATE_HOVER)
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	f003 0310 	and.w	r3, r3, #16
 800f570:	2b00      	cmp	r3, #0
 800f572:	d003      	beq.n	800f57c <nk_draw_button_text+0x44>
        text.text = style->text_hover;
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f578:	623b      	str	r3, [r7, #32]
 800f57a:	e00b      	b.n	800f594 <nk_draw_button_text+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	f003 0320 	and.w	r3, r3, #32
 800f582:	2b00      	cmp	r3, #0
 800f584:	d003      	beq.n	800f58e <nk_draw_button_text+0x56>
        text.text = style->text_active;
 800f586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f58a:	623b      	str	r3, [r7, #32]
 800f58c:	e002      	b.n	800f594 <nk_draw_button_text+0x5c>
    else text.text = style->text_normal;
 800f58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f592:	623b      	str	r3, [r7, #32]

    text.padding = nk_vec2(0,0);
 800f594:	eddf 0a17 	vldr	s1, [pc, #92]	; 800f5f4 <nk_draw_button_text+0xbc>
 800f598:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800f5f4 <nk_draw_button_text+0xbc>
 800f59c:	f005 f8ce 	bl	801473c <nk_vec2>
 800f5a0:	eeb0 7a40 	vmov.f32	s14, s0
 800f5a4:	eef0 7a60 	vmov.f32	s15, s1
 800f5a8:	ed87 7a05 	vstr	s14, [r7, #20]
 800f5ac:	edc7 7a06 	vstr	s15, [r7, #24]
    nk_widget_text(out, *content, txt, len, &text, text_alignment, font);
 800f5b0:	f107 0214 	add.w	r2, r7, #20
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	ed93 6a00 	vldr	s12, [r3]
 800f5ba:	edd3 6a01 	vldr	s13, [r3, #4]
 800f5be:	ed93 7a02 	vldr	s14, [r3, #8]
 800f5c2:	edd3 7a03 	vldr	s15, [r3, #12]
 800f5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f5d4:	eeb0 0a46 	vmov.f32	s0, s12
 800f5d8:	eef0 0a66 	vmov.f32	s1, s13
 800f5dc:	eeb0 1a47 	vmov.f32	s2, s14
 800f5e0:	eef0 1a67 	vmov.f32	s3, s15
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f00b fe77 	bl	801b2d8 <nk_widget_text>
}
 800f5ea:	bf00      	nop
 800f5ec:	3728      	adds	r7, #40	; 0x28
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	00000000 	.word	0x00000000

0800f5f8 <nk_do_button_text>:
nk_do_button_text(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    const char *string, int len, nk_flags align, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b094      	sub	sp, #80	; 0x50
 800f5fc:	af06      	add	r7, sp, #24
 800f5fe:	61f8      	str	r0, [r7, #28]
 800f600:	61b9      	str	r1, [r7, #24]
 800f602:	eeb0 6a40 	vmov.f32	s12, s0
 800f606:	eef0 6a60 	vmov.f32	s13, s1
 800f60a:	eeb0 7a41 	vmov.f32	s14, s2
 800f60e:	eef0 7a61 	vmov.f32	s15, s3
 800f612:	607a      	str	r2, [r7, #4]
 800f614:	603b      	str	r3, [r7, #0]
 800f616:	ed87 6a02 	vstr	s12, [r7, #8]
 800f61a:	edc7 6a03 	vstr	s13, [r7, #12]
 800f61e:	ed87 7a04 	vstr	s14, [r7, #16]
 800f622:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect content;
    int ret = nk_false;
 800f626:	2300      	movs	r3, #0
 800f628:	637b      	str	r3, [r7, #52]	; 0x34

    NK_ASSERT(state);
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d105      	bne.n	800f63c <nk_do_button_text+0x44>
 800f630:	4b43      	ldr	r3, [pc, #268]	; (800f740 <nk_do_button_text+0x148>)
 800f632:	4a44      	ldr	r2, [pc, #272]	; (800f744 <nk_do_button_text+0x14c>)
 800f634:	21ad      	movs	r1, #173	; 0xad
 800f636:	4844      	ldr	r0, [pc, #272]	; (800f748 <nk_do_button_text+0x150>)
 800f638:	f00e fd04 	bl	801e044 <__assert_func>
    NK_ASSERT(style);
 800f63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d105      	bne.n	800f64e <nk_do_button_text+0x56>
 800f642:	4b42      	ldr	r3, [pc, #264]	; (800f74c <nk_do_button_text+0x154>)
 800f644:	4a3f      	ldr	r2, [pc, #252]	; (800f744 <nk_do_button_text+0x14c>)
 800f646:	21ae      	movs	r1, #174	; 0xae
 800f648:	483f      	ldr	r0, [pc, #252]	; (800f748 <nk_do_button_text+0x150>)
 800f64a:	f00e fcfb 	bl	801e044 <__assert_func>
    NK_ASSERT(out);
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d105      	bne.n	800f660 <nk_do_button_text+0x68>
 800f654:	4b3e      	ldr	r3, [pc, #248]	; (800f750 <nk_do_button_text+0x158>)
 800f656:	4a3b      	ldr	r2, [pc, #236]	; (800f744 <nk_do_button_text+0x14c>)
 800f658:	21af      	movs	r1, #175	; 0xaf
 800f65a:	483b      	ldr	r0, [pc, #236]	; (800f748 <nk_do_button_text+0x150>)
 800f65c:	f00e fcf2 	bl	801e044 <__assert_func>
    NK_ASSERT(string);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d105      	bne.n	800f672 <nk_do_button_text+0x7a>
 800f666:	4b3b      	ldr	r3, [pc, #236]	; (800f754 <nk_do_button_text+0x15c>)
 800f668:	4a36      	ldr	r2, [pc, #216]	; (800f744 <nk_do_button_text+0x14c>)
 800f66a:	21b0      	movs	r1, #176	; 0xb0
 800f66c:	4836      	ldr	r0, [pc, #216]	; (800f748 <nk_do_button_text+0x150>)
 800f66e:	f00e fce9 	bl	801e044 <__assert_func>
    NK_ASSERT(font);
 800f672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f674:	2b00      	cmp	r3, #0
 800f676:	d105      	bne.n	800f684 <nk_do_button_text+0x8c>
 800f678:	4b37      	ldr	r3, [pc, #220]	; (800f758 <nk_do_button_text+0x160>)
 800f67a:	4a32      	ldr	r2, [pc, #200]	; (800f744 <nk_do_button_text+0x14c>)
 800f67c:	21b1      	movs	r1, #177	; 0xb1
 800f67e:	4832      	ldr	r0, [pc, #200]	; (800f748 <nk_do_button_text+0x150>)
 800f680:	f00e fce0 	bl	801e044 <__assert_func>
    if (!out || !style || !font || !string)
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d008      	beq.n	800f69c <nk_do_button_text+0xa4>
 800f68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d005      	beq.n	800f69c <nk_do_button_text+0xa4>
 800f690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f692:	2b00      	cmp	r3, #0
 800f694:	d002      	beq.n	800f69c <nk_do_button_text+0xa4>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d101      	bne.n	800f6a0 <nk_do_button_text+0xa8>
        return nk_false;
 800f69c:	2300      	movs	r3, #0
 800f69e:	e04b      	b.n	800f738 <nk_do_button_text+0x140>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800f6a0:	ed97 6a02 	vldr	s12, [r7, #8]
 800f6a4:	edd7 6a03 	vldr	s13, [r7, #12]
 800f6a8:	ed97 7a04 	vldr	s14, [r7, #16]
 800f6ac:	edd7 7a05 	vldr	s15, [r7, #20]
 800f6b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6b4:	9301      	str	r3, [sp, #4]
 800f6b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6c0:	eeb0 0a46 	vmov.f32	s0, s12
 800f6c4:	eef0 0a66 	vmov.f32	s1, s13
 800f6c8:	eeb0 1a47 	vmov.f32	s2, s14
 800f6cc:	eef0 1a67 	vmov.f32	s3, s15
 800f6d0:	69b9      	ldr	r1, [r7, #24]
 800f6d2:	69f8      	ldr	r0, [r7, #28]
 800f6d4:	f7ff fe50 	bl	800f378 <nk_do_button>
 800f6d8:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800f6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d007      	beq.n	800f6f4 <nk_do_button_text+0xfc>
 800f6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6ec:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f6f0:	69b8      	ldr	r0, [r7, #24]
 800f6f2:	4798      	blx	r3
    nk_draw_button_text(out, &bounds, &content, *state, style, string, len, align, font);
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	6818      	ldr	r0, [r3, #0]
 800f6f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f6fc:	f107 0108 	add.w	r1, r7, #8
 800f700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f702:	9304      	str	r3, [sp, #16]
 800f704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f706:	9303      	str	r3, [sp, #12]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	9302      	str	r3, [sp, #8]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	9301      	str	r3, [sp, #4]
 800f710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f712:	9300      	str	r3, [sp, #0]
 800f714:	4603      	mov	r3, r0
 800f716:	69b8      	ldr	r0, [r7, #24]
 800f718:	f7ff ff0e 	bl	800f538 <nk_draw_button_text>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800f71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f71e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f722:	2b00      	cmp	r3, #0
 800f724:	d007      	beq.n	800f736 <nk_do_button_text+0x13e>
 800f726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f72c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f72e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f732:	69b8      	ldr	r0, [r7, #24]
 800f734:	4798      	blx	r3
    return ret;
 800f736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3738      	adds	r7, #56	; 0x38
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	08021b9c 	.word	0x08021b9c
 800f744:	08023824 	.word	0x08023824
 800f748:	08021b80 	.word	0x08021b80
 800f74c:	08021b78 	.word	0x08021b78
 800f750:	08021ba4 	.word	0x08021ba4
 800f754:	08021ba8 	.word	0x08021ba8
 800f758:	08021bb0 	.word	0x08021bb0

0800f75c <nk_draw_button_symbol>:
NK_LIB void
nk_draw_button_symbol(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content,
    nk_flags state, const struct nk_style_button *style,
    enum nk_symbol_type type, const struct nk_user_font *font)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b08a      	sub	sp, #40	; 0x28
 800f760:	af02      	add	r7, sp, #8
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
 800f768:	603b      	str	r3, [r7, #0]
    struct nk_color sym, bg;
    const struct nk_style_item *background;

    /* select correct colors/images */
    background = nk_draw_button(out, bounds, state, style);
 800f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76c:	683a      	ldr	r2, [r7, #0]
 800f76e:	68b9      	ldr	r1, [r7, #8]
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f7ff fd67 	bl	800f244 <nk_draw_button>
 800f776:	61f8      	str	r0, [r7, #28]
    if (background->type == NK_STYLE_ITEM_COLOR)
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d103      	bne.n	800f788 <nk_draw_button_symbol+0x2c>
        bg = background->data.color;
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	617b      	str	r3, [r7, #20]
 800f786:	e002      	b.n	800f78e <nk_draw_button_symbol+0x32>
    else bg = style->text_background;
 800f788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f78c:	617b      	str	r3, [r7, #20]

    if (state & NK_WIDGET_STATE_HOVER)
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	f003 0310 	and.w	r3, r3, #16
 800f794:	2b00      	cmp	r3, #0
 800f796:	d003      	beq.n	800f7a0 <nk_draw_button_symbol+0x44>
        sym = style->text_hover;
 800f798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f79c:	61bb      	str	r3, [r7, #24]
 800f79e:	e00b      	b.n	800f7b8 <nk_draw_button_symbol+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	f003 0320 	and.w	r3, r3, #32
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d003      	beq.n	800f7b2 <nk_draw_button_symbol+0x56>
        sym = style->text_active;
 800f7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7ae:	61bb      	str	r3, [r7, #24]
 800f7b0:	e002      	b.n	800f7b8 <nk_draw_button_symbol+0x5c>
    else sym = style->text_normal;
 800f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7b6:	61bb      	str	r3, [r7, #24]
    nk_draw_symbol(out, type, *content, bg, sym, 1, font);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	ed93 6a00 	vldr	s12, [r3]
 800f7be:	edd3 6a01 	vldr	s13, [r3, #4]
 800f7c2:	ed93 7a02 	vldr	s14, [r3, #8]
 800f7c6:	edd3 7a03 	vldr	s15, [r3, #12]
 800f7ca:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d0:	9300      	str	r3, [sp, #0]
 800f7d2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	eeb0 0a46 	vmov.f32	s0, s12
 800f7de:	eef0 0a66 	vmov.f32	s1, s13
 800f7e2:	eeb0 1a47 	vmov.f32	s2, s14
 800f7e6:	eef0 1a67 	vmov.f32	s3, s15
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7ff fae2 	bl	800edb4 <nk_draw_symbol>
}
 800f7f0:	bf00      	nop
 800f7f2:	3720      	adds	r7, #32
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <nk_do_button_symbol>:
nk_do_button_symbol(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    enum nk_symbol_type symbol, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b092      	sub	sp, #72	; 0x48
 800f7fc:	af04      	add	r7, sp, #16
 800f7fe:	61f8      	str	r0, [r7, #28]
 800f800:	61b9      	str	r1, [r7, #24]
 800f802:	eeb0 6a40 	vmov.f32	s12, s0
 800f806:	eef0 6a60 	vmov.f32	s13, s1
 800f80a:	eeb0 7a41 	vmov.f32	s14, s2
 800f80e:	eef0 7a61 	vmov.f32	s15, s3
 800f812:	4611      	mov	r1, r2
 800f814:	461a      	mov	r2, r3
 800f816:	ed87 6a02 	vstr	s12, [r7, #8]
 800f81a:	edc7 6a03 	vstr	s13, [r7, #12]
 800f81e:	ed87 7a04 	vstr	s14, [r7, #16]
 800f822:	edc7 7a05 	vstr	s15, [r7, #20]
 800f826:	460b      	mov	r3, r1
 800f828:	71fb      	strb	r3, [r7, #7]
 800f82a:	4613      	mov	r3, r2
 800f82c:	71bb      	strb	r3, [r7, #6]
    int ret;
    struct nk_rect content;

    NK_ASSERT(state);
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d105      	bne.n	800f840 <nk_do_button_symbol+0x48>
 800f834:	4b3c      	ldr	r3, [pc, #240]	; (800f928 <nk_do_button_symbol+0x130>)
 800f836:	4a3d      	ldr	r2, [pc, #244]	; (800f92c <nk_do_button_symbol+0x134>)
 800f838:	21db      	movs	r1, #219	; 0xdb
 800f83a:	483d      	ldr	r0, [pc, #244]	; (800f930 <nk_do_button_symbol+0x138>)
 800f83c:	f00e fc02 	bl	801e044 <__assert_func>
    NK_ASSERT(style);
 800f840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f842:	2b00      	cmp	r3, #0
 800f844:	d105      	bne.n	800f852 <nk_do_button_symbol+0x5a>
 800f846:	4b3b      	ldr	r3, [pc, #236]	; (800f934 <nk_do_button_symbol+0x13c>)
 800f848:	4a38      	ldr	r2, [pc, #224]	; (800f92c <nk_do_button_symbol+0x134>)
 800f84a:	21dc      	movs	r1, #220	; 0xdc
 800f84c:	4838      	ldr	r0, [pc, #224]	; (800f930 <nk_do_button_symbol+0x138>)
 800f84e:	f00e fbf9 	bl	801e044 <__assert_func>
    NK_ASSERT(font);
 800f852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f854:	2b00      	cmp	r3, #0
 800f856:	d105      	bne.n	800f864 <nk_do_button_symbol+0x6c>
 800f858:	4b37      	ldr	r3, [pc, #220]	; (800f938 <nk_do_button_symbol+0x140>)
 800f85a:	4a34      	ldr	r2, [pc, #208]	; (800f92c <nk_do_button_symbol+0x134>)
 800f85c:	21dd      	movs	r1, #221	; 0xdd
 800f85e:	4834      	ldr	r0, [pc, #208]	; (800f930 <nk_do_button_symbol+0x138>)
 800f860:	f00e fbf0 	bl	801e044 <__assert_func>
    NK_ASSERT(out);
 800f864:	69bb      	ldr	r3, [r7, #24]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d105      	bne.n	800f876 <nk_do_button_symbol+0x7e>
 800f86a:	4b34      	ldr	r3, [pc, #208]	; (800f93c <nk_do_button_symbol+0x144>)
 800f86c:	4a2f      	ldr	r2, [pc, #188]	; (800f92c <nk_do_button_symbol+0x134>)
 800f86e:	21de      	movs	r1, #222	; 0xde
 800f870:	482f      	ldr	r0, [pc, #188]	; (800f930 <nk_do_button_symbol+0x138>)
 800f872:	f00e fbe7 	bl	801e044 <__assert_func>
    if (!out || !style || !font || !state)
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d008      	beq.n	800f88e <nk_do_button_symbol+0x96>
 800f87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d005      	beq.n	800f88e <nk_do_button_symbol+0x96>
 800f882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f884:	2b00      	cmp	r3, #0
 800f886:	d002      	beq.n	800f88e <nk_do_button_symbol+0x96>
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d101      	bne.n	800f892 <nk_do_button_symbol+0x9a>
        return nk_false;
 800f88e:	2300      	movs	r3, #0
 800f890:	e046      	b.n	800f920 <nk_do_button_symbol+0x128>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800f892:	ed97 6a02 	vldr	s12, [r7, #8]
 800f896:	edd7 6a03 	vldr	s13, [r7, #12]
 800f89a:	ed97 7a04 	vldr	s14, [r7, #16]
 800f89e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f8a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8a6:	9301      	str	r3, [sp, #4]
 800f8a8:	79bb      	ldrb	r3, [r7, #6]
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8b0:	eeb0 0a46 	vmov.f32	s0, s12
 800f8b4:	eef0 0a66 	vmov.f32	s1, s13
 800f8b8:	eeb0 1a47 	vmov.f32	s2, s14
 800f8bc:	eef0 1a67 	vmov.f32	s3, s15
 800f8c0:	69b9      	ldr	r1, [r7, #24]
 800f8c2:	69f8      	ldr	r0, [r7, #28]
 800f8c4:	f7ff fd58 	bl	800f378 <nk_do_button>
 800f8c8:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800f8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d007      	beq.n	800f8e4 <nk_do_button_symbol+0xec>
 800f8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f8e0:	69b8      	ldr	r0, [r7, #24]
 800f8e2:	4798      	blx	r3
    nk_draw_button_symbol(out, &bounds, &content, *state, style, symbol, font);
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	6818      	ldr	r0, [r3, #0]
 800f8e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f8ec:	f107 0108 	add.w	r1, r7, #8
 800f8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8f2:	9302      	str	r3, [sp, #8]
 800f8f4:	79fb      	ldrb	r3, [r7, #7]
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	69b8      	ldr	r0, [r7, #24]
 800f900:	f7ff ff2c 	bl	800f75c <nk_draw_button_symbol>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800f904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d007      	beq.n	800f91e <nk_do_button_symbol+0x126>
 800f90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f916:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f91a:	69b8      	ldr	r0, [r7, #24]
 800f91c:	4798      	blx	r3
    return ret;
 800f91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f920:	4618      	mov	r0, r3
 800f922:	3738      	adds	r7, #56	; 0x38
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	08021b9c 	.word	0x08021b9c
 800f92c:	08023838 	.word	0x08023838
 800f930:	08021b80 	.word	0x08021b80
 800f934:	08021b78 	.word	0x08021b78
 800f938:	08021bb0 	.word	0x08021bb0
 800f93c:	08021ba4 	.word	0x08021ba4

0800f940 <nk_button_set_behavior>:
    if (style->draw_end) style->draw_end(out, style->userdata);
    return ret;
}
NK_API void
nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d106      	bne.n	800f960 <nk_button_set_behavior+0x20>
 800f952:	4b0b      	ldr	r3, [pc, #44]	; (800f980 <nk_button_set_behavior+0x40>)
 800f954:	4a0b      	ldr	r2, [pc, #44]	; (800f984 <nk_button_set_behavior+0x44>)
 800f956:	f240 118b 	movw	r1, #395	; 0x18b
 800f95a:	480b      	ldr	r0, [pc, #44]	; (800f988 <nk_button_set_behavior+0x48>)
 800f95c:	f00e fb72 	bl	801e044 <__assert_func>
    if (!ctx) return;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d007      	beq.n	800f976 <nk_button_set_behavior+0x36>
    ctx->button_behavior = behavior;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f96c:	461a      	mov	r2, r3
 800f96e:	78fb      	ldrb	r3, [r7, #3]
 800f970:	f882 3ad8 	strb.w	r3, [r2, #2776]	; 0xad8
 800f974:	e000      	b.n	800f978 <nk_button_set_behavior+0x38>
    if (!ctx) return;
 800f976:	bf00      	nop
}
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	08021bb8 	.word	0x08021bb8
 800f984:	0802384c 	.word	0x0802384c
 800f988:	08021b80 	.word	0x08021b80

0800f98c <nk_button_text_styled>:
    return 1;
}
NK_API nk_bool
nk_button_text_styled(struct nk_context *ctx,
    const struct nk_style_button *style, const char *title, int len)
{
 800f98c:	b590      	push	{r4, r7, lr}
 800f98e:	b093      	sub	sp, #76	; 0x4c
 800f990:	af06      	add	r7, sp, #24
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
 800f998:	603b      	str	r3, [r7, #0]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d106      	bne.n	800f9ae <nk_button_text_styled+0x22>
 800f9a0:	4b4f      	ldr	r3, [pc, #316]	; (800fae0 <nk_button_text_styled+0x154>)
 800f9a2:	4a50      	ldr	r2, [pc, #320]	; (800fae4 <nk_button_text_styled+0x158>)
 800f9a4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800f9a8:	484f      	ldr	r0, [pc, #316]	; (800fae8 <nk_button_text_styled+0x15c>)
 800f9aa:	f00e fb4b 	bl	801e044 <__assert_func>
    NK_ASSERT(style);
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <nk_button_text_styled+0x36>
 800f9b4:	4b4d      	ldr	r3, [pc, #308]	; (800faec <nk_button_text_styled+0x160>)
 800f9b6:	4a4b      	ldr	r2, [pc, #300]	; (800fae4 <nk_button_text_styled+0x158>)
 800f9b8:	f240 11c1 	movw	r1, #449	; 0x1c1
 800f9bc:	484a      	ldr	r0, [pc, #296]	; (800fae8 <nk_button_text_styled+0x15c>)
 800f9be:	f00e fb41 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9c8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d106      	bne.n	800f9de <nk_button_text_styled+0x52>
 800f9d0:	4b47      	ldr	r3, [pc, #284]	; (800faf0 <nk_button_text_styled+0x164>)
 800f9d2:	4a44      	ldr	r2, [pc, #272]	; (800fae4 <nk_button_text_styled+0x158>)
 800f9d4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800f9d8:	4843      	ldr	r0, [pc, #268]	; (800fae8 <nk_button_text_styled+0x15c>)
 800f9da:	f00e fb33 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9e4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d106      	bne.n	800f9fe <nk_button_text_styled+0x72>
 800f9f0:	4b40      	ldr	r3, [pc, #256]	; (800faf4 <nk_button_text_styled+0x168>)
 800f9f2:	4a3c      	ldr	r2, [pc, #240]	; (800fae4 <nk_button_text_styled+0x158>)
 800f9f4:	f240 11c3 	movw	r1, #451	; 0x1c3
 800f9f8:	483b      	ldr	r0, [pc, #236]	; (800fae8 <nk_button_text_styled+0x15c>)
 800f9fa:	f00e fb23 	bl	801e044 <__assert_func>
    if (!style || !ctx || !ctx->current || !ctx->current->layout) return 0;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d012      	beq.n	800fa2a <nk_button_text_styled+0x9e>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d00f      	beq.n	800fa2a <nk_button_text_styled+0x9e>
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fa10:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d008      	beq.n	800fa2a <nk_button_text_styled+0x9e>
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fa1e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fa22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d101      	bne.n	800fa2e <nk_button_text_styled+0xa2>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	e054      	b.n	800fad8 <nk_button_text_styled+0x14c>

    win = ctx->current;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fa34:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fa38:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa40:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800fa42:	f107 0310 	add.w	r3, r7, #16
 800fa46:	68f9      	ldr	r1, [r7, #12]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f00d f813 	bl	801ca74 <nk_widget>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!state) return 0;
 800fa54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d101      	bne.n	800fa60 <nk_button_text_styled+0xd4>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	e03b      	b.n	800fad8 <nk_button_text_styled+0x14c>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800fa60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa64:	2b02      	cmp	r3, #2
 800fa66:	d007      	beq.n	800fa78 <nk_button_text_styled+0xec>
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <nk_button_text_styled+0xec>
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	e000      	b.n	800fa7a <nk_button_text_styled+0xee>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	623b      	str	r3, [r7, #32]
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800fa82:	3014      	adds	r0, #20
 800fa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa86:	f103 0464 	add.w	r4, r3, #100	; 0x64
                    title, len, style->text_alignment, ctx->button_behavior,
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa94:	f892 2ad8 	ldrb.w	r2, [r2, #2776]	; 0xad8
 800fa98:	68f9      	ldr	r1, [r7, #12]
 800fa9a:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
 800fa9e:	ed97 6a04 	vldr	s12, [r7, #16]
 800faa2:	edd7 6a05 	vldr	s13, [r7, #20]
 800faa6:	ed97 7a06 	vldr	s14, [r7, #24]
 800faaa:	edd7 7a07 	vldr	s15, [r7, #28]
 800faae:	9104      	str	r1, [sp, #16]
 800fab0:	6a39      	ldr	r1, [r7, #32]
 800fab2:	9103      	str	r1, [sp, #12]
 800fab4:	68b9      	ldr	r1, [r7, #8]
 800fab6:	9102      	str	r1, [sp, #8]
 800fab8:	9201      	str	r2, [sp, #4]
 800faba:	9300      	str	r3, [sp, #0]
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	687a      	ldr	r2, [r7, #4]
 800fac0:	eeb0 0a46 	vmov.f32	s0, s12
 800fac4:	eef0 0a66 	vmov.f32	s1, s13
 800fac8:	eeb0 1a47 	vmov.f32	s2, s14
 800facc:	eef0 1a67 	vmov.f32	s3, s15
 800fad0:	4621      	mov	r1, r4
 800fad2:	f7ff fd91 	bl	800f5f8 <nk_do_button_text>
 800fad6:	4603      	mov	r3, r0
                    style, in, ctx->style.font);
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3734      	adds	r7, #52	; 0x34
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd90      	pop	{r4, r7, pc}
 800fae0:	08021bb8 	.word	0x08021bb8
 800fae4:	08023864 	.word	0x08023864
 800fae8:	08021b80 	.word	0x08021b80
 800faec:	08021b78 	.word	0x08021b78
 800faf0:	08021c34 	.word	0x08021c34
 800faf4:	08021c44 	.word	0x08021c44

0800faf8 <nk_button_text>:
NK_API nk_bool
nk_button_text(struct nk_context *ctx, const char *title, int len)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	607a      	str	r2, [r7, #4]
    NK_ASSERT(ctx);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d106      	bne.n	800fb18 <nk_button_text+0x20>
 800fb0a:	4b0c      	ldr	r3, [pc, #48]	; (800fb3c <nk_button_text+0x44>)
 800fb0c:	4a0c      	ldr	r2, [pc, #48]	; (800fb40 <nk_button_text+0x48>)
 800fb0e:	f240 11d3 	movw	r1, #467	; 0x1d3
 800fb12:	480c      	ldr	r0, [pc, #48]	; (800fb44 <nk_button_text+0x4c>)
 800fb14:	f00e fa96 	bl	801e044 <__assert_func>
    if (!ctx) return 0;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d101      	bne.n	800fb22 <nk_button_text+0x2a>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	e008      	b.n	800fb34 <nk_button_text+0x3c>
    return nk_button_text_styled(ctx, &ctx->style.button, title, len);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	68f8      	ldr	r0, [r7, #12]
 800fb2e:	f7ff ff2d 	bl	800f98c <nk_button_text_styled>
 800fb32:	4603      	mov	r3, r0
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	08021bb8 	.word	0x08021bb8
 800fb40:	0802387c 	.word	0x0802387c
 800fb44:	08021b80 	.word	0x08021b80

0800fb48 <nk_button_label>:
    const struct nk_style_button *style, const char *title)
{
    return nk_button_text_styled(ctx, style, title, nk_strlen(title));
}
NK_API nk_bool nk_button_label(struct nk_context *ctx, const char *title)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
    return nk_button_text(ctx, title, nk_strlen(title));
 800fb52:	6838      	ldr	r0, [r7, #0]
 800fb54:	f00c fd9c 	bl	801c690 <nk_strlen>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7ff ffca 	bl	800faf8 <nk_button_text>
 800fb64:	4603      	mov	r3, r0
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
	...

0800fb70 <nk_button_symbol_styled>:
    return ret;
}
NK_API nk_bool
nk_button_symbol_styled(struct nk_context *ctx,
    const struct nk_style_button *style, enum nk_symbol_type symbol)
{
 800fb70:	b590      	push	{r4, r7, lr}
 800fb72:	b091      	sub	sp, #68	; 0x44
 800fb74:	af04      	add	r7, sp, #16
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	71fb      	strb	r3, [r7, #7]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d106      	bne.n	800fb92 <nk_button_symbol_styled+0x22>
 800fb84:	4b46      	ldr	r3, [pc, #280]	; (800fca0 <nk_button_symbol_styled+0x130>)
 800fb86:	4a47      	ldr	r2, [pc, #284]	; (800fca4 <nk_button_symbol_styled+0x134>)
 800fb88:	f240 210e 	movw	r1, #526	; 0x20e
 800fb8c:	4846      	ldr	r0, [pc, #280]	; (800fca8 <nk_button_symbol_styled+0x138>)
 800fb8e:	f00e fa59 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb98:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d106      	bne.n	800fbae <nk_button_symbol_styled+0x3e>
 800fba0:	4b42      	ldr	r3, [pc, #264]	; (800fcac <nk_button_symbol_styled+0x13c>)
 800fba2:	4a40      	ldr	r2, [pc, #256]	; (800fca4 <nk_button_symbol_styled+0x134>)
 800fba4:	f240 210f 	movw	r1, #527	; 0x20f
 800fba8:	483f      	ldr	r0, [pc, #252]	; (800fca8 <nk_button_symbol_styled+0x138>)
 800fbaa:	f00e fa4b 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fbb4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fbb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d106      	bne.n	800fbce <nk_button_symbol_styled+0x5e>
 800fbc0:	4b3b      	ldr	r3, [pc, #236]	; (800fcb0 <nk_button_symbol_styled+0x140>)
 800fbc2:	4a38      	ldr	r2, [pc, #224]	; (800fca4 <nk_button_symbol_styled+0x134>)
 800fbc4:	f44f 7104 	mov.w	r1, #528	; 0x210
 800fbc8:	4837      	ldr	r0, [pc, #220]	; (800fca8 <nk_button_symbol_styled+0x138>)
 800fbca:	f00e fa3b 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d00f      	beq.n	800fbf4 <nk_button_symbol_styled+0x84>
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fbda:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d008      	beq.n	800fbf4 <nk_button_symbol_styled+0x84>
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fbe8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fbec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d101      	bne.n	800fbf8 <nk_button_symbol_styled+0x88>
        return 0;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	e04f      	b.n	800fc98 <nk_button_symbol_styled+0x128>

    win = ctx->current;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fbfe:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fc02:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc0a:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800fc0c:	f107 0310 	add.w	r3, r7, #16
 800fc10:	68f9      	ldr	r1, [r7, #12]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f00c ff2e 	bl	801ca74 <nk_widget>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return 0;
 800fc1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d101      	bne.n	800fc2a <nk_button_symbol_styled+0xba>
 800fc26:	2300      	movs	r3, #0
 800fc28:	e036      	b.n	800fc98 <nk_button_symbol_styled+0x128>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800fc2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d007      	beq.n	800fc42 <nk_button_symbol_styled+0xd2>
 800fc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d101      	bne.n	800fc42 <nk_button_symbol_styled+0xd2>
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	e000      	b.n	800fc44 <nk_button_symbol_styled+0xd4>
 800fc42:	2300      	movs	r3, #0
 800fc44:	623b      	str	r3, [r7, #32]
    return nk_do_button_symbol(&ctx->last_widget_state, &win->buffer, bounds,
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800fc4c:	3014      	adds	r0, #20
 800fc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc50:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc5a:	f893 4ad8 	ldrb.w	r4, [r3, #2776]	; 0xad8
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800fc64:	79fa      	ldrb	r2, [r7, #7]
 800fc66:	ed97 6a04 	vldr	s12, [r7, #16]
 800fc6a:	edd7 6a05 	vldr	s13, [r7, #20]
 800fc6e:	ed97 7a06 	vldr	s14, [r7, #24]
 800fc72:	edd7 7a07 	vldr	s15, [r7, #28]
 800fc76:	9302      	str	r3, [sp, #8]
 800fc78:	6a3b      	ldr	r3, [r7, #32]
 800fc7a:	9301      	str	r3, [sp, #4]
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	9300      	str	r3, [sp, #0]
 800fc80:	4623      	mov	r3, r4
 800fc82:	eeb0 0a46 	vmov.f32	s0, s12
 800fc86:	eef0 0a66 	vmov.f32	s1, s13
 800fc8a:	eeb0 1a47 	vmov.f32	s2, s14
 800fc8e:	eef0 1a67 	vmov.f32	s3, s15
 800fc92:	f7ff fdb1 	bl	800f7f8 <nk_do_button_symbol>
 800fc96:	4603      	mov	r3, r0
            symbol, ctx->button_behavior, style, in, ctx->style.font);
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3734      	adds	r7, #52	; 0x34
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd90      	pop	{r4, r7, pc}
 800fca0:	08021bb8 	.word	0x08021bb8
 800fca4:	0802388c 	.word	0x0802388c
 800fca8:	08021b80 	.word	0x08021b80
 800fcac:	08021c34 	.word	0x08021c34
 800fcb0:	08021c44 	.word	0x08021c44

0800fcb4 <nk_button_symbol>:
NK_API nk_bool
nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <nk_button_symbol+0x20>
 800fcc6:	4b0c      	ldr	r3, [pc, #48]	; (800fcf8 <nk_button_symbol+0x44>)
 800fcc8:	4a0c      	ldr	r2, [pc, #48]	; (800fcfc <nk_button_symbol+0x48>)
 800fcca:	f240 211f 	movw	r1, #543	; 0x21f
 800fcce:	480c      	ldr	r0, [pc, #48]	; (800fd00 <nk_button_symbol+0x4c>)
 800fcd0:	f00e f9b8 	bl	801e044 <__assert_func>
    if (!ctx) return 0;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <nk_button_symbol+0x2a>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e008      	b.n	800fcf0 <nk_button_symbol+0x3c>
    return nk_button_symbol_styled(ctx, &ctx->style.button, symbol);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800fce4:	78fa      	ldrb	r2, [r7, #3]
 800fce6:	4619      	mov	r1, r3
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7ff ff41 	bl	800fb70 <nk_button_symbol_styled>
 800fcee:	4603      	mov	r3, r0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	08021bb8 	.word	0x08021bb8
 800fcfc:	080238a4 	.word	0x080238a4
 800fd00:	08021b80 	.word	0x08021b80

0800fd04 <nk_rgba>:
    }
    return i;
}
NK_API struct nk_color
nk_rgba(int r, int g, int b, int a)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b087      	sub	sp, #28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
 800fd10:	603b      	str	r3, [r7, #0]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	db07      	blt.n	800fd28 <nk_rgba+0x24>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2bfe      	cmp	r3, #254	; 0xfe
 800fd1c:	dc02      	bgt.n	800fd24 <nk_rgba+0x20>
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	e002      	b.n	800fd2a <nk_rgba+0x26>
 800fd24:	23ff      	movs	r3, #255	; 0xff
 800fd26:	e000      	b.n	800fd2a <nk_rgba+0x26>
 800fd28:	2300      	movs	r3, #0
 800fd2a:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	db07      	blt.n	800fd42 <nk_rgba+0x3e>
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	2bfe      	cmp	r3, #254	; 0xfe
 800fd36:	dc02      	bgt.n	800fd3e <nk_rgba+0x3a>
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	e002      	b.n	800fd44 <nk_rgba+0x40>
 800fd3e:	23ff      	movs	r3, #255	; 0xff
 800fd40:	e000      	b.n	800fd44 <nk_rgba+0x40>
 800fd42:	2300      	movs	r3, #0
 800fd44:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	db07      	blt.n	800fd5c <nk_rgba+0x58>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2bfe      	cmp	r3, #254	; 0xfe
 800fd50:	dc02      	bgt.n	800fd58 <nk_rgba+0x54>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	e002      	b.n	800fd5e <nk_rgba+0x5a>
 800fd58:	23ff      	movs	r3, #255	; 0xff
 800fd5a:	e000      	b.n	800fd5e <nk_rgba+0x5a>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	db07      	blt.n	800fd76 <nk_rgba+0x72>
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	2bfe      	cmp	r3, #254	; 0xfe
 800fd6a:	dc02      	bgt.n	800fd72 <nk_rgba+0x6e>
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	e002      	b.n	800fd78 <nk_rgba+0x74>
 800fd72:	23ff      	movs	r3, #255	; 0xff
 800fd74:	e000      	b.n	800fd78 <nk_rgba+0x74>
 800fd76:	2300      	movs	r3, #0
 800fd78:	74fb      	strb	r3, [r7, #19]
    return ret;
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	617b      	str	r3, [r7, #20]
 800fd7e:	2300      	movs	r3, #0
 800fd80:	7d3a      	ldrb	r2, [r7, #20]
 800fd82:	f362 0307 	bfi	r3, r2, #0, #8
 800fd86:	7d7a      	ldrb	r2, [r7, #21]
 800fd88:	f362 230f 	bfi	r3, r2, #8, #8
 800fd8c:	7dba      	ldrb	r2, [r7, #22]
 800fd8e:	f362 4317 	bfi	r3, r2, #16, #8
 800fd92:	7dfa      	ldrb	r2, [r7, #23]
 800fd94:	f362 631f 	bfi	r3, r2, #24, #8
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	371c      	adds	r7, #28
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <nk_rgb>:
{
    return nk_rgba(c[0], c[1], c[2], c[3]);
}
NK_API struct nk_color
nk_rgb(int r, int g, int b)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b087      	sub	sp, #28
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	db07      	blt.n	800fdc6 <nk_rgb+0x22>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2bfe      	cmp	r3, #254	; 0xfe
 800fdba:	dc02      	bgt.n	800fdc2 <nk_rgb+0x1e>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	e002      	b.n	800fdc8 <nk_rgb+0x24>
 800fdc2:	23ff      	movs	r3, #255	; 0xff
 800fdc4:	e000      	b.n	800fdc8 <nk_rgb+0x24>
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	db07      	blt.n	800fde0 <nk_rgb+0x3c>
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	2bfe      	cmp	r3, #254	; 0xfe
 800fdd4:	dc02      	bgt.n	800fddc <nk_rgb+0x38>
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	e002      	b.n	800fde2 <nk_rgb+0x3e>
 800fddc:	23ff      	movs	r3, #255	; 0xff
 800fdde:	e000      	b.n	800fde2 <nk_rgb+0x3e>
 800fde0:	2300      	movs	r3, #0
 800fde2:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	db07      	blt.n	800fdfa <nk_rgb+0x56>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2bfe      	cmp	r3, #254	; 0xfe
 800fdee:	dc02      	bgt.n	800fdf6 <nk_rgb+0x52>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	e002      	b.n	800fdfc <nk_rgb+0x58>
 800fdf6:	23ff      	movs	r3, #255	; 0xff
 800fdf8:	e000      	b.n	800fdfc <nk_rgb+0x58>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)255;
 800fdfe:	23ff      	movs	r3, #255	; 0xff
 800fe00:	74fb      	strb	r3, [r7, #19]
    return ret;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	617b      	str	r3, [r7, #20]
 800fe06:	2300      	movs	r3, #0
 800fe08:	7d3a      	ldrb	r2, [r7, #20]
 800fe0a:	f362 0307 	bfi	r3, r2, #0, #8
 800fe0e:	7d7a      	ldrb	r2, [r7, #21]
 800fe10:	f362 230f 	bfi	r3, r2, #8, #8
 800fe14:	7dba      	ldrb	r2, [r7, #22]
 800fe16:	f362 4317 	bfi	r3, r2, #16, #8
 800fe1a:	7dfa      	ldrb	r2, [r7, #23]
 800fe1c:	f362 631f 	bfi	r3, r2, #24, #8
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	371c      	adds	r7, #28
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <nk_combo_begin>:
 *
 * ===============================================================*/
NK_INTERN nk_bool
nk_combo_begin(struct nk_context *ctx, struct nk_window *win,
    struct nk_vec2 size, nk_bool is_clicked, struct nk_rect header)
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b097      	sub	sp, #92	; 0x5c
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6278      	str	r0, [r7, #36]	; 0x24
 800fe34:	6239      	str	r1, [r7, #32]
 800fe36:	eeb0 5a40 	vmov.f32	s10, s0
 800fe3a:	eef0 5a60 	vmov.f32	s11, s1
 800fe3e:	617a      	str	r2, [r7, #20]
 800fe40:	eeb0 6a41 	vmov.f32	s12, s2
 800fe44:	eef0 6a61 	vmov.f32	s13, s3
 800fe48:	eeb0 7a42 	vmov.f32	s14, s4
 800fe4c:	eef0 7a62 	vmov.f32	s15, s5
 800fe50:	ed87 5a06 	vstr	s10, [r7, #24]
 800fe54:	edc7 5a07 	vstr	s11, [r7, #28]
 800fe58:	ed87 6a01 	vstr	s12, [r7, #4]
 800fe5c:	edc7 6a02 	vstr	s13, [r7, #8]
 800fe60:	ed87 7a03 	vstr	s14, [r7, #12]
 800fe64:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *popup;
    int is_open = 0;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	657b      	str	r3, [r7, #84]	; 0x54
    int is_active = 0;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	653b      	str	r3, [r7, #80]	; 0x50
    struct nk_rect body;
    nk_hash hash;

    NK_ASSERT(ctx);
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d105      	bne.n	800fe82 <nk_combo_begin+0x56>
 800fe76:	4b75      	ldr	r3, [pc, #468]	; (801004c <nk_combo_begin+0x220>)
 800fe78:	4a75      	ldr	r2, [pc, #468]	; (8010050 <nk_combo_begin+0x224>)
 800fe7a:	2113      	movs	r1, #19
 800fe7c:	4875      	ldr	r0, [pc, #468]	; (8010054 <nk_combo_begin+0x228>)
 800fe7e:	f00e f8e1 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 800fe82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe84:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe88:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d105      	bne.n	800fe9c <nk_combo_begin+0x70>
 800fe90:	4b71      	ldr	r3, [pc, #452]	; (8010058 <nk_combo_begin+0x22c>)
 800fe92:	4a6f      	ldr	r2, [pc, #444]	; (8010050 <nk_combo_begin+0x224>)
 800fe94:	2114      	movs	r1, #20
 800fe96:	486f      	ldr	r0, [pc, #444]	; (8010054 <nk_combo_begin+0x228>)
 800fe98:	f00e f8d4 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fea2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d105      	bne.n	800feba <nk_combo_begin+0x8e>
 800feae:	4b6b      	ldr	r3, [pc, #428]	; (801005c <nk_combo_begin+0x230>)
 800feb0:	4a67      	ldr	r2, [pc, #412]	; (8010050 <nk_combo_begin+0x224>)
 800feb2:	2115      	movs	r1, #21
 800feb4:	4867      	ldr	r0, [pc, #412]	; (8010054 <nk_combo_begin+0x228>)
 800feb6:	f00e f8c5 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800feba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00f      	beq.n	800fee0 <nk_combo_begin+0xb4>
 800fec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fec6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d008      	beq.n	800fee0 <nk_combo_begin+0xb4>
 800fece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fed4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d101      	bne.n	800fee4 <nk_combo_begin+0xb8>
        return 0;
 800fee0:	2300      	movs	r3, #0
 800fee2:	e0af      	b.n	8010044 <nk_combo_begin+0x218>

    popup = win->popup.win;
 800fee4:	6a3b      	ldr	r3, [r7, #32]
 800fee6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800feea:	64fb      	str	r3, [r7, #76]	; 0x4c
    body.x = header.x;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	62bb      	str	r3, [r7, #40]	; 0x28
    body.w = size.x;
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	633b      	str	r3, [r7, #48]	; 0x30
    body.y = header.y + header.h-ctx->style.window.combo_border;
 800fef4:	ed97 7a02 	vldr	s14, [r7, #8]
 800fef8:	edd7 7a04 	vldr	s15, [r7, #16]
 800fefc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff06:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 800ff0a:	edd3 7a00 	vldr	s15, [r3]
 800ff0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff12:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    body.h = size.y;
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	637b      	str	r3, [r7, #52]	; 0x34

    hash = win->popup.combo_count++;
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ff20:	1c59      	adds	r1, r3, #1
 800ff22:	6a3a      	ldr	r2, [r7, #32]
 800ff24:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 800ff28:	64bb      	str	r3, [r7, #72]	; 0x48
    is_open = (popup) ? nk_true:nk_false;
 800ff2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	bf14      	ite	ne
 800ff30:	2301      	movne	r3, #1
 800ff32:	2300      	moveq	r3, #0
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	657b      	str	r3, [r7, #84]	; 0x54
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 800ff38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00c      	beq.n	800ff58 <nk_combo_begin+0x12c>
 800ff3e:	6a3b      	ldr	r3, [r7, #32]
 800ff40:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ff44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d106      	bne.n	800ff58 <nk_combo_begin+0x12c>
 800ff4a:	6a3b      	ldr	r3, [r7, #32]
 800ff4c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800ff50:	2b20      	cmp	r3, #32
 800ff52:	d101      	bne.n	800ff58 <nk_combo_begin+0x12c>
 800ff54:	2301      	movs	r3, #1
 800ff56:	e000      	b.n	800ff5a <nk_combo_begin+0x12e>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	653b      	str	r3, [r7, #80]	; 0x50
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d005      	beq.n	800ff6e <nk_combo_begin+0x142>
 800ff62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d002      	beq.n	800ff6e <nk_combo_begin+0x142>
 800ff68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d00e      	beq.n	800ff8c <nk_combo_begin+0x160>
 800ff6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d002      	beq.n	800ff7a <nk_combo_begin+0x14e>
 800ff74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d008      	beq.n	800ff8c <nk_combo_begin+0x160>
 800ff7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d107      	bne.n	800ff90 <nk_combo_begin+0x164>
        (!is_open && !is_active && !is_clicked)) return 0;
 800ff80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d104      	bne.n	800ff90 <nk_combo_begin+0x164>
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d101      	bne.n	800ff90 <nk_combo_begin+0x164>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	e059      	b.n	8010044 <nk_combo_begin+0x218>
    if (!nk_nonblock_begin(ctx, 0, body,
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d01d      	beq.n	800ffd2 <nk_combo_begin+0x1a6>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800ff96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d01a      	beq.n	800ffd2 <nk_combo_begin+0x1a6>
 800ff9c:	eddf 1a30 	vldr	s3, [pc, #192]	; 8010060 <nk_combo_begin+0x234>
 800ffa0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8010060 <nk_combo_begin+0x234>
 800ffa4:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8010060 <nk_combo_begin+0x234>
 800ffa8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8010060 <nk_combo_begin+0x234>
 800ffac:	f004 fb14 	bl	80145d8 <nk_rect>
 800ffb0:	eeb0 6a40 	vmov.f32	s12, s0
 800ffb4:	eef0 6a60 	vmov.f32	s13, s1
 800ffb8:	eeb0 7a41 	vmov.f32	s14, s2
 800ffbc:	eef0 7a61 	vmov.f32	s15, s3
 800ffc0:	ed87 6a0e 	vstr	s12, [r7, #56]	; 0x38
 800ffc4:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 800ffc8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800ffcc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    if (!nk_nonblock_begin(ctx, 0, body,
 800ffd0:	e005      	b.n	800ffde <nk_combo_begin+0x1b2>
 800ffd2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800ffd6:	1d3b      	adds	r3, r7, #4
 800ffd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ffde:	ed97 4a0e 	vldr	s8, [r7, #56]	; 0x38
 800ffe2:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800ffe6:	ed97 5a10 	vldr	s10, [r7, #64]	; 0x40
 800ffea:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 800ffee:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800fff2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800fff6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800fffa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fffe:	2220      	movs	r2, #32
 8010000:	eeb0 2a44 	vmov.f32	s4, s8
 8010004:	eef0 2a64 	vmov.f32	s5, s9
 8010008:	eeb0 3a45 	vmov.f32	s6, s10
 801000c:	eef0 3a65 	vmov.f32	s7, s11
 8010010:	eeb0 0a46 	vmov.f32	s0, s12
 8010014:	eef0 0a66 	vmov.f32	s1, s13
 8010018:	eeb0 1a47 	vmov.f32	s2, s14
 801001c:	eef0 1a67 	vmov.f32	s3, s15
 8010020:	2100      	movs	r1, #0
 8010022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010024:	f007 faea 	bl	80175fc <nk_nonblock_begin>
 8010028:	4603      	mov	r3, r0
 801002a:	2b00      	cmp	r3, #0
 801002c:	d101      	bne.n	8010032 <nk_combo_begin+0x206>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 801002e:	2300      	movs	r3, #0
 8010030:	e008      	b.n	8010044 <nk_combo_begin+0x218>

    win->popup.type = NK_PANEL_COMBO;
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	2220      	movs	r2, #32
 8010036:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    win->popup.name = hash;
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801003e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    return 1;
 8010042:	2301      	movs	r3, #1
}
 8010044:	4618      	mov	r0, r3
 8010046:	375c      	adds	r7, #92	; 0x5c
 8010048:	46bd      	mov	sp, r7
 801004a:	bd90      	pop	{r4, r7, pc}
 801004c:	08021c5c 	.word	0x08021c5c
 8010050:	080238bc 	.word	0x080238bc
 8010054:	08021c60 	.word	0x08021c60
 8010058:	08021c7c 	.word	0x08021c7c
 801005c:	08021c8c 	.word	0x08021c8c
 8010060:	00000000 	.word	0x00000000

08010064 <nk_combo_begin_text>:
NK_API nk_bool
nk_combo_begin_text(struct nk_context *ctx, const char *selected, int len,
    struct nk_vec2 size)
{
 8010064:	b5b0      	push	{r4, r5, r7, lr}
 8010066:	b0a6      	sub	sp, #152	; 0x98
 8010068:	af04      	add	r7, sp, #16
 801006a:	6178      	str	r0, [r7, #20]
 801006c:	6139      	str	r1, [r7, #16]
 801006e:	60fa      	str	r2, [r7, #12]
 8010070:	eeb0 7a40 	vmov.f32	s14, s0
 8010074:	eef0 7a60 	vmov.f32	s15, s1
 8010078:	ed87 7a01 	vstr	s14, [r7, #4]
 801007c:	edc7 7a02 	vstr	s15, [r7, #8]
    const struct nk_input *in;
    struct nk_window *win;
    struct nk_style *style;

    enum nk_widget_layout_states s;
    int is_clicked = nk_false;
 8010080:	2300      	movs	r3, #0
 8010082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    struct nk_rect header;
    const struct nk_style_item *background;
    struct nk_text text;

    NK_ASSERT(ctx);
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d105      	bne.n	8010098 <nk_combo_begin_text+0x34>
 801008c:	4bc3      	ldr	r3, [pc, #780]	; (801039c <nk_combo_begin_text+0x338>)
 801008e:	4ac4      	ldr	r2, [pc, #784]	; (80103a0 <nk_combo_begin_text+0x33c>)
 8010090:	2139      	movs	r1, #57	; 0x39
 8010092:	48c4      	ldr	r0, [pc, #784]	; (80103a4 <nk_combo_begin_text+0x340>)
 8010094:	f00d ffd6 	bl	801e044 <__assert_func>
    NK_ASSERT(selected);
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d105      	bne.n	80100aa <nk_combo_begin_text+0x46>
 801009e:	4bc2      	ldr	r3, [pc, #776]	; (80103a8 <nk_combo_begin_text+0x344>)
 80100a0:	4abf      	ldr	r2, [pc, #764]	; (80103a0 <nk_combo_begin_text+0x33c>)
 80100a2:	213a      	movs	r1, #58	; 0x3a
 80100a4:	48bf      	ldr	r0, [pc, #764]	; (80103a4 <nk_combo_begin_text+0x340>)
 80100a6:	f00d ffcd 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80100b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d105      	bne.n	80100c4 <nk_combo_begin_text+0x60>
 80100b8:	4bbc      	ldr	r3, [pc, #752]	; (80103ac <nk_combo_begin_text+0x348>)
 80100ba:	4ab9      	ldr	r2, [pc, #740]	; (80103a0 <nk_combo_begin_text+0x33c>)
 80100bc:	213b      	movs	r1, #59	; 0x3b
 80100be:	48b9      	ldr	r0, [pc, #740]	; (80103a4 <nk_combo_begin_text+0x340>)
 80100c0:	f00d ffc0 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80100ca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80100ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d105      	bne.n	80100e2 <nk_combo_begin_text+0x7e>
 80100d6:	4bb6      	ldr	r3, [pc, #728]	; (80103b0 <nk_combo_begin_text+0x34c>)
 80100d8:	4ab1      	ldr	r2, [pc, #708]	; (80103a0 <nk_combo_begin_text+0x33c>)
 80100da:	213c      	movs	r1, #60	; 0x3c
 80100dc:	48b1      	ldr	r0, [pc, #708]	; (80103a4 <nk_combo_begin_text+0x340>)
 80100de:	f00d ffb1 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout || !selected)
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d012      	beq.n	801010e <nk_combo_begin_text+0xaa>
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80100ee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00b      	beq.n	801010e <nk_combo_begin_text+0xaa>
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80100fc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <nk_combo_begin_text+0xaa>
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <nk_combo_begin_text+0xae>
        return 0;
 801010e:	2300      	movs	r3, #0
 8010110:	e28f      	b.n	8010632 <nk_combo_begin_text+0x5ce>

    win = ctx->current;
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010118:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801011c:	67bb      	str	r3, [r7, #120]	; 0x78
    style = &ctx->style;
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010124:	677b      	str	r3, [r7, #116]	; 0x74
    s = nk_widget(&header, ctx);
 8010126:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801012a:	6979      	ldr	r1, [r7, #20]
 801012c:	4618      	mov	r0, r3
 801012e:	f00c fca1 	bl	801ca74 <nk_widget>
 8010132:	4603      	mov	r3, r0
 8010134:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if (s == NK_WIDGET_INVALID)
 8010138:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801013c:	2b00      	cmp	r3, #0
 801013e:	d101      	bne.n	8010144 <nk_combo_begin_text+0xe0>
        return 0;
 8010140:	2300      	movs	r3, #0
 8010142:	e276      	b.n	8010632 <nk_combo_begin_text+0x5ce>

    in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;
 8010144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010150:	2b00      	cmp	r3, #0
 8010152:	d105      	bne.n	8010160 <nk_combo_begin_text+0xfc>
 8010154:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010158:	2b02      	cmp	r3, #2
 801015a:	d001      	beq.n	8010160 <nk_combo_begin_text+0xfc>
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	e000      	b.n	8010162 <nk_combo_begin_text+0xfe>
 8010160:	2300      	movs	r3, #0
 8010162:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	f503 53d6 	add.w	r3, r3, #6848	; 0x1ac0
 801016a:	3314      	adds	r3, #20
 801016c:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8010170:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8010174:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010178:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801017c:	2200      	movs	r2, #0
 801017e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010180:	eeb0 0a46 	vmov.f32	s0, s12
 8010184:	eef0 0a66 	vmov.f32	s1, s13
 8010188:	eeb0 1a47 	vmov.f32	s2, s14
 801018c:	eef0 1a67 	vmov.f32	s3, s15
 8010190:	4618      	mov	r0, r3
 8010192:	f7fe ff9f 	bl	800f0d4 <nk_button_behavior>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d002      	beq.n	80101a2 <nk_combo_begin_text+0x13e>
        is_clicked = nk_true;
 801019c:	2301      	movs	r3, #1
 801019e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* draw combo box header background and border */
    if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101a8:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 80101ac:	f003 0320 	and.w	r3, r3, #32
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d00c      	beq.n	80101ce <nk_combo_begin_text+0x16a>
        background = &style->combo.active;
 80101b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101b6:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 80101ba:	3318      	adds	r3, #24
 80101bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_active;
 80101c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101c6:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80101ca:	657b      	str	r3, [r7, #84]	; 0x54
 80101cc:	e020      	b.n	8010210 <nk_combo_begin_text+0x1ac>
    } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101d4:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 80101d8:	f003 0310 	and.w	r3, r3, #16
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d00c      	beq.n	80101fa <nk_combo_begin_text+0x196>
        background = &style->combo.hover;
 80101e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101e2:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 80101e6:	331c      	adds	r3, #28
 80101e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_hover;
 80101ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101f2:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 80101f6:	657b      	str	r3, [r7, #84]	; 0x54
 80101f8:	e00a      	b.n	8010210 <nk_combo_begin_text+0x1ac>
    } else {
        background = &style->combo.normal;
 80101fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101fc:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8010200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_normal;
 8010204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801020a:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 801020e:	657b      	str	r3, [r7, #84]	; 0x54
    }

    switch(background->type) {
 8010210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	2b02      	cmp	r3, #2
 8010218:	d02b      	beq.n	8010272 <nk_combo_begin_text+0x20e>
 801021a:	2b02      	cmp	r3, #2
 801021c:	f300 80a1 	bgt.w	8010362 <nk_combo_begin_text+0x2fe>
 8010220:	2b00      	cmp	r3, #0
 8010222:	d04a      	beq.n	80102ba <nk_combo_begin_text+0x256>
 8010224:	2b01      	cmp	r3, #1
 8010226:	f040 809c 	bne.w	8010362 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_IMAGE:
            text.background = nk_rgba(0, 0, 0, 0);
 801022a:	2300      	movs	r3, #0
 801022c:	2200      	movs	r2, #0
 801022e:	2100      	movs	r1, #0
 8010230:	2000      	movs	r0, #0
 8010232:	f7ff fd67 	bl	800fd04 <nk_rgba>
 8010236:	4603      	mov	r3, r0
 8010238:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 801023a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801023c:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8010240:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010244:	3304      	adds	r3, #4
 8010246:	4a5b      	ldr	r2, [pc, #364]	; (80103b4 <nk_combo_begin_text+0x350>)
 8010248:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 801024c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8010250:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010254:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010258:	6812      	ldr	r2, [r2, #0]
 801025a:	4619      	mov	r1, r3
 801025c:	eeb0 0a46 	vmov.f32	s0, s12
 8010260:	eef0 0a66 	vmov.f32	s1, s13
 8010264:	eeb0 1a47 	vmov.f32	s2, s14
 8010268:	eef0 1a67 	vmov.f32	s3, s15
 801026c:	f001 ffb2 	bl	80121d4 <nk_draw_image>
            break;
 8010270:	e077      	b.n	8010362 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_NINE_SLICE:
            text.background = nk_rgba(0, 0, 0, 0);
 8010272:	2300      	movs	r3, #0
 8010274:	2200      	movs	r2, #0
 8010276:	2100      	movs	r1, #0
 8010278:	2000      	movs	r0, #0
 801027a:	f7ff fd43 	bl	800fd04 <nk_rgba>
 801027e:	4603      	mov	r3, r0
 8010280:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 8010282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010284:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8010288:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801028c:	3304      	adds	r3, #4
 801028e:	4a49      	ldr	r2, [pc, #292]	; (80103b4 <nk_combo_begin_text+0x350>)
 8010290:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8010294:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8010298:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801029c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80102a0:	6812      	ldr	r2, [r2, #0]
 80102a2:	4619      	mov	r1, r3
 80102a4:	eeb0 0a46 	vmov.f32	s0, s12
 80102a8:	eef0 0a66 	vmov.f32	s1, s13
 80102ac:	eeb0 1a47 	vmov.f32	s2, s14
 80102b0:	eef0 1a67 	vmov.f32	s3, s15
 80102b4:	f002 f880 	bl	80123b8 <nk_draw_nine_slice>
            break;
 80102b8:	e053      	b.n	8010362 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_COLOR:
            text.background = background->data.color;
 80102ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	653b      	str	r3, [r7, #80]	; 0x50
            nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);
 80102c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102c4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80102c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102ce:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80102d2:	edd3 5a00 	vldr	s11, [r3]
 80102d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102da:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80102de:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80102e2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80102e6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80102ea:	6859      	ldr	r1, [r3, #4]
 80102ec:	eeb0 2a65 	vmov.f32	s4, s11
 80102f0:	eeb0 0a46 	vmov.f32	s0, s12
 80102f4:	eef0 0a66 	vmov.f32	s1, s13
 80102f8:	eeb0 1a47 	vmov.f32	s2, s14
 80102fc:	eef0 1a67 	vmov.f32	s3, s15
 8010300:	4610      	mov	r0, r2
 8010302:	f001 fc0d 	bl	8011b20 <nk_fill_rect>
            nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);
 8010306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010308:	f103 0264 	add.w	r2, r3, #100	; 0x64
 801030c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801030e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010312:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8010316:	edd3 5a00 	vldr	s11, [r3]
 801031a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801031c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010320:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8010324:	ed93 5a00 	vldr	s10, [r3]
 8010328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801032a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801032e:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8010332:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8010336:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801033a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801033e:	f8d3 15d4 	ldr.w	r1, [r3, #1492]	; 0x5d4
 8010342:	eef0 2a45 	vmov.f32	s5, s10
 8010346:	eeb0 2a65 	vmov.f32	s4, s11
 801034a:	eeb0 0a46 	vmov.f32	s0, s12
 801034e:	eef0 0a66 	vmov.f32	s1, s13
 8010352:	eeb0 1a47 	vmov.f32	s2, s14
 8010356:	eef0 1a67 	vmov.f32	s3, s15
 801035a:	4610      	mov	r0, r2
 801035c:	f001 fad8 	bl	8011910 <nk_stroke_rect>
            break;
 8010360:	bf00      	nop
        struct nk_rect button;
        struct nk_rect content;
        int draw_button_symbol;

        enum nk_symbol_type sym;
        if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010368:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 801036c:	f003 0310 	and.w	r3, r3, #16
 8010370:	2b00      	cmp	r3, #0
 8010372:	d007      	beq.n	8010384 <nk_combo_begin_text+0x320>
            sym = style->combo.sym_hover;
 8010374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801037a:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 801037e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010382:	e022      	b.n	80103ca <nk_combo_begin_text+0x366>
        else if (is_clicked)
 8010384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010388:	2b00      	cmp	r3, #0
 801038a:	d017      	beq.n	80103bc <nk_combo_begin_text+0x358>
            sym = style->combo.sym_active;
 801038c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801038e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010392:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8010396:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801039a:	e016      	b.n	80103ca <nk_combo_begin_text+0x366>
 801039c:	08021c5c 	.word	0x08021c5c
 80103a0:	080238cc 	.word	0x080238cc
 80103a4:	08021c60 	.word	0x08021c60
 80103a8:	08021ca4 	.word	0x08021ca4
 80103ac:	08021c7c 	.word	0x08021c7c
 80103b0:	08021c8c 	.word	0x08021c8c
 80103b4:	080238b8 	.word	0x080238b8
 80103b8:	00000000 	.word	0x00000000
        else
            sym = style->combo.sym_normal;
 80103bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103c2:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 80103c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        /* represents whether or not the combo's button symbol should be drawn */
        draw_button_symbol = sym != NK_SYMBOL_NONE;
 80103ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	bf14      	ite	ne
 80103d2:	2301      	movne	r3, #1
 80103d4:	2300      	moveq	r3, #0
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	66bb      	str	r3, [r7, #104]	; 0x68

        /* calculate button */
        button.w = header.h - 2 * style->combo.button_padding.y;
 80103da:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80103de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103e4:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80103e8:	edd3 7a00 	vldr	s15, [r3]
 80103ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80103f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;
 80103f8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80103fc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010404:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010408:	ee37 7a67 	vsub.f32	s14, s14, s15
 801040c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801040e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010412:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 8010416:	edd3 7a00 	vldr	s15, [r3]
 801041a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801041e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        button.y = header.y + style->combo.button_padding.y;
 8010422:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801042c:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8010430:	edd3 7a00 	vldr	s15, [r3]
 8010434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010438:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        button.h = button.w;
 801043c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043e:	637b      	str	r3, [r7, #52]	; 0x34

        content.x = button.x + style->combo.button.padding.x;
 8010440:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801044a:	f203 6364 	addw	r3, r3, #1636	; 0x664
 801044e:	edd3 7a00 	vldr	s15, [r3]
 8010452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010456:	edc7 7a06 	vstr	s15, [r7, #24]
        content.y = button.y + style->combo.button.padding.y;
 801045a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801045e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010464:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8010468:	edd3 7a00 	vldr	s15, [r3]
 801046c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010470:	edc7 7a07 	vstr	s15, [r7, #28]
        content.w = button.w - 2 * style->combo.button.padding.x;
 8010474:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801047a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801047e:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8010482:	edd3 7a00 	vldr	s15, [r3]
 8010486:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801048a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801048e:	edc7 7a08 	vstr	s15, [r7, #32]
        content.h = button.h - 2 * style->combo.button.padding.y;
 8010492:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8010496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801049c:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80104a0:	edd3 7a00 	vldr	s15, [r3]
 80104a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80104a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        /* draw selected label */
        text.padding = nk_vec2(0,0);
 80104b0:	ed5f 0a3f 	vldr	s1, [pc, #-252]	; 80103b8 <nk_combo_begin_text+0x354>
 80104b4:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 80103b8 <nk_combo_begin_text+0x354>
 80104b8:	f004 f940 	bl	801473c <nk_vec2>
 80104bc:	eeb0 7a40 	vmov.f32	s14, s0
 80104c0:	eef0 7a60 	vmov.f32	s15, s1
 80104c4:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 80104c8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        label.x = header.x + style->combo.content_padding.x;
 80104cc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80104d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104d6:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80104da:	edd3 7a00 	vldr	s15, [r3]
 80104de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104e2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.y = header.y + style->combo.content_padding.y;
 80104e6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80104ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104f0:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 80104f4:	edd3 7a00 	vldr	s15, [r3]
 80104f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104fc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.h = header.h - 2 * style->combo.content_padding.y;
 8010500:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8010504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801050a:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 801050e:	edd3 7a00 	vldr	s15, [r3]
 8010512:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010516:	ee77 7a67 	vsub.f32	s15, s14, s15
 801051a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        if (draw_button_symbol)
 801051e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010520:	2b00      	cmp	r3, #0
 8010522:	d01a      	beq.n	801055a <nk_combo_begin_text+0x4f6>
            label.w = button.x - (style->combo.content_padding.x + style->combo.spacing.x) - label.x;
 8010524:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801052a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801052e:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8010532:	edd3 6a00 	vldr	s13, [r3]
 8010536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801053c:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8010540:	edd3 7a00 	vldr	s15, [r3]
 8010544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010548:	ee37 7a67 	vsub.f32	s14, s14, s15
 801054c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010554:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8010558:	e00e      	b.n	8010578 <nk_combo_begin_text+0x514>
        else
            label.w = header.w - 2 * style->combo.content_padding.x;
 801055a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801055e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010564:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8010568:	edd3 7a00 	vldr	s15, [r3]
 801056c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010574:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        nk_widget_text(&win->buffer, label, selected, len, &text,
 8010578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801057a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8010584:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010588:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801058c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8010590:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010594:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010598:	9301      	str	r3, [sp, #4]
 801059a:	2311      	movs	r3, #17
 801059c:	9300      	str	r3, [sp, #0]
 801059e:	4613      	mov	r3, r2
 80105a0:	68fa      	ldr	r2, [r7, #12]
 80105a2:	6939      	ldr	r1, [r7, #16]
 80105a4:	eeb0 0a46 	vmov.f32	s0, s12
 80105a8:	eef0 0a66 	vmov.f32	s1, s13
 80105ac:	eeb0 1a47 	vmov.f32	s2, s14
 80105b0:	eef0 1a67 	vmov.f32	s3, s15
 80105b4:	f00a fe90 	bl	801b2d8 <nk_widget_text>
            NK_TEXT_LEFT, ctx->style.font);

        /* draw open/close button */
        if (draw_button_symbol)
 80105b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d01a      	beq.n	80105f4 <nk_combo_begin_text+0x590>
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 80105be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105c0:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105ca:	f8d3 5ad4 	ldr.w	r5, [r3, #2772]	; 0xad4
                &ctx->style.combo.button, sym, style->font);
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	f503 53ba 	add.w	r3, r3, #5952	; 0x1740
 80105d4:	3318      	adds	r3, #24
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 80105d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80105d8:	6812      	ldr	r2, [r2, #0]
 80105da:	f107 0418 	add.w	r4, r7, #24
 80105de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80105e2:	9202      	str	r2, [sp, #8]
 80105e4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80105e8:	9201      	str	r2, [sp, #4]
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	462b      	mov	r3, r5
 80105ee:	4622      	mov	r2, r4
 80105f0:	f7ff f8b4 	bl	800f75c <nk_draw_button_symbol>
    }
    return nk_combo_begin(ctx, win, size, is_clicked, header);
 80105f4:	ed97 5a16 	vldr	s10, [r7, #88]	; 0x58
 80105f8:	edd7 5a17 	vldr	s11, [r7, #92]	; 0x5c
 80105fc:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8010600:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8010604:	ed97 7a01 	vldr	s14, [r7, #4]
 8010608:	edd7 7a02 	vldr	s15, [r7, #8]
 801060c:	eeb0 1a45 	vmov.f32	s2, s10
 8010610:	eef0 1a65 	vmov.f32	s3, s11
 8010614:	eeb0 2a46 	vmov.f32	s4, s12
 8010618:	eef0 2a66 	vmov.f32	s5, s13
 801061c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010620:	eeb0 0a47 	vmov.f32	s0, s14
 8010624:	eef0 0a67 	vmov.f32	s1, s15
 8010628:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801062a:	6978      	ldr	r0, [r7, #20]
 801062c:	f7ff fbfe 	bl	800fe2c <nk_combo_begin>
 8010630:	4603      	mov	r3, r0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3788      	adds	r7, #136	; 0x88
 8010636:	46bd      	mov	sp, r7
 8010638:	bdb0      	pop	{r4, r5, r7, pc}
 801063a:	bf00      	nop

0801063c <nk_combo_begin_label>:
NK_API nk_bool
nk_combo_begin_label(struct nk_context *ctx, const char *selected, struct nk_vec2 size)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	eeb0 7a40 	vmov.f32	s14, s0
 801064a:	eef0 7a60 	vmov.f32	s15, s1
 801064e:	ed87 7a00 	vstr	s14, [r7]
 8010652:	edc7 7a01 	vstr	s15, [r7, #4]
    return nk_combo_begin_text(ctx, selected, nk_strlen(selected), size);
 8010656:	68b8      	ldr	r0, [r7, #8]
 8010658:	f00c f81a 	bl	801c690 <nk_strlen>
 801065c:	4603      	mov	r3, r0
 801065e:	ed97 7a00 	vldr	s14, [r7]
 8010662:	edd7 7a01 	vldr	s15, [r7, #4]
 8010666:	eeb0 0a47 	vmov.f32	s0, s14
 801066a:	eef0 0a67 	vmov.f32	s1, s15
 801066e:	461a      	mov	r2, r3
 8010670:	68b9      	ldr	r1, [r7, #8]
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f7ff fcf6 	bl	8010064 <nk_combo_begin_text>
 8010678:	4603      	mov	r3, r0
}
 801067a:	4618      	mov	r0, r3
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <nk_combo_item_label>:
{
    return nk_contextual_item_text(ctx, text, len, align);
}
NK_API nk_bool
nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b084      	sub	sp, #16
 8010686:	af00      	add	r7, sp, #0
 8010688:	60f8      	str	r0, [r7, #12]
 801068a:	60b9      	str	r1, [r7, #8]
 801068c:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_label(ctx, label, align);
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	68b9      	ldr	r1, [r7, #8]
 8010692:	68f8      	ldr	r0, [r7, #12]
 8010694:	f000 feaa 	bl	80113ec <nk_contextual_item_label>
 8010698:	4603      	mov	r3, r0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <nk_combo_end>:
    const char *label, nk_flags alignment)
{
    return nk_contextual_item_symbol_label(ctx, sym, label, alignment);
}
NK_API void nk_combo_end(struct nk_context *ctx)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b082      	sub	sp, #8
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
    nk_contextual_end(ctx);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 ff00 	bl	80114b0 <nk_contextual_end>
}
 80106b0:	bf00      	nop
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <nk_combo>:
    nk_contextual_close(ctx);
}
NK_API int
nk_combo(struct nk_context *ctx, const char **items, int count,
    int selected, int item_height, struct nk_vec2 size)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b08c      	sub	sp, #48	; 0x30
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6178      	str	r0, [r7, #20]
 80106c0:	6139      	str	r1, [r7, #16]
 80106c2:	60fa      	str	r2, [r7, #12]
 80106c4:	60bb      	str	r3, [r7, #8]
 80106c6:	eeb0 7a40 	vmov.f32	s14, s0
 80106ca:	eef0 7a60 	vmov.f32	s15, s1
 80106ce:	ed87 7a00 	vstr	s14, [r7]
 80106d2:	edc7 7a01 	vstr	s15, [r7, #4]
    int i = 0;
 80106d6:	2300      	movs	r3, #0
 80106d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int max_height;
    struct nk_vec2 item_spacing;
    struct nk_vec2 window_padding;

    NK_ASSERT(ctx);
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d106      	bne.n	80106ee <nk_combo+0x36>
 80106e0:	4b61      	ldr	r3, [pc, #388]	; (8010868 <nk_combo+0x1b0>)
 80106e2:	4a62      	ldr	r2, [pc, #392]	; (801086c <nk_combo+0x1b4>)
 80106e4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80106e8:	4861      	ldr	r0, [pc, #388]	; (8010870 <nk_combo+0x1b8>)
 80106ea:	f00d fcab 	bl	801e044 <__assert_func>
    NK_ASSERT(items);
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d106      	bne.n	8010702 <nk_combo+0x4a>
 80106f4:	4b5f      	ldr	r3, [pc, #380]	; (8010874 <nk_combo+0x1bc>)
 80106f6:	4a5d      	ldr	r2, [pc, #372]	; (801086c <nk_combo+0x1b4>)
 80106f8:	f240 21c1 	movw	r1, #705	; 0x2c1
 80106fc:	485c      	ldr	r0, [pc, #368]	; (8010870 <nk_combo+0x1b8>)
 80106fe:	f00d fca1 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010708:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801070c:	2b00      	cmp	r3, #0
 801070e:	d106      	bne.n	801071e <nk_combo+0x66>
 8010710:	4b59      	ldr	r3, [pc, #356]	; (8010878 <nk_combo+0x1c0>)
 8010712:	4a56      	ldr	r2, [pc, #344]	; (801086c <nk_combo+0x1b4>)
 8010714:	f240 21c2 	movw	r1, #706	; 0x2c2
 8010718:	4855      	ldr	r0, [pc, #340]	; (8010870 <nk_combo+0x1b8>)
 801071a:	f00d fc93 	bl	801e044 <__assert_func>
    if (!ctx || !items ||!count)
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d005      	beq.n	8010730 <nk_combo+0x78>
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d002      	beq.n	8010730 <nk_combo+0x78>
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d101      	bne.n	8010734 <nk_combo+0x7c>
        return selected;
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	e094      	b.n	801085e <nk_combo+0x1a6>

    item_spacing = ctx->style.window.spacing;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801073a:	461a      	mov	r2, r3
 801073c:	f107 0320 	add.w	r3, r7, #32
 8010740:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 8010744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010748:	e883 0003 	stmia.w	r3, {r0, r1}
    window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010758:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	4619      	mov	r1, r3
 8010764:	4610      	mov	r0, r2
 8010766:	f004 fba3 	bl	8014eb0 <nk_panel_get_padding>
 801076a:	eeb0 7a40 	vmov.f32	s14, s0
 801076e:	eef0 7a60 	vmov.f32	s15, s1
 8010772:	ed87 7a06 	vstr	s14, [r7, #24]
 8010776:	edc7 7a07 	vstr	s15, [r7, #28]
    max_height = count * item_height + count * (int)item_spacing.y;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801077e:	fb03 f202 	mul.w	r2, r3, r2
 8010782:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801078a:	ee17 1a90 	vmov	r1, s15
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	fb01 f303 	mul.w	r3, r1, r3
 8010794:	4413      	add	r3, r2
 8010796:	62bb      	str	r3, [r7, #40]	; 0x28
    max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;
 8010798:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801079c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107a0:	ee17 2a90 	vmov	r2, s15
 80107a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80107a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107ac:	ee17 3a90 	vmov	r3, s15
 80107b0:	4413      	add	r3, r2
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107b6:	4413      	add	r3, r2
 80107b8:	62bb      	str	r3, [r7, #40]	; 0x28
    size.y = NK_MIN(size.y, (float)max_height);
 80107ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80107be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c0:	ee07 3a90 	vmov	s15, r3
 80107c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107d0:	d502      	bpl.n	80107d8 <nk_combo+0x120>
 80107d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80107d6:	e004      	b.n	80107e2 <nk_combo+0x12a>
 80107d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107da:	ee07 3a90 	vmov	s15, r3
 80107de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107e2:	edc7 7a01 	vstr	s15, [r7, #4]
    if (nk_combo_begin_label(ctx, items[selected], size)) {
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	693a      	ldr	r2, [r7, #16]
 80107ec:	4413      	add	r3, r2
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	ed97 7a00 	vldr	s14, [r7]
 80107f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80107f8:	eeb0 0a47 	vmov.f32	s0, s14
 80107fc:	eef0 0a67 	vmov.f32	s1, s15
 8010800:	4619      	mov	r1, r3
 8010802:	6978      	ldr	r0, [r7, #20]
 8010804:	f7ff ff1a 	bl	801063c <nk_combo_begin_label>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d026      	beq.n	801085c <nk_combo+0x1a4>
        nk_layout_row_dynamic(ctx, (float)item_height, 1);
 801080e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010810:	ee07 3a90 	vmov	s15, r3
 8010814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010818:	2101      	movs	r1, #1
 801081a:	eeb0 0a67 	vmov.f32	s0, s15
 801081e:	6978      	ldr	r0, [r7, #20]
 8010820:	f003 f972 	bl	8013b08 <nk_layout_row_dynamic>
        for (i = 0; i < count; ++i) {
 8010824:	2300      	movs	r3, #0
 8010826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010828:	e011      	b.n	801084e <nk_combo+0x196>
            if (nk_combo_item_label(ctx, items[i], NK_TEXT_LEFT))
 801082a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	693a      	ldr	r2, [r7, #16]
 8010830:	4413      	add	r3, r2
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2211      	movs	r2, #17
 8010836:	4619      	mov	r1, r3
 8010838:	6978      	ldr	r0, [r7, #20]
 801083a:	f7ff ff22 	bl	8010682 <nk_combo_item_label>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d001      	beq.n	8010848 <nk_combo+0x190>
                selected = i;
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < count; ++i) {
 8010848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084a:	3301      	adds	r3, #1
 801084c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801084e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	429a      	cmp	r2, r3
 8010854:	dbe9      	blt.n	801082a <nk_combo+0x172>
        }
        nk_combo_end(ctx);
 8010856:	6978      	ldr	r0, [r7, #20]
 8010858:	f7ff ff23 	bl	80106a2 <nk_combo_end>
    }
    return selected;
 801085c:	68bb      	ldr	r3, [r7, #8]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3730      	adds	r7, #48	; 0x30
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	08021c5c 	.word	0x08021c5c
 801086c:	080238e0 	.word	0x080238e0
 8010870:	08021c60 	.word	0x08021c60
 8010874:	08021cb0 	.word	0x08021cb0
 8010878:	08021c7c 	.word	0x08021c7c

0801087c <nk_setup>:
 *                          CONTEXT
 *
 * ===============================================================*/
NK_INTERN void
nk_setup(struct nk_context *ctx, const struct nk_user_font *font)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d105      	bne.n	8010898 <nk_setup+0x1c>
 801088c:	4b11      	ldr	r3, [pc, #68]	; (80108d4 <nk_setup+0x58>)
 801088e:	4a12      	ldr	r2, [pc, #72]	; (80108d8 <nk_setup+0x5c>)
 8010890:	210c      	movs	r1, #12
 8010892:	4812      	ldr	r0, [pc, #72]	; (80108dc <nk_setup+0x60>)
 8010894:	f00d fbd6 	bl	801e044 <__assert_func>
    if (!ctx) return;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d016      	beq.n	80108cc <nk_setup+0x50>
    nk_zero_struct(*ctx);
 801089e:	f243 6168 	movw	r1, #13928	; 0x3668
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f00b fed6 	bl	801c654 <nk_zero>
    nk_style_default(ctx);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f008 faeb 	bl	8018e84 <nk_style_default>
    ctx->seq = 1;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80108b4:	461a      	mov	r2, r3
 80108b6:	2301      	movs	r3, #1
 80108b8:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
    if (font) ctx->style.font = font;
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d005      	beq.n	80108ce <nk_setup+0x52>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	683a      	ldr	r2, [r7, #0]
 80108c6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80108ca:	e000      	b.n	80108ce <nk_setup+0x52>
    if (!ctx) return;
 80108cc:	bf00      	nop
#ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
    nk_draw_list_init(&ctx->draw_list);
#endif
}
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	08021ce4 	.word	0x08021ce4
 80108d8:	08023900 	.word	0x08023900
 80108dc:	08021ce8 	.word	0x08021ce8

080108e0 <nk_init_custom>:
    return 1;
}
NK_API nk_bool
nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,
    struct nk_buffer *pool, const struct nk_user_font *font)
{
 80108e0:	b5b0      	push	{r4, r5, r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
 80108ec:	603b      	str	r3, [r7, #0]
    NK_ASSERT(cmds);
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d105      	bne.n	8010900 <nk_init_custom+0x20>
 80108f4:	4b2a      	ldr	r3, [pc, #168]	; (80109a0 <nk_init_custom+0xc0>)
 80108f6:	4a2b      	ldr	r2, [pc, #172]	; (80109a4 <nk_init_custom+0xc4>)
 80108f8:	2130      	movs	r1, #48	; 0x30
 80108fa:	482b      	ldr	r0, [pc, #172]	; (80109a8 <nk_init_custom+0xc8>)
 80108fc:	f00d fba2 	bl	801e044 <__assert_func>
    NK_ASSERT(pool);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d105      	bne.n	8010912 <nk_init_custom+0x32>
 8010906:	4b29      	ldr	r3, [pc, #164]	; (80109ac <nk_init_custom+0xcc>)
 8010908:	4a26      	ldr	r2, [pc, #152]	; (80109a4 <nk_init_custom+0xc4>)
 801090a:	2131      	movs	r1, #49	; 0x31
 801090c:	4826      	ldr	r0, [pc, #152]	; (80109a8 <nk_init_custom+0xc8>)
 801090e:	f00d fb99 	bl	801e044 <__assert_func>
    if (!cmds || !pool) return 0;
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <nk_init_custom+0x3e>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d101      	bne.n	8010922 <nk_init_custom+0x42>
 801091e:	2300      	movs	r3, #0
 8010920:	e039      	b.n	8010996 <nk_init_custom+0xb6>

    nk_setup(ctx, font);
 8010922:	6839      	ldr	r1, [r7, #0]
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f7ff ffa9 	bl	801087c <nk_setup>
    ctx->memory = *cmds;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010930:	461a      	mov	r2, r3
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	f602 248c 	addw	r4, r2, #2700	; 0xa8c
 8010938:	461d      	mov	r5, r3
 801093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801093e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010946:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801094a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (pool->type == NK_BUFFER_FIXED) {
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	7f1b      	ldrb	r3, [r3, #28]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d10b      	bne.n	801096e <nk_init_custom+0x8e>
        /* take memory from buffer and alloc fixed pool */
        nk_pool_init_fixed(&ctx->pool, pool->memory.ptr, pool->memory.size);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 801095c:	3324      	adds	r3, #36	; 0x24
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	6a11      	ldr	r1, [r2, #32]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010966:	4618      	mov	r0, r3
 8010968:	f006 fbf4 	bl	8017154 <nk_pool_init_fixed>
 801096c:	e00b      	b.n	8010986 <nk_init_custom+0xa6>
    } else {
        /* create dynamic pool from buffer allocator */
        struct nk_allocator *alloc = &pool->pool;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	3310      	adds	r3, #16
 8010972:	617b      	str	r3, [r7, #20]
        nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 801097a:	3324      	adds	r3, #36	; 0x24
 801097c:	2210      	movs	r2, #16
 801097e:	6979      	ldr	r1, [r7, #20]
 8010980:	4618      	mov	r0, r3
 8010982:	f006 fbbb 	bl	80170fc <nk_pool_init>
    }
    ctx->use_pool = nk_true;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801098c:	461a      	mov	r2, r3
 801098e:	2301      	movs	r3, #1
 8010990:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
    return 1;
 8010994:	2301      	movs	r3, #1
}
 8010996:	4618      	mov	r0, r3
 8010998:	3718      	adds	r7, #24
 801099a:	46bd      	mov	sp, r7
 801099c:	bdb0      	pop	{r4, r5, r7, pc}
 801099e:	bf00      	nop
 80109a0:	08021d10 	.word	0x08021d10
 80109a4:	0802390c 	.word	0x0802390c
 80109a8:	08021ce8 	.word	0x08021ce8
 80109ac:	08021d18 	.word	0x08021d18

080109b0 <nk_clear>:
    ctx->freelist = 0;
    ctx->count = 0;
}
NK_API void
nk_clear(struct nk_context *ctx)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b086      	sub	sp, #24
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    struct nk_window *next;
    NK_ASSERT(ctx);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d105      	bne.n	80109ca <nk_clear+0x1a>
 80109be:	4b96      	ldr	r3, [pc, #600]	; (8010c18 <nk_clear+0x268>)
 80109c0:	4a96      	ldr	r2, [pc, #600]	; (8010c1c <nk_clear+0x26c>)
 80109c2:	2172      	movs	r1, #114	; 0x72
 80109c4:	4896      	ldr	r0, [pc, #600]	; (8010c20 <nk_clear+0x270>)
 80109c6:	f00d fb3d 	bl	801e044 <__assert_func>

    if (!ctx) return;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f000 811e 	beq.w	8010c0e <nk_clear+0x25e>
    if (ctx->use_pool)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109d8:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d007      	beq.n	80109f0 <nk_clear+0x40>
        nk_buffer_clear(&ctx->memory);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 80109e6:	330c      	adds	r3, #12
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fe f9bb 	bl	800ed64 <nk_buffer_clear>
 80109ee:	e007      	b.n	8010a00 <nk_clear+0x50>
    else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 80109f6:	330c      	adds	r3, #12
 80109f8:	2100      	movs	r1, #0
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fe f94a 	bl	800ec94 <nk_buffer_reset>

    ctx->build = 0;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a06:	461a      	mov	r2, r3
 8010a08:	2300      	movs	r3, #0
 8010a0a:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    ctx->memory.calls = 0;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a14:	461a      	mov	r2, r3
 8010a16:	2300      	movs	r3, #0
 8010a18:	f8c2 3ac0 	str.w	r3, [r2, #2752]	; 0xac0
    ctx->last_widget_state = 0;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a22:	461a      	mov	r2, r3
 8010a24:	2300      	movs	r3, #0
 8010a26:	f8c2 3ad4 	str.w	r3, [r2, #2772]	; 0xad4
    ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NK_MEMSET(&ctx->overlay, 0, sizeof(ctx->overlay));
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010a3c:	3334      	adds	r3, #52	; 0x34
 8010a3e:	2228      	movs	r2, #40	; 0x28
 8010a40:	2100      	movs	r1, #0
 8010a42:	4618      	mov	r0, r3
 8010a44:	f00b fd95 	bl	801c572 <nk_memset>

    /* garbage collector */
    iter = ctx->begin;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a4e:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010a52:	617b      	str	r3, [r7, #20]
    while (iter) {
 8010a54:	e0cb      	b.n	8010bee <nk_clear+0x23e>
        /* make sure valid minimized windows do not get removed */
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d013      	beq.n	8010a8a <nk_clear+0xda>
            !(iter->flags & NK_WINDOW_CLOSED) &&
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d10d      	bne.n	8010a8a <nk_clear+0xda>
            iter->seq == ctx->seq) {
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a78:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
            !(iter->flags & NK_WINDOW_CLOSED) &&
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d104      	bne.n	8010a8a <nk_clear+0xda>
            iter = iter->next;
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010a86:	617b      	str	r3, [r7, #20]
            continue;
 8010a88:	e0b1      	b.n	8010bee <nk_clear+0x23e>
        }
        /* remove hotness from hidden or closed windows*/
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d105      	bne.n	8010aa2 <nk_clear+0xf2>
            (iter->flags & NK_WINDOW_CLOSED)) &&
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d03a      	beq.n	8010b18 <nk_clear+0x168>
            iter == ctx->active) {
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010aa8:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
            (iter->flags & NK_WINDOW_CLOSED)) &&
 8010aac:	697a      	ldr	r2, [r7, #20]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d132      	bne.n	8010b18 <nk_clear+0x168>
            ctx->active = iter->prev;
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010abe:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = iter->prev;
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010ace:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (!ctx->end)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010ad8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d106      	bne.n	8010aee <nk_clear+0x13e>
                ctx->begin = 0;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	2300      	movs	r3, #0
 8010aea:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (ctx->active)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010af4:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d00d      	beq.n	8010b18 <nk_clear+0x168>
                ctx->active->flags &= ~(unsigned)NK_WINDOW_ROM;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b02:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b0e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010b16:	649a      	str	r2, [r3, #72]	; 0x48
        }
        /* free unused popup windows */
        if (iter->popup.win && iter->popup.win->seq != ctx->seq) {
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d015      	beq.n	8010b4e <nk_clear+0x19e>
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b30:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010b34:	429a      	cmp	r2, r3
 8010b36:	d00a      	beq.n	8010b4e <nk_clear+0x19e>
            nk_free_window(ctx, iter->popup.win);
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010b3e:	4619      	mov	r1, r3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f00c f9b8 	bl	801ceb6 <nk_free_window>
            iter->popup.win = 0;
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        }
        /* remove unused window state tables */
        {struct nk_table *n, *it = iter->tables;
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010b54:	613b      	str	r3, [r7, #16]
        while (it) {
 8010b56:	e025      	b.n	8010ba4 <nk_clear+0x1f4>
            n = it->next;
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8010b5e:	60bb      	str	r3, [r7, #8]
            if (it->seq != ctx->seq) {
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b6a:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d016      	beq.n	8010ba0 <nk_clear+0x1f0>
                nk_remove_table(iter, it);
 8010b72:	6939      	ldr	r1, [r7, #16]
 8010b74:	6978      	ldr	r0, [r7, #20]
 8010b76:	f00a fac0 	bl	801b0fa <nk_remove_table>
                nk_zero(it, sizeof(union nk_page_data));
 8010b7a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8010b7e:	6938      	ldr	r0, [r7, #16]
 8010b80:	f00b fd68 	bl	801c654 <nk_zero>
                nk_free_table(ctx, it);
 8010b84:	6939      	ldr	r1, [r7, #16]
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f00a fa65 	bl	801b056 <nk_free_table>
                if (it == iter->tables)
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010b92:	693a      	ldr	r2, [r7, #16]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d103      	bne.n	8010ba0 <nk_clear+0x1f0>
                    iter->tables = n;
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	68ba      	ldr	r2, [r7, #8]
 8010b9c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
            } it = n;
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	613b      	str	r3, [r7, #16]
        while (it) {
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1d6      	bne.n	8010b58 <nk_clear+0x1a8>
        }}
        /* window itself is not used anymore so free */
        if (iter->seq != ctx->seq || iter->flags & NK_WINDOW_CLOSED) {
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010bb4:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d105      	bne.n	8010bc8 <nk_clear+0x218>
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00e      	beq.n	8010be6 <nk_clear+0x236>
            next = iter->next;
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010bce:	60fb      	str	r3, [r7, #12]
            nk_remove_window(ctx, iter);
 8010bd0:	6979      	ldr	r1, [r7, #20]
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f00c faf0 	bl	801d1b8 <nk_remove_window>
            nk_free_window(ctx, iter);
 8010bd8:	6979      	ldr	r1, [r7, #20]
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f00c f96b 	bl	801ceb6 <nk_free_window>
            iter = next;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	617b      	str	r3, [r7, #20]
 8010be4:	e003      	b.n	8010bee <nk_clear+0x23e>
        } else iter = iter->next;
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010bec:	617b      	str	r3, [r7, #20]
    while (iter) {
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f47f af30 	bne.w	8010a56 <nk_clear+0xa6>
    }
    ctx->seq++;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010bfc:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010c00:	3301      	adds	r3, #1
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010c08:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
 8010c0c:	e000      	b.n	8010c10 <nk_clear+0x260>
    if (!ctx) return;
 8010c0e:	bf00      	nop
}
 8010c10:	3718      	adds	r7, #24
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	08021ce4 	.word	0x08021ce4
 8010c1c:	0802391c 	.word	0x0802391c
 8010c20:	08021ce8 	.word	0x08021ce8

08010c24 <nk_start_buffer>:
NK_LIB void
nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 8010c24:	b590      	push	{r4, r7, lr}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d105      	bne.n	8010c40 <nk_start_buffer+0x1c>
 8010c34:	4b17      	ldr	r3, [pc, #92]	; (8010c94 <nk_start_buffer+0x70>)
 8010c36:	4a18      	ldr	r2, [pc, #96]	; (8010c98 <nk_start_buffer+0x74>)
 8010c38:	21b2      	movs	r1, #178	; 0xb2
 8010c3a:	4818      	ldr	r0, [pc, #96]	; (8010c9c <nk_start_buffer+0x78>)
 8010c3c:	f00d fa02 	bl	801e044 <__assert_func>
    NK_ASSERT(buffer);
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d105      	bne.n	8010c52 <nk_start_buffer+0x2e>
 8010c46:	4b16      	ldr	r3, [pc, #88]	; (8010ca0 <nk_start_buffer+0x7c>)
 8010c48:	4a13      	ldr	r2, [pc, #76]	; (8010c98 <nk_start_buffer+0x74>)
 8010c4a:	21b3      	movs	r1, #179	; 0xb3
 8010c4c:	4813      	ldr	r0, [pc, #76]	; (8010c9c <nk_start_buffer+0x78>)
 8010c4e:	f00d f9f9 	bl	801e044 <__assert_func>
    if (!ctx || !buffer) return;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d019      	beq.n	8010c8c <nk_start_buffer+0x68>
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d016      	beq.n	8010c8c <nk_start_buffer+0x68>
    buffer->begin = ctx->memory.allocated;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c64:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	61da      	str	r2, [r3, #28]
    buffer->end = buffer->begin;
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	69da      	ldr	r2, [r3, #28]
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	621a      	str	r2, [r3, #32]
    buffer->last = buffer->begin;
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	69da      	ldr	r2, [r3, #28]
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	625a      	str	r2, [r3, #36]	; 0x24
    buffer->clip = nk_null_rect;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	4a09      	ldr	r2, [pc, #36]	; (8010ca4 <nk_start_buffer+0x80>)
 8010c80:	1d1c      	adds	r4, r3, #4
 8010c82:	4613      	mov	r3, r2
 8010c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010c8a:	e000      	b.n	8010c8e <nk_start_buffer+0x6a>
    if (!ctx || !buffer) return;
 8010c8c:	bf00      	nop
}
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd90      	pop	{r4, r7, pc}
 8010c94:	08021ce4 	.word	0x08021ce4
 8010c98:	08023928 	.word	0x08023928
 8010c9c:	08021ce8 	.word	0x08021ce8
 8010ca0:	08021d28 	.word	0x08021d28
 8010ca4:	080238ec 	.word	0x080238ec

08010ca8 <nk_start>:
NK_LIB void
nk_start(struct nk_context *ctx, struct nk_window *win)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d105      	bne.n	8010cc4 <nk_start+0x1c>
 8010cb8:	4b0c      	ldr	r3, [pc, #48]	; (8010cec <nk_start+0x44>)
 8010cba:	4a0d      	ldr	r2, [pc, #52]	; (8010cf0 <nk_start+0x48>)
 8010cbc:	21bd      	movs	r1, #189	; 0xbd
 8010cbe:	480d      	ldr	r0, [pc, #52]	; (8010cf4 <nk_start+0x4c>)
 8010cc0:	f00d f9c0 	bl	801e044 <__assert_func>
    NK_ASSERT(win);
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d105      	bne.n	8010cd6 <nk_start+0x2e>
 8010cca:	4b0b      	ldr	r3, [pc, #44]	; (8010cf8 <nk_start+0x50>)
 8010ccc:	4a08      	ldr	r2, [pc, #32]	; (8010cf0 <nk_start+0x48>)
 8010cce:	21be      	movs	r1, #190	; 0xbe
 8010cd0:	4808      	ldr	r0, [pc, #32]	; (8010cf4 <nk_start+0x4c>)
 8010cd2:	f00d f9b7 	bl	801e044 <__assert_func>
    nk_start_buffer(ctx, &win->buffer);
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	3364      	adds	r3, #100	; 0x64
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7ff ffa1 	bl	8010c24 <nk_start_buffer>
}
 8010ce2:	bf00      	nop
 8010ce4:	3708      	adds	r7, #8
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	08021ce4 	.word	0x08021ce4
 8010cf0:	08023938 	.word	0x08023938
 8010cf4:	08021ce8 	.word	0x08021ce8
 8010cf8:	08021d30 	.word	0x08021d30

08010cfc <nk_start_popup>:
NK_LIB void
nk_start_popup(struct nk_context *ctx, struct nk_window *win)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d105      	bne.n	8010d18 <nk_start_popup+0x1c>
 8010d0c:	4b19      	ldr	r3, [pc, #100]	; (8010d74 <nk_start_popup+0x78>)
 8010d0e:	4a1a      	ldr	r2, [pc, #104]	; (8010d78 <nk_start_popup+0x7c>)
 8010d10:	21c5      	movs	r1, #197	; 0xc5
 8010d12:	481a      	ldr	r0, [pc, #104]	; (8010d7c <nk_start_popup+0x80>)
 8010d14:	f00d f996 	bl	801e044 <__assert_func>
    NK_ASSERT(win);
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d105      	bne.n	8010d2a <nk_start_popup+0x2e>
 8010d1e:	4b18      	ldr	r3, [pc, #96]	; (8010d80 <nk_start_popup+0x84>)
 8010d20:	4a15      	ldr	r2, [pc, #84]	; (8010d78 <nk_start_popup+0x7c>)
 8010d22:	21c6      	movs	r1, #198	; 0xc6
 8010d24:	4815      	ldr	r0, [pc, #84]	; (8010d7c <nk_start_popup+0x80>)
 8010d26:	f00d f98d 	bl	801e044 <__assert_func>
    if (!ctx || !win) return;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d01d      	beq.n	8010d6c <nk_start_popup+0x70>
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d01a      	beq.n	8010d6c <nk_start_popup+0x70>

    /* save buffer fill state for popup */
    buf = &win->popup.buf;
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010d3c:	60fb      	str	r3, [r7, #12]
    buf->begin = win->buffer.end;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	601a      	str	r2, [r3, #0]
    buf->end = win->buffer.end;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	60da      	str	r2, [r3, #12]
    buf->parent = win->buffer.last;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	605a      	str	r2, [r3, #4]
    buf->last = buf->begin;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681a      	ldr	r2, [r3, #0]
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	609a      	str	r2, [r3, #8]
    buf->active = nk_true;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2201      	movs	r2, #1
 8010d68:	611a      	str	r2, [r3, #16]
 8010d6a:	e000      	b.n	8010d6e <nk_start_popup+0x72>
    if (!ctx || !win) return;
 8010d6c:	bf00      	nop
}
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	08021ce4 	.word	0x08021ce4
 8010d78:	08023944 	.word	0x08023944
 8010d7c:	08021ce8 	.word	0x08021ce8
 8010d80:	08021d30 	.word	0x08021d30

08010d84 <nk_finish_popup>:
NK_LIB void
nk_finish_popup(struct nk_context *ctx, struct nk_window *win)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d105      	bne.n	8010da0 <nk_finish_popup+0x1c>
 8010d94:	4b13      	ldr	r3, [pc, #76]	; (8010de4 <nk_finish_popup+0x60>)
 8010d96:	4a14      	ldr	r2, [pc, #80]	; (8010de8 <nk_finish_popup+0x64>)
 8010d98:	21d5      	movs	r1, #213	; 0xd5
 8010d9a:	4814      	ldr	r0, [pc, #80]	; (8010dec <nk_finish_popup+0x68>)
 8010d9c:	f00d f952 	bl	801e044 <__assert_func>
    NK_ASSERT(win);
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d105      	bne.n	8010db2 <nk_finish_popup+0x2e>
 8010da6:	4b12      	ldr	r3, [pc, #72]	; (8010df0 <nk_finish_popup+0x6c>)
 8010da8:	4a0f      	ldr	r2, [pc, #60]	; (8010de8 <nk_finish_popup+0x64>)
 8010daa:	21d6      	movs	r1, #214	; 0xd6
 8010dac:	480f      	ldr	r0, [pc, #60]	; (8010dec <nk_finish_popup+0x68>)
 8010dae:	f00d f949 	bl	801e044 <__assert_func>
    if (!ctx || !win) return;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d011      	beq.n	8010ddc <nk_finish_popup+0x58>
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00e      	beq.n	8010ddc <nk_finish_popup+0x58>

    buf = &win->popup.buf;
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010dc4:	60fb      	str	r3, [r7, #12]
    buf->last = win->buffer.last;
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	609a      	str	r2, [r3, #8]
    buf->end = win->buffer.end;
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	60da      	str	r2, [r3, #12]
 8010dda:	e000      	b.n	8010dde <nk_finish_popup+0x5a>
    if (!ctx || !win) return;
 8010ddc:	bf00      	nop
}
 8010dde:	3710      	adds	r7, #16
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	08021ce4 	.word	0x08021ce4
 8010de8:	08023954 	.word	0x08023954
 8010dec:	08021ce8 	.word	0x08021ce8
 8010df0:	08021d30 	.word	0x08021d30

08010df4 <nk_finish_buffer>:
NK_LIB void
nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d105      	bne.n	8010e10 <nk_finish_buffer+0x1c>
 8010e04:	4b10      	ldr	r3, [pc, #64]	; (8010e48 <nk_finish_buffer+0x54>)
 8010e06:	4a11      	ldr	r2, [pc, #68]	; (8010e4c <nk_finish_buffer+0x58>)
 8010e08:	21e0      	movs	r1, #224	; 0xe0
 8010e0a:	4811      	ldr	r0, [pc, #68]	; (8010e50 <nk_finish_buffer+0x5c>)
 8010e0c:	f00d f91a 	bl	801e044 <__assert_func>
    NK_ASSERT(buffer);
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d105      	bne.n	8010e22 <nk_finish_buffer+0x2e>
 8010e16:	4b0f      	ldr	r3, [pc, #60]	; (8010e54 <nk_finish_buffer+0x60>)
 8010e18:	4a0c      	ldr	r2, [pc, #48]	; (8010e4c <nk_finish_buffer+0x58>)
 8010e1a:	21e1      	movs	r1, #225	; 0xe1
 8010e1c:	480c      	ldr	r0, [pc, #48]	; (8010e50 <nk_finish_buffer+0x5c>)
 8010e1e:	f00d f911 	bl	801e044 <__assert_func>
    if (!ctx || !buffer) return;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00a      	beq.n	8010e3e <nk_finish_buffer+0x4a>
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d007      	beq.n	8010e3e <nk_finish_buffer+0x4a>
    buffer->end = ctx->memory.allocated;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e34:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	621a      	str	r2, [r3, #32]
 8010e3c:	e000      	b.n	8010e40 <nk_finish_buffer+0x4c>
    if (!ctx || !buffer) return;
 8010e3e:	bf00      	nop
}
 8010e40:	3708      	adds	r7, #8
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	08021ce4 	.word	0x08021ce4
 8010e4c:	08023964 	.word	0x08023964
 8010e50:	08021ce8 	.word	0x08021ce8
 8010e54:	08021d28 	.word	0x08021d28

08010e58 <nk_finish>:
NK_LIB void
nk_finish(struct nk_context *ctx, struct nk_window *win)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b086      	sub	sp, #24
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    struct nk_command *parent_last;
    void *memory;

    NK_ASSERT(ctx);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d105      	bne.n	8010e74 <nk_finish+0x1c>
 8010e68:	4b1c      	ldr	r3, [pc, #112]	; (8010edc <nk_finish+0x84>)
 8010e6a:	4a1d      	ldr	r2, [pc, #116]	; (8010ee0 <nk_finish+0x88>)
 8010e6c:	21ec      	movs	r1, #236	; 0xec
 8010e6e:	481d      	ldr	r0, [pc, #116]	; (8010ee4 <nk_finish+0x8c>)
 8010e70:	f00d f8e8 	bl	801e044 <__assert_func>
    NK_ASSERT(win);
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d105      	bne.n	8010e86 <nk_finish+0x2e>
 8010e7a:	4b1b      	ldr	r3, [pc, #108]	; (8010ee8 <nk_finish+0x90>)
 8010e7c:	4a18      	ldr	r2, [pc, #96]	; (8010ee0 <nk_finish+0x88>)
 8010e7e:	21ed      	movs	r1, #237	; 0xed
 8010e80:	4818      	ldr	r0, [pc, #96]	; (8010ee4 <nk_finish+0x8c>)
 8010e82:	f00d f8df 	bl	801e044 <__assert_func>
    if (!ctx || !win) return;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d021      	beq.n	8010ed0 <nk_finish+0x78>
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d01e      	beq.n	8010ed0 <nk_finish+0x78>
    nk_finish_buffer(ctx, &win->buffer);
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	3364      	adds	r3, #100	; 0x64
 8010e96:	4619      	mov	r1, r3
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff ffab 	bl	8010df4 <nk_finish_buffer>
    if (!win->popup.buf.active) return;
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d015      	beq.n	8010ed4 <nk_finish+0x7c>

    buf = &win->popup.buf;
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010eae:	617b      	str	r3, [r7, #20]
    memory = ctx->memory.memory.ptr;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010eb6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010eba:	613b      	str	r3, [r7, #16]
    parent_last = nk_ptr_add(struct nk_command, memory, buf->parent);
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	693a      	ldr	r2, [r7, #16]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	60fb      	str	r3, [r7, #12]
    parent_last->next = buf->end;
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	68da      	ldr	r2, [r3, #12]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	605a      	str	r2, [r3, #4]
 8010ece:	e002      	b.n	8010ed6 <nk_finish+0x7e>
    if (!ctx || !win) return;
 8010ed0:	bf00      	nop
 8010ed2:	e000      	b.n	8010ed6 <nk_finish+0x7e>
    if (!win->popup.buf.active) return;
 8010ed4:	bf00      	nop
}
 8010ed6:	3718      	adds	r7, #24
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	08021ce4 	.word	0x08021ce4
 8010ee0:	08023978 	.word	0x08023978
 8010ee4:	08021ce8 	.word	0x08021ce8
 8010ee8:	08021d30 	.word	0x08021d30

08010eec <nk_build>:
NK_LIB void
nk_build(struct nk_context *ctx)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08e      	sub	sp, #56	; 0x38
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
    struct nk_window *it = 0;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command *cmd = 0;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	633b      	str	r3, [r7, #48]	; 0x30
    nk_byte *buffer = 0;
 8010efc:	2300      	movs	r3, #0
 8010efe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* draw cursor overlay */
    if (!ctx->style.cursor_active)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d105      	bne.n	8010f16 <nk_build+0x2a>
        ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d05d      	beq.n	8010fdc <nk_build+0xf0>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d158      	bne.n	8010fdc <nk_build+0xf0>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d053      	beq.n	8010fdc <nk_build+0xf0>
        struct nk_rect mouse_bounds;
        const struct nk_cursor *cursor = ctx->style.cursor_active;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010f3a:	627b      	str	r3, [r7, #36]	; 0x24
        nk_command_buffer_init(&ctx->overlay, &ctx->memory, NK_CLIPPING_OFF);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010f42:	3334      	adds	r3, #52	; 0x34
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	f502 51d4 	add.w	r1, r2, #6784	; 0x1a80
 8010f4a:	310c      	adds	r1, #12
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f000 fb94 	bl	801167c <nk_command_buffer_init>
        nk_start_buffer(ctx, &ctx->overlay);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010f5a:	3334      	adds	r3, #52	; 0x34
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7ff fe60 	bl	8010c24 <nk_start_buffer>

        mouse_bounds.x = ctx->input.mouse.pos.x - cursor->offset.x;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8010f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8010f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f74:	edc7 7a03 	vstr	s15, [r7, #12]
        mouse_bounds.y = ctx->input.mouse.pos.y - cursor->offset.y;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8010f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f80:	edd3 7a07 	vldr	s15, [r3, #28]
 8010f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f88:	edc7 7a04 	vstr	s15, [r7, #16]
        mouse_bounds.w = cursor->size.x;
 8010f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8e:	691b      	ldr	r3, [r3, #16]
 8010f90:	617b      	str	r3, [r7, #20]
        mouse_bounds.h = cursor->size.y;
 8010f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f94:	695b      	ldr	r3, [r3, #20]
 8010f96:	61bb      	str	r3, [r7, #24]

        nk_draw_image(&ctx->overlay, mouse_bounds, &cursor->img, nk_white);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010f9e:	3334      	adds	r3, #52	; 0x34
 8010fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fa2:	4a62      	ldr	r2, [pc, #392]	; (801112c <nk_build+0x240>)
 8010fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8010fa8:	edd7 6a04 	vldr	s13, [r7, #16]
 8010fac:	ed97 7a05 	vldr	s14, [r7, #20]
 8010fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8010fb4:	6812      	ldr	r2, [r2, #0]
 8010fb6:	eeb0 0a46 	vmov.f32	s0, s12
 8010fba:	eef0 0a66 	vmov.f32	s1, s13
 8010fbe:	eeb0 1a47 	vmov.f32	s2, s14
 8010fc2:	eef0 1a67 	vmov.f32	s3, s15
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f001 f904 	bl	80121d4 <nk_draw_image>
        nk_finish_buffer(ctx, &ctx->overlay);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010fd2:	3334      	adds	r3, #52	; 0x34
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f7ff ff0c 	bl	8010df4 <nk_finish_buffer>
    }
    /* build one big draw command list out of all window buffers */
    it = ctx->begin;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010fe2:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010fe6:	637b      	str	r3, [r7, #52]	; 0x34
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fee:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    while (it != 0) {
 8010ff4:	e04d      	b.n	8011092 <nk_build+0x1a6>
        struct nk_window *next = it->next;
 8010ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 8010ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011000:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801100a:	429a      	cmp	r2, r3
 801100c:	d03c      	beq.n	8011088 <nk_build+0x19c>
 801100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011016:	2b00      	cmp	r3, #0
 8011018:	d136      	bne.n	8011088 <nk_build+0x19c>
            it->seq != ctx->seq)
 801101a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801101c:	681a      	ldr	r2, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011024:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 8011028:	429a      	cmp	r2, r3
 801102a:	d12d      	bne.n	8011088 <nk_build+0x19c>
            goto cont;

        cmd = nk_ptr_add(struct nk_command, buffer, it->buffer.last);
 801102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011034:	4413      	add	r3, r2
 8011036:	633b      	str	r3, [r7, #48]	; 0x30
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8011038:	e003      	b.n	8011042 <nk_build+0x156>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
            next = next->next; /* skip empty command buffers */
 801103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8011040:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8011042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011044:	2b00      	cmp	r3, #0
 8011046:	d016      	beq.n	8011076 <nk_build+0x18a>
 8011048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011054:	429a      	cmp	r2, r3
 8011056:	d0f0      	beq.n	801103a <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 8011058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801105c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8011060:	2b00      	cmp	r3, #0
 8011062:	d1ea      	bne.n	801103a <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 8011064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801106e:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8011072:	429a      	cmp	r2, r3
 8011074:	d1e1      	bne.n	801103a <nk_build+0x14e>

        if (next) cmd->next = next->buffer.begin;
 8011076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011078:	2b00      	cmp	r3, #0
 801107a:	d007      	beq.n	801108c <nk_build+0x1a0>
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8011082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011084:	605a      	str	r2, [r3, #4]
 8011086:	e002      	b.n	801108e <nk_build+0x1a2>
            goto cont;
 8011088:	bf00      	nop
 801108a:	e000      	b.n	801108e <nk_build+0x1a2>
        cont: it = next;
 801108c:	bf00      	nop
 801108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011090:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8011092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011094:	2b00      	cmp	r3, #0
 8011096:	d1ae      	bne.n	8010ff6 <nk_build+0x10a>
    }
    /* append all popup draw commands into lists */
    it = ctx->begin;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801109e:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 80110a2:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 80110a4:	e01c      	b.n	80110e0 <nk_build+0x1f4>
        struct nk_window *next = it->next;
 80110a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80110ac:	623b      	str	r3, [r7, #32]
        struct nk_popup_buffer *buf;
        if (!it->popup.buf.active)
 80110ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d010      	beq.n	80110da <nk_build+0x1ee>
            goto skip;

        buf = &it->popup.buf;
 80110b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ba:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80110be:	61fb      	str	r3, [r7, #28]
        cmd->next = buf->begin;
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c6:	605a      	str	r2, [r3, #4]
        cmd = nk_ptr_add(struct nk_command, buffer, buf->last);
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	689b      	ldr	r3, [r3, #8]
 80110cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110ce:	4413      	add	r3, r2
 80110d0:	633b      	str	r3, [r7, #48]	; 0x30
        buf->active = nk_false;
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	2200      	movs	r2, #0
 80110d6:	611a      	str	r2, [r3, #16]
 80110d8:	e000      	b.n	80110dc <nk_build+0x1f0>
            goto skip;
 80110da:	bf00      	nop
        skip: it = next;
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 80110e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d1df      	bne.n	80110a6 <nk_build+0x1ba>
    }
    if (cmd) {
 80110e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d01a      	beq.n	8011122 <nk_build+0x236>
        /* append overlay commands */
        if (ctx->overlay.end != ctx->overlay.begin)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80110f2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80110fc:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 8011100:	429a      	cmp	r2, r3
 8011102:	d007      	beq.n	8011114 <nk_build+0x228>
            cmd->next = ctx->overlay.begin;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801110a:	f8d3 2610 	ldr.w	r2, [r3, #1552]	; 0x610
 801110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011110:	605a      	str	r2, [r3, #4]
        else cmd->next = ctx->memory.allocated;
    }
}
 8011112:	e006      	b.n	8011122 <nk_build+0x236>
        else cmd->next = ctx->memory.allocated;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801111a:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	605a      	str	r2, [r3, #4]
}
 8011122:	bf00      	nop
 8011124:	3738      	adds	r7, #56	; 0x38
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	080238fc 	.word	0x080238fc

08011130 <nk__begin>:
NK_API const struct nk_command*
nk__begin(struct nk_context *ctx)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    nk_byte *buffer;
    NK_ASSERT(ctx);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <nk__begin+0x1c>
 801113e:	4b2f      	ldr	r3, [pc, #188]	; (80111fc <nk__begin+0xcc>)
 8011140:	4a2f      	ldr	r2, [pc, #188]	; (8011200 <nk__begin+0xd0>)
 8011142:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8011146:	482f      	ldr	r0, [pc, #188]	; (8011204 <nk__begin+0xd4>)
 8011148:	f00c ff7c 	bl	801e044 <__assert_func>
    if (!ctx) return 0;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d101      	bne.n	8011156 <nk__begin+0x26>
 8011152:	2300      	movs	r3, #0
 8011154:	e04e      	b.n	80111f4 <nk__begin+0xc4>
    if (!ctx->count) return 0;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801115c:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8011160:	2b00      	cmp	r3, #0
 8011162:	d101      	bne.n	8011168 <nk__begin+0x38>
 8011164:	2300      	movs	r3, #0
 8011166:	e045      	b.n	80111f4 <nk__begin+0xc4>

    buffer = (nk_byte*)ctx->memory.memory.ptr;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801116e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8011172:	60bb      	str	r3, [r7, #8]
    if (!ctx->build) {
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801117a:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 801117e:	2b00      	cmp	r3, #0
 8011180:	d109      	bne.n	8011196 <nk__begin+0x66>
        nk_build(ctx);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7ff feb2 	bl	8010eec <nk_build>
        ctx->build = nk_true;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801118e:	461a      	mov	r2, r3
 8011190:	2301      	movs	r3, #1
 8011192:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    }
    iter = ctx->begin;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801119c:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 80111a0:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 80111a2:	e003      	b.n	80111ac <nk__begin+0x7c>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
        iter = iter->next;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80111aa:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d016      	beq.n	80111e0 <nk__begin+0xb0>
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111be:	429a      	cmp	r2, r3
 80111c0:	d0f0      	beq.n	80111a4 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d1ea      	bne.n	80111a4 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80111d8:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 80111dc:	429a      	cmp	r2, r3
 80111de:	d1e1      	bne.n	80111a4 <nk__begin+0x74>
    if (!iter) return 0;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d101      	bne.n	80111ea <nk__begin+0xba>
 80111e6:	2300      	movs	r3, #0
 80111e8:	e004      	b.n	80111f4 <nk__begin+0xc4>
    return nk_ptr_add_const(struct nk_command, buffer, iter->buffer.begin);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	4413      	add	r3, r2
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3710      	adds	r7, #16
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}
 80111fc:	08021ce4 	.word	0x08021ce4
 8011200:	08023984 	.word	0x08023984
 8011204:	08021ce8 	.word	0x08021ce8

08011208 <nk__next>:

NK_API const struct nk_command*
nk__next(struct nk_context *ctx, const struct nk_command *cmd)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
    nk_byte *buffer;
    const struct nk_command *next;
    NK_ASSERT(ctx);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d106      	bne.n	8011226 <nk__next+0x1e>
 8011218:	4b18      	ldr	r3, [pc, #96]	; (801127c <nk__next+0x74>)
 801121a:	4a19      	ldr	r2, [pc, #100]	; (8011280 <nk__next+0x78>)
 801121c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8011220:	4818      	ldr	r0, [pc, #96]	; (8011284 <nk__next+0x7c>)
 8011222:	f00c ff0f 	bl	801e044 <__assert_func>
    if (!ctx || !cmd || !ctx->count) return 0;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d009      	beq.n	8011240 <nk__next+0x38>
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d006      	beq.n	8011240 <nk__next+0x38>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011238:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801123c:	2b00      	cmp	r3, #0
 801123e:	d101      	bne.n	8011244 <nk__next+0x3c>
 8011240:	2300      	movs	r3, #0
 8011242:	e016      	b.n	8011272 <nk__next+0x6a>
    if (cmd->next >= ctx->memory.allocated) return 0;
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	685a      	ldr	r2, [r3, #4]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801124e:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 8011252:	429a      	cmp	r2, r3
 8011254:	d301      	bcc.n	801125a <nk__next+0x52>
 8011256:	2300      	movs	r3, #0
 8011258:	e00b      	b.n	8011272 <nk__next+0x6a>
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011260:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8011264:	60fb      	str	r3, [r7, #12]
    next = nk_ptr_add_const(struct nk_command, buffer, cmd->next);
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	68fa      	ldr	r2, [r7, #12]
 801126c:	4413      	add	r3, r2
 801126e:	60bb      	str	r3, [r7, #8]
    return next;
 8011270:	68bb      	ldr	r3, [r7, #8]
}
 8011272:	4618      	mov	r0, r3
 8011274:	3710      	adds	r7, #16
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	08021ce4 	.word	0x08021ce4
 8011280:	08023990 	.word	0x08023990
 8011284:	08021ce8 	.word	0x08021ce8

08011288 <nk_contextual_item_text>:
    return ret;
}
NK_API nk_bool
nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,
    nk_flags alignment)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b092      	sub	sp, #72	; 0x48
 801128c:	af06      	add	r7, sp, #24
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
 8011294:	603b      	str	r3, [r7, #0]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d105      	bne.n	80112a8 <nk_contextual_item_text+0x20>
 801129c:	4b4e      	ldr	r3, [pc, #312]	; (80113d8 <nk_contextual_item_text+0x150>)
 801129e:	4a4f      	ldr	r2, [pc, #316]	; (80113dc <nk_contextual_item_text+0x154>)
 80112a0:	214f      	movs	r1, #79	; 0x4f
 80112a2:	484f      	ldr	r0, [pc, #316]	; (80113e0 <nk_contextual_item_text+0x158>)
 80112a4:	f00c fece 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80112ae:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d105      	bne.n	80112c2 <nk_contextual_item_text+0x3a>
 80112b6:	4b4b      	ldr	r3, [pc, #300]	; (80113e4 <nk_contextual_item_text+0x15c>)
 80112b8:	4a48      	ldr	r2, [pc, #288]	; (80113dc <nk_contextual_item_text+0x154>)
 80112ba:	2150      	movs	r1, #80	; 0x50
 80112bc:	4848      	ldr	r0, [pc, #288]	; (80113e0 <nk_contextual_item_text+0x158>)
 80112be:	f00c fec1 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80112c8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80112cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d105      	bne.n	80112e0 <nk_contextual_item_text+0x58>
 80112d4:	4b44      	ldr	r3, [pc, #272]	; (80113e8 <nk_contextual_item_text+0x160>)
 80112d6:	4a41      	ldr	r2, [pc, #260]	; (80113dc <nk_contextual_item_text+0x154>)
 80112d8:	2151      	movs	r1, #81	; 0x51
 80112da:	4841      	ldr	r0, [pc, #260]	; (80113e0 <nk_contextual_item_text+0x158>)
 80112dc:	f00c feb2 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d00f      	beq.n	8011306 <nk_contextual_item_text+0x7e>
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80112ec:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d008      	beq.n	8011306 <nk_contextual_item_text+0x7e>
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80112fa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80112fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011302:	2b00      	cmp	r3, #0
 8011304:	d101      	bne.n	801130a <nk_contextual_item_text+0x82>
        return 0;
 8011306:	2300      	movs	r3, #0
 8011308:	e061      	b.n	80113ce <nk_contextual_item_text+0x146>

    win = ctx->current;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011310:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011314:	62fb      	str	r3, [r7, #44]	; 0x2c
    style = &ctx->style;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801131c:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8011324:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8011328:	f107 0310 	add.w	r3, r7, #16
 801132c:	eeb0 0a47 	vmov.f32	s0, s14
 8011330:	eef0 0a67 	vmov.f32	s1, s15
 8011334:	68f9      	ldr	r1, [r7, #12]
 8011336:	4618      	mov	r0, r3
 8011338:	f00b fd48 	bl	801cdcc <nk_widget_fitting>
 801133c:	4603      	mov	r3, r0
 801133e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return nk_false;
 8011342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <nk_contextual_item_text+0xc6>
 801134a:	2300      	movs	r3, #0
 801134c:	e03f      	b.n	80113ce <nk_contextual_item_text+0x146>

    in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 801134e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011352:	2b02      	cmp	r3, #2
 8011354:	d009      	beq.n	801136a <nk_contextual_item_text+0xe2>
 8011356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <nk_contextual_item_text+0xe2>
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	e000      	b.n	801136c <nk_contextual_item_text+0xe4>
 801136a:	2300      	movs	r3, #0
 801136c:	623b      	str	r3, [r7, #32]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 8011374:	3014      	adds	r0, #20
 8011376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011378:	f103 0164 	add.w	r1, r3, #100	; 0x64
 801137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137e:	33d0      	adds	r3, #208	; 0xd0
        text, len, alignment, NK_BUTTON_DEFAULT, &style->contextual_button, in, style->font)) {
 8011380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011382:	6812      	ldr	r2, [r2, #0]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 8011384:	ed97 6a04 	vldr	s12, [r7, #16]
 8011388:	edd7 6a05 	vldr	s13, [r7, #20]
 801138c:	ed97 7a06 	vldr	s14, [r7, #24]
 8011390:	edd7 7a07 	vldr	s15, [r7, #28]
 8011394:	9204      	str	r2, [sp, #16]
 8011396:	6a3a      	ldr	r2, [r7, #32]
 8011398:	9203      	str	r2, [sp, #12]
 801139a:	9302      	str	r3, [sp, #8]
 801139c:	2300      	movs	r3, #0
 801139e:	9301      	str	r3, [sp, #4]
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	eeb0 0a46 	vmov.f32	s0, s12
 80113ac:	eef0 0a66 	vmov.f32	s1, s13
 80113b0:	eeb0 1a47 	vmov.f32	s2, s14
 80113b4:	eef0 1a67 	vmov.f32	s3, s15
 80113b8:	f7fe f91e 	bl	800f5f8 <nk_do_button_text>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d004      	beq.n	80113cc <nk_contextual_item_text+0x144>
        nk_contextual_close(ctx);
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f000 f826 	bl	8011414 <nk_contextual_close>
        return nk_true;
 80113c8:	2301      	movs	r3, #1
 80113ca:	e000      	b.n	80113ce <nk_contextual_item_text+0x146>
    }
    return nk_false;
 80113cc:	2300      	movs	r3, #0
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3730      	adds	r7, #48	; 0x30
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	08021d34 	.word	0x08021d34
 80113dc:	0802399c 	.word	0x0802399c
 80113e0:	08021d38 	.word	0x08021d38
 80113e4:	08021d58 	.word	0x08021d58
 80113e8:	08021d68 	.word	0x08021d68

080113ec <nk_contextual_item_label>:
NK_API nk_bool
nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_text(ctx, label, nk_strlen(label), align);
 80113f8:	68b8      	ldr	r0, [r7, #8]
 80113fa:	f00b f949 	bl	801c690 <nk_strlen>
 80113fe:	4602      	mov	r2, r0
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	68b9      	ldr	r1, [r7, #8]
 8011404:	68f8      	ldr	r0, [r7, #12]
 8011406:	f7ff ff3f 	bl	8011288 <nk_contextual_item_text>
 801140a:	4603      	mov	r3, r0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <nk_contextual_close>:
{
    return nk_contextual_item_symbol_text(ctx, symbol, text, nk_strlen(text), align);
}
NK_API void
nk_contextual_close(struct nk_context *ctx)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d105      	bne.n	801142e <nk_contextual_close+0x1a>
 8011422:	4b1e      	ldr	r3, [pc, #120]	; (801149c <nk_contextual_close+0x88>)
 8011424:	4a1e      	ldr	r2, [pc, #120]	; (80114a0 <nk_contextual_close+0x8c>)
 8011426:	21b2      	movs	r1, #178	; 0xb2
 8011428:	481e      	ldr	r0, [pc, #120]	; (80114a4 <nk_contextual_close+0x90>)
 801142a:	f00c fe0b 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011434:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011438:	2b00      	cmp	r3, #0
 801143a:	d105      	bne.n	8011448 <nk_contextual_close+0x34>
 801143c:	4b1a      	ldr	r3, [pc, #104]	; (80114a8 <nk_contextual_close+0x94>)
 801143e:	4a18      	ldr	r2, [pc, #96]	; (80114a0 <nk_contextual_close+0x8c>)
 8011440:	21b3      	movs	r1, #179	; 0xb3
 8011442:	4818      	ldr	r0, [pc, #96]	; (80114a4 <nk_contextual_close+0x90>)
 8011444:	f00c fdfe 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801144e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011456:	2b00      	cmp	r3, #0
 8011458:	d105      	bne.n	8011466 <nk_contextual_close+0x52>
 801145a:	4b14      	ldr	r3, [pc, #80]	; (80114ac <nk_contextual_close+0x98>)
 801145c:	4a10      	ldr	r2, [pc, #64]	; (80114a0 <nk_contextual_close+0x8c>)
 801145e:	21b4      	movs	r1, #180	; 0xb4
 8011460:	4810      	ldr	r0, [pc, #64]	; (80114a4 <nk_contextual_close+0x90>)
 8011462:	f00c fdef 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d013      	beq.n	8011494 <nk_contextual_close+0x80>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011472:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00c      	beq.n	8011494 <nk_contextual_close+0x80>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011480:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011488:	2b00      	cmp	r3, #0
 801148a:	d003      	beq.n	8011494 <nk_contextual_close+0x80>
    nk_popup_close(ctx);
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f006 fa63 	bl	8017958 <nk_popup_close>
 8011492:	e000      	b.n	8011496 <nk_contextual_close+0x82>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 8011494:	bf00      	nop
}
 8011496:	3708      	adds	r7, #8
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	08021d34 	.word	0x08021d34
 80114a0:	080239b4 	.word	0x080239b4
 80114a4:	08021d38 	.word	0x08021d38
 80114a8:	08021d58 	.word	0x08021d58
 80114ac:	08021d68 	.word	0x08021d68

080114b0 <nk_contextual_end>:
NK_API void
nk_contextual_end(struct nk_context *ctx)
{
 80114b0:	b590      	push	{r4, r7, lr}
 80114b2:	b08d      	sub	sp, #52	; 0x34
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    struct nk_panel *panel;
    NK_ASSERT(ctx);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d105      	bne.n	80114ca <nk_contextual_end+0x1a>
 80114be:	4b69      	ldr	r3, [pc, #420]	; (8011664 <nk_contextual_end+0x1b4>)
 80114c0:	4a69      	ldr	r2, [pc, #420]	; (8011668 <nk_contextual_end+0x1b8>)
 80114c2:	21bd      	movs	r1, #189	; 0xbd
 80114c4:	4869      	ldr	r0, [pc, #420]	; (801166c <nk_contextual_end+0x1bc>)
 80114c6:	f00c fdbd 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80114d0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d105      	bne.n	80114e4 <nk_contextual_end+0x34>
 80114d8:	4b65      	ldr	r3, [pc, #404]	; (8011670 <nk_contextual_end+0x1c0>)
 80114da:	4a63      	ldr	r2, [pc, #396]	; (8011668 <nk_contextual_end+0x1b8>)
 80114dc:	21be      	movs	r1, #190	; 0xbe
 80114de:	4863      	ldr	r0, [pc, #396]	; (801166c <nk_contextual_end+0x1bc>)
 80114e0:	f00c fdb0 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current) return;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	f000 80b8 	beq.w	801165c <nk_contextual_end+0x1ac>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80114f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f000 80b0 	beq.w	801165c <nk_contextual_end+0x1ac>

    popup = ctx->current;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011502:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011506:	62fb      	str	r3, [r7, #44]	; 0x2c
    panel = popup->layout;
 8011508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801150e:	62bb      	str	r3, [r7, #40]	; 0x28
    NK_ASSERT(popup->parent);
 8011510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011512:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8011516:	2b00      	cmp	r3, #0
 8011518:	d105      	bne.n	8011526 <nk_contextual_end+0x76>
 801151a:	4b56      	ldr	r3, [pc, #344]	; (8011674 <nk_contextual_end+0x1c4>)
 801151c:	4a52      	ldr	r2, [pc, #328]	; (8011668 <nk_contextual_end+0x1b8>)
 801151e:	21c3      	movs	r1, #195	; 0xc3
 8011520:	4852      	ldr	r0, [pc, #328]	; (801166c <nk_contextual_end+0x1bc>)
 8011522:	f00c fd8f 	bl	801e044 <__assert_func>
    NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);
 8011526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 801152e:	2b00      	cmp	r3, #0
 8011530:	d105      	bne.n	801153e <nk_contextual_end+0x8e>
 8011532:	4b51      	ldr	r3, [pc, #324]	; (8011678 <nk_contextual_end+0x1c8>)
 8011534:	4a4c      	ldr	r2, [pc, #304]	; (8011668 <nk_contextual_end+0x1b8>)
 8011536:	21c4      	movs	r1, #196	; 0xc4
 8011538:	484c      	ldr	r0, [pc, #304]	; (801166c <nk_contextual_end+0x1bc>)
 801153a:	f00c fd83 	bl	801e044 <__assert_func>
    if (panel->flags & NK_WINDOW_DYNAMIC) {
 801153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011546:	2b00      	cmp	r3, #0
 8011548:	d07b      	beq.n	8011642 <nk_contextual_end+0x192>
        /* Close behavior
        This is a bit of a hack solution since we do not know before we end our popup
        how big it will be. We therefore do not directly know when a
        click outside the non-blocking popup must close it at that direct frame.
        Instead it will be closed in the next frame.*/
        struct nk_rect body = {0,0,0,0};
 801154a:	f107 0310 	add.w	r3, r7, #16
 801154e:	2200      	movs	r2, #0
 8011550:	601a      	str	r2, [r3, #0]
 8011552:	605a      	str	r2, [r3, #4]
 8011554:	609a      	str	r2, [r3, #8]
 8011556:	60da      	str	r2, [r3, #12]
        if (panel->at_y < (panel->bounds.y + panel->bounds.h)) {
 8011558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	edd3 6a03 	vldr	s13, [r3, #12]
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	edd3 7a05 	vldr	s15, [r3, #20]
 801156a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801156e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011576:	d53d      	bpl.n	80115f4 <nk_contextual_end+0x144>
            struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 801157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	4619      	mov	r1, r3
 8011584:	4610      	mov	r0, r2
 8011586:	f003 fc93 	bl	8014eb0 <nk_panel_get_padding>
 801158a:	eeb0 7a40 	vmov.f32	s14, s0
 801158e:	eef0 7a60 	vmov.f32	s15, s1
 8011592:	ed87 7a02 	vstr	s14, [r7, #8]
 8011596:	edc7 7a03 	vstr	s15, [r7, #12]
            body = panel->bounds;
 801159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159c:	f107 0410 	add.w	r4, r7, #16
 80115a0:	3308      	adds	r3, #8
 80115a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80115a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80115ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80115b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80115be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80115c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115cc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80115d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115d4:	edc7 7a05 	vstr	s15, [r7, #20]
            body.h = (panel->bounds.y + panel->bounds.h) - body.y;
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	ed93 7a03 	vldr	s14, [r3, #12]
 80115de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80115e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80115ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        {int pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2100      	movs	r1, #0
 80115f8:	4618      	mov	r0, r3
 80115fa:	f001 ff8e 	bl	801351a <nk_input_is_mouse_pressed>
 80115fe:	6278      	str	r0, [r7, #36]	; 0x24
        int in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	ed97 6a04 	vldr	s12, [r7, #16]
 8011606:	edd7 6a05 	vldr	s13, [r7, #20]
 801160a:	ed97 7a06 	vldr	s14, [r7, #24]
 801160e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011612:	eeb0 0a46 	vmov.f32	s0, s12
 8011616:	eef0 0a66 	vmov.f32	s1, s13
 801161a:	eeb0 1a47 	vmov.f32	s2, s14
 801161e:	eef0 1a67 	vmov.f32	s3, s15
 8011622:	4618      	mov	r0, r3
 8011624:	f001 febd 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 8011628:	6238      	str	r0, [r7, #32]
        if (pressed && in_body)
 801162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162c:	2b00      	cmp	r3, #0
 801162e:	d008      	beq.n	8011642 <nk_contextual_end+0x192>
 8011630:	6a3b      	ldr	r3, [r7, #32]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d005      	beq.n	8011642 <nk_contextual_end+0x192>
            popup->flags |= NK_WINDOW_HIDDEN;
 8011636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801163a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011640:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    if (popup->flags & NK_WINDOW_HIDDEN)
 8011642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801164a:	2b00      	cmp	r3, #0
 801164c:	d002      	beq.n	8011654 <nk_contextual_end+0x1a4>
        popup->seq = 0;
 801164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011650:	2200      	movs	r2, #0
 8011652:	601a      	str	r2, [r3, #0]
    nk_popup_end(ctx);
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f006 f9cb 	bl	80179f0 <nk_popup_end>
    return;
 801165a:	e000      	b.n	801165e <nk_contextual_end+0x1ae>
    if (!ctx || !ctx->current) return;
 801165c:	bf00      	nop
}
 801165e:	3734      	adds	r7, #52	; 0x34
 8011660:	46bd      	mov	sp, r7
 8011662:	bd90      	pop	{r4, r7, pc}
 8011664:	08021d34 	.word	0x08021d34
 8011668:	080239c8 	.word	0x080239c8
 801166c:	08021d38 	.word	0x08021d38
 8011670:	08021d58 	.word	0x08021d58
 8011674:	08021d80 	.word	0x08021d80
 8011678:	08021d90 	.word	0x08021d90

0801167c <nk_command_buffer_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_command_buffer_init(struct nk_command_buffer *cb,
    struct nk_buffer *b, enum nk_command_clipping clip)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	4613      	mov	r3, r2
 8011688:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(cb);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d105      	bne.n	801169c <nk_command_buffer_init+0x20>
 8011690:	4b15      	ldr	r3, [pc, #84]	; (80116e8 <nk_command_buffer_init+0x6c>)
 8011692:	4a16      	ldr	r2, [pc, #88]	; (80116ec <nk_command_buffer_init+0x70>)
 8011694:	210d      	movs	r1, #13
 8011696:	4816      	ldr	r0, [pc, #88]	; (80116f0 <nk_command_buffer_init+0x74>)
 8011698:	f00c fcd4 	bl	801e044 <__assert_func>
    NK_ASSERT(b);
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d105      	bne.n	80116ae <nk_command_buffer_init+0x32>
 80116a2:	4b14      	ldr	r3, [pc, #80]	; (80116f4 <nk_command_buffer_init+0x78>)
 80116a4:	4a11      	ldr	r2, [pc, #68]	; (80116ec <nk_command_buffer_init+0x70>)
 80116a6:	210e      	movs	r1, #14
 80116a8:	4811      	ldr	r0, [pc, #68]	; (80116f0 <nk_command_buffer_init+0x74>)
 80116aa:	f00c fccb 	bl	801e044 <__assert_func>
    if (!cb || !b) return;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d015      	beq.n	80116e0 <nk_command_buffer_init+0x64>
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d012      	beq.n	80116e0 <nk_command_buffer_init+0x64>
    cb->base = b;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	68ba      	ldr	r2, [r7, #8]
 80116be:	601a      	str	r2, [r3, #0]
    cb->use_clipping = (int)clip;
 80116c0:	79fa      	ldrb	r2, [r7, #7]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	615a      	str	r2, [r3, #20]
    cb->begin = b->allocated;
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	61da      	str	r2, [r3, #28]
    cb->end = b->allocated;
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	621a      	str	r2, [r3, #32]
    cb->last = b->allocated;
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	625a      	str	r2, [r3, #36]	; 0x24
 80116de:	e000      	b.n	80116e2 <nk_command_buffer_init+0x66>
    if (!cb || !b) return;
 80116e0:	bf00      	nop
}
 80116e2:	3710      	adds	r7, #16
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	08021db4 	.word	0x08021db4
 80116ec:	080239ec 	.word	0x080239ec
 80116f0:	08021db8 	.word	0x08021db8
 80116f4:	08021dd4 	.word	0x08021dd4

080116f8 <nk_command_buffer_reset>:
NK_LIB void
nk_command_buffer_reset(struct nk_command_buffer *b)
{
 80116f8:	b590      	push	{r4, r7, lr}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d105      	bne.n	8011712 <nk_command_buffer_reset+0x1a>
 8011706:	4b0f      	ldr	r3, [pc, #60]	; (8011744 <nk_command_buffer_reset+0x4c>)
 8011708:	4a0f      	ldr	r2, [pc, #60]	; (8011748 <nk_command_buffer_reset+0x50>)
 801170a:	2119      	movs	r1, #25
 801170c:	480f      	ldr	r0, [pc, #60]	; (801174c <nk_command_buffer_reset+0x54>)
 801170e:	f00c fc99 	bl	801e044 <__assert_func>
    if (!b) return;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d010      	beq.n	801173a <nk_command_buffer_reset+0x42>
    b->begin = 0;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	61da      	str	r2, [r3, #28]
    b->end = 0;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	621a      	str	r2, [r3, #32]
    b->last = 0;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	625a      	str	r2, [r3, #36]	; 0x24
    b->clip = nk_null_rect;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	4a08      	ldr	r2, [pc, #32]	; (8011750 <nk_command_buffer_reset+0x58>)
 801172e:	1d1c      	adds	r4, r3, #4
 8011730:	4613      	mov	r3, r2
 8011732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011738:	e000      	b.n	801173c <nk_command_buffer_reset+0x44>
    if (!b) return;
 801173a:	bf00      	nop
#ifdef NK_INCLUDE_COMMAND_USERDATA
    b->userdata.ptr = 0;
#endif
}
 801173c:	370c      	adds	r7, #12
 801173e:	46bd      	mov	sp, r7
 8011740:	bd90      	pop	{r4, r7, pc}
 8011742:	bf00      	nop
 8011744:	08021dd4 	.word	0x08021dd4
 8011748:	08023a04 	.word	0x08023a04
 801174c:	08021db8 	.word	0x08021db8
 8011750:	080239dc 	.word	0x080239dc

08011754 <nk_command_buffer_push>:
NK_LIB void*
nk_command_buffer_push(struct nk_command_buffer* b,
    enum nk_command_type t, nk_size size)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b088      	sub	sp, #32
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	460b      	mov	r3, r1
 801175e:	607a      	str	r2, [r7, #4]
 8011760:	72fb      	strb	r3, [r7, #11]
    struct nk_command *cmd;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d105      	bne.n	8011774 <nk_command_buffer_push+0x20>
 8011768:	4b28      	ldr	r3, [pc, #160]	; (801180c <nk_command_buffer_push+0xb8>)
 801176a:	4a29      	ldr	r2, [pc, #164]	; (8011810 <nk_command_buffer_push+0xbc>)
 801176c:	212d      	movs	r1, #45	; 0x2d
 801176e:	4829      	ldr	r0, [pc, #164]	; (8011814 <nk_command_buffer_push+0xc0>)
 8011770:	f00c fc68 	bl	801e044 <__assert_func>
    NK_ASSERT(b->base);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d105      	bne.n	8011788 <nk_command_buffer_push+0x34>
 801177c:	4b26      	ldr	r3, [pc, #152]	; (8011818 <nk_command_buffer_push+0xc4>)
 801177e:	4a24      	ldr	r2, [pc, #144]	; (8011810 <nk_command_buffer_push+0xbc>)
 8011780:	212e      	movs	r1, #46	; 0x2e
 8011782:	4824      	ldr	r0, [pc, #144]	; (8011814 <nk_command_buffer_push+0xc0>)
 8011784:	f00c fc5e 	bl	801e044 <__assert_func>
    if (!b) return 0;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d101      	bne.n	8011792 <nk_command_buffer_push+0x3e>
 801178e:	2300      	movs	r3, #0
 8011790:	e037      	b.n	8011802 <nk_command_buffer_push+0xae>
    cmd = (struct nk_command*)nk_buffer_alloc(b->base,NK_BUFFER_FRONT,size,align);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6818      	ldr	r0, [r3, #0]
 8011796:	4b21      	ldr	r3, [pc, #132]	; (801181c <nk_command_buffer_push+0xc8>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	2100      	movs	r1, #0
 801179e:	f7fd f96f 	bl	800ea80 <nk_buffer_alloc>
 80117a2:	61f8      	str	r0, [r7, #28]
    if (!cmd) return 0;
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d101      	bne.n	80117ae <nk_command_buffer_push+0x5a>
 80117aa:	2300      	movs	r3, #0
 80117ac:	e029      	b.n	8011802 <nk_command_buffer_push+0xae>

    /* make sure the offset to the next command is aligned */
    b->last = (nk_size)((nk_byte*)cmd - (nk_byte*)b->base->memory.ptr);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	6a1b      	ldr	r3, [r3, #32]
 80117b4:	69fa      	ldr	r2, [r7, #28]
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	461a      	mov	r2, r3
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	625a      	str	r2, [r3, #36]	; 0x24
    unaligned = (nk_byte*)cmd + size;
 80117be:	69fa      	ldr	r2, [r7, #28]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4413      	add	r3, r2
 80117c4:	61bb      	str	r3, [r7, #24]
    memory = NK_ALIGN_PTR(unaligned, align);
 80117c6:	4b15      	ldr	r3, [pc, #84]	; (801181c <nk_command_buffer_push+0xc8>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	3b01      	subs	r3, #1
 80117cc:	69ba      	ldr	r2, [r7, #24]
 80117ce:	4413      	add	r3, r2
 80117d0:	461a      	mov	r2, r3
 80117d2:	4b12      	ldr	r3, [pc, #72]	; (801181c <nk_command_buffer_push+0xc8>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	425b      	negs	r3, r3
 80117d8:	4013      	ands	r3, r2
 80117da:	617b      	str	r3, [r7, #20]
    alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 80117dc:	697a      	ldr	r2, [r7, #20]
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	1ad3      	subs	r3, r2, r3
 80117e2:	613b      	str	r3, [r7, #16]
#ifdef NK_ZERO_COMMAND_MEMORY
    NK_MEMSET(cmd, 0, size + alignment);
#endif

    cmd->type = t;
 80117e4:	69fb      	ldr	r3, [r7, #28]
 80117e6:	7afa      	ldrb	r2, [r7, #11]
 80117e8:	701a      	strb	r2, [r3, #0]
    cmd->next = b->base->allocated + alignment;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	441a      	add	r2, r3
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	605a      	str	r2, [r3, #4]
#ifdef NK_INCLUDE_COMMAND_USERDATA
    cmd->userdata = b->userdata;
#endif
    b->end = cmd->next;
 80117f8:	69fb      	ldr	r3, [r7, #28]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	621a      	str	r2, [r3, #32]
    return cmd;
 8011800:	69fb      	ldr	r3, [r7, #28]
}
 8011802:	4618      	mov	r0, r3
 8011804:	3720      	adds	r7, #32
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	08021dd4 	.word	0x08021dd4
 8011810:	08023a1c 	.word	0x08023a1c
 8011814:	08021db8 	.word	0x08021db8
 8011818:	08021dd8 	.word	0x08021dd8
 801181c:	08023a34 	.word	0x08023a34

08011820 <nk_push_scissor>:
NK_API void
nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b088      	sub	sp, #32
 8011824:	af00      	add	r7, sp, #0
 8011826:	6178      	str	r0, [r7, #20]
 8011828:	eeb0 6a40 	vmov.f32	s12, s0
 801182c:	eef0 6a60 	vmov.f32	s13, s1
 8011830:	eeb0 7a41 	vmov.f32	s14, s2
 8011834:	eef0 7a61 	vmov.f32	s15, s3
 8011838:	ed87 6a01 	vstr	s12, [r7, #4]
 801183c:	edc7 6a02 	vstr	s13, [r7, #8]
 8011840:	ed87 7a03 	vstr	s14, [r7, #12]
 8011844:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_scissor *cmd;
    NK_ASSERT(b);
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d105      	bne.n	801185a <nk_push_scissor+0x3a>
 801184e:	4b2d      	ldr	r3, [pc, #180]	; (8011904 <nk_push_scissor+0xe4>)
 8011850:	4a2d      	ldr	r2, [pc, #180]	; (8011908 <nk_push_scissor+0xe8>)
 8011852:	2148      	movs	r1, #72	; 0x48
 8011854:	482d      	ldr	r0, [pc, #180]	; (801190c <nk_push_scissor+0xec>)
 8011856:	f00c fbf5 	bl	801e044 <__assert_func>
    if (!b) return;
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d04b      	beq.n	80118f8 <nk_push_scissor+0xd8>

    b->clip.x = r.x;
 8011860:	687a      	ldr	r2, [r7, #4]
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	605a      	str	r2, [r3, #4]
    b->clip.y = r.y;
 8011866:	68ba      	ldr	r2, [r7, #8]
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	609a      	str	r2, [r3, #8]
    b->clip.w = r.w;
 801186c:	68fa      	ldr	r2, [r7, #12]
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	60da      	str	r2, [r3, #12]
    b->clip.h = r.h;
 8011872:	693a      	ldr	r2, [r7, #16]
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	611a      	str	r2, [r3, #16]
    cmd = (struct nk_command_scissor*)
        nk_command_buffer_push(b, NK_COMMAND_SCISSOR, sizeof(*cmd));
 8011878:	2210      	movs	r2, #16
 801187a:	2101      	movs	r1, #1
 801187c:	6978      	ldr	r0, [r7, #20]
 801187e:	f7ff ff69 	bl	8011754 <nk_command_buffer_push>
 8011882:	61f8      	str	r0, [r7, #28]

    if (!cmd) return;
 8011884:	69fb      	ldr	r3, [r7, #28]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d038      	beq.n	80118fc <nk_push_scissor+0xdc>
    cmd->x = (short)r.x;
 801188a:	edd7 7a01 	vldr	s15, [r7, #4]
 801188e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011892:	ee17 3a90 	vmov	r3, s15
 8011896:	b21a      	sxth	r2, r3
 8011898:	69fb      	ldr	r3, [r7, #28]
 801189a:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 801189c:	edd7 7a02 	vldr	s15, [r7, #8]
 80118a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118a4:	ee17 3a90 	vmov	r3, s15
 80118a8:	b21a      	sxth	r2, r3
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 80118ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80118b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80118b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ba:	dd07      	ble.n	80118cc <nk_push_scissor+0xac>
 80118bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80118c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118c4:	ee17 3a90 	vmov	r3, s15
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	e000      	b.n	80118ce <nk_push_scissor+0xae>
 80118cc:	2200      	movs	r2, #0
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 80118d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80118d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80118da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118de:	dd07      	ble.n	80118f0 <nk_push_scissor+0xd0>
 80118e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80118e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118e8:	ee17 3a90 	vmov	r3, s15
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	e000      	b.n	80118f2 <nk_push_scissor+0xd2>
 80118f0:	2200      	movs	r2, #0
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	81da      	strh	r2, [r3, #14]
 80118f6:	e002      	b.n	80118fe <nk_push_scissor+0xde>
    if (!b) return;
 80118f8:	bf00      	nop
 80118fa:	e000      	b.n	80118fe <nk_push_scissor+0xde>
    if (!cmd) return;
 80118fc:	bf00      	nop
}
 80118fe:	3720      	adds	r7, #32
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	08021dd4 	.word	0x08021dd4
 8011908:	08023a38 	.word	0x08023a38
 801190c:	08021db8 	.word	0x08021db8

08011910 <nk_stroke_rect>:
    cmd->color = col;
}
NK_API void
nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, float line_thickness, struct nk_color c)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b08a      	sub	sp, #40	; 0x28
 8011914:	af00      	add	r7, sp, #0
 8011916:	61f8      	str	r0, [r7, #28]
 8011918:	eeb0 6a40 	vmov.f32	s12, s0
 801191c:	eef0 6a60 	vmov.f32	s13, s1
 8011920:	eeb0 7a41 	vmov.f32	s14, s2
 8011924:	eef0 7a61 	vmov.f32	s15, s3
 8011928:	ed87 2a02 	vstr	s4, [r7, #8]
 801192c:	edc7 2a01 	vstr	s5, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
 8011932:	ed87 6a03 	vstr	s12, [r7, #12]
 8011936:	edc7 6a04 	vstr	s13, [r7, #16]
 801193a:	ed87 7a05 	vstr	s14, [r7, #20]
 801193e:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect *cmd;
    NK_ASSERT(b);
 8011942:	69fb      	ldr	r3, [r7, #28]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d105      	bne.n	8011954 <nk_stroke_rect+0x44>
 8011948:	4b72      	ldr	r3, [pc, #456]	; (8011b14 <nk_stroke_rect+0x204>)
 801194a:	4a73      	ldr	r2, [pc, #460]	; (8011b18 <nk_stroke_rect+0x208>)
 801194c:	2185      	movs	r1, #133	; 0x85
 801194e:	4873      	ldr	r0, [pc, #460]	; (8011b1c <nk_stroke_rect+0x20c>)
 8011950:	f00c fb78 	bl	801e044 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 8011954:	69fb      	ldr	r3, [r7, #28]
 8011956:	2b00      	cmp	r3, #0
 8011958:	f000 80d4 	beq.w	8011b04 <nk_stroke_rect+0x1f4>
 801195c:	78fb      	ldrb	r3, [r7, #3]
 801195e:	2b00      	cmp	r3, #0
 8011960:	f000 80d0 	beq.w	8011b04 <nk_stroke_rect+0x1f4>
 8011964:	edd7 7a05 	vldr	s15, [r7, #20]
 8011968:	eef5 7a40 	vcmp.f32	s15, #0.0
 801196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011970:	f000 80c8 	beq.w	8011b04 <nk_stroke_rect+0x1f4>
 8011974:	edd7 7a06 	vldr	s15, [r7, #24]
 8011978:	eef5 7a40 	vcmp.f32	s15, #0.0
 801197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011980:	f000 80c0 	beq.w	8011b04 <nk_stroke_rect+0x1f4>
 8011984:	edd7 7a01 	vldr	s15, [r7, #4]
 8011988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011990:	f240 80b8 	bls.w	8011b04 <nk_stroke_rect+0x1f4>
    if (b->use_clipping) {
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	695b      	ldr	r3, [r3, #20]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d05e      	beq.n	8011a5a <nk_stroke_rect+0x14a>
        const struct nk_rect *clip = &b->clip;
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	3304      	adds	r3, #4
 80119a0:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 80119a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a4:	ed93 7a00 	vldr	s14, [r3]
 80119a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80119ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80119b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119bc:	bf4c      	ite	mi
 80119be:	2301      	movmi	r3, #1
 80119c0:	2300      	movpl	r3, #0
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	f083 0301 	eor.w	r3, r3, #1
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f040 809c 	bne.w	8011b08 <nk_stroke_rect+0x1f8>
 80119d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80119d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d6:	edd3 6a00 	vldr	s13, [r3]
 80119da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80119e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ec:	bf4c      	ite	mi
 80119ee:	2301      	movmi	r3, #1
 80119f0:	2300      	movpl	r3, #0
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	f083 0301 	eor.w	r3, r3, #1
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f040 8084 	bne.w	8011b08 <nk_stroke_rect+0x1f8>
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	ed93 7a01 	vldr	s14, [r3, #4]
 8011a06:	edd7 6a04 	vldr	s13, [r7, #16]
 8011a0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8011a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a1a:	bf4c      	ite	mi
 8011a1c:	2301      	movmi	r3, #1
 8011a1e:	2300      	movpl	r3, #0
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	f083 0301 	eor.w	r3, r3, #1
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d16d      	bne.n	8011b08 <nk_stroke_rect+0x1f8>
 8011a2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8011a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a32:	edd3 6a01 	vldr	s13, [r3, #4]
 8011a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a38:	edd3 7a03 	vldr	s15, [r3, #12]
 8011a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a48:	bf4c      	ite	mi
 8011a4a:	2301      	movmi	r3, #1
 8011a4c:	2300      	movpl	r3, #0
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	f083 0301 	eor.w	r3, r3, #1
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d156      	bne.n	8011b08 <nk_stroke_rect+0x1f8>
            clip->x, clip->y, clip->w, clip->h)) return;
    }
    cmd = (struct nk_command_rect*)
        nk_command_buffer_push(b, NK_COMMAND_RECT, sizeof(*cmd));
 8011a5a:	2218      	movs	r2, #24
 8011a5c:	2104      	movs	r1, #4
 8011a5e:	69f8      	ldr	r0, [r7, #28]
 8011a60:	f7ff fe78 	bl	8011754 <nk_command_buffer_push>
 8011a64:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8011a66:	6a3b      	ldr	r3, [r7, #32]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d04f      	beq.n	8011b0c <nk_stroke_rect+0x1fc>
    cmd->rounding = (unsigned short)rounding;
 8011a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8011a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a74:	ee17 3a90 	vmov	r3, s15
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	6a3b      	ldr	r3, [r7, #32]
 8011a7c:	811a      	strh	r2, [r3, #8]
    cmd->line_thickness = (unsigned short)line_thickness;
 8011a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a86:	ee17 3a90 	vmov	r3, s15
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	6a3b      	ldr	r3, [r7, #32]
 8011a8e:	815a      	strh	r2, [r3, #10]
    cmd->x = (short)rect.x;
 8011a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8011a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a98:	ee17 3a90 	vmov	r3, s15
 8011a9c:	b21a      	sxth	r2, r3
 8011a9e:	6a3b      	ldr	r3, [r7, #32]
 8011aa0:	819a      	strh	r2, [r3, #12]
    cmd->y = (short)rect.y;
 8011aa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8011aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011aaa:	ee17 3a90 	vmov	r3, s15
 8011aae:	b21a      	sxth	r2, r3
 8011ab0:	6a3b      	ldr	r3, [r7, #32]
 8011ab2:	81da      	strh	r2, [r3, #14]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8011ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8011ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac0:	dd07      	ble.n	8011ad2 <nk_stroke_rect+0x1c2>
 8011ac2:	edd7 7a05 	vldr	s15, [r7, #20]
 8011ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011aca:	ee17 3a90 	vmov	r3, s15
 8011ace:	b29a      	uxth	r2, r3
 8011ad0:	e000      	b.n	8011ad4 <nk_stroke_rect+0x1c4>
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	6a3b      	ldr	r3, [r7, #32]
 8011ad6:	821a      	strh	r2, [r3, #16]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8011ad8:	edd7 7a06 	vldr	s15, [r7, #24]
 8011adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae4:	dd07      	ble.n	8011af6 <nk_stroke_rect+0x1e6>
 8011ae6:	edd7 7a06 	vldr	s15, [r7, #24]
 8011aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011aee:	ee17 3a90 	vmov	r3, s15
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	e000      	b.n	8011af8 <nk_stroke_rect+0x1e8>
 8011af6:	2200      	movs	r2, #0
 8011af8:	6a3b      	ldr	r3, [r7, #32]
 8011afa:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 8011afc:	6a3b      	ldr	r3, [r7, #32]
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	615a      	str	r2, [r3, #20]
 8011b02:	e004      	b.n	8011b0e <nk_stroke_rect+0x1fe>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 8011b04:	bf00      	nop
 8011b06:	e002      	b.n	8011b0e <nk_stroke_rect+0x1fe>
            clip->x, clip->y, clip->w, clip->h)) return;
 8011b08:	bf00      	nop
 8011b0a:	e000      	b.n	8011b0e <nk_stroke_rect+0x1fe>
    if (!cmd) return;
 8011b0c:	bf00      	nop
}
 8011b0e:	3728      	adds	r7, #40	; 0x28
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}
 8011b14:	08021dd4 	.word	0x08021dd4
 8011b18:	08023a48 	.word	0x08023a48
 8011b1c:	08021db8 	.word	0x08021db8

08011b20 <nk_fill_rect>:
NK_API void
nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, struct nk_color c)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b08a      	sub	sp, #40	; 0x28
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	61f8      	str	r0, [r7, #28]
 8011b28:	eeb0 6a40 	vmov.f32	s12, s0
 8011b2c:	eef0 6a60 	vmov.f32	s13, s1
 8011b30:	eeb0 7a41 	vmov.f32	s14, s2
 8011b34:	eef0 7a61 	vmov.f32	s15, s3
 8011b38:	ed87 2a02 	vstr	s4, [r7, #8]
 8011b3c:	6079      	str	r1, [r7, #4]
 8011b3e:	ed87 6a03 	vstr	s12, [r7, #12]
 8011b42:	edc7 6a04 	vstr	s13, [r7, #16]
 8011b46:	ed87 7a05 	vstr	s14, [r7, #20]
 8011b4a:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect_filled *cmd;
    NK_ASSERT(b);
 8011b4e:	69fb      	ldr	r3, [r7, #28]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d105      	bne.n	8011b60 <nk_fill_rect+0x40>
 8011b54:	4b6a      	ldr	r3, [pc, #424]	; (8011d00 <nk_fill_rect+0x1e0>)
 8011b56:	4a6b      	ldr	r2, [pc, #428]	; (8011d04 <nk_fill_rect+0x1e4>)
 8011b58:	219c      	movs	r1, #156	; 0x9c
 8011b5a:	486b      	ldr	r0, [pc, #428]	; (8011d08 <nk_fill_rect+0x1e8>)
 8011b5c:	f00c fa72 	bl	801e044 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8011b60:	69fb      	ldr	r3, [r7, #28]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f000 80c4 	beq.w	8011cf0 <nk_fill_rect+0x1d0>
 8011b68:	79fb      	ldrb	r3, [r7, #7]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f000 80c0 	beq.w	8011cf0 <nk_fill_rect+0x1d0>
 8011b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b7c:	f000 80b8 	beq.w	8011cf0 <nk_fill_rect+0x1d0>
 8011b80:	edd7 7a06 	vldr	s15, [r7, #24]
 8011b84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b8c:	f000 80b0 	beq.w	8011cf0 <nk_fill_rect+0x1d0>
    if (b->use_clipping) {
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	695b      	ldr	r3, [r3, #20]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d05d      	beq.n	8011c54 <nk_fill_rect+0x134>
        const struct nk_rect *clip = &b->clip;
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba0:	ed93 7a00 	vldr	s14, [r3]
 8011ba4:	edd7 6a03 	vldr	s13, [r7, #12]
 8011ba8:	edd7 7a05 	vldr	s15, [r7, #20]
 8011bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb8:	bf4c      	ite	mi
 8011bba:	2301      	movmi	r3, #1
 8011bbc:	2300      	movpl	r3, #0
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	f083 0301 	eor.w	r3, r3, #1
 8011bc4:	b2db      	uxtb	r3, r3
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	f040 8094 	bne.w	8011cf4 <nk_fill_rect+0x1d4>
 8011bcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd2:	edd3 6a00 	vldr	s13, [r3]
 8011bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8011bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be8:	bf4c      	ite	mi
 8011bea:	2301      	movmi	r3, #1
 8011bec:	2300      	movpl	r3, #0
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	f083 0301 	eor.w	r3, r3, #1
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d17c      	bne.n	8011cf4 <nk_fill_rect+0x1d4>
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfc:	ed93 7a01 	vldr	s14, [r3, #4]
 8011c00:	edd7 6a04 	vldr	s13, [r7, #16]
 8011c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c14:	bf4c      	ite	mi
 8011c16:	2301      	movmi	r3, #1
 8011c18:	2300      	movpl	r3, #0
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	f083 0301 	eor.w	r3, r3, #1
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d166      	bne.n	8011cf4 <nk_fill_rect+0x1d4>
 8011c26:	ed97 7a04 	vldr	s14, [r7, #16]
 8011c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8011c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c32:	edd3 7a03 	vldr	s15, [r3, #12]
 8011c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c42:	bf4c      	ite	mi
 8011c44:	2301      	movmi	r3, #1
 8011c46:	2300      	movpl	r3, #0
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	f083 0301 	eor.w	r3, r3, #1
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d14f      	bne.n	8011cf4 <nk_fill_rect+0x1d4>
            clip->x, clip->y, clip->w, clip->h)) return;
    }

    cmd = (struct nk_command_rect_filled*)
        nk_command_buffer_push(b, NK_COMMAND_RECT_FILLED, sizeof(*cmd));
 8011c54:	2218      	movs	r2, #24
 8011c56:	2105      	movs	r1, #5
 8011c58:	69f8      	ldr	r0, [r7, #28]
 8011c5a:	f7ff fd7b 	bl	8011754 <nk_command_buffer_push>
 8011c5e:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8011c60:	6a3b      	ldr	r3, [r7, #32]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d048      	beq.n	8011cf8 <nk_fill_rect+0x1d8>
    cmd->rounding = (unsigned short)rounding;
 8011c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8011c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c6e:	ee17 3a90 	vmov	r3, s15
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	6a3b      	ldr	r3, [r7, #32]
 8011c76:	811a      	strh	r2, [r3, #8]
    cmd->x = (short)rect.x;
 8011c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8011c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c80:	ee17 3a90 	vmov	r3, s15
 8011c84:	b21a      	sxth	r2, r3
 8011c86:	6a3b      	ldr	r3, [r7, #32]
 8011c88:	815a      	strh	r2, [r3, #10]
    cmd->y = (short)rect.y;
 8011c8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8011c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c92:	ee17 3a90 	vmov	r3, s15
 8011c96:	b21a      	sxth	r2, r3
 8011c98:	6a3b      	ldr	r3, [r7, #32]
 8011c9a:	819a      	strh	r2, [r3, #12]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8011c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca8:	dd07      	ble.n	8011cba <nk_fill_rect+0x19a>
 8011caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8011cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cb2:	ee17 3a90 	vmov	r3, s15
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	e000      	b.n	8011cbc <nk_fill_rect+0x19c>
 8011cba:	2200      	movs	r2, #0
 8011cbc:	6a3b      	ldr	r3, [r7, #32]
 8011cbe:	81da      	strh	r2, [r3, #14]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8011cc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8011cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ccc:	dd07      	ble.n	8011cde <nk_fill_rect+0x1be>
 8011cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8011cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cd6:	ee17 3a90 	vmov	r3, s15
 8011cda:	b29a      	uxth	r2, r3
 8011cdc:	e000      	b.n	8011ce0 <nk_fill_rect+0x1c0>
 8011cde:	2200      	movs	r2, #0
 8011ce0:	6a3b      	ldr	r3, [r7, #32]
 8011ce2:	821a      	strh	r2, [r3, #16]
    cmd->color = c;
 8011ce4:	6a3b      	ldr	r3, [r7, #32]
 8011ce6:	3312      	adds	r3, #18
 8011ce8:	1d3a      	adds	r2, r7, #4
 8011cea:	6810      	ldr	r0, [r2, #0]
 8011cec:	6018      	str	r0, [r3, #0]
 8011cee:	e004      	b.n	8011cfa <nk_fill_rect+0x1da>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8011cf0:	bf00      	nop
 8011cf2:	e002      	b.n	8011cfa <nk_fill_rect+0x1da>
            clip->x, clip->y, clip->w, clip->h)) return;
 8011cf4:	bf00      	nop
 8011cf6:	e000      	b.n	8011cfa <nk_fill_rect+0x1da>
    if (!cmd) return;
 8011cf8:	bf00      	nop
}
 8011cfa:	3728      	adds	r7, #40	; 0x28
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	08021dd4 	.word	0x08021dd4
 8011d04:	08023a58 	.word	0x08023a58
 8011d08:	08021db8 	.word	0x08021db8

08011d0c <nk_fill_circle>:
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
    cmd->color = c;
}
NK_API void
nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b088      	sub	sp, #32
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6178      	str	r0, [r7, #20]
 8011d14:	eeb0 6a40 	vmov.f32	s12, s0
 8011d18:	eef0 6a60 	vmov.f32	s13, s1
 8011d1c:	eeb0 7a41 	vmov.f32	s14, s2
 8011d20:	eef0 7a61 	vmov.f32	s15, s3
 8011d24:	6039      	str	r1, [r7, #0]
 8011d26:	ed87 6a01 	vstr	s12, [r7, #4]
 8011d2a:	edc7 6a02 	vstr	s13, [r7, #8]
 8011d2e:	ed87 7a03 	vstr	s14, [r7, #12]
 8011d32:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_circle_filled *cmd;
    NK_ASSERT(b);
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d105      	bne.n	8011d48 <nk_fill_circle+0x3c>
 8011d3c:	4b65      	ldr	r3, [pc, #404]	; (8011ed4 <nk_fill_circle+0x1c8>)
 8011d3e:	4a66      	ldr	r2, [pc, #408]	; (8011ed8 <nk_fill_circle+0x1cc>)
 8011d40:	21e2      	movs	r1, #226	; 0xe2
 8011d42:	4866      	ldr	r0, [pc, #408]	; (8011edc <nk_fill_circle+0x1d0>)
 8011d44:	f00c f97e 	bl	801e044 <__assert_func>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	f000 80b9 	beq.w	8011ec2 <nk_fill_circle+0x1b6>
 8011d50:	78fb      	ldrb	r3, [r7, #3]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 80b5 	beq.w	8011ec2 <nk_fill_circle+0x1b6>
 8011d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8011d5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d64:	f000 80ad 	beq.w	8011ec2 <nk_fill_circle+0x1b6>
 8011d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8011d6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d74:	f000 80a5 	beq.w	8011ec2 <nk_fill_circle+0x1b6>
    if (b->use_clipping) {
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	695b      	ldr	r3, [r3, #20]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d05d      	beq.n	8011e3c <nk_fill_circle+0x130>
        const struct nk_rect *clip = &b->clip;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	3304      	adds	r3, #4
 8011d84:	61fb      	str	r3, [r7, #28]
        if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	ed93 7a00 	vldr	s14, [r3]
 8011d8c:	edd7 6a01 	vldr	s13, [r7, #4]
 8011d90:	edd7 7a03 	vldr	s15, [r7, #12]
 8011d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da0:	bf4c      	ite	mi
 8011da2:	2301      	movmi	r3, #1
 8011da4:	2300      	movpl	r3, #0
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	f083 0301 	eor.w	r3, r3, #1
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	f040 8089 	bne.w	8011ec6 <nk_fill_circle+0x1ba>
 8011db4:	ed97 7a01 	vldr	s14, [r7, #4]
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	edd3 6a00 	vldr	s13, [r3]
 8011dbe:	69fb      	ldr	r3, [r7, #28]
 8011dc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8011dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd0:	bf4c      	ite	mi
 8011dd2:	2301      	movmi	r3, #1
 8011dd4:	2300      	movpl	r3, #0
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	f083 0301 	eor.w	r3, r3, #1
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d171      	bne.n	8011ec6 <nk_fill_circle+0x1ba>
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	ed93 7a01 	vldr	s14, [r3, #4]
 8011de8:	edd7 6a02 	vldr	s13, [r7, #8]
 8011dec:	edd7 7a04 	vldr	s15, [r7, #16]
 8011df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfc:	bf4c      	ite	mi
 8011dfe:	2301      	movmi	r3, #1
 8011e00:	2300      	movpl	r3, #0
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	f083 0301 	eor.w	r3, r3, #1
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d15b      	bne.n	8011ec6 <nk_fill_circle+0x1ba>
 8011e0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	edd3 6a01 	vldr	s13, [r3, #4]
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8011e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e2a:	bf4c      	ite	mi
 8011e2c:	2301      	movmi	r3, #1
 8011e2e:	2300      	movpl	r3, #0
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	f083 0301 	eor.w	r3, r3, #1
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d144      	bne.n	8011ec6 <nk_fill_circle+0x1ba>
            return;
    }

    cmd = (struct nk_command_circle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_CIRCLE_FILLED, sizeof(*cmd));
 8011e3c:	2214      	movs	r2, #20
 8011e3e:	2108      	movs	r1, #8
 8011e40:	6978      	ldr	r0, [r7, #20]
 8011e42:	f7ff fc87 	bl	8011754 <nk_command_buffer_push>
 8011e46:	61b8      	str	r0, [r7, #24]
    if (!cmd) return;
 8011e48:	69bb      	ldr	r3, [r7, #24]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d03d      	beq.n	8011eca <nk_fill_circle+0x1be>
    cmd->x = (short)r.x;
 8011e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011e52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e56:	ee17 3a90 	vmov	r3, s15
 8011e5a:	b21a      	sxth	r2, r3
 8011e5c:	69bb      	ldr	r3, [r7, #24]
 8011e5e:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8011e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8011e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e68:	ee17 3a90 	vmov	r3, s15
 8011e6c:	b21a      	sxth	r2, r3
 8011e6e:	69bb      	ldr	r3, [r7, #24]
 8011e70:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(r.w, 0);
 8011e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8011e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e7e:	d501      	bpl.n	8011e84 <nk_fill_circle+0x178>
 8011e80:	2200      	movs	r2, #0
 8011e82:	e006      	b.n	8011e92 <nk_fill_circle+0x186>
 8011e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8011e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011e8c:	ee17 3a90 	vmov	r3, s15
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
 8011e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8011e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea2:	d501      	bpl.n	8011ea8 <nk_fill_circle+0x19c>
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	e006      	b.n	8011eb6 <nk_fill_circle+0x1aa>
 8011ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8011eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011eb0:	ee17 3a90 	vmov	r3, s15
 8011eb4:	b29a      	uxth	r2, r3
 8011eb6:	69bb      	ldr	r3, [r7, #24]
 8011eb8:	81da      	strh	r2, [r3, #14]
    cmd->color = c;
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	683a      	ldr	r2, [r7, #0]
 8011ebe:	611a      	str	r2, [r3, #16]
 8011ec0:	e004      	b.n	8011ecc <nk_fill_circle+0x1c0>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8011ec2:	bf00      	nop
 8011ec4:	e002      	b.n	8011ecc <nk_fill_circle+0x1c0>
            return;
 8011ec6:	bf00      	nop
 8011ec8:	e000      	b.n	8011ecc <nk_fill_circle+0x1c0>
    if (!cmd) return;
 8011eca:	bf00      	nop
}
 8011ecc:	3720      	adds	r7, #32
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	08021dd4 	.word	0x08021dd4
 8011ed8:	08023a68 	.word	0x08023a68
 8011edc:	08021db8 	.word	0x08021db8

08011ee0 <nk_fill_triangle>:
    cmd->color = c;
}
NK_API void
nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,
    float y1, float x2, float y2, struct nk_color c)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b08a      	sub	sp, #40	; 0x28
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	61f8      	str	r0, [r7, #28]
 8011ee8:	ed87 0a06 	vstr	s0, [r7, #24]
 8011eec:	edc7 0a05 	vstr	s1, [r7, #20]
 8011ef0:	ed87 1a04 	vstr	s2, [r7, #16]
 8011ef4:	edc7 1a03 	vstr	s3, [r7, #12]
 8011ef8:	ed87 2a02 	vstr	s4, [r7, #8]
 8011efc:	edc7 2a01 	vstr	s5, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
    struct nk_command_triangle_filled *cmd;
    NK_ASSERT(b);
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d106      	bne.n	8011f16 <nk_fill_triangle+0x36>
 8011f08:	4baf      	ldr	r3, [pc, #700]	; (80121c8 <nk_fill_triangle+0x2e8>)
 8011f0a:	4ab0      	ldr	r2, [pc, #704]	; (80121cc <nk_fill_triangle+0x2ec>)
 8011f0c:	f240 1135 	movw	r1, #309	; 0x135
 8011f10:	48af      	ldr	r0, [pc, #700]	; (80121d0 <nk_fill_triangle+0x2f0>)
 8011f12:	f00c f897 	bl	801e044 <__assert_func>
    if (!b || c.a == 0) return;
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	f000 814b 	beq.w	80121b4 <nk_fill_triangle+0x2d4>
 8011f1e:	78fb      	ldrb	r3, [r7, #3]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f000 8147 	beq.w	80121b4 <nk_fill_triangle+0x2d4>
    if (!b) return;
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f000 8145 	beq.w	80121b8 <nk_fill_triangle+0x2d8>
    if (b->use_clipping) {
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	695b      	ldr	r3, [r3, #20]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f000 80fb 	beq.w	801212e <nk_fill_triangle+0x24e>
        const struct nk_rect *clip = &b->clip;
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	3304      	adds	r3, #4
 8011f3c:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f40:	edd3 7a00 	vldr	s15, [r3]
 8011f44:	ed97 7a06 	vldr	s14, [r7, #24]
 8011f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f50:	bfac      	ite	ge
 8011f52:	2301      	movge	r3, #1
 8011f54:	2300      	movlt	r3, #0
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	f083 0301 	eor.w	r3, r3, #1
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d140      	bne.n	8011fe4 <nk_fill_triangle+0x104>
 8011f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f64:	ed93 7a00 	vldr	s14, [r3]
 8011f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8011f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f72:	ed97 7a06 	vldr	s14, [r7, #24]
 8011f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7e:	bf4c      	ite	mi
 8011f80:	2301      	movmi	r3, #1
 8011f82:	2300      	movpl	r3, #0
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	f083 0301 	eor.w	r3, r3, #1
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d129      	bne.n	8011fe4 <nk_fill_triangle+0x104>
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f96:	ed97 7a05 	vldr	s14, [r7, #20]
 8011f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa2:	bfac      	ite	ge
 8011fa4:	2301      	movge	r3, #1
 8011fa6:	2300      	movlt	r3, #0
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	f083 0301 	eor.w	r3, r3, #1
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d117      	bne.n	8011fe4 <nk_fill_triangle+0x104>
 8011fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8011fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8011fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8011fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd0:	bf4c      	ite	mi
 8011fd2:	2301      	movmi	r3, #1
 8011fd4:	2300      	movpl	r3, #0
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	f083 0301 	eor.w	r3, r3, #1
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	f000 80a5 	beq.w	801212e <nk_fill_triangle+0x24e>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe6:	edd3 7a00 	vldr	s15, [r3]
 8011fea:	ed97 7a04 	vldr	s14, [r7, #16]
 8011fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff6:	bfac      	ite	ge
 8011ff8:	2301      	movge	r3, #1
 8011ffa:	2300      	movlt	r3, #0
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	f083 0301 	eor.w	r3, r3, #1
 8012002:	b2db      	uxtb	r3, r3
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 8012004:	2b00      	cmp	r3, #0
 8012006:	d13f      	bne.n	8012088 <nk_fill_triangle+0x1a8>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	ed93 7a00 	vldr	s14, [r3]
 801200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012010:	edd3 7a02 	vldr	s15, [r3, #8]
 8012014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012018:	ed97 7a04 	vldr	s14, [r7, #16]
 801201c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012024:	bf4c      	ite	mi
 8012026:	2301      	movmi	r3, #1
 8012028:	2300      	movpl	r3, #0
 801202a:	b2db      	uxtb	r3, r3
 801202c:	f083 0301 	eor.w	r3, r3, #1
 8012030:	b2db      	uxtb	r3, r3
 8012032:	2b00      	cmp	r3, #0
 8012034:	d128      	bne.n	8012088 <nk_fill_triangle+0x1a8>
 8012036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012038:	edd3 7a01 	vldr	s15, [r3, #4]
 801203c:	ed97 7a03 	vldr	s14, [r7, #12]
 8012040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012048:	bfac      	ite	ge
 801204a:	2301      	movge	r3, #1
 801204c:	2300      	movlt	r3, #0
 801204e:	b2db      	uxtb	r3, r3
 8012050:	f083 0301 	eor.w	r3, r3, #1
 8012054:	b2db      	uxtb	r3, r3
 8012056:	2b00      	cmp	r3, #0
 8012058:	d116      	bne.n	8012088 <nk_fill_triangle+0x1a8>
 801205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012062:	edd3 7a03 	vldr	s15, [r3, #12]
 8012066:	ee77 7a27 	vadd.f32	s15, s14, s15
 801206a:	ed97 7a03 	vldr	s14, [r7, #12]
 801206e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012076:	bf4c      	ite	mi
 8012078:	2301      	movmi	r3, #1
 801207a:	2300      	movpl	r3, #0
 801207c:	b2db      	uxtb	r3, r3
 801207e:	f083 0301 	eor.w	r3, r3, #1
 8012082:	b2db      	uxtb	r3, r3
 8012084:	2b00      	cmp	r3, #0
 8012086:	d052      	beq.n	801212e <nk_fill_triangle+0x24e>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 8012088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208a:	edd3 7a00 	vldr	s15, [r3]
 801208e:	ed97 7a02 	vldr	s14, [r7, #8]
 8012092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209a:	bfac      	ite	ge
 801209c:	2301      	movge	r3, #1
 801209e:	2300      	movlt	r3, #0
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	f083 0301 	eor.w	r3, r3, #1
 80120a6:	b2db      	uxtb	r3, r3
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f040 8087 	bne.w	80121bc <nk_fill_triangle+0x2dc>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 80120ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b0:	ed93 7a00 	vldr	s14, [r3]
 80120b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80120ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120be:	ed97 7a02 	vldr	s14, [r7, #8]
 80120c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ca:	bf4c      	ite	mi
 80120cc:	2301      	movmi	r3, #1
 80120ce:	2300      	movpl	r3, #0
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	f083 0301 	eor.w	r3, r3, #1
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d16f      	bne.n	80121bc <nk_fill_triangle+0x2dc>
 80120dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120de:	edd3 7a01 	vldr	s15, [r3, #4]
 80120e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80120e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ee:	bfac      	ite	ge
 80120f0:	2301      	movge	r3, #1
 80120f2:	2300      	movlt	r3, #0
 80120f4:	b2db      	uxtb	r3, r3
 80120f6:	f083 0301 	eor.w	r3, r3, #1
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d15d      	bne.n	80121bc <nk_fill_triangle+0x2dc>
 8012100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012102:	ed93 7a01 	vldr	s14, [r3, #4]
 8012106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012108:	edd3 7a03 	vldr	s15, [r3, #12]
 801210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012110:	ed97 7a01 	vldr	s14, [r7, #4]
 8012114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801211c:	bf4c      	ite	mi
 801211e:	2301      	movmi	r3, #1
 8012120:	2300      	movpl	r3, #0
 8012122:	b2db      	uxtb	r3, r3
 8012124:	f083 0301 	eor.w	r3, r3, #1
 8012128:	b2db      	uxtb	r3, r3
 801212a:	2b00      	cmp	r3, #0
 801212c:	d146      	bne.n	80121bc <nk_fill_triangle+0x2dc>
            return;
    }

    cmd = (struct nk_command_triangle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_TRIANGLE_FILLED, sizeof(*cmd));
 801212e:	2218      	movs	r2, #24
 8012130:	210c      	movs	r1, #12
 8012132:	69f8      	ldr	r0, [r7, #28]
 8012134:	f7ff fb0e 	bl	8011754 <nk_command_buffer_push>
 8012138:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 801213a:	6a3b      	ldr	r3, [r7, #32]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d03f      	beq.n	80121c0 <nk_fill_triangle+0x2e0>
    cmd->a.x = (short)x0;
 8012140:	edd7 7a06 	vldr	s15, [r7, #24]
 8012144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012148:	ee17 3a90 	vmov	r3, s15
 801214c:	b21a      	sxth	r2, r3
 801214e:	6a3b      	ldr	r3, [r7, #32]
 8012150:	811a      	strh	r2, [r3, #8]
    cmd->a.y = (short)y0;
 8012152:	edd7 7a05 	vldr	s15, [r7, #20]
 8012156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801215a:	ee17 3a90 	vmov	r3, s15
 801215e:	b21a      	sxth	r2, r3
 8012160:	6a3b      	ldr	r3, [r7, #32]
 8012162:	815a      	strh	r2, [r3, #10]
    cmd->b.x = (short)x1;
 8012164:	edd7 7a04 	vldr	s15, [r7, #16]
 8012168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801216c:	ee17 3a90 	vmov	r3, s15
 8012170:	b21a      	sxth	r2, r3
 8012172:	6a3b      	ldr	r3, [r7, #32]
 8012174:	819a      	strh	r2, [r3, #12]
    cmd->b.y = (short)y1;
 8012176:	edd7 7a03 	vldr	s15, [r7, #12]
 801217a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801217e:	ee17 3a90 	vmov	r3, s15
 8012182:	b21a      	sxth	r2, r3
 8012184:	6a3b      	ldr	r3, [r7, #32]
 8012186:	81da      	strh	r2, [r3, #14]
    cmd->c.x = (short)x2;
 8012188:	edd7 7a02 	vldr	s15, [r7, #8]
 801218c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012190:	ee17 3a90 	vmov	r3, s15
 8012194:	b21a      	sxth	r2, r3
 8012196:	6a3b      	ldr	r3, [r7, #32]
 8012198:	821a      	strh	r2, [r3, #16]
    cmd->c.y = (short)y2;
 801219a:	edd7 7a01 	vldr	s15, [r7, #4]
 801219e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121a2:	ee17 3a90 	vmov	r3, s15
 80121a6:	b21a      	sxth	r2, r3
 80121a8:	6a3b      	ldr	r3, [r7, #32]
 80121aa:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 80121ac:	6a3b      	ldr	r3, [r7, #32]
 80121ae:	683a      	ldr	r2, [r7, #0]
 80121b0:	615a      	str	r2, [r3, #20]
 80121b2:	e006      	b.n	80121c2 <nk_fill_triangle+0x2e2>
    if (!b || c.a == 0) return;
 80121b4:	bf00      	nop
 80121b6:	e004      	b.n	80121c2 <nk_fill_triangle+0x2e2>
    if (!b) return;
 80121b8:	bf00      	nop
 80121ba:	e002      	b.n	80121c2 <nk_fill_triangle+0x2e2>
            return;
 80121bc:	bf00      	nop
 80121be:	e000      	b.n	80121c2 <nk_fill_triangle+0x2e2>
    if (!cmd) return;
 80121c0:	bf00      	nop
}
 80121c2:	3728      	adds	r7, #40	; 0x28
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	08021dd4 	.word	0x08021dd4
 80121cc:	08023a78 	.word	0x08023a78
 80121d0:	08021db8 	.word	0x08021db8

080121d4 <nk_draw_image>:
    }
}
NK_API void
nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_image *img, struct nk_color col)
{
 80121d4:	b590      	push	{r4, r7, lr}
 80121d6:	b08b      	sub	sp, #44	; 0x2c
 80121d8:	af00      	add	r7, sp, #0
 80121da:	61f8      	str	r0, [r7, #28]
 80121dc:	eeb0 6a40 	vmov.f32	s12, s0
 80121e0:	eef0 6a60 	vmov.f32	s13, s1
 80121e4:	eeb0 7a41 	vmov.f32	s14, s2
 80121e8:	eef0 7a61 	vmov.f32	s15, s3
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
 80121f0:	ed87 6a03 	vstr	s12, [r7, #12]
 80121f4:	edc7 6a04 	vstr	s13, [r7, #16]
 80121f8:	ed87 7a05 	vstr	s14, [r7, #20]
 80121fc:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_image *cmd;
    NK_ASSERT(b);
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d106      	bne.n	8012214 <nk_draw_image+0x40>
 8012206:	4b69      	ldr	r3, [pc, #420]	; (80123ac <nk_draw_image+0x1d8>)
 8012208:	4a69      	ldr	r2, [pc, #420]	; (80123b0 <nk_draw_image+0x1dc>)
 801220a:	f240 118f 	movw	r1, #399	; 0x18f
 801220e:	4869      	ldr	r0, [pc, #420]	; (80123b4 <nk_draw_image+0x1e0>)
 8012210:	f00b ff18 	bl	801e044 <__assert_func>
    if (!b) return;
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	2b00      	cmp	r3, #0
 8012218:	f000 80bf 	beq.w	801239a <nk_draw_image+0x1c6>
    if (b->use_clipping) {
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	695b      	ldr	r3, [r3, #20]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d06f      	beq.n	8012304 <nk_draw_image+0x130>
        const struct nk_rect *c = &b->clip;
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	3304      	adds	r3, #4
 8012228:	627b      	str	r3, [r7, #36]	; 0x24
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 801222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012230:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012238:	f000 80b1 	beq.w	801239e <nk_draw_image+0x1ca>
 801223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223e:	edd3 7a03 	vldr	s15, [r3, #12]
 8012242:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224a:	f000 80a8 	beq.w	801239e <nk_draw_image+0x1ca>
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	ed93 7a00 	vldr	s14, [r3]
 8012254:	edd7 6a03 	vldr	s13, [r7, #12]
 8012258:	edd7 7a05 	vldr	s15, [r7, #20]
 801225c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012268:	bf4c      	ite	mi
 801226a:	2301      	movmi	r3, #1
 801226c:	2300      	movpl	r3, #0
 801226e:	b2db      	uxtb	r3, r3
 8012270:	f083 0301 	eor.w	r3, r3, #1
 8012274:	b2db      	uxtb	r3, r3
 8012276:	2b00      	cmp	r3, #0
 8012278:	f040 8091 	bne.w	801239e <nk_draw_image+0x1ca>
 801227c:	ed97 7a03 	vldr	s14, [r7, #12]
 8012280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012282:	edd3 6a00 	vldr	s13, [r3]
 8012286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012288:	edd3 7a02 	vldr	s15, [r3, #8]
 801228c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012298:	bf4c      	ite	mi
 801229a:	2301      	movmi	r3, #1
 801229c:	2300      	movpl	r3, #0
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	f083 0301 	eor.w	r3, r3, #1
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d179      	bne.n	801239e <nk_draw_image+0x1ca>
 80122aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80122b0:	edd7 6a04 	vldr	s13, [r7, #16]
 80122b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80122b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c4:	bf4c      	ite	mi
 80122c6:	2301      	movmi	r3, #1
 80122c8:	2300      	movpl	r3, #0
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	f083 0301 	eor.w	r3, r3, #1
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d163      	bne.n	801239e <nk_draw_image+0x1ca>
 80122d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80122e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f2:	bf4c      	ite	mi
 80122f4:	2301      	movmi	r3, #1
 80122f6:	2300      	movpl	r3, #0
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	f083 0301 	eor.w	r3, r3, #1
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	2b00      	cmp	r3, #0
 8012302:	d14c      	bne.n	801239e <nk_draw_image+0x1ca>
            return;
    }

    cmd = (struct nk_command_image*)
        nk_command_buffer_push(b, NK_COMMAND_IMAGE, sizeof(*cmd));
 8012304:	2224      	movs	r2, #36	; 0x24
 8012306:	2111      	movs	r1, #17
 8012308:	69f8      	ldr	r0, [r7, #28]
 801230a:	f7ff fa23 	bl	8011754 <nk_command_buffer_push>
 801230e:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8012310:	6a3b      	ldr	r3, [r7, #32]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d045      	beq.n	80123a2 <nk_draw_image+0x1ce>
    cmd->x = (short)r.x;
 8012316:	edd7 7a03 	vldr	s15, [r7, #12]
 801231a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801231e:	ee17 3a90 	vmov	r3, s15
 8012322:	b21a      	sxth	r2, r3
 8012324:	6a3b      	ldr	r3, [r7, #32]
 8012326:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8012328:	edd7 7a04 	vldr	s15, [r7, #16]
 801232c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012330:	ee17 3a90 	vmov	r3, s15
 8012334:	b21a      	sxth	r2, r3
 8012336:	6a3b      	ldr	r3, [r7, #32]
 8012338:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 801233a:	edd7 7a05 	vldr	s15, [r7, #20]
 801233e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012346:	dd07      	ble.n	8012358 <nk_draw_image+0x184>
 8012348:	edd7 7a05 	vldr	s15, [r7, #20]
 801234c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012350:	ee17 3a90 	vmov	r3, s15
 8012354:	b29a      	uxth	r2, r3
 8012356:	e000      	b.n	801235a <nk_draw_image+0x186>
 8012358:	2200      	movs	r2, #0
 801235a:	6a3b      	ldr	r3, [r7, #32]
 801235c:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 801235e:	edd7 7a06 	vldr	s15, [r7, #24]
 8012362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801236a:	dd07      	ble.n	801237c <nk_draw_image+0x1a8>
 801236c:	edd7 7a06 	vldr	s15, [r7, #24]
 8012370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012374:	ee17 3a90 	vmov	r3, s15
 8012378:	b29a      	uxth	r2, r3
 801237a:	e000      	b.n	801237e <nk_draw_image+0x1aa>
 801237c:	2200      	movs	r2, #0
 801237e:	6a3b      	ldr	r3, [r7, #32]
 8012380:	81da      	strh	r2, [r3, #14]
    cmd->img = *img;
 8012382:	6a3b      	ldr	r3, [r7, #32]
 8012384:	68ba      	ldr	r2, [r7, #8]
 8012386:	f103 0410 	add.w	r4, r3, #16
 801238a:	4613      	mov	r3, r2
 801238c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801238e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cmd->col = col;
 8012392:	6a3b      	ldr	r3, [r7, #32]
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	621a      	str	r2, [r3, #32]
 8012398:	e004      	b.n	80123a4 <nk_draw_image+0x1d0>
    if (!b) return;
 801239a:	bf00      	nop
 801239c:	e002      	b.n	80123a4 <nk_draw_image+0x1d0>
            return;
 801239e:	bf00      	nop
 80123a0:	e000      	b.n	80123a4 <nk_draw_image+0x1d0>
    if (!cmd) return;
 80123a2:	bf00      	nop
}
 80123a4:	372c      	adds	r7, #44	; 0x2c
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd90      	pop	{r4, r7, pc}
 80123aa:	bf00      	nop
 80123ac:	08021dd4 	.word	0x08021dd4
 80123b0:	08023a8c 	.word	0x08023a8c
 80123b4:	08021db8 	.word	0x08021db8

080123b8 <nk_draw_nine_slice>:
NK_API void
nk_draw_nine_slice(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_nine_slice *slc, struct nk_color col)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b0b4      	sub	sp, #208	; 0xd0
 80123bc:	af00      	add	r7, sp, #0
 80123be:	61f8      	str	r0, [r7, #28]
 80123c0:	eeb0 6a40 	vmov.f32	s12, s0
 80123c4:	eef0 6a60 	vmov.f32	s13, s1
 80123c8:	eeb0 7a41 	vmov.f32	s14, s2
 80123cc:	eef0 7a61 	vmov.f32	s15, s3
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
 80123d4:	ed87 6a03 	vstr	s12, [r7, #12]
 80123d8:	edc7 6a04 	vstr	s13, [r7, #16]
 80123dc:	ed87 7a05 	vstr	s14, [r7, #20]
 80123e0:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_image img;
    const struct nk_image *slcimg = (const struct nk_image*)slc;
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    nk_ushort rgnX, rgnY, rgnW, rgnH;
    rgnX = slcimg->region[0];
 80123ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123ee:	891b      	ldrh	r3, [r3, #8]
 80123f0:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    rgnY = slcimg->region[1];
 80123f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123f8:	895b      	ldrh	r3, [r3, #10]
 80123fa:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    rgnW = slcimg->region[2];
 80123fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012402:	899b      	ldrh	r3, [r3, #12]
 8012404:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    rgnH = slcimg->region[3];
 8012408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801240c:	89db      	ldrh	r3, [r3, #14]
 801240e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

    /* top-left */
    img.handle = slcimg->handle;
 8012412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	627b      	str	r3, [r7, #36]	; 0x24
    img.w = slcimg->w;
 801241a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801241e:	889b      	ldrh	r3, [r3, #4]
 8012420:	853b      	strh	r3, [r7, #40]	; 0x28
    img.h = slcimg->h;
 8012422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012426:	88db      	ldrh	r3, [r3, #6]
 8012428:	857b      	strh	r3, [r7, #42]	; 0x2a
    img.region[0] = rgnX;
 801242a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801242e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    img.region[1] = rgnY;
 8012430:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012434:	85fb      	strh	r3, [r7, #46]	; 0x2e
    img.region[2] = slc->l;
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	8a1b      	ldrh	r3, [r3, #16]
 801243a:	863b      	strh	r3, [r7, #48]	; 0x30
    img.region[3] = slc->t;
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	8a5b      	ldrh	r3, [r3, #18]
 8012440:	867b      	strh	r3, [r7, #50]	; 0x32

    nk_draw_image(b,
 8012442:	edd7 7a03 	vldr	s15, [r7, #12]
 8012446:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 801244e:	ee06 3a90 	vmov	s13, r3
 8012452:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 801245a:	ee06 3a10 	vmov	s12, r3
 801245e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8012462:	eef0 1a46 	vmov.f32	s3, s12
 8012466:	eeb0 1a66 	vmov.f32	s2, s13
 801246a:	eef0 0a47 	vmov.f32	s1, s14
 801246e:	eeb0 0a67 	vmov.f32	s0, s15
 8012472:	f002 f8b1 	bl	80145d8 <nk_rect>
 8012476:	eeb0 6a40 	vmov.f32	s12, s0
 801247a:	eef0 6a60 	vmov.f32	s13, s1
 801247e:	eeb0 7a41 	vmov.f32	s14, s2
 8012482:	eef0 7a61 	vmov.f32	s15, s3
 8012486:	ed87 6a0d 	vstr	s12, [r7, #52]	; 0x34
 801248a:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 801248e:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8012492:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8012496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801249a:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 801249e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80124a2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80124a6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80124aa:	687a      	ldr	r2, [r7, #4]
 80124ac:	4619      	mov	r1, r3
 80124ae:	eeb0 0a46 	vmov.f32	s0, s12
 80124b2:	eef0 0a66 	vmov.f32	s1, s13
 80124b6:	eeb0 1a47 	vmov.f32	s2, s14
 80124ba:	eef0 1a67 	vmov.f32	s3, s15
 80124be:	69f8      	ldr	r0, [r7, #28]
 80124c0:	f7ff fe88 	bl	80121d4 <nk_draw_image>
        &img, col);

#define IMG_RGN(x, y, w, h) img.region[0] = (nk_ushort)(x); img.region[1] = (nk_ushort)(y); img.region[2] = (nk_ushort)(w); img.region[3] = (nk_ushort)(h);

    /* top-center */
    IMG_RGN(rgnX + slc->l, rgnY, rgnW - slc->l - slc->r, slc->t);
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	8a1a      	ldrh	r2, [r3, #16]
 80124c8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80124cc:	4413      	add	r3, r2
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80124d2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80124d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	8a1b      	ldrh	r3, [r3, #16]
 80124dc:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	8a9b      	ldrh	r3, [r3, #20]
 80124e8:	1ad3      	subs	r3, r2, r3
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	863b      	strh	r3, [r7, #48]	; 0x30
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	8a5b      	ldrh	r3, [r3, #18]
 80124f2:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 80124f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	8a1b      	ldrh	r3, [r3, #16]
 80124fc:	ee07 3a90 	vmov	s15, r3
 8012500:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012504:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012508:	ed97 6a04 	vldr	s12, [r7, #16]
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 801250c:	ed97 7a05 	vldr	s14, [r7, #20]
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	8a1b      	ldrh	r3, [r3, #16]
 8012514:	ee07 3a90 	vmov	s15, r3
 8012518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801251c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	8a9b      	ldrh	r3, [r3, #20]
 8012524:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801252c:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 8012534:	ee07 3a10 	vmov	s14, r3
 8012538:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801253c:	eef0 1a47 	vmov.f32	s3, s14
 8012540:	eeb0 1a67 	vmov.f32	s2, s15
 8012544:	eef0 0a46 	vmov.f32	s1, s12
 8012548:	eeb0 0a66 	vmov.f32	s0, s13
 801254c:	f002 f844 	bl	80145d8 <nk_rect>
 8012550:	eeb0 6a40 	vmov.f32	s12, s0
 8012554:	eef0 6a60 	vmov.f32	s13, s1
 8012558:	eeb0 7a41 	vmov.f32	s14, s2
 801255c:	eef0 7a61 	vmov.f32	s15, s3
 8012560:	ed87 6a11 	vstr	s12, [r7, #68]	; 0x44
 8012564:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8012568:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 801256c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8012570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012574:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8012578:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801257c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012580:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012584:	687a      	ldr	r2, [r7, #4]
 8012586:	4619      	mov	r1, r3
 8012588:	eeb0 0a46 	vmov.f32	s0, s12
 801258c:	eef0 0a66 	vmov.f32	s1, s13
 8012590:	eeb0 1a47 	vmov.f32	s2, s14
 8012594:	eef0 1a67 	vmov.f32	s3, s15
 8012598:	69f8      	ldr	r0, [r7, #28]
 801259a:	f7ff fe1b 	bl	80121d4 <nk_draw_image>
        &img, col);

    /* top-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY, slc->r, slc->t);
 801259e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80125a2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80125a6:	4413      	add	r3, r2
 80125a8:	b29a      	uxth	r2, r3
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	8a9b      	ldrh	r3, [r3, #20]
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80125b4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80125b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	8a9b      	ldrh	r3, [r3, #20]
 80125be:	863b      	strh	r3, [r7, #48]	; 0x30
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	8a5b      	ldrh	r3, [r3, #18]
 80125c4:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 80125c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80125ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80125ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	8a9b      	ldrh	r3, [r3, #20]
 80125d6:	ee07 3a90 	vmov	s15, r3
 80125da:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80125de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125e2:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 80125ea:	ee06 3a90 	vmov	s13, r3
 80125ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 80125f6:	ee06 3a10 	vmov	s12, r3
 80125fa:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80125fe:	eef0 1a46 	vmov.f32	s3, s12
 8012602:	eeb0 1a66 	vmov.f32	s2, s13
 8012606:	eef0 0a47 	vmov.f32	s1, s14
 801260a:	eeb0 0a67 	vmov.f32	s0, s15
 801260e:	f001 ffe3 	bl	80145d8 <nk_rect>
 8012612:	eeb0 6a40 	vmov.f32	s12, s0
 8012616:	eef0 6a60 	vmov.f32	s13, s1
 801261a:	eeb0 7a41 	vmov.f32	s14, s2
 801261e:	eef0 7a61 	vmov.f32	s15, s3
 8012622:	ed87 6a15 	vstr	s12, [r7, #84]	; 0x54
 8012626:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 801262a:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 801262e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8012632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012636:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 801263a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801263e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012642:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8012646:	687a      	ldr	r2, [r7, #4]
 8012648:	4619      	mov	r1, r3
 801264a:	eeb0 0a46 	vmov.f32	s0, s12
 801264e:	eef0 0a66 	vmov.f32	s1, s13
 8012652:	eeb0 1a47 	vmov.f32	s2, s14
 8012656:	eef0 1a67 	vmov.f32	s3, s15
 801265a:	69f8      	ldr	r0, [r7, #28]
 801265c:	f7ff fdba 	bl	80121d4 <nk_draw_image>
        &img, col);

    /* center-left */
    IMG_RGN(rgnX, rgnY + slc->t, slc->l, rgnH - slc->t - slc->b);
 8012660:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8012664:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	8a5a      	ldrh	r2, [r3, #18]
 801266a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 801266e:	4413      	add	r3, r2
 8012670:	b29b      	uxth	r3, r3
 8012672:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	8a1b      	ldrh	r3, [r3, #16]
 8012678:	863b      	strh	r3, [r7, #48]	; 0x30
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	8a5b      	ldrh	r3, [r3, #18]
 801267e:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8012682:	1ad3      	subs	r3, r2, r3
 8012684:	b29a      	uxth	r2, r3
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	8adb      	ldrh	r3, [r3, #22]
 801268a:	1ad3      	subs	r3, r2, r3
 801268c:	b29b      	uxth	r3, r3
 801268e:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 8012690:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8012694:	ed97 7a04 	vldr	s14, [r7, #16]
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	8a5b      	ldrh	r3, [r3, #18]
 801269c:	ee07 3a90 	vmov	s15, r3
 80126a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80126a4:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 80126ac:	ee07 3a90 	vmov	s15, r3
 80126b0:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 80126b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	8a5b      	ldrh	r3, [r3, #18]
 80126bc:	ee07 3a90 	vmov	s15, r3
 80126c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	8adb      	ldrh	r3, [r3, #22]
 80126cc:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80126d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126d8:	eef0 1a67 	vmov.f32	s3, s15
 80126dc:	eeb0 1a65 	vmov.f32	s2, s11
 80126e0:	eef0 0a46 	vmov.f32	s1, s12
 80126e4:	eeb0 0a66 	vmov.f32	s0, s13
 80126e8:	f001 ff76 	bl	80145d8 <nk_rect>
 80126ec:	eeb0 6a40 	vmov.f32	s12, s0
 80126f0:	eef0 6a60 	vmov.f32	s13, s1
 80126f4:	eeb0 7a41 	vmov.f32	s14, s2
 80126f8:	eef0 7a61 	vmov.f32	s15, s3
 80126fc:	ed87 6a19 	vstr	s12, [r7, #100]	; 0x64
 8012700:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8012704:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 8012708:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 801270c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012710:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8012714:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8012718:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801271c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	4619      	mov	r1, r3
 8012724:	eeb0 0a46 	vmov.f32	s0, s12
 8012728:	eef0 0a66 	vmov.f32	s1, s13
 801272c:	eeb0 1a47 	vmov.f32	s2, s14
 8012730:	eef0 1a67 	vmov.f32	s3, s15
 8012734:	69f8      	ldr	r0, [r7, #28]
 8012736:	f7ff fd4d 	bl	80121d4 <nk_draw_image>
        &img, col);

    /* center */
    IMG_RGN(rgnX + slc->l, rgnY + slc->t, rgnW - slc->l - slc->r, rgnH - slc->t - slc->b);
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	8a1a      	ldrh	r2, [r3, #16]
 801273e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8012742:	4413      	add	r3, r2
 8012744:	b29b      	uxth	r3, r3
 8012746:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	8a5a      	ldrh	r2, [r3, #18]
 801274c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012750:	4413      	add	r3, r2
 8012752:	b29b      	uxth	r3, r3
 8012754:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	8a1b      	ldrh	r3, [r3, #16]
 801275a:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	b29a      	uxth	r2, r3
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	8a9b      	ldrh	r3, [r3, #20]
 8012766:	1ad3      	subs	r3, r2, r3
 8012768:	b29b      	uxth	r3, r3
 801276a:	863b      	strh	r3, [r7, #48]	; 0x30
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	8a5b      	ldrh	r3, [r3, #18]
 8012770:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8012774:	1ad3      	subs	r3, r2, r3
 8012776:	b29a      	uxth	r2, r3
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	8adb      	ldrh	r3, [r3, #22]
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	b29b      	uxth	r3, r3
 8012780:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8012782:	ed97 7a03 	vldr	s14, [r7, #12]
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	8a1b      	ldrh	r3, [r3, #16]
 801278a:	ee07 3a90 	vmov	s15, r3
 801278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012792:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8012796:	ed97 7a04 	vldr	s14, [r7, #16]
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	8a5b      	ldrh	r3, [r3, #18]
 801279e:	ee07 3a90 	vmov	s15, r3
 80127a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80127a6:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 80127aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	8a1b      	ldrh	r3, [r3, #16]
 80127b2:	ee07 3a90 	vmov	s15, r3
 80127b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	8a9b      	ldrh	r3, [r3, #20]
 80127c2:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80127c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127ca:	ee77 5a67 	vsub.f32	s11, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 80127ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	8a5b      	ldrh	r3, [r3, #18]
 80127d6:	ee07 3a90 	vmov	s15, r3
 80127da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	8adb      	ldrh	r3, [r3, #22]
 80127e6:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80127ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127f2:	eef0 1a67 	vmov.f32	s3, s15
 80127f6:	eeb0 1a65 	vmov.f32	s2, s11
 80127fa:	eef0 0a46 	vmov.f32	s1, s12
 80127fe:	eeb0 0a66 	vmov.f32	s0, s13
 8012802:	f001 fee9 	bl	80145d8 <nk_rect>
 8012806:	eeb0 6a40 	vmov.f32	s12, s0
 801280a:	eef0 6a60 	vmov.f32	s13, s1
 801280e:	eeb0 7a41 	vmov.f32	s14, s2
 8012812:	eef0 7a61 	vmov.f32	s15, s3
 8012816:	ed87 6a1d 	vstr	s12, [r7, #116]	; 0x74
 801281a:	edc7 6a1e 	vstr	s13, [r7, #120]	; 0x78
 801281e:	ed87 7a1f 	vstr	s14, [r7, #124]	; 0x7c
 8012822:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 8012826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801282a:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 801282e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8012832:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8012836:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	4619      	mov	r1, r3
 801283e:	eeb0 0a46 	vmov.f32	s0, s12
 8012842:	eef0 0a66 	vmov.f32	s1, s13
 8012846:	eeb0 1a47 	vmov.f32	s2, s14
 801284a:	eef0 1a67 	vmov.f32	s3, s15
 801284e:	69f8      	ldr	r0, [r7, #28]
 8012850:	f7ff fcc0 	bl	80121d4 <nk_draw_image>
        &img, col);

    /* center-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + slc->t, slc->r, rgnH - slc->t - slc->b);
 8012854:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8012858:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 801285c:	4413      	add	r3, r2
 801285e:	b29a      	uxth	r2, r3
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	8a9b      	ldrh	r3, [r3, #20]
 8012864:	1ad3      	subs	r3, r2, r3
 8012866:	b29b      	uxth	r3, r3
 8012868:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	8a5a      	ldrh	r2, [r3, #18]
 801286e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012872:	4413      	add	r3, r2
 8012874:	b29b      	uxth	r3, r3
 8012876:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	8a9b      	ldrh	r3, [r3, #20]
 801287c:	863b      	strh	r3, [r7, #48]	; 0x30
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	8a5b      	ldrh	r3, [r3, #18]
 8012882:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8012886:	1ad3      	subs	r3, r2, r3
 8012888:	b29a      	uxth	r2, r3
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	8adb      	ldrh	r3, [r3, #22]
 801288e:	1ad3      	subs	r3, r2, r3
 8012890:	b29b      	uxth	r3, r3
 8012892:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012894:	ed97 7a03 	vldr	s14, [r7, #12]
 8012898:	edd7 7a05 	vldr	s15, [r7, #20]
 801289c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	8a9b      	ldrh	r3, [r3, #20]
 80128a4:	ee07 3a90 	vmov	s15, r3
 80128a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80128ac:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 80128b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	8a5b      	ldrh	r3, [r3, #18]
 80128b8:	ee07 3a90 	vmov	s15, r3
 80128bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80128c0:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 80128c8:	ee07 3a90 	vmov	s15, r3
 80128cc:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 80128d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	8a5b      	ldrh	r3, [r3, #18]
 80128d8:	ee07 3a90 	vmov	s15, r3
 80128dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	8adb      	ldrh	r3, [r3, #22]
 80128e8:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80128ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128f4:	eef0 1a67 	vmov.f32	s3, s15
 80128f8:	eeb0 1a65 	vmov.f32	s2, s11
 80128fc:	eef0 0a46 	vmov.f32	s1, s12
 8012900:	eeb0 0a66 	vmov.f32	s0, s13
 8012904:	f001 fe68 	bl	80145d8 <nk_rect>
 8012908:	eeb0 6a40 	vmov.f32	s12, s0
 801290c:	eef0 6a60 	vmov.f32	s13, s1
 8012910:	eeb0 7a41 	vmov.f32	s14, s2
 8012914:	eef0 7a61 	vmov.f32	s15, s3
 8012918:	ed87 6a21 	vstr	s12, [r7, #132]	; 0x84
 801291c:	edc7 6a22 	vstr	s13, [r7, #136]	; 0x88
 8012920:	ed87 7a23 	vstr	s14, [r7, #140]	; 0x8c
 8012924:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
 8012928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801292c:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8012930:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8012934:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8012938:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801293c:	687a      	ldr	r2, [r7, #4]
 801293e:	4619      	mov	r1, r3
 8012940:	eeb0 0a46 	vmov.f32	s0, s12
 8012944:	eef0 0a66 	vmov.f32	s1, s13
 8012948:	eeb0 1a47 	vmov.f32	s2, s14
 801294c:	eef0 1a67 	vmov.f32	s3, s15
 8012950:	69f8      	ldr	r0, [r7, #28]
 8012952:	f7ff fc3f 	bl	80121d4 <nk_draw_image>
        &img, col);

    /* bottom-left */
    IMG_RGN(rgnX, rgnY + rgnH - slc->b, slc->l, slc->b);
 8012956:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801295a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801295c:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8012960:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8012964:	4413      	add	r3, r2
 8012966:	b29a      	uxth	r2, r3
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	8adb      	ldrh	r3, [r3, #22]
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	b29b      	uxth	r3, r3
 8012970:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	8a1b      	ldrh	r3, [r3, #16]
 8012976:	863b      	strh	r3, [r7, #48]	; 0x30
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	8adb      	ldrh	r3, [r3, #22]
 801297c:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 801297e:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8012982:	ed97 7a04 	vldr	s14, [r7, #16]
 8012986:	edd7 7a06 	vldr	s15, [r7, #24]
 801298a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	8adb      	ldrh	r3, [r3, #22]
 8012992:	ee07 3a90 	vmov	s15, r3
 8012996:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801299a:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 80129a2:	ee07 3a10 	vmov	s14, r3
 80129a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 80129ae:	ee06 3a10 	vmov	s12, r3
 80129b2:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80129b6:	eef0 1a46 	vmov.f32	s3, s12
 80129ba:	eeb0 1a47 	vmov.f32	s2, s14
 80129be:	eef0 0a67 	vmov.f32	s1, s15
 80129c2:	eeb0 0a66 	vmov.f32	s0, s13
 80129c6:	f001 fe07 	bl	80145d8 <nk_rect>
 80129ca:	eeb0 6a40 	vmov.f32	s12, s0
 80129ce:	eef0 6a60 	vmov.f32	s13, s1
 80129d2:	eeb0 7a41 	vmov.f32	s14, s2
 80129d6:	eef0 7a61 	vmov.f32	s15, s3
 80129da:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 80129de:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 80129e2:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 80129e6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 80129ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80129ee:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80129f2:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80129f6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80129fa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	4619      	mov	r1, r3
 8012a02:	eeb0 0a46 	vmov.f32	s0, s12
 8012a06:	eef0 0a66 	vmov.f32	s1, s13
 8012a0a:	eeb0 1a47 	vmov.f32	s2, s14
 8012a0e:	eef0 1a67 	vmov.f32	s3, s15
 8012a12:	69f8      	ldr	r0, [r7, #28]
 8012a14:	f7ff fbde 	bl	80121d4 <nk_draw_image>
        &img, col);

    /* bottom-center */
    IMG_RGN(rgnX + slc->l, rgnY + rgnH - slc->b, rgnW - slc->l - slc->r, slc->b);
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	8a1a      	ldrh	r2, [r3, #16]
 8012a1c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8012a20:	4413      	add	r3, r2
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012a26:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8012a2a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8012a2e:	4413      	add	r3, r2
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	8adb      	ldrh	r3, [r3, #22]
 8012a36:	1ad3      	subs	r3, r2, r3
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	8a1b      	ldrh	r3, [r3, #16]
 8012a40:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8012a44:	1ad3      	subs	r3, r2, r3
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	8a9b      	ldrh	r3, [r3, #20]
 8012a4c:	1ad3      	subs	r3, r2, r3
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	863b      	strh	r3, [r7, #48]	; 0x30
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	8adb      	ldrh	r3, [r3, #22]
 8012a56:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012a58:	ed97 7a03 	vldr	s14, [r7, #12]
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	8a1b      	ldrh	r3, [r3, #16]
 8012a60:	ee07 3a90 	vmov	s15, r3
 8012a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012a68:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012a6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8012a70:	edd7 7a06 	vldr	s15, [r7, #24]
 8012a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	8adb      	ldrh	r3, [r3, #22]
 8012a7c:	ee07 3a90 	vmov	s15, r3
 8012a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012a84:	ee37 6a67 	vsub.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012a88:	ed97 7a05 	vldr	s14, [r7, #20]
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	8a1b      	ldrh	r3, [r3, #16]
 8012a90:	ee07 3a90 	vmov	s15, r3
 8012a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	8a9b      	ldrh	r3, [r3, #20]
 8012aa0:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012ab0:	ee07 3a10 	vmov	s14, r3
 8012ab4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012ab8:	eef0 1a47 	vmov.f32	s3, s14
 8012abc:	eeb0 1a67 	vmov.f32	s2, s15
 8012ac0:	eef0 0a46 	vmov.f32	s1, s12
 8012ac4:	eeb0 0a66 	vmov.f32	s0, s13
 8012ac8:	f001 fd86 	bl	80145d8 <nk_rect>
 8012acc:	eeb0 6a40 	vmov.f32	s12, s0
 8012ad0:	eef0 6a60 	vmov.f32	s13, s1
 8012ad4:	eeb0 7a41 	vmov.f32	s14, s2
 8012ad8:	eef0 7a61 	vmov.f32	s15, s3
 8012adc:	ed87 6a29 	vstr	s12, [r7, #164]	; 0xa4
 8012ae0:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 8012ae4:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 8012ae8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 8012aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012af0:	ed97 6a29 	vldr	s12, [r7, #164]	; 0xa4
 8012af4:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8012af8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8012afc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	4619      	mov	r1, r3
 8012b04:	eeb0 0a46 	vmov.f32	s0, s12
 8012b08:	eef0 0a66 	vmov.f32	s1, s13
 8012b0c:	eeb0 1a47 	vmov.f32	s2, s14
 8012b10:	eef0 1a67 	vmov.f32	s3, s15
 8012b14:	69f8      	ldr	r0, [r7, #28]
 8012b16:	f7ff fb5d 	bl	80121d4 <nk_draw_image>
        &img, col);

    /* bottom-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + rgnH - slc->b, slc->r, slc->b);
 8012b1a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8012b1e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8012b22:	4413      	add	r3, r2
 8012b24:	b29a      	uxth	r2, r3
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	8a9b      	ldrh	r3, [r3, #20]
 8012b2a:	1ad3      	subs	r3, r2, r3
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012b30:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8012b34:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8012b38:	4413      	add	r3, r2
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	8adb      	ldrh	r3, [r3, #22]
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	8a9b      	ldrh	r3, [r3, #20]
 8012b4a:	863b      	strh	r3, [r7, #48]	; 0x30
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	8adb      	ldrh	r3, [r3, #22]
 8012b50:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b52:	ed97 7a03 	vldr	s14, [r7, #12]
 8012b56:	edd7 7a05 	vldr	s15, [r7, #20]
 8012b5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	8a9b      	ldrh	r3, [r3, #20]
 8012b62:	ee07 3a90 	vmov	s15, r3
 8012b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012b6a:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8012b72:	edd7 7a06 	vldr	s15, [r7, #24]
 8012b76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	8adb      	ldrh	r3, [r3, #22]
 8012b7e:	ee07 3a90 	vmov	s15, r3
 8012b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012b86:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8012b8e:	ee07 3a10 	vmov	s14, r3
 8012b92:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012b9a:	ee06 3a10 	vmov	s12, r3
 8012b9e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8012ba2:	eef0 1a46 	vmov.f32	s3, s12
 8012ba6:	eeb0 1a47 	vmov.f32	s2, s14
 8012baa:	eef0 0a67 	vmov.f32	s1, s15
 8012bae:	eeb0 0a66 	vmov.f32	s0, s13
 8012bb2:	f001 fd11 	bl	80145d8 <nk_rect>
 8012bb6:	eeb0 6a40 	vmov.f32	s12, s0
 8012bba:	eef0 6a60 	vmov.f32	s13, s1
 8012bbe:	eeb0 7a41 	vmov.f32	s14, s2
 8012bc2:	eef0 7a61 	vmov.f32	s15, s3
 8012bc6:	ed87 6a2d 	vstr	s12, [r7, #180]	; 0xb4
 8012bca:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8012bce:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8012bd2:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8012bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012bda:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 8012bde:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8012be2:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8012be6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8012bea:	687a      	ldr	r2, [r7, #4]
 8012bec:	4619      	mov	r1, r3
 8012bee:	eeb0 0a46 	vmov.f32	s0, s12
 8012bf2:	eef0 0a66 	vmov.f32	s1, s13
 8012bf6:	eeb0 1a47 	vmov.f32	s2, s14
 8012bfa:	eef0 1a67 	vmov.f32	s3, s15
 8012bfe:	69f8      	ldr	r0, [r7, #28]
 8012c00:	f7ff fae8 	bl	80121d4 <nk_draw_image>
        &img, col);

#undef IMG_RGN
}
 8012c04:	bf00      	nop
 8012c06:	37d0      	adds	r7, #208	; 0xd0
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <nk_draw_text>:
}
NK_API void
nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,
    const char *string, int length, const struct nk_user_font *font,
    struct nk_color bg, struct nk_color fg)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b092      	sub	sp, #72	; 0x48
 8012c10:	af04      	add	r7, sp, #16
 8012c12:	61f8      	str	r0, [r7, #28]
 8012c14:	eeb0 6a40 	vmov.f32	s12, s0
 8012c18:	eef0 6a60 	vmov.f32	s13, s1
 8012c1c:	eeb0 7a41 	vmov.f32	s14, s2
 8012c20:	eef0 7a61 	vmov.f32	s15, s3
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	607a      	str	r2, [r7, #4]
 8012c28:	603b      	str	r3, [r7, #0]
 8012c2a:	ed87 6a03 	vstr	s12, [r7, #12]
 8012c2e:	edc7 6a04 	vstr	s13, [r7, #16]
 8012c32:	ed87 7a05 	vstr	s14, [r7, #20]
 8012c36:	edc7 7a06 	vstr	s15, [r7, #24]
    float text_width = 0;
 8012c3a:	f04f 0300 	mov.w	r3, #0
 8012c3e:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command_text *cmd;

    NK_ASSERT(b);
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d106      	bne.n	8012c54 <nk_draw_text+0x48>
 8012c46:	4b93      	ldr	r3, [pc, #588]	; (8012e94 <nk_draw_text+0x288>)
 8012c48:	4a93      	ldr	r2, [pc, #588]	; (8012e98 <nk_draw_text+0x28c>)
 8012c4a:	f240 210d 	movw	r1, #525	; 0x20d
 8012c4e:	4893      	ldr	r0, [pc, #588]	; (8012e9c <nk_draw_text+0x290>)
 8012c50:	f00b f9f8 	bl	801e044 <__assert_func>
    NK_ASSERT(font);
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d106      	bne.n	8012c68 <nk_draw_text+0x5c>
 8012c5a:	4b91      	ldr	r3, [pc, #580]	; (8012ea0 <nk_draw_text+0x294>)
 8012c5c:	4a8e      	ldr	r2, [pc, #568]	; (8012e98 <nk_draw_text+0x28c>)
 8012c5e:	f240 210e 	movw	r1, #526	; 0x20e
 8012c62:	488e      	ldr	r0, [pc, #568]	; (8012e9c <nk_draw_text+0x290>)
 8012c64:	f00b f9ee 	bl	801e044 <__assert_func>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	f000 8107 	beq.w	8012e7e <nk_draw_text+0x272>
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	f000 8103 	beq.w	8012e7e <nk_draw_text+0x272>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	f000 80ff 	beq.w	8012e7e <nk_draw_text+0x272>
 8012c80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d104      	bne.n	8012c92 <nk_draw_text+0x86>
 8012c88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f000 80f6 	beq.w	8012e7e <nk_draw_text+0x272>
    if (b->use_clipping) {
 8012c92:	69fb      	ldr	r3, [r7, #28]
 8012c94:	695b      	ldr	r3, [r3, #20]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d072      	beq.n	8012d80 <nk_draw_text+0x174>
        const struct nk_rect *c = &b->clip;
 8012c9a:	69fb      	ldr	r3, [r7, #28]
 8012c9c:	3304      	adds	r3, #4
 8012c9e:	633b      	str	r3, [r7, #48]	; 0x30
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 8012ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca2:	edd3 7a02 	vldr	s15, [r3, #8]
 8012ca6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cae:	f000 80e8 	beq.w	8012e82 <nk_draw_text+0x276>
 8012cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8012cb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc0:	f000 80df 	beq.w	8012e82 <nk_draw_text+0x276>
 8012cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc6:	ed93 7a00 	vldr	s14, [r3]
 8012cca:	edd7 6a03 	vldr	s13, [r7, #12]
 8012cce:	edd7 7a05 	vldr	s15, [r7, #20]
 8012cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cde:	bf4c      	ite	mi
 8012ce0:	2301      	movmi	r3, #1
 8012ce2:	2300      	movpl	r3, #0
 8012ce4:	b2db      	uxtb	r3, r3
 8012ce6:	f083 0301 	eor.w	r3, r3, #1
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	f040 80c8 	bne.w	8012e82 <nk_draw_text+0x276>
 8012cf2:	ed97 7a03 	vldr	s14, [r7, #12]
 8012cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf8:	edd3 6a00 	vldr	s13, [r3]
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8012d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d0e:	bf4c      	ite	mi
 8012d10:	2301      	movmi	r3, #1
 8012d12:	2300      	movpl	r3, #0
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	f083 0301 	eor.w	r3, r3, #1
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	f040 80b0 	bne.w	8012e82 <nk_draw_text+0x276>
 8012d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d24:	ed93 7a01 	vldr	s14, [r3, #4]
 8012d28:	edd7 6a04 	vldr	s13, [r7, #16]
 8012d2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8012d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3c:	bf4c      	ite	mi
 8012d3e:	2301      	movmi	r3, #1
 8012d40:	2300      	movpl	r3, #0
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	f083 0301 	eor.w	r3, r3, #1
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	f040 8099 	bne.w	8012e82 <nk_draw_text+0x276>
 8012d50:	ed97 7a04 	vldr	s14, [r7, #16]
 8012d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d56:	edd3 6a01 	vldr	s13, [r3, #4]
 8012d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8012d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d6c:	bf4c      	ite	mi
 8012d6e:	2301      	movmi	r3, #1
 8012d70:	2300      	movpl	r3, #0
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	f083 0301 	eor.w	r3, r3, #1
 8012d78:	b2db      	uxtb	r3, r3
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	f040 8081 	bne.w	8012e82 <nk_draw_text+0x276>
            return;
    }

    /* make sure text fits inside bounds */
    text_width = font->width(font->userdata, font->height, string, length);
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	689b      	ldr	r3, [r3, #8]
 8012d84:	683a      	ldr	r2, [r7, #0]
 8012d86:	edd2 7a01 	vldr	s15, [r2, #4]
 8012d8a:	6838      	ldr	r0, [r7, #0]
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	68b9      	ldr	r1, [r7, #8]
 8012d90:	eeb0 0a67 	vmov.f32	s0, s15
 8012d94:	6800      	ldr	r0, [r0, #0]
 8012d96:	4798      	blx	r3
 8012d98:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    if (text_width > r.w){
 8012d9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8012da0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8012da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dac:	dd17      	ble.n	8012dde <nk_draw_text+0x1d2>
        int glyphs = 0;
 8012dae:	2300      	movs	r3, #0
 8012db0:	62bb      	str	r3, [r7, #40]	; 0x28
        float txt_width = (float)text_width;
 8012db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012db4:	627b      	str	r3, [r7, #36]	; 0x24
        length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);
 8012db6:	edd7 7a05 	vldr	s15, [r7, #20]
 8012dba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	9302      	str	r3, [sp, #8]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	9301      	str	r3, [sp, #4]
 8012dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012dca:	9300      	str	r3, [sp, #0]
 8012dcc:	4613      	mov	r3, r2
 8012dce:	eeb0 0a67 	vmov.f32	s0, s15
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	68b9      	ldr	r1, [r7, #8]
 8012dd6:	6838      	ldr	r0, [r7, #0]
 8012dd8:	f009 fda8 	bl	801c92c <nk_text_clamp>
 8012ddc:	6078      	str	r0, [r7, #4]
    }

    if (!length) return;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d050      	beq.n	8012e86 <nk_draw_text+0x27a>
    cmd = (struct nk_command_text*)
        nk_command_buffer_push(b, NK_COMMAND_TEXT, sizeof(*cmd) + (nk_size)(length + 1));
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	3329      	adds	r3, #41	; 0x29
 8012de8:	461a      	mov	r2, r3
 8012dea:	2110      	movs	r1, #16
 8012dec:	69f8      	ldr	r0, [r7, #28]
 8012dee:	f7fe fcb1 	bl	8011754 <nk_command_buffer_push>
 8012df2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (!cmd) return;
 8012df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d047      	beq.n	8012e8a <nk_draw_text+0x27e>
    cmd->x = (short)r.x;
 8012dfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8012dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e02:	ee17 3a90 	vmov	r3, s15
 8012e06:	b21a      	sxth	r2, r3
 8012e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0a:	829a      	strh	r2, [r3, #20]
    cmd->y = (short)r.y;
 8012e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8012e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e14:	ee17 3a90 	vmov	r3, s15
 8012e18:	b21a      	sxth	r2, r3
 8012e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1c:	82da      	strh	r2, [r3, #22]
    cmd->w = (unsigned short)r.w;
 8012e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e26:	ee17 3a90 	vmov	r3, s15
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2e:	831a      	strh	r2, [r3, #24]
    cmd->h = (unsigned short)r.h;
 8012e30:	edd7 7a06 	vldr	s15, [r7, #24]
 8012e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e38:	ee17 3a90 	vmov	r3, s15
 8012e3c:	b29a      	uxth	r2, r3
 8012e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e40:	835a      	strh	r2, [r3, #26]
    cmd->background = bg;
 8012e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e46:	60da      	str	r2, [r3, #12]
    cmd->foreground = fg;
 8012e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e4c:	611a      	str	r2, [r3, #16]
    cmd->font = font;
 8012e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e50:	683a      	ldr	r2, [r7, #0]
 8012e52:	609a      	str	r2, [r3, #8]
    cmd->length = length;
 8012e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	621a      	str	r2, [r3, #32]
    cmd->height = font->height;
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	685a      	ldr	r2, [r3, #4]
 8012e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e60:	61da      	str	r2, [r3, #28]
    NK_MEMCPY(cmd->string, string, (nk_size)length);
 8012e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e64:	3324      	adds	r3, #36	; 0x24
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	68b9      	ldr	r1, [r7, #8]
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f009 faa2 	bl	801c3b4 <nk_memcopy>
    cmd->string[length] = '\0';
 8012e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4413      	add	r3, r2
 8012e76:	3324      	adds	r3, #36	; 0x24
 8012e78:	2200      	movs	r2, #0
 8012e7a:	701a      	strb	r2, [r3, #0]
 8012e7c:	e006      	b.n	8012e8c <nk_draw_text+0x280>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8012e7e:	bf00      	nop
 8012e80:	e004      	b.n	8012e8c <nk_draw_text+0x280>
            return;
 8012e82:	bf00      	nop
 8012e84:	e002      	b.n	8012e8c <nk_draw_text+0x280>
    if (!length) return;
 8012e86:	bf00      	nop
 8012e88:	e000      	b.n	8012e8c <nk_draw_text+0x280>
    if (!cmd) return;
 8012e8a:	bf00      	nop
}
 8012e8c:	3738      	adds	r7, #56	; 0x38
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	08021dd4 	.word	0x08021dd4
 8012e98:	08023a9c 	.word	0x08023a9c
 8012e9c:	08021db8 	.word	0x08021db8
 8012ea0:	08021de0 	.word	0x08021de0

08012ea4 <nk_handle_ptr>:
 *                          IMAGE
 *
 * ===============================================================*/
NK_API nk_handle
nk_handle_ptr(void *ptr)
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b085      	sub	sp, #20
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
    nk_handle handle = {0};
 8012eac:	2300      	movs	r3, #0
 8012eae:	60fb      	str	r3, [r7, #12]
    handle.ptr = ptr;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	60fb      	str	r3, [r7, #12]
    return handle;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3714      	adds	r7, #20
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec0:	4770      	bx	lr
	...

08012ec4 <nk_input_begin>:
 *                          INPUT
 *
 * ===============================================================*/
NK_API void
nk_input_begin(struct nk_context *ctx)
{
 8012ec4:	b590      	push	{r4, r7, lr}
 8012ec6:	b085      	sub	sp, #20
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
    int i;
    struct nk_input *in;
    NK_ASSERT(ctx);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d105      	bne.n	8012ede <nk_input_begin+0x1a>
 8012ed2:	4b2c      	ldr	r3, [pc, #176]	; (8012f84 <nk_input_begin+0xc0>)
 8012ed4:	4a2c      	ldr	r2, [pc, #176]	; (8012f88 <nk_input_begin+0xc4>)
 8012ed6:	210e      	movs	r1, #14
 8012ed8:	482c      	ldr	r0, [pc, #176]	; (8012f8c <nk_input_begin+0xc8>)
 8012eda:	f00b f8b3 	bl	801e044 <__assert_func>
    if (!ctx) return;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d04b      	beq.n	8012f7c <nk_input_begin+0xb8>
    in = &ctx->input;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8012ee8:	2300      	movs	r3, #0
 8012eea:	60fb      	str	r3, [r7, #12]
 8012eec:	e00a      	b.n	8012f04 <nk_input_begin+0x40>
        in->mouse.buttons[i].clicked = 0;
 8012eee:	68ba      	ldr	r2, [r7, #8]
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	3310      	adds	r3, #16
 8012ef4:	011b      	lsls	r3, r3, #4
 8012ef6:	4413      	add	r3, r2
 8012ef8:	3308      	adds	r3, #8
 8012efa:	2200      	movs	r2, #0
 8012efc:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	3301      	adds	r3, #1
 8012f02:	60fb      	str	r3, [r7, #12]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2b03      	cmp	r3, #3
 8012f08:	ddf1      	ble.n	8012eee <nk_input_begin+0x2a>

    in->keyboard.text_len = 0;
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    in->mouse.scroll_delta = nk_vec2(0,0);
 8012f12:	68bc      	ldr	r4, [r7, #8]
 8012f14:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8012f90 <nk_input_begin+0xcc>
 8012f18:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012f90 <nk_input_begin+0xcc>
 8012f1c:	f001 fc0e 	bl	801473c <nk_vec2>
 8012f20:	eeb0 7a40 	vmov.f32	s14, s0
 8012f24:	eef0 7a60 	vmov.f32	s15, s1
 8012f28:	ed84 7a57 	vstr	s14, [r4, #348]	; 0x15c
 8012f2c:	edc4 7a58 	vstr	s15, [r4, #352]	; 0x160
    in->mouse.prev.x = in->mouse.pos.x;
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    in->mouse.prev.y = in->mouse.pos.y;
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    in->mouse.delta.x = 0;
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	f04f 0200 	mov.w	r2, #0
 8012f4e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    in->mouse.delta.y = 0;
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	f04f 0200 	mov.w	r2, #0
 8012f58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    for (i = 0; i < NK_KEY_MAX; i++)
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	60fb      	str	r3, [r7, #12]
 8012f60:	e008      	b.n	8012f74 <nk_input_begin+0xb0>
        in->keyboard.keys[i].clicked = 0;
 8012f62:	68ba      	ldr	r2, [r7, #8]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	00db      	lsls	r3, r3, #3
 8012f68:	4413      	add	r3, r2
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NK_KEY_MAX; i++)
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	3301      	adds	r3, #1
 8012f72:	60fb      	str	r3, [r7, #12]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2b1d      	cmp	r3, #29
 8012f78:	ddf3      	ble.n	8012f62 <nk_input_begin+0x9e>
 8012f7a:	e000      	b.n	8012f7e <nk_input_begin+0xba>
    if (!ctx) return;
 8012f7c:	bf00      	nop
}
 8012f7e:	3714      	adds	r7, #20
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd90      	pop	{r4, r7, pc}
 8012f84:	08021de8 	.word	0x08021de8
 8012f88:	08023aac 	.word	0x08023aac
 8012f8c:	08021dec 	.word	0x08021dec
 8012f90:	00000000 	.word	0x00000000

08012f94 <nk_input_end>:
NK_API void
nk_input_end(struct nk_context *ctx)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d105      	bne.n	8012fae <nk_input_end+0x1a>
 8012fa2:	4b15      	ldr	r3, [pc, #84]	; (8012ff8 <nk_input_end+0x64>)
 8012fa4:	4a15      	ldr	r2, [pc, #84]	; (8012ffc <nk_input_end+0x68>)
 8012fa6:	2121      	movs	r1, #33	; 0x21
 8012fa8:	4815      	ldr	r0, [pc, #84]	; (8013000 <nk_input_end+0x6c>)
 8012faa:	f00b f84b 	bl	801e044 <__assert_func>
    if (!ctx) return;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d01c      	beq.n	8012fee <nk_input_end+0x5a>
    in = &ctx->input;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	60fb      	str	r3, [r7, #12]
    if (in->mouse.grab)
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d003      	beq.n	8012fca <nk_input_end+0x36>
        in->mouse.grab = 0;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
    if (in->mouse.ungrab) {
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d00d      	beq.n	8012ff0 <nk_input_end+0x5c>
        in->mouse.grabbed = 0;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        in->mouse.ungrab = 0;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        in->mouse.grab = 0;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
 8012fec:	e000      	b.n	8012ff0 <nk_input_end+0x5c>
    if (!ctx) return;
 8012fee:	bf00      	nop
    }
}
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	08021de8 	.word	0x08021de8
 8012ffc:	08023abc 	.word	0x08023abc
 8013000:	08021dec 	.word	0x08021dec

08013004 <nk_input_motion>:
NK_API void
nk_input_motion(struct nk_context *ctx, int x, int y)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b086      	sub	sp, #24
 8013008:	af00      	add	r7, sp, #0
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	607a      	str	r2, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d105      	bne.n	8013022 <nk_input_motion+0x1e>
 8013016:	4b1b      	ldr	r3, [pc, #108]	; (8013084 <nk_input_motion+0x80>)
 8013018:	4a1b      	ldr	r2, [pc, #108]	; (8013088 <nk_input_motion+0x84>)
 801301a:	2130      	movs	r1, #48	; 0x30
 801301c:	481b      	ldr	r0, [pc, #108]	; (801308c <nk_input_motion+0x88>)
 801301e:	f00b f811 	bl	801e044 <__assert_func>
    if (!ctx) return;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d028      	beq.n	801307a <nk_input_motion+0x76>
    in = &ctx->input;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	617b      	str	r3, [r7, #20]
    in->mouse.pos.x = (float)x;
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	ee07 3a90 	vmov	s15, r3
 8013032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
    in->mouse.pos.y = (float)y;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	ee07 3a90 	vmov	s15, r3
 8013042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
    in->mouse.delta.x = in->mouse.pos.x - in->mouse.prev.x;
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8013058:	ee77 7a67 	vsub.f32	s15, s14, s15
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
    in->mouse.delta.y = in->mouse.pos.y - in->mouse.prev.y;
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 801306e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
 8013078:	e000      	b.n	801307c <nk_input_motion+0x78>
    if (!ctx) return;
 801307a:	bf00      	nop
}
 801307c:	3718      	adds	r7, #24
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	08021de8 	.word	0x08021de8
 8013088:	08023acc 	.word	0x08023acc
 801308c:	08021dec 	.word	0x08021dec

08013090 <nk_input_button>:
#endif
    in->keyboard.keys[key].down = down;
}
NK_API void
nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, nk_bool down)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	607a      	str	r2, [r7, #4]
 801309a:	603b      	str	r3, [r7, #0]
 801309c:	460b      	mov	r3, r1
 801309e:	72fb      	strb	r3, [r7, #11]
    struct nk_mouse_button *btn;
    struct nk_input *in;
    NK_ASSERT(ctx);
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d105      	bne.n	80130b2 <nk_input_button+0x22>
 80130a6:	4b1d      	ldr	r3, [pc, #116]	; (801311c <nk_input_button+0x8c>)
 80130a8:	4a1d      	ldr	r2, [pc, #116]	; (8013120 <nk_input_button+0x90>)
 80130aa:	214c      	movs	r1, #76	; 0x4c
 80130ac:	481d      	ldr	r0, [pc, #116]	; (8013124 <nk_input_button+0x94>)
 80130ae:	f00a ffc9 	bl	801e044 <__assert_func>
    if (!ctx) return;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d02b      	beq.n	8013110 <nk_input_button+0x80>
    in = &ctx->input;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	617b      	str	r3, [r7, #20]
    if (in->mouse.buttons[id].down == down) return;
 80130bc:	7afb      	ldrb	r3, [r7, #11]
 80130be:	697a      	ldr	r2, [r7, #20]
 80130c0:	3310      	adds	r3, #16
 80130c2:	011b      	lsls	r3, r3, #4
 80130c4:	4413      	add	r3, r2
 80130c6:	3304      	adds	r3, #4
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	6a3a      	ldr	r2, [r7, #32]
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d021      	beq.n	8013114 <nk_input_button+0x84>

    btn = &in->mouse.buttons[id];
 80130d0:	7afb      	ldrb	r3, [r7, #11]
 80130d2:	3310      	adds	r3, #16
 80130d4:	011b      	lsls	r3, r3, #4
 80130d6:	697a      	ldr	r2, [r7, #20]
 80130d8:	4413      	add	r3, r2
 80130da:	3304      	adds	r3, #4
 80130dc:	613b      	str	r3, [r7, #16]
    btn->clicked_pos.x = (float)x;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	ee07 3a90 	vmov	s15, r3
 80130e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	edc3 7a02 	vstr	s15, [r3, #8]
    btn->clicked_pos.y = (float)y;
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	ee07 3a90 	vmov	s15, r3
 80130f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	edc3 7a03 	vstr	s15, [r3, #12]
    btn->down = down;
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	6a3a      	ldr	r2, [r7, #32]
 8013102:	601a      	str	r2, [r3, #0]
    btn->clicked++;
 8013104:	693b      	ldr	r3, [r7, #16]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	1c5a      	adds	r2, r3, #1
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	605a      	str	r2, [r3, #4]
 801310e:	e002      	b.n	8013116 <nk_input_button+0x86>
    if (!ctx) return;
 8013110:	bf00      	nop
 8013112:	e000      	b.n	8013116 <nk_input_button+0x86>
    if (in->mouse.buttons[id].down == down) return;
 8013114:	bf00      	nop
    {
        in->mouse.down_pos.x = btn->clicked_pos.x;
        in->mouse.down_pos.y = btn->clicked_pos.y;
    }
#endif
}
 8013116:	3718      	adds	r7, #24
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	08021de8 	.word	0x08021de8
 8013120:	08023adc 	.word	0x08023adc
 8013124:	08021dec 	.word	0x08021dec

08013128 <nk_input_has_mouse_click_in_rect>:
    return (btn->clicked && btn->down == nk_false) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 8013128:	b480      	push	{r7}
 801312a:	b089      	sub	sp, #36	; 0x24
 801312c:	af00      	add	r7, sp, #0
 801312e:	6178      	str	r0, [r7, #20]
 8013130:	460b      	mov	r3, r1
 8013132:	eeb0 6a40 	vmov.f32	s12, s0
 8013136:	eef0 6a60 	vmov.f32	s13, s1
 801313a:	eeb0 7a41 	vmov.f32	s14, s2
 801313e:	eef0 7a61 	vmov.f32	s15, s3
 8013142:	74fb      	strb	r3, [r7, #19]
 8013144:	ed87 6a00 	vstr	s12, [r7]
 8013148:	edc7 6a01 	vstr	s13, [r7, #4]
 801314c:	ed87 7a02 	vstr	s14, [r7, #8]
 8013150:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d101      	bne.n	801315e <nk_input_has_mouse_click_in_rect+0x36>
 801315a:	2300      	movs	r3, #0
 801315c:	e059      	b.n	8013212 <nk_input_has_mouse_click_in_rect+0xea>
    btn = &i->mouse.buttons[id];
 801315e:	7cfb      	ldrb	r3, [r7, #19]
 8013160:	3310      	adds	r3, #16
 8013162:	011b      	lsls	r3, r3, #4
 8013164:	697a      	ldr	r2, [r7, #20]
 8013166:	4413      	add	r3, r2
 8013168:	3304      	adds	r3, #4
 801316a:	61fb      	str	r3, [r7, #28]
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 801316c:	ed97 7a00 	vldr	s14, [r7]
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	edd3 7a02 	vldr	s15, [r3, #8]
 8013176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801317e:	bf94      	ite	ls
 8013180:	2301      	movls	r3, #1
 8013182:	2300      	movhi	r3, #0
 8013184:	b2db      	uxtb	r3, r3
 8013186:	f083 0301 	eor.w	r3, r3, #1
 801318a:	b2db      	uxtb	r3, r3
 801318c:	2b00      	cmp	r3, #0
 801318e:	d13d      	bne.n	801320c <nk_input_has_mouse_click_in_rect+0xe4>
 8013190:	69fb      	ldr	r3, [r7, #28]
 8013192:	ed93 7a02 	vldr	s14, [r3, #8]
 8013196:	edd7 6a00 	vldr	s13, [r7]
 801319a:	edd7 7a02 	vldr	s15, [r7, #8]
 801319e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80131a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131aa:	bf4c      	ite	mi
 80131ac:	2301      	movmi	r3, #1
 80131ae:	2300      	movpl	r3, #0
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	f083 0301 	eor.w	r3, r3, #1
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d127      	bne.n	801320c <nk_input_has_mouse_click_in_rect+0xe4>
 80131bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80131c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ce:	bf94      	ite	ls
 80131d0:	2301      	movls	r3, #1
 80131d2:	2300      	movhi	r3, #0
 80131d4:	b2db      	uxtb	r3, r3
 80131d6:	f083 0301 	eor.w	r3, r3, #1
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d115      	bne.n	801320c <nk_input_has_mouse_click_in_rect+0xe4>
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80131e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80131ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80131ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80131f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fa:	bf4c      	ite	mi
 80131fc:	2301      	movmi	r3, #1
 80131fe:	2300      	movpl	r3, #0
 8013200:	b2db      	uxtb	r3, r3
 8013202:	f083 0301 	eor.w	r3, r3, #1
 8013206:	b2db      	uxtb	r3, r3
 8013208:	2b00      	cmp	r3, #0
 801320a:	d001      	beq.n	8013210 <nk_input_has_mouse_click_in_rect+0xe8>
        return nk_false;
 801320c:	2300      	movs	r3, #0
 801320e:	e000      	b.n	8013212 <nk_input_has_mouse_click_in_rect+0xea>
    return nk_true;
 8013210:	2301      	movs	r3, #1
}
 8013212:	4618      	mov	r0, r3
 8013214:	3724      	adds	r7, #36	; 0x24
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr

0801321e <nk_input_has_mouse_click_in_button_rect>:
NK_API nk_bool
nk_input_has_mouse_click_in_button_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 801321e:	b480      	push	{r7}
 8013220:	b089      	sub	sp, #36	; 0x24
 8013222:	af00      	add	r7, sp, #0
 8013224:	6178      	str	r0, [r7, #20]
 8013226:	460b      	mov	r3, r1
 8013228:	eeb0 6a40 	vmov.f32	s12, s0
 801322c:	eef0 6a60 	vmov.f32	s13, s1
 8013230:	eeb0 7a41 	vmov.f32	s14, s2
 8013234:	eef0 7a61 	vmov.f32	s15, s3
 8013238:	74fb      	strb	r3, [r7, #19]
 801323a:	ed87 6a00 	vstr	s12, [r7]
 801323e:	edc7 6a01 	vstr	s13, [r7, #4]
 8013242:	ed87 7a02 	vstr	s14, [r7, #8]
 8013246:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d101      	bne.n	8013254 <nk_input_has_mouse_click_in_button_rect+0x36>
 8013250:	2300      	movs	r3, #0
 8013252:	e059      	b.n	8013308 <nk_input_has_mouse_click_in_button_rect+0xea>
    btn = &i->mouse.buttons[id];
 8013254:	7cfb      	ldrb	r3, [r7, #19]
 8013256:	3310      	adds	r3, #16
 8013258:	011b      	lsls	r3, r3, #4
 801325a:	697a      	ldr	r2, [r7, #20]
 801325c:	4413      	add	r3, r2
 801325e:	3304      	adds	r3, #4
 8013260:	61fb      	str	r3, [r7, #28]
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h)
        || !NK_INBOX(i->mouse.down_pos.x,i->mouse.down_pos.y,b.x,b.y,b.w,b.h))
#else
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 8013262:	ed97 7a00 	vldr	s14, [r7]
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	edd3 7a02 	vldr	s15, [r3, #8]
 801326c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013274:	bf94      	ite	ls
 8013276:	2301      	movls	r3, #1
 8013278:	2300      	movhi	r3, #0
 801327a:	b2db      	uxtb	r3, r3
 801327c:	f083 0301 	eor.w	r3, r3, #1
 8013280:	b2db      	uxtb	r3, r3
 8013282:	2b00      	cmp	r3, #0
 8013284:	d13d      	bne.n	8013302 <nk_input_has_mouse_click_in_button_rect+0xe4>
 8013286:	69fb      	ldr	r3, [r7, #28]
 8013288:	ed93 7a02 	vldr	s14, [r3, #8]
 801328c:	edd7 6a00 	vldr	s13, [r7]
 8013290:	edd7 7a02 	vldr	s15, [r7, #8]
 8013294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a0:	bf4c      	ite	mi
 80132a2:	2301      	movmi	r3, #1
 80132a4:	2300      	movpl	r3, #0
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	f083 0301 	eor.w	r3, r3, #1
 80132ac:	b2db      	uxtb	r3, r3
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d127      	bne.n	8013302 <nk_input_has_mouse_click_in_button_rect+0xe4>
 80132b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80132b6:	69fb      	ldr	r3, [r7, #28]
 80132b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80132bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80132c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c4:	bf94      	ite	ls
 80132c6:	2301      	movls	r3, #1
 80132c8:	2300      	movhi	r3, #0
 80132ca:	b2db      	uxtb	r3, r3
 80132cc:	f083 0301 	eor.w	r3, r3, #1
 80132d0:	b2db      	uxtb	r3, r3
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d115      	bne.n	8013302 <nk_input_has_mouse_click_in_button_rect+0xe4>
 80132d6:	69fb      	ldr	r3, [r7, #28]
 80132d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80132dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80132e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80132e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80132e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80132ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f0:	bf4c      	ite	mi
 80132f2:	2301      	movmi	r3, #1
 80132f4:	2300      	movpl	r3, #0
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	f083 0301 	eor.w	r3, r3, #1
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d001      	beq.n	8013306 <nk_input_has_mouse_click_in_button_rect+0xe8>
#endif
        return nk_false;
 8013302:	2300      	movs	r3, #0
 8013304:	e000      	b.n	8013308 <nk_input_has_mouse_click_in_button_rect+0xea>
    return nk_true;
 8013306:	2301      	movs	r3, #1
}
 8013308:	4618      	mov	r0, r3
 801330a:	3724      	adds	r7, #36	; 0x24
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <nk_input_has_mouse_click_down_in_rect>:
NK_API nk_bool
nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b08a      	sub	sp, #40	; 0x28
 8013318:	af00      	add	r7, sp, #0
 801331a:	61f8      	str	r0, [r7, #28]
 801331c:	460b      	mov	r3, r1
 801331e:	eeb0 6a40 	vmov.f32	s12, s0
 8013322:	eef0 6a60 	vmov.f32	s13, s1
 8013326:	eeb0 7a41 	vmov.f32	s14, s2
 801332a:	eef0 7a61 	vmov.f32	s15, s3
 801332e:	607a      	str	r2, [r7, #4]
 8013330:	76fb      	strb	r3, [r7, #27]
 8013332:	ed87 6a02 	vstr	s12, [r7, #8]
 8013336:	edc7 6a03 	vstr	s13, [r7, #12]
 801333a:	ed87 7a04 	vstr	s14, [r7, #16]
 801333e:	edc7 7a05 	vstr	s15, [r7, #20]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d101      	bne.n	801334c <nk_input_has_mouse_click_down_in_rect+0x38>
 8013348:	2300      	movs	r3, #0
 801334a:	e026      	b.n	801339a <nk_input_has_mouse_click_down_in_rect+0x86>
    btn = &i->mouse.buttons[id];
 801334c:	7efb      	ldrb	r3, [r7, #27]
 801334e:	3310      	adds	r3, #16
 8013350:	011b      	lsls	r3, r3, #4
 8013352:	69fa      	ldr	r2, [r7, #28]
 8013354:	4413      	add	r3, r2
 8013356:	3304      	adds	r3, #4
 8013358:	627b      	str	r3, [r7, #36]	; 0x24
    return nk_input_has_mouse_click_in_rect(i, id, b) && (btn->down == down);
 801335a:	ed97 6a02 	vldr	s12, [r7, #8]
 801335e:	edd7 6a03 	vldr	s13, [r7, #12]
 8013362:	ed97 7a04 	vldr	s14, [r7, #16]
 8013366:	edd7 7a05 	vldr	s15, [r7, #20]
 801336a:	7efb      	ldrb	r3, [r7, #27]
 801336c:	eeb0 0a46 	vmov.f32	s0, s12
 8013370:	eef0 0a66 	vmov.f32	s1, s13
 8013374:	eeb0 1a47 	vmov.f32	s2, s14
 8013378:	eef0 1a67 	vmov.f32	s3, s15
 801337c:	4619      	mov	r1, r3
 801337e:	69f8      	ldr	r0, [r7, #28]
 8013380:	f7ff fed2 	bl	8013128 <nk_input_has_mouse_click_in_rect>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d006      	beq.n	8013398 <nk_input_has_mouse_click_down_in_rect+0x84>
 801338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	429a      	cmp	r2, r3
 8013392:	d101      	bne.n	8013398 <nk_input_has_mouse_click_down_in_rect+0x84>
 8013394:	2301      	movs	r3, #1
 8013396:	e000      	b.n	801339a <nk_input_has_mouse_click_down_in_rect+0x86>
 8013398:	2300      	movs	r3, #0
}
 801339a:	4618      	mov	r0, r3
 801339c:	3728      	adds	r7, #40	; 0x28
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}

080133a2 <nk_input_is_mouse_hovering_rect>:
        down = down || nk_input_is_mouse_click_in_rect(in, (enum nk_buttons)i, b);
    return down;
}
NK_API nk_bool
nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 80133a2:	b480      	push	{r7}
 80133a4:	b087      	sub	sp, #28
 80133a6:	af00      	add	r7, sp, #0
 80133a8:	6178      	str	r0, [r7, #20]
 80133aa:	eeb0 6a40 	vmov.f32	s12, s0
 80133ae:	eef0 6a60 	vmov.f32	s13, s1
 80133b2:	eeb0 7a41 	vmov.f32	s14, s2
 80133b6:	eef0 7a61 	vmov.f32	s15, s3
 80133ba:	ed87 6a01 	vstr	s12, [r7, #4]
 80133be:	edc7 6a02 	vstr	s13, [r7, #8]
 80133c2:	ed87 7a03 	vstr	s14, [r7, #12]
 80133c6:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d101      	bne.n	80133d4 <nk_input_is_mouse_hovering_rect+0x32>
 80133d0:	2300      	movs	r3, #0
 80133d2:	e032      	b.n	801343a <nk_input_is_mouse_hovering_rect+0x98>
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 80133d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80133de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e6:	d827      	bhi.n	8013438 <nk_input_is_mouse_hovering_rect+0x96>
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80133ee:	edd7 6a01 	vldr	s13, [r7, #4]
 80133f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80133f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013402:	d519      	bpl.n	8013438 <nk_input_is_mouse_hovering_rect+0x96>
 8013404:	ed97 7a02 	vldr	s14, [r7, #8]
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801340e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013416:	d80f      	bhi.n	8013438 <nk_input_is_mouse_hovering_rect+0x96>
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801341e:	edd7 6a02 	vldr	s13, [r7, #8]
 8013422:	edd7 7a04 	vldr	s15, [r7, #16]
 8013426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801342a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013432:	d501      	bpl.n	8013438 <nk_input_is_mouse_hovering_rect+0x96>
 8013434:	2301      	movs	r3, #1
 8013436:	e000      	b.n	801343a <nk_input_is_mouse_hovering_rect+0x98>
 8013438:	2300      	movs	r3, #0
}
 801343a:	4618      	mov	r0, r3
 801343c:	371c      	adds	r7, #28
 801343e:	46bd      	mov	sp, r7
 8013440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013444:	4770      	bx	lr

08013446 <nk_input_is_mouse_prev_hovering_rect>:
NK_API nk_bool
nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 8013446:	b480      	push	{r7}
 8013448:	b087      	sub	sp, #28
 801344a:	af00      	add	r7, sp, #0
 801344c:	6178      	str	r0, [r7, #20]
 801344e:	eeb0 6a40 	vmov.f32	s12, s0
 8013452:	eef0 6a60 	vmov.f32	s13, s1
 8013456:	eeb0 7a41 	vmov.f32	s14, s2
 801345a:	eef0 7a61 	vmov.f32	s15, s3
 801345e:	ed87 6a01 	vstr	s12, [r7, #4]
 8013462:	edc7 6a02 	vstr	s13, [r7, #8]
 8013466:	ed87 7a03 	vstr	s14, [r7, #12]
 801346a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d101      	bne.n	8013478 <nk_input_is_mouse_prev_hovering_rect+0x32>
 8013474:	2300      	movs	r3, #0
 8013476:	e032      	b.n	80134de <nk_input_is_mouse_prev_hovering_rect+0x98>
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 8013478:	ed97 7a01 	vldr	s14, [r7, #4]
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8013482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801348a:	d827      	bhi.n	80134dc <nk_input_is_mouse_prev_hovering_rect+0x96>
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8013492:	edd7 6a01 	vldr	s13, [r7, #4]
 8013496:	edd7 7a03 	vldr	s15, [r7, #12]
 801349a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801349e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a6:	d519      	bpl.n	80134dc <nk_input_is_mouse_prev_hovering_rect+0x96>
 80134a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 80134b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ba:	d80f      	bhi.n	80134dc <nk_input_is_mouse_prev_hovering_rect+0x96>
 80134bc:	697b      	ldr	r3, [r7, #20]
 80134be:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 80134c2:	edd7 6a02 	vldr	s13, [r7, #8]
 80134c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80134ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80134ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d6:	d501      	bpl.n	80134dc <nk_input_is_mouse_prev_hovering_rect+0x96>
 80134d8:	2301      	movs	r3, #1
 80134da:	e000      	b.n	80134de <nk_input_is_mouse_prev_hovering_rect+0x98>
 80134dc:	2300      	movs	r3, #0
}
 80134de:	4618      	mov	r0, r3
 80134e0:	371c      	adds	r7, #28
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr

080134ea <nk_input_is_mouse_down>:
    if (!nk_input_is_mouse_hovering_rect(i, rect)) return nk_false;
    return nk_input_is_mouse_click_in_rect(i, id, rect);
}
NK_API nk_bool
nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)
{
 80134ea:	b480      	push	{r7}
 80134ec:	b083      	sub	sp, #12
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
 80134f2:	460b      	mov	r3, r1
 80134f4:	70fb      	strb	r3, [r7, #3]
    if (!i) return nk_false;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d101      	bne.n	8013500 <nk_input_is_mouse_down+0x16>
 80134fc:	2300      	movs	r3, #0
 80134fe:	e006      	b.n	801350e <nk_input_is_mouse_down+0x24>
    return i->mouse.buttons[id].down;
 8013500:	78fb      	ldrb	r3, [r7, #3]
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	3310      	adds	r3, #16
 8013506:	011b      	lsls	r3, r3, #4
 8013508:	4413      	add	r3, r2
 801350a:	3304      	adds	r3, #4
 801350c:	681b      	ldr	r3, [r3, #0]
}
 801350e:	4618      	mov	r0, r3
 8013510:	370c      	adds	r7, #12
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr

0801351a <nk_input_is_mouse_pressed>:
NK_API nk_bool
nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)
{
 801351a:	b480      	push	{r7}
 801351c:	b085      	sub	sp, #20
 801351e:	af00      	add	r7, sp, #0
 8013520:	6078      	str	r0, [r7, #4]
 8013522:	460b      	mov	r3, r1
 8013524:	70fb      	strb	r3, [r7, #3]
    const struct nk_mouse_button *b;
    if (!i) return nk_false;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d101      	bne.n	8013530 <nk_input_is_mouse_pressed+0x16>
 801352c:	2300      	movs	r3, #0
 801352e:	e011      	b.n	8013554 <nk_input_is_mouse_pressed+0x3a>
    b = &i->mouse.buttons[id];
 8013530:	78fb      	ldrb	r3, [r7, #3]
 8013532:	3310      	adds	r3, #16
 8013534:	011b      	lsls	r3, r3, #4
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	4413      	add	r3, r2
 801353a:	3304      	adds	r3, #4
 801353c:	60fb      	str	r3, [r7, #12]
    if (b->down && b->clicked)
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d005      	beq.n	8013552 <nk_input_is_mouse_pressed+0x38>
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d001      	beq.n	8013552 <nk_input_is_mouse_pressed+0x38>
        return nk_true;
 801354e:	2301      	movs	r3, #1
 8013550:	e000      	b.n	8013554 <nk_input_is_mouse_pressed+0x3a>
    return nk_false;
 8013552:	2300      	movs	r3, #0
}
 8013554:	4618      	mov	r0, r3
 8013556:	3714      	adds	r7, #20
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr

08013560 <nk_input_is_key_pressed>:
    if (!i) return nk_false;
    return (!i->mouse.buttons[id].down && i->mouse.buttons[id].clicked);
}
NK_API nk_bool
nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)
{
 8013560:	b480      	push	{r7}
 8013562:	b085      	sub	sp, #20
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	460b      	mov	r3, r1
 801356a:	70fb      	strb	r3, [r7, #3]
    const struct nk_key *k;
    if (!i) return nk_false;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d101      	bne.n	8013576 <nk_input_is_key_pressed+0x16>
 8013572:	2300      	movs	r3, #0
 8013574:	e017      	b.n	80135a6 <nk_input_is_key_pressed+0x46>
    k = &i->keyboard.keys[key];
 8013576:	78fb      	ldrb	r3, [r7, #3]
 8013578:	00db      	lsls	r3, r3, #3
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	4413      	add	r3, r2
 801357e:	60fb      	str	r3, [r7, #12]
    if ((k->down && k->clicked) || (!k->down && k->clicked >= 2))
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d003      	beq.n	8013590 <nk_input_is_key_pressed+0x30>
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d107      	bne.n	80135a0 <nk_input_is_key_pressed+0x40>
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d105      	bne.n	80135a4 <nk_input_is_key_pressed+0x44>
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	685b      	ldr	r3, [r3, #4]
 801359c:	2b01      	cmp	r3, #1
 801359e:	d901      	bls.n	80135a4 <nk_input_is_key_pressed+0x44>
        return nk_true;
 80135a0:	2301      	movs	r3, #1
 80135a2:	e000      	b.n	80135a6 <nk_input_is_key_pressed+0x46>
    return nk_false;
 80135a4:	2300      	movs	r3, #0
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3714      	adds	r7, #20
 80135aa:	46bd      	mov	sp, r7
 80135ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b0:	4770      	bx	lr
	...

080135b4 <nk_layout_set_min_row_height>:
 *                          LAYOUT
 *
 * ===============================================================*/
NK_API void
nk_layout_set_min_row_height(struct nk_context *ctx, float height)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b084      	sub	sp, #16
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	ed87 0a00 	vstr	s0, [r7]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d105      	bne.n	80135d2 <nk_layout_set_min_row_height+0x1e>
 80135c6:	4b23      	ldr	r3, [pc, #140]	; (8013654 <nk_layout_set_min_row_height+0xa0>)
 80135c8:	4a23      	ldr	r2, [pc, #140]	; (8013658 <nk_layout_set_min_row_height+0xa4>)
 80135ca:	210f      	movs	r1, #15
 80135cc:	4823      	ldr	r0, [pc, #140]	; (801365c <nk_layout_set_min_row_height+0xa8>)
 80135ce:	f00a fd39 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80135d8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d105      	bne.n	80135ec <nk_layout_set_min_row_height+0x38>
 80135e0:	4b1f      	ldr	r3, [pc, #124]	; (8013660 <nk_layout_set_min_row_height+0xac>)
 80135e2:	4a1d      	ldr	r2, [pc, #116]	; (8013658 <nk_layout_set_min_row_height+0xa4>)
 80135e4:	2110      	movs	r1, #16
 80135e6:	481d      	ldr	r0, [pc, #116]	; (801365c <nk_layout_set_min_row_height+0xa8>)
 80135e8:	f00a fd2c 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80135f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80135f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d105      	bne.n	801360a <nk_layout_set_min_row_height+0x56>
 80135fe:	4b19      	ldr	r3, [pc, #100]	; (8013664 <nk_layout_set_min_row_height+0xb0>)
 8013600:	4a15      	ldr	r2, [pc, #84]	; (8013658 <nk_layout_set_min_row_height+0xa4>)
 8013602:	2111      	movs	r1, #17
 8013604:	4815      	ldr	r0, [pc, #84]	; (801365c <nk_layout_set_min_row_height+0xa8>)
 8013606:	f00a fd1d 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d01d      	beq.n	801364c <nk_layout_set_min_row_height+0x98>
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013616:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801361a:	2b00      	cmp	r3, #0
 801361c:	d016      	beq.n	801364c <nk_layout_set_min_row_height+0x98>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013624:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801362c:	2b00      	cmp	r3, #0
 801362e:	d00d      	beq.n	801364c <nk_layout_set_min_row_height+0x98>
        return;

    win = ctx->current;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013636:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801363a:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013642:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = height;
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	683a      	ldr	r2, [r7, #0]
 8013648:	671a      	str	r2, [r3, #112]	; 0x70
 801364a:	e000      	b.n	801364e <nk_layout_set_min_row_height+0x9a>
        return;
 801364c:	bf00      	nop
}
 801364e:	3710      	adds	r7, #16
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	08021e08 	.word	0x08021e08
 8013658:	08023aec 	.word	0x08023aec
 801365c:	08021e0c 	.word	0x08021e0c
 8013660:	08021e28 	.word	0x08021e28
 8013664:	08021e38 	.word	0x08021e38

08013668 <nk_layout_reset_min_row_height>:
NK_API void
nk_layout_reset_min_row_height(struct nk_context *ctx)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d105      	bne.n	8013682 <nk_layout_reset_min_row_height+0x1a>
 8013676:	4b34      	ldr	r3, [pc, #208]	; (8013748 <nk_layout_reset_min_row_height+0xe0>)
 8013678:	4a34      	ldr	r2, [pc, #208]	; (801374c <nk_layout_reset_min_row_height+0xe4>)
 801367a:	211f      	movs	r1, #31
 801367c:	4834      	ldr	r0, [pc, #208]	; (8013750 <nk_layout_reset_min_row_height+0xe8>)
 801367e:	f00a fce1 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013688:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801368c:	2b00      	cmp	r3, #0
 801368e:	d105      	bne.n	801369c <nk_layout_reset_min_row_height+0x34>
 8013690:	4b30      	ldr	r3, [pc, #192]	; (8013754 <nk_layout_reset_min_row_height+0xec>)
 8013692:	4a2e      	ldr	r2, [pc, #184]	; (801374c <nk_layout_reset_min_row_height+0xe4>)
 8013694:	2120      	movs	r1, #32
 8013696:	482e      	ldr	r0, [pc, #184]	; (8013750 <nk_layout_reset_min_row_height+0xe8>)
 8013698:	f00a fcd4 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80136a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80136a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d105      	bne.n	80136ba <nk_layout_reset_min_row_height+0x52>
 80136ae:	4b2a      	ldr	r3, [pc, #168]	; (8013758 <nk_layout_reset_min_row_height+0xf0>)
 80136b0:	4a26      	ldr	r2, [pc, #152]	; (801374c <nk_layout_reset_min_row_height+0xe4>)
 80136b2:	2121      	movs	r1, #33	; 0x21
 80136b4:	4826      	ldr	r0, [pc, #152]	; (8013750 <nk_layout_reset_min_row_height+0xe8>)
 80136b6:	f00a fcc5 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d03e      	beq.n	801373e <nk_layout_reset_min_row_height+0xd6>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80136c6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d037      	beq.n	801373e <nk_layout_reset_min_row_height+0xd6>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80136d4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80136d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d02e      	beq.n	801373e <nk_layout_reset_min_row_height+0xd6>
        return;

    win = ctx->current;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80136e6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80136ea:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136f2:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = ctx->style.font->height;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80136fa:	685a      	ldr	r2, [r3, #4]
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	671a      	str	r2, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.text.padding.y*2;
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 801370c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.window.min_row_height_padding*2;
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013726:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 801372a:	edd3 7a00 	vldr	s15, [r3]
 801372e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 801373c:	e000      	b.n	8013740 <nk_layout_reset_min_row_height+0xd8>
        return;
 801373e:	bf00      	nop
}
 8013740:	3710      	adds	r7, #16
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	08021e08 	.word	0x08021e08
 801374c:	08023b0c 	.word	0x08023b0c
 8013750:	08021e0c 	.word	0x08021e0c
 8013754:	08021e28 	.word	0x08021e28
 8013758:	08021e38 	.word	0x08021e38

0801375c <nk_layout_row_calculate_usable_space>:
NK_LIB float
nk_layout_row_calculate_usable_space(const struct nk_style *style, enum nk_panel_type type,
    float total_space, int columns)
{
 801375c:	b480      	push	{r7}
 801375e:	b089      	sub	sp, #36	; 0x24
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	460b      	mov	r3, r1
 8013766:	ed87 0a01 	vstr	s0, [r7, #4]
 801376a:	603a      	str	r2, [r7, #0]
 801376c:	72fb      	strb	r3, [r7, #11]

    struct nk_vec2 spacing;

    NK_UNUSED(type);

    spacing = style->window.spacing;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013774:	461a      	mov	r2, r3
 8013776:	f107 0310 	add.w	r3, r7, #16
 801377a:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 801377e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013782:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate the usable panel space */
    panel_spacing = (float)NK_MAX(columns - 1, 0) * spacing.x;
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	dd06      	ble.n	801379a <nk_layout_row_calculate_usable_space+0x3e>
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	3b01      	subs	r3, #1
 8013790:	ee07 3a90 	vmov	s15, r3
 8013794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013798:	e001      	b.n	801379e <nk_layout_row_calculate_usable_space+0x42>
 801379a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80137d0 <nk_layout_row_calculate_usable_space+0x74>
 801379e:	ed97 7a04 	vldr	s14, [r7, #16]
 80137a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80137a6:	edc7 7a07 	vstr	s15, [r7, #28]
    panel_space  = total_space - panel_spacing;
 80137aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80137ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80137b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137b6:	edc7 7a06 	vstr	s15, [r7, #24]
    return panel_space;
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	ee07 3a90 	vmov	s15, r3
}
 80137c0:	eeb0 0a67 	vmov.f32	s0, s15
 80137c4:	3724      	adds	r7, #36	; 0x24
 80137c6:	46bd      	mov	sp, r7
 80137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137cc:	4770      	bx	lr
 80137ce:	bf00      	nop
 80137d0:	00000000 	.word	0x00000000

080137d4 <nk_panel_layout>:
NK_LIB void
nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,
    float height, int cols)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b08e      	sub	sp, #56	; 0x38
 80137d8:	af00      	add	r7, sp, #0
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	ed87 0a01 	vstr	s0, [r7, #4]
 80137e2:	603a      	str	r2, [r7, #0]
    struct nk_command_buffer *out;

    struct nk_vec2 item_spacing;
    struct nk_color color;

    NK_ASSERT(ctx);
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d105      	bne.n	80137f6 <nk_panel_layout+0x22>
 80137ea:	4b78      	ldr	r3, [pc, #480]	; (80139cc <nk_panel_layout+0x1f8>)
 80137ec:	4a78      	ldr	r2, [pc, #480]	; (80139d0 <nk_panel_layout+0x1fc>)
 80137ee:	2148      	movs	r1, #72	; 0x48
 80137f0:	4878      	ldr	r0, [pc, #480]	; (80139d4 <nk_panel_layout+0x200>)
 80137f2:	f00a fc27 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80137fc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013800:	2b00      	cmp	r3, #0
 8013802:	d105      	bne.n	8013810 <nk_panel_layout+0x3c>
 8013804:	4b74      	ldr	r3, [pc, #464]	; (80139d8 <nk_panel_layout+0x204>)
 8013806:	4a72      	ldr	r2, [pc, #456]	; (80139d0 <nk_panel_layout+0x1fc>)
 8013808:	2149      	movs	r1, #73	; 0x49
 801380a:	4872      	ldr	r0, [pc, #456]	; (80139d4 <nk_panel_layout+0x200>)
 801380c:	f00a fc1a 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013816:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801381a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801381e:	2b00      	cmp	r3, #0
 8013820:	d105      	bne.n	801382e <nk_panel_layout+0x5a>
 8013822:	4b6e      	ldr	r3, [pc, #440]	; (80139dc <nk_panel_layout+0x208>)
 8013824:	4a6a      	ldr	r2, [pc, #424]	; (80139d0 <nk_panel_layout+0x1fc>)
 8013826:	214a      	movs	r1, #74	; 0x4a
 8013828:	486a      	ldr	r0, [pc, #424]	; (80139d4 <nk_panel_layout+0x200>)
 801382a:	f00a fc0b 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	2b00      	cmp	r3, #0
 8013832:	f000 80c6 	beq.w	80139c2 <nk_panel_layout+0x1ee>
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801383c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013840:	2b00      	cmp	r3, #0
 8013842:	f000 80be 	beq.w	80139c2 <nk_panel_layout+0x1ee>
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801384c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013854:	2b00      	cmp	r3, #0
 8013856:	f000 80b4 	beq.w	80139c2 <nk_panel_layout+0x1ee>
        return;

    /* prefetch some configuration data */
    layout = win->layout;
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013860:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8013868:	633b      	str	r3, [r7, #48]	; 0x30
    out = &win->buffer;
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	3364      	adds	r3, #100	; 0x64
 801386e:	62fb      	str	r3, [r7, #44]	; 0x2c
    color = style->window.background;
 8013870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013876:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801387a:	623b      	str	r3, [r7, #32]
    item_spacing = style->window.spacing;
 801387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013882:	461a      	mov	r2, r3
 8013884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013888:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 801388c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013890:	e883 0003 	stmia.w	r3, {r0, r1}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 8013894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801389c:	2b00      	cmp	r3, #0
 801389e:	d005      	beq.n	80138ac <nk_panel_layout+0xd8>
 80138a0:	4b4f      	ldr	r3, [pc, #316]	; (80139e0 <nk_panel_layout+0x20c>)
 80138a2:	4a4b      	ldr	r2, [pc, #300]	; (80139d0 <nk_panel_layout+0x1fc>)
 80138a4:	215a      	movs	r1, #90	; 0x5a
 80138a6:	484b      	ldr	r0, [pc, #300]	; (80139d4 <nk_panel_layout+0x200>)
 80138a8:	f00a fbcc 	bl	801e044 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 80138ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d005      	beq.n	80138c4 <nk_panel_layout+0xf0>
 80138b8:	4b4a      	ldr	r3, [pc, #296]	; (80139e4 <nk_panel_layout+0x210>)
 80138ba:	4a45      	ldr	r2, [pc, #276]	; (80139d0 <nk_panel_layout+0x1fc>)
 80138bc:	215b      	movs	r1, #91	; 0x5b
 80138be:	4845      	ldr	r0, [pc, #276]	; (80139d4 <nk_panel_layout+0x200>)
 80138c0:	f00a fbc0 	bl	801e044 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 80138c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d005      	beq.n	80138dc <nk_panel_layout+0x108>
 80138d0:	4b45      	ldr	r3, [pc, #276]	; (80139e8 <nk_panel_layout+0x214>)
 80138d2:	4a3f      	ldr	r2, [pc, #252]	; (80139d0 <nk_panel_layout+0x1fc>)
 80138d4:	215c      	movs	r1, #92	; 0x5c
 80138d6:	483f      	ldr	r0, [pc, #252]	; (80139d4 <nk_panel_layout+0x200>)
 80138d8:	f00a fbb4 	bl	801e044 <__assert_func>

    /* update the current row and set the current row layout */
    layout->row.index = 0;
 80138dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138de:	2200      	movs	r2, #0
 80138e0:	669a      	str	r2, [r3, #104]	; 0x68
    layout->at_y += layout->row.height;
 80138e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80138e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ea:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80138ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138f4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    layout->row.columns = cols;
 80138f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138fa:	683a      	ldr	r2, [r7, #0]
 80138fc:	675a      	str	r2, [r3, #116]	; 0x74
    if (height == 0.0f)
 80138fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8013902:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801390a:	d117      	bne.n	801393c <nk_panel_layout+0x168>
        layout->row.height = NK_MAX(height, layout->row.min_height) + item_spacing.y;
 801390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801390e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8013912:	ed97 7a01 	vldr	s14, [r7, #4]
 8013916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801391a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391e:	d503      	bpl.n	8013928 <nk_panel_layout+0x154>
 8013920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013922:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8013926:	e001      	b.n	801392c <nk_panel_layout+0x158>
 8013928:	edd7 7a01 	vldr	s15, [r7, #4]
 801392c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8013930:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013936:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 801393a:	e008      	b.n	801394e <nk_panel_layout+0x17a>
    else layout->row.height = height + item_spacing.y;
 801393c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8013940:	edd7 7a01 	vldr	s15, [r7, #4]
 8013944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801394a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    layout->row.item_offset = 0;
 801394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013950:	f04f 0200 	mov.w	r2, #0
 8013954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (layout->flags & NK_WINDOW_DYNAMIC) {
 8013958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801395a:	685b      	ldr	r3, [r3, #4]
 801395c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013960:	2b00      	cmp	r3, #0
 8013962:	d02f      	beq.n	80139c4 <nk_panel_layout+0x1f0>
        /* draw background for dynamic panels */
        struct nk_rect background;
        background.x = win->bounds.x;
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013968:	613b      	str	r3, [r7, #16]
        background.w = win->bounds.w;
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801396e:	61bb      	str	r3, [r7, #24]
        background.y = layout->at_y - 1.0f;
 8013970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013972:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801397a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801397e:	edc7 7a05 	vstr	s15, [r7, #20]
        background.h = layout->row.height + 1.0f;
 8013982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013984:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8013988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801398c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013990:	edc7 7a07 	vstr	s15, [r7, #28]
        nk_fill_rect(out, background, 0, color);
 8013994:	ed97 6a04 	vldr	s12, [r7, #16]
 8013998:	edd7 6a05 	vldr	s13, [r7, #20]
 801399c:	ed97 7a06 	vldr	s14, [r7, #24]
 80139a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80139a4:	6a39      	ldr	r1, [r7, #32]
 80139a6:	ed9f 2a11 	vldr	s4, [pc, #68]	; 80139ec <nk_panel_layout+0x218>
 80139aa:	eeb0 0a46 	vmov.f32	s0, s12
 80139ae:	eef0 0a66 	vmov.f32	s1, s13
 80139b2:	eeb0 1a47 	vmov.f32	s2, s14
 80139b6:	eef0 1a67 	vmov.f32	s3, s15
 80139ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80139bc:	f7fe f8b0 	bl	8011b20 <nk_fill_rect>
 80139c0:	e000      	b.n	80139c4 <nk_panel_layout+0x1f0>
        return;
 80139c2:	bf00      	nop
    }
}
 80139c4:	3738      	adds	r7, #56	; 0x38
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	08021e08 	.word	0x08021e08
 80139d0:	08023b2c 	.word	0x08023b2c
 80139d4:	08021e0c 	.word	0x08021e0c
 80139d8:	08021e28 	.word	0x08021e28
 80139dc:	08021e38 	.word	0x08021e38
 80139e0:	08021e50 	.word	0x08021e50
 80139e4:	08021e78 	.word	0x08021e78
 80139e8:	08021e9c 	.word	0x08021e9c
 80139ec:	00000000 	.word	0x00000000

080139f0 <nk_row_layout>:
NK_LIB void
nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, int width)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b088      	sub	sp, #32
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6178      	str	r0, [r7, #20]
 80139f8:	ed87 0a03 	vstr	s0, [r7, #12]
 80139fc:	60ba      	str	r2, [r7, #8]
 80139fe:	607b      	str	r3, [r7, #4]
 8013a00:	460b      	mov	r3, r1
 8013a02:	74fb      	strb	r3, [r7, #19]
    /* update the current row and set the current row layout */
    struct nk_window *win;
    NK_ASSERT(ctx);
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d105      	bne.n	8013a16 <nk_row_layout+0x26>
 8013a0a:	4b3a      	ldr	r3, [pc, #232]	; (8013af4 <nk_row_layout+0x104>)
 8013a0c:	4a3a      	ldr	r2, [pc, #232]	; (8013af8 <nk_row_layout+0x108>)
 8013a0e:	2177      	movs	r1, #119	; 0x77
 8013a10:	483a      	ldr	r0, [pc, #232]	; (8013afc <nk_row_layout+0x10c>)
 8013a12:	f00a fb17 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013a1c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d105      	bne.n	8013a30 <nk_row_layout+0x40>
 8013a24:	4b36      	ldr	r3, [pc, #216]	; (8013b00 <nk_row_layout+0x110>)
 8013a26:	4a34      	ldr	r2, [pc, #208]	; (8013af8 <nk_row_layout+0x108>)
 8013a28:	2178      	movs	r1, #120	; 0x78
 8013a2a:	4834      	ldr	r0, [pc, #208]	; (8013afc <nk_row_layout+0x10c>)
 8013a2c:	f00a fb0a 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013a36:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d105      	bne.n	8013a4e <nk_row_layout+0x5e>
 8013a42:	4b30      	ldr	r3, [pc, #192]	; (8013b04 <nk_row_layout+0x114>)
 8013a44:	4a2c      	ldr	r2, [pc, #176]	; (8013af8 <nk_row_layout+0x108>)
 8013a46:	2179      	movs	r1, #121	; 0x79
 8013a48:	482c      	ldr	r0, [pc, #176]	; (8013afc <nk_row_layout+0x10c>)
 8013a4a:	f00a fafb 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d04a      	beq.n	8013aea <nk_row_layout+0xfa>
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013a5a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d043      	beq.n	8013aea <nk_row_layout+0xfa>
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013a68:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d03a      	beq.n	8013aea <nk_row_layout+0xfa>
        return;

    win = ctx->current;
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013a7a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013a7e:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	ed97 0a03 	vldr	s0, [r7, #12]
 8013a86:	69f9      	ldr	r1, [r7, #28]
 8013a88:	6978      	ldr	r0, [r7, #20]
 8013a8a:	f7ff fea3 	bl	80137d4 <nk_panel_layout>
    if (fmt == NK_DYNAMIC)
 8013a8e:	7cfb      	ldrb	r3, [r7, #19]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d106      	bne.n	8013aa2 <nk_row_layout+0xb2>
        win->layout->row.type = NK_LAYOUT_DYNAMIC_FIXED;
 8013a94:	69fb      	ldr	r3, [r7, #28]
 8013a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013aa0:	e005      	b.n	8013aae <nk_row_layout+0xbe>
    else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013aa8:	2204      	movs	r2, #4
 8013aaa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    win->layout->row.ratio = 0;
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	679a      	str	r2, [r3, #120]	; 0x78
    win->layout->row.filled = 0;
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013abe:	f04f 0200 	mov.w	r2, #0
 8013ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    win->layout->row.item_offset = 0;
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013acc:	f04f 0200 	mov.w	r2, #0
 8013ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    win->layout->row.item_width = (float)width;
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	ee07 2a90 	vmov	s15, r2
 8013ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ae4:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8013ae8:	e000      	b.n	8013aec <nk_row_layout+0xfc>
        return;
 8013aea:	bf00      	nop
}
 8013aec:	3720      	adds	r7, #32
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop
 8013af4:	08021e08 	.word	0x08021e08
 8013af8:	08023b3c 	.word	0x08023b3c
 8013afc:	08021e0c 	.word	0x08021e0c
 8013b00:	08021e28 	.word	0x08021e28
 8013b04:	08021e38 	.word	0x08021e38

08013b08 <nk_layout_row_dynamic>:
    win = ctx->current;
    return NK_CLAMP(0.0f, pixel_width/win->bounds.x, 1.0f);
}
NK_API void
nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b084      	sub	sp, #16
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	ed87 0a02 	vstr	s0, [r7, #8]
 8013b14:	6079      	str	r1, [r7, #4]
    nk_row_layout(ctx, NK_DYNAMIC, height, cols, 0);
 8013b16:	2300      	movs	r3, #0
 8013b18:	687a      	ldr	r2, [r7, #4]
 8013b1a:	ed97 0a02 	vldr	s0, [r7, #8]
 8013b1e:	2100      	movs	r1, #0
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f7ff ff65 	bl	80139f0 <nk_row_layout>
}
 8013b26:	bf00      	nop
 8013b28:	3710      	adds	r7, #16
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
	...

08013b30 <nk_layout_row>:
    layout->row.item_offset = 0;
}
NK_API void
nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, const float *ratio)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b08c      	sub	sp, #48	; 0x30
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6178      	str	r0, [r7, #20]
 8013b38:	ed87 0a03 	vstr	s0, [r7, #12]
 8013b3c:	60ba      	str	r2, [r7, #8]
 8013b3e:	607b      	str	r3, [r7, #4]
 8013b40:	460b      	mov	r3, r1
 8013b42:	74fb      	strb	r3, [r7, #19]
    int i;
    int n_undef = 0;
 8013b44:	2300      	movs	r3, #0
 8013b46:	62bb      	str	r3, [r7, #40]	; 0x28
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d105      	bne.n	8013b5a <nk_layout_row+0x2a>
 8013b4e:	4b73      	ldr	r3, [pc, #460]	; (8013d1c <nk_layout_row+0x1ec>)
 8013b50:	4a73      	ldr	r2, [pc, #460]	; (8013d20 <nk_layout_row+0x1f0>)
 8013b52:	21ed      	movs	r1, #237	; 0xed
 8013b54:	4873      	ldr	r0, [pc, #460]	; (8013d24 <nk_layout_row+0x1f4>)
 8013b56:	f00a fa75 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013b60:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d105      	bne.n	8013b74 <nk_layout_row+0x44>
 8013b68:	4b6f      	ldr	r3, [pc, #444]	; (8013d28 <nk_layout_row+0x1f8>)
 8013b6a:	4a6d      	ldr	r2, [pc, #436]	; (8013d20 <nk_layout_row+0x1f0>)
 8013b6c:	21ee      	movs	r1, #238	; 0xee
 8013b6e:	486d      	ldr	r0, [pc, #436]	; (8013d24 <nk_layout_row+0x1f4>)
 8013b70:	f00a fa68 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013b7a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d105      	bne.n	8013b92 <nk_layout_row+0x62>
 8013b86:	4b69      	ldr	r3, [pc, #420]	; (8013d2c <nk_layout_row+0x1fc>)
 8013b88:	4a65      	ldr	r2, [pc, #404]	; (8013d20 <nk_layout_row+0x1f0>)
 8013b8a:	21ef      	movs	r1, #239	; 0xef
 8013b8c:	4865      	ldr	r0, [pc, #404]	; (8013d24 <nk_layout_row+0x1f4>)
 8013b8e:	f00a fa59 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	f000 80bd 	beq.w	8013d14 <nk_layout_row+0x1e4>
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013ba0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	f000 80b5 	beq.w	8013d14 <nk_layout_row+0x1e4>
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013bb0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f000 80ab 	beq.w	8013d14 <nk_layout_row+0x1e4>
        return;

    win = ctx->current;
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013bc4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013bc8:	623b      	str	r3, [r7, #32]
    layout = win->layout;
 8013bca:	6a3b      	ldr	r3, [r7, #32]
 8013bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013bd0:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8013bd2:	68ba      	ldr	r2, [r7, #8]
 8013bd4:	ed97 0a03 	vldr	s0, [r7, #12]
 8013bd8:	6a39      	ldr	r1, [r7, #32]
 8013bda:	6978      	ldr	r0, [r7, #20]
 8013bdc:	f7ff fdfa 	bl	80137d4 <nk_panel_layout>
    if (fmt == NK_DYNAMIC) {
 8013be0:	7cfb      	ldrb	r3, [r7, #19]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d17b      	bne.n	8013cde <nk_layout_row+0x1ae>
        /* calculate width of undefined widget ratios */
        float r = 0;
 8013be6:	f04f 0300 	mov.w	r3, #0
 8013bea:	627b      	str	r3, [r7, #36]	; 0x24
        layout->row.ratio = ratio;
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	679a      	str	r2, [r3, #120]	; 0x78
        for (i = 0; i < cols; ++i) {
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013bf6:	e01d      	b.n	8013c34 <nk_layout_row+0x104>
            if (ratio[i] < 0.0f)
 8013bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bfa:	009b      	lsls	r3, r3, #2
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	4413      	add	r3, r2
 8013c00:	edd3 7a00 	vldr	s15, [r3]
 8013c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c0c:	d503      	bpl.n	8013c16 <nk_layout_row+0xe6>
                n_undef++;
 8013c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c10:	3301      	adds	r3, #1
 8013c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8013c14:	e00b      	b.n	8013c2e <nk_layout_row+0xfe>
            else r += ratio[i];
 8013c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c18:	009b      	lsls	r3, r3, #2
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	edd3 7a00 	vldr	s15, [r3]
 8013c22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for (i = 0; i < cols; ++i) {
 8013c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c30:	3301      	adds	r3, #1
 8013c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	dbdd      	blt.n	8013bf8 <nk_layout_row+0xc8>
        }
        r = NK_SATURATE(1.0f - r);
 8013c3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c54:	dc0a      	bgt.n	8013c6c <nk_layout_row+0x13c>
 8013c56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c6a:	dd16      	ble.n	8013c9a <nk_layout_row+0x16a>
 8013c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c84:	dd02      	ble.n	8013c8c <nk_layout_row+0x15c>
 8013c86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c8a:	e008      	b.n	8013c9e <nk_layout_row+0x16e>
 8013c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c98:	e001      	b.n	8013c9e <nk_layout_row+0x16e>
 8013c9a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8013d30 <nk_layout_row+0x200>
 8013c9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        layout->row.type = NK_LAYOUT_DYNAMIC;
 8013ca2:	69fb      	ldr	r3, [r7, #28]
 8013ca4:	2203      	movs	r2, #3
 8013ca6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 8013caa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013cae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb6:	dd0c      	ble.n	8013cd2 <nk_layout_row+0x1a2>
 8013cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	dd09      	ble.n	8013cd2 <nk_layout_row+0x1a2>
 8013cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc0:	ee07 3a90 	vmov	s15, r3
 8013cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013cc8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8013ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cd0:	e001      	b.n	8013cd6 <nk_layout_row+0x1a6>
 8013cd2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8013d30 <nk_layout_row+0x200>
 8013cd6:	69fb      	ldr	r3, [r7, #28]
 8013cd8:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8013cdc:	e00f      	b.n	8013cfe <nk_layout_row+0x1ce>
    } else {
        layout->row.ratio = ratio;
 8013cde:	69fb      	ldr	r3, [r7, #28]
 8013ce0:	687a      	ldr	r2, [r7, #4]
 8013ce2:	679a      	str	r2, [r3, #120]	; 0x78
        layout->row.type = NK_LAYOUT_STATIC;
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	2207      	movs	r2, #7
 8013ce8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = 0;
 8013cec:	69fb      	ldr	r3, [r7, #28]
 8013cee:	f04f 0200 	mov.w	r2, #0
 8013cf2:	67da      	str	r2, [r3, #124]	; 0x7c
        layout->row.item_offset = 0;
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	f04f 0200 	mov.w	r2, #0
 8013cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }
    layout->row.item_offset = 0;
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	f04f 0200 	mov.w	r2, #0
 8013d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    layout->row.filled = 0;
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	f04f 0200 	mov.w	r2, #0
 8013d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8013d12:	e000      	b.n	8013d16 <nk_layout_row+0x1e6>
        return;
 8013d14:	bf00      	nop
}
 8013d16:	3730      	adds	r7, #48	; 0x30
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}
 8013d1c:	08021e08 	.word	0x08021e08
 8013d20:	08023b4c 	.word	0x08023b4c
 8013d24:	08021e0c 	.word	0x08021e0c
 8013d28:	08021e28 	.word	0x08021e28
 8013d2c:	08021e38 	.word	0x08021e38
 8013d30:	00000000 	.word	0x00000000

08013d34 <nk_panel_alloc_row>:
    ret.y += -layout->at_y + (float)*layout->offset_y;
    return ret;
}
NK_LIB void
nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b086      	sub	sp, #24
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	6039      	str	r1, [r7, #0]
    struct nk_panel *layout = win->layout;
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d44:	617b      	str	r3, [r7, #20]
    struct nk_vec2 spacing = ctx->style.window.spacing;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d4c:	461a      	mov	r2, r3
 8013d4e:	f107 0308 	add.w	r3, r7, #8
 8013d52:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 8013d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d5a:	e883 0003 	stmia.w	r3, {r0, r1}
    const float row_height = layout->row.height - spacing.y;
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8013d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8013d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d6c:	edc7 7a04 	vstr	s15, [r7, #16]
    nk_panel_layout(ctx, win, row_height, layout->row.columns);
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d74:	461a      	mov	r2, r3
 8013d76:	ed97 0a04 	vldr	s0, [r7, #16]
 8013d7a:	6839      	ldr	r1, [r7, #0]
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f7ff fd29 	bl	80137d4 <nk_panel_layout>
}
 8013d82:	bf00      	nop
 8013d84:	3718      	adds	r7, #24
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
	...

08013d8c <nk_layout_widget_space>:
NK_LIB void
nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,
    struct nk_window *win, int modify)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b092      	sub	sp, #72	; 0x48
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	60b9      	str	r1, [r7, #8]
 8013d96:	607a      	str	r2, [r7, #4]
 8013d98:	603b      	str	r3, [r7, #0]
    struct nk_panel *layout;
    const struct nk_style *style;

    struct nk_vec2 spacing;

    float item_offset = 0;
 8013d9a:	f04f 0300 	mov.w	r3, #0
 8013d9e:	647b      	str	r3, [r7, #68]	; 0x44
    float item_width = 0;
 8013da0:	f04f 0300 	mov.w	r3, #0
 8013da4:	643b      	str	r3, [r7, #64]	; 0x40
    float item_spacing = 0;
 8013da6:	f04f 0300 	mov.w	r3, #0
 8013daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    float panel_space = 0;
 8013dac:	f04f 0300 	mov.w	r3, #0
 8013db0:	63bb      	str	r3, [r7, #56]	; 0x38

    NK_ASSERT(ctx);
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d106      	bne.n	8013dc6 <nk_layout_widget_space+0x3a>
 8013db8:	4bc4      	ldr	r3, [pc, #784]	; (80140cc <nk_layout_widget_space+0x340>)
 8013dba:	4ac5      	ldr	r2, [pc, #788]	; (80140d0 <nk_layout_widget_space+0x344>)
 8013dbc:	f240 214d 	movw	r1, #589	; 0x24d
 8013dc0:	48c4      	ldr	r0, [pc, #784]	; (80140d4 <nk_layout_widget_space+0x348>)
 8013dc2:	f00a f93f 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013dcc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d106      	bne.n	8013de2 <nk_layout_widget_space+0x56>
 8013dd4:	4bc0      	ldr	r3, [pc, #768]	; (80140d8 <nk_layout_widget_space+0x34c>)
 8013dd6:	4abe      	ldr	r2, [pc, #760]	; (80140d0 <nk_layout_widget_space+0x344>)
 8013dd8:	f240 214e 	movw	r1, #590	; 0x24e
 8013ddc:	48bd      	ldr	r0, [pc, #756]	; (80140d4 <nk_layout_widget_space+0x348>)
 8013dde:	f00a f931 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013de8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d106      	bne.n	8013e02 <nk_layout_widget_space+0x76>
 8013df4:	4bb9      	ldr	r3, [pc, #740]	; (80140dc <nk_layout_widget_space+0x350>)
 8013df6:	4ab6      	ldr	r2, [pc, #728]	; (80140d0 <nk_layout_widget_space+0x344>)
 8013df8:	f240 214f 	movw	r1, #591	; 0x24f
 8013dfc:	48b5      	ldr	r0, [pc, #724]	; (80140d4 <nk_layout_widget_space+0x348>)
 8013dfe:	f00a f921 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	f000 8340 	beq.w	801448a <nk_layout_widget_space+0x6fe>
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e10:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	f000 8338 	beq.w	801448a <nk_layout_widget_space+0x6fe>
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e20:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f000 832e 	beq.w	801448a <nk_layout_widget_space+0x6fe>
        return;

    win = ctx->current;
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e34:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013e38:	607b      	str	r3, [r7, #4]
    layout = win->layout;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e40:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8013e48:	633b      	str	r3, [r7, #48]	; 0x30
    NK_ASSERT(bounds);
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d106      	bne.n	8013e5e <nk_layout_widget_space+0xd2>
 8013e50:	4ba3      	ldr	r3, [pc, #652]	; (80140e0 <nk_layout_widget_space+0x354>)
 8013e52:	4a9f      	ldr	r2, [pc, #636]	; (80140d0 <nk_layout_widget_space+0x344>)
 8013e54:	f240 2156 	movw	r1, #598	; 0x256
 8013e58:	489e      	ldr	r0, [pc, #632]	; (80140d4 <nk_layout_widget_space+0x348>)
 8013e5a:	f00a f8f3 	bl	801e044 <__assert_func>

    spacing = style->window.spacing;
 8013e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e64:	461a      	mov	r2, r3
 8013e66:	f107 0314 	add.w	r3, r7, #20
 8013e6a:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8013e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e72:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8013e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e7e:	7819      	ldrb	r1, [r3, #0]
 8013e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e82:	edd3 7a04 	vldr	s15, [r3, #16]
 8013e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8013e90:	f7ff fc64 	bl	801375c <nk_layout_row_calculate_usable_space>
 8013e94:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
                                            layout->bounds.w, layout->row.columns);

    #define NK_FRAC(x) (x - (float)(int)x) /* will be used to remove fookin gaps */
    /* calculate the width of one item inside the current layout space */
    switch (layout->row.type) {
 8013e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8013e9e:	2b08      	cmp	r3, #8
 8013ea0:	f200 828b 	bhi.w	80143ba <nk_layout_widget_space+0x62e>
 8013ea4:	a201      	add	r2, pc, #4	; (adr r2, 8013eac <nk_layout_widget_space+0x120>)
 8013ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eaa:	bf00      	nop
 8013eac:	08013ed1 	.word	0x08013ed1
 8013eb0:	08013f53 	.word	0x08013f53
 8013eb4:	08013fd5 	.word	0x08013fd5
 8013eb8:	080140b7 	.word	0x080140b7
 8013ebc:	0801419b 	.word	0x0801419b
 8013ec0:	080141d3 	.word	0x080141d3
 8013ec4:	08014217 	.word	0x08014217
 8013ec8:	080142d1 	.word	0x080142d1
 8013ecc:	0801431d 	.word	0x0801431d
    case NK_LAYOUT_DYNAMIC_FIXED: {
        /* scaling fixed size widgets item width */
        float w = NK_MAX(1.0f,panel_space) / (float)layout->row.columns;
 8013ed0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee0:	dd02      	ble.n	8013ee8 <nk_layout_widget_space+0x15c>
 8013ee2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013ee6:	e001      	b.n	8013eec <nk_layout_widget_space+0x160>
 8013ee8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ef0:	ee07 3a10 	vmov	s14, r3
 8013ef4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8013ef8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013efc:	ed87 7a07 	vstr	s14, [r7, #28]
        item_offset = (float)layout->row.index * w;
 8013f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f04:	ee07 3a90 	vmov	s15, r3
 8013f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8013f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f14:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8013f18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f24:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8013f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f34:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 8013f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f3c:	ee07 3a90 	vmov	s15, r3
 8013f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013f44:	edd7 7a05 	vldr	s15, [r7, #20]
 8013f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f4c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 8013f50:	e243      	b.n	80143da <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_DYNAMIC_ROW: {
        /* scaling single ratio widget width */
        float w = layout->row.item_width * panel_space;
 8013f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f54:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8013f58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f60:	edc7 7a08 	vstr	s15, [r7, #32]
        item_offset = layout->row.item_offset;
 8013f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f6a:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8013f6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f78:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f80:	ed97 7a08 	vldr	s14, [r7, #32]
 8013f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f88:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = 0;
 8013f8c:	f04f 0300 	mov.w	r3, #0
 8013f90:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (modify) {
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f000 8217 	beq.w	80143c8 <nk_layout_widget_space+0x63c>
            layout->row.item_offset += w + spacing.x;
 8013f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f9c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8013fa0:	edd7 6a05 	vldr	s13, [r7, #20]
 8013fa4:	edd7 7a08 	vldr	s15, [r7, #32]
 8013fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fb2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += layout->row.item_width;
 8013fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fb8:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8013fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fbe:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8013fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fc8:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            layout->row.index = 0;
 8013fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fce:	2200      	movs	r2, #0
 8013fd0:	669a      	str	r2, [r3, #104]	; 0x68
        }
    } break;
 8013fd2:	e1f9      	b.n	80143c8 <nk_layout_widget_space+0x63c>
    case NK_LAYOUT_DYNAMIC_FREE: {
        /* panel width depended free widget placing */
        bounds->x = layout->at_x + (layout->bounds.w * layout->row.item.x);
 8013fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd6:	ed93 7a08 	vldr	s14, [r3, #32]
 8013fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fdc:	edd3 6a04 	vldr	s13, [r3, #16]
 8013fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fe2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8013fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	edc3 7a00 	vstr	s15, [r3]
        bounds->x -= (float)*layout->offset_x;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	ed93 7a00 	vldr	s14, [r3]
 8013ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ffc:	699b      	ldr	r3, [r3, #24]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	ee07 3a90 	vmov	s15, r3
 8014004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014008:	ee77 7a67 	vsub.f32	s15, s14, s15
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + (layout->row.height * layout->row.item.y);
 8014012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014014:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8014018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801401a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 801401e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014020:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8014024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014028:	ee77 7a27 	vadd.f32	s15, s14, s15
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	ed93 7a01 	vldr	s14, [r3, #4]
 8014038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801403a:	69db      	ldr	r3, [r3, #28]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	ee07 3a90 	vmov	s15, r3
 8014042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014046:	ee77 7a67 	vsub.f32	s15, s14, s15
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->w = layout->bounds.w  * layout->row.item.w + NK_FRAC(bounds->x);
 8014050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014052:	ed93 7a04 	vldr	s14, [r3, #16]
 8014056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014058:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 801405c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	edd3 6a00 	vldr	s13, [r3]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	edd3 7a00 	vldr	s15, [r3]
 801406c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014074:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014078:	ee77 7a27 	vadd.f32	s15, s14, s15
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	edc3 7a02 	vstr	s15, [r3, #8]
        bounds->h = layout->row.height * layout->row.item.h + NK_FRAC(bounds->y);
 8014082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014084:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8014088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801408a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 801408e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	edd3 6a01 	vldr	s13, [r3, #4]
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	edd3 7a01 	vldr	s15, [r3, #4]
 801409e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80140aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	edc3 7a03 	vstr	s15, [r3, #12]
        return;
 80140b4:	e1ea      	b.n	801448c <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_DYNAMIC: {
        /* scaling arrays of panel width ratios for every widget */
        float ratio, w;
        NK_ASSERT(layout->row.ratio);
 80140b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d114      	bne.n	80140e8 <nk_layout_widget_space+0x35c>
 80140be:	4b09      	ldr	r3, [pc, #36]	; (80140e4 <nk_layout_widget_space+0x358>)
 80140c0:	4a03      	ldr	r2, [pc, #12]	; (80140d0 <nk_layout_widget_space+0x344>)
 80140c2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80140c6:	4803      	ldr	r0, [pc, #12]	; (80140d4 <nk_layout_widget_space+0x348>)
 80140c8:	f009 ffbc 	bl	801e044 <__assert_func>
 80140cc:	08021e08 	.word	0x08021e08
 80140d0:	08023b5c 	.word	0x08023b5c
 80140d4:	08021e0c 	.word	0x08021e0c
 80140d8:	08021e28 	.word	0x08021e28
 80140dc:	08021e38 	.word	0x08021e38
 80140e0:	08021f68 	.word	0x08021f68
 80140e4:	08021f70 	.word	0x08021f70
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 80140e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ea:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80140ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	4413      	add	r3, r2
 80140f4:	edd3 7a00 	vldr	s15, [r3]
            layout->row.item_width : layout->row.ratio[layout->row.index];
 80140f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80140fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014100:	d502      	bpl.n	8014108 <nk_layout_widget_space+0x37c>
 8014102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014106:	e006      	b.n	8014116 <nk_layout_widget_space+0x38a>
 8014108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801410a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801410e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014110:	009b      	lsls	r3, r3, #2
 8014112:	4413      	add	r3, r2
 8014114:	681b      	ldr	r3, [r3, #0]
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 8014116:	62bb      	str	r3, [r7, #40]	; 0x28

        w = (ratio * panel_space);
 8014118:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801411c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014124:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        item_spacing = (float)layout->row.index * spacing.x;
 8014128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801412a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801412c:	ee07 3a90 	vmov	s15, r3
 8014130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014134:	edd7 7a05 	vldr	s15, [r7, #20]
 8014138:	ee67 7a27 	vmul.f32	s15, s14, s15
 801413c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_offset = layout->row.item_offset;
 8014140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014146:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8014148:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801414c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014154:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8014158:	ee77 7a67 	vsub.f32	s15, s14, s15
 801415c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014164:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

        if (modify) {
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	f000 812e 	beq.w	80143cc <nk_layout_widget_space+0x640>
            layout->row.item_offset += w;
 8014170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014172:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8014176:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801417a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801417e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014180:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += ratio;
 8014184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014186:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 801418a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801418e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014194:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
        }
    } break;
 8014198:	e118      	b.n	80143cc <nk_layout_widget_space+0x640>
    case NK_LAYOUT_STATIC_FIXED: {
        /* non-scaling fixed widgets item width */
        item_width = layout->row.item_width;
 801419a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801419c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801419e:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = (float)layout->row.index * item_width;
 80141a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141a4:	ee07 3a90 	vmov	s15, r3
 80141a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141ac:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80141b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 80141b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141bc:	ee07 3a90 	vmov	s15, r3
 80141c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80141c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80141c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 80141d0:	e103      	b.n	80143da <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_STATIC_ROW: {
        /* scaling single ratio widget width */
        item_width = layout->row.item_width;
 80141d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141d6:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 80141d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141de:	647b      	str	r3, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 80141e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141e4:	ee07 3a90 	vmov	s15, r3
 80141e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80141ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80141f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += item_width;
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	f000 80e8 	beq.w	80143d0 <nk_layout_widget_space+0x644>
 8014200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014202:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8014206:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801420a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801420e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014210:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 8014214:	e0dc      	b.n	80143d0 <nk_layout_widget_space+0x644>
    case NK_LAYOUT_STATIC_FREE: {
        /* free widget placing */
        bounds->x = layout->at_x + layout->row.item.x;
 8014216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014218:	ed93 7a08 	vldr	s14, [r3, #32]
 801421c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801421e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8014222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	edc3 7a00 	vstr	s15, [r3]
        bounds->w = layout->row.item.w;
 801422c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801422e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	609a      	str	r2, [r3, #8]
        if (((bounds->x + bounds->w) > layout->max_x) && modify)
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	ed93 7a00 	vldr	s14, [r3]
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	edd3 7a02 	vldr	s15, [r3, #8]
 8014242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014248:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801424c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014254:	dd0d      	ble.n	8014272 <nk_layout_widget_space+0x4e6>
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00a      	beq.n	8014272 <nk_layout_widget_space+0x4e6>
            layout->max_x = (bounds->x + bounds->w);
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	ed93 7a00 	vldr	s14, [r3]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	edd3 7a02 	vldr	s15, [r3, #8]
 8014268:	ee77 7a27 	vadd.f32	s15, s14, s15
 801426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801426e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        bounds->x -= (float)*layout->offset_x;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	ed93 7a00 	vldr	s14, [r3]
 8014278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801427a:	699b      	ldr	r3, [r3, #24]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	ee07 3a90 	vmov	s15, r3
 8014282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014286:	ee77 7a67 	vsub.f32	s15, s14, s15
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + layout->row.item.y;
 8014290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014292:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8014296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014298:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 801429c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80142ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ae:	69db      	ldr	r3, [r3, #28]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	ee07 3a90 	vmov	s15, r3
 80142b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->h = layout->row.item.h;
 80142c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	60da      	str	r2, [r3, #12]
        return;
 80142ce:	e0dd      	b.n	801448c <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_STATIC: {
        /* non-scaling array of panel pixel width for every widget */
        item_spacing = (float)layout->row.index * spacing.x;
 80142d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142d4:	ee07 3a90 	vmov	s15, r3
 80142d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80142dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80142e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142e4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_width = layout->row.ratio[layout->row.index];
 80142e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ea:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80142ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142f0:	009b      	lsls	r3, r3, #2
 80142f2:	4413      	add	r3, r2
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 80142f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80142fe:	647b      	str	r3, [r7, #68]	; 0x44
        if (modify) layout->row.item_offset += item_width;
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d066      	beq.n	80143d4 <nk_layout_widget_space+0x648>
 8014306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014308:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801430c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8014310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014316:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 801431a:	e05b      	b.n	80143d4 <nk_layout_widget_space+0x648>
    case NK_LAYOUT_TEMPLATE: {
        /* stretchy row layout with combined dynamic/static widget width*/
        float w;
        NK_ASSERT(layout->row.index < layout->row.columns);
 801431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801431e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014324:	429a      	cmp	r2, r3
 8014326:	db06      	blt.n	8014336 <nk_layout_widget_space+0x5aa>
 8014328:	4b5a      	ldr	r3, [pc, #360]	; (8014494 <nk_layout_widget_space+0x708>)
 801432a:	4a5b      	ldr	r2, [pc, #364]	; (8014498 <nk_layout_widget_space+0x70c>)
 801432c:	f240 21b1 	movw	r1, #689	; 0x2b1
 8014330:	485a      	ldr	r0, [pc, #360]	; (801449c <nk_layout_widget_space+0x710>)
 8014332:	f009 fe87 	bl	801e044 <__assert_func>
        NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);
 8014336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801433a:	2b0f      	cmp	r3, #15
 801433c:	dd06      	ble.n	801434c <nk_layout_widget_space+0x5c0>
 801433e:	4b58      	ldr	r3, [pc, #352]	; (80144a0 <nk_layout_widget_space+0x714>)
 8014340:	4a55      	ldr	r2, [pc, #340]	; (8014498 <nk_layout_widget_space+0x70c>)
 8014342:	f240 21b2 	movw	r1, #690	; 0x2b2
 8014346:	4855      	ldr	r0, [pc, #340]	; (801449c <nk_layout_widget_space+0x710>)
 8014348:	f009 fe7c 	bl	801e044 <__assert_func>
        w = layout->row.templates[layout->row.index];
 801434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801434e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014352:	3326      	adds	r3, #38	; 0x26
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	4413      	add	r3, r2
 8014358:	3308      	adds	r3, #8
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	62fb      	str	r3, [r7, #44]	; 0x2c
        item_offset = layout->row.item_offset;
 801435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014364:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8014366:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801436a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801436e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014372:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8014376:	ee77 7a67 	vsub.f32	s15, s14, s15
 801437a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801437e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014382:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 8014386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801438a:	ee07 3a90 	vmov	s15, r3
 801438e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014392:	edd7 7a05 	vldr	s15, [r7, #20]
 8014396:	ee67 7a27 	vmul.f32	s15, s14, s15
 801439a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += w;
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d019      	beq.n	80143d8 <nk_layout_widget_space+0x64c>
 80143a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143a6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80143aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80143ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143b4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 80143b8:	e00e      	b.n	80143d8 <nk_layout_widget_space+0x64c>
    #undef NK_FRAC
    default: NK_ASSERT(0); break;
 80143ba:	4b3a      	ldr	r3, [pc, #232]	; (80144a4 <nk_layout_widget_space+0x718>)
 80143bc:	4a36      	ldr	r2, [pc, #216]	; (8014498 <nk_layout_widget_space+0x70c>)
 80143be:	f240 21ba 	movw	r1, #698	; 0x2ba
 80143c2:	4836      	ldr	r0, [pc, #216]	; (801449c <nk_layout_widget_space+0x710>)
 80143c4:	f009 fe3e 	bl	801e044 <__assert_func>
    } break;
 80143c8:	bf00      	nop
 80143ca:	e006      	b.n	80143da <nk_layout_widget_space+0x64e>
    } break;
 80143cc:	bf00      	nop
 80143ce:	e004      	b.n	80143da <nk_layout_widget_space+0x64e>
    } break;
 80143d0:	bf00      	nop
 80143d2:	e002      	b.n	80143da <nk_layout_widget_space+0x64e>
    } break;
 80143d4:	bf00      	nop
 80143d6:	e000      	b.n	80143da <nk_layout_widget_space+0x64e>
    } break;
 80143d8:	bf00      	nop
    };

    /* set the bounds of the newly allocated widget */
    bounds->w = item_width;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80143de:	609a      	str	r2, [r3, #8]
    bounds->h = layout->row.height - spacing.y;
 80143e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143e2:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80143e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80143ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	edc3 7a03 	vstr	s15, [r3, #12]
    bounds->y = layout->at_y - (float)*layout->offset_y;
 80143f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80143fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143fc:	69db      	ldr	r3, [r3, #28]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	ee07 3a90 	vmov	s15, r3
 8014404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014408:	ee77 7a67 	vsub.f32	s15, s14, s15
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->x = layout->at_x + item_offset + item_spacing;
 8014412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014414:	ed93 7a08 	vldr	s14, [r3, #32]
 8014418:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801441c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014420:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	edc3 7a00 	vstr	s15, [r3]
    if (((bounds->x + bounds->w) > layout->max_x) && modify)
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	ed93 7a00 	vldr	s14, [r3]
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	edd3 7a02 	vldr	s15, [r3, #8]
 801443a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014440:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014444:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444c:	dd0d      	ble.n	801446a <nk_layout_widget_space+0x6de>
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d00a      	beq.n	801446a <nk_layout_widget_space+0x6de>
        layout->max_x = bounds->x + bounds->w;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	ed93 7a00 	vldr	s14, [r3]
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	edd3 7a02 	vldr	s15, [r3, #8]
 8014460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014466:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    bounds->x -= (float)*layout->offset_x;
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	ed93 7a00 	vldr	s14, [r3]
 8014470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014472:	699b      	ldr	r3, [r3, #24]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	ee07 3a90 	vmov	s15, r3
 801447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801447e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	edc3 7a00 	vstr	s15, [r3]
 8014488:	e000      	b.n	801448c <nk_layout_widget_space+0x700>
        return;
 801448a:	bf00      	nop
}
 801448c:	3748      	adds	r7, #72	; 0x48
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	08021f84 	.word	0x08021f84
 8014498:	08023b5c 	.word	0x08023b5c
 801449c:	08021e0c 	.word	0x08021e0c
 80144a0:	08021fac 	.word	0x08021fac
 80144a4:	08021fc4 	.word	0x08021fc4

080144a8 <nk_panel_alloc_space>:
NK_LIB void
nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	6039      	str	r1, [r7, #0]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d106      	bne.n	80144c6 <nk_panel_alloc_space+0x1e>
 80144b8:	4b2d      	ldr	r3, [pc, #180]	; (8014570 <nk_panel_alloc_space+0xc8>)
 80144ba:	4a2e      	ldr	r2, [pc, #184]	; (8014574 <nk_panel_alloc_space+0xcc>)
 80144bc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80144c0:	482d      	ldr	r0, [pc, #180]	; (8014578 <nk_panel_alloc_space+0xd0>)
 80144c2:	f009 fdbf 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80144cc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d106      	bne.n	80144e2 <nk_panel_alloc_space+0x3a>
 80144d4:	4b29      	ldr	r3, [pc, #164]	; (801457c <nk_panel_alloc_space+0xd4>)
 80144d6:	4a27      	ldr	r2, [pc, #156]	; (8014574 <nk_panel_alloc_space+0xcc>)
 80144d8:	f240 21cd 	movw	r1, #717	; 0x2cd
 80144dc:	4826      	ldr	r0, [pc, #152]	; (8014578 <nk_panel_alloc_space+0xd0>)
 80144de:	f009 fdb1 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80144e8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80144ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d106      	bne.n	8014502 <nk_panel_alloc_space+0x5a>
 80144f4:	4b22      	ldr	r3, [pc, #136]	; (8014580 <nk_panel_alloc_space+0xd8>)
 80144f6:	4a1f      	ldr	r2, [pc, #124]	; (8014574 <nk_panel_alloc_space+0xcc>)
 80144f8:	f240 21ce 	movw	r1, #718	; 0x2ce
 80144fc:	481e      	ldr	r0, [pc, #120]	; (8014578 <nk_panel_alloc_space+0xd0>)
 80144fe:	f009 fda1 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d02f      	beq.n	8014568 <nk_panel_alloc_space+0xc0>
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801450e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014512:	2b00      	cmp	r3, #0
 8014514:	d028      	beq.n	8014568 <nk_panel_alloc_space+0xc0>
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801451c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014524:	2b00      	cmp	r3, #0
 8014526:	d01f      	beq.n	8014568 <nk_panel_alloc_space+0xc0>
        return;

    /* check if the end of the row has been hit and begin new row if so */
    win = ctx->current;
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801452e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014532:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801453a:	60bb      	str	r3, [r7, #8]
    if (layout->row.index >= layout->row.columns)
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014544:	429a      	cmp	r2, r3
 8014546:	db03      	blt.n	8014550 <nk_panel_alloc_space+0xa8>
        nk_panel_alloc_row(ctx, win);
 8014548:	68f9      	ldr	r1, [r7, #12]
 801454a:	6838      	ldr	r0, [r7, #0]
 801454c:	f7ff fbf2 	bl	8013d34 <nk_panel_alloc_row>

    /* calculate widget position and size */
    nk_layout_widget_space(bounds, ctx, win, nk_true);
 8014550:	2301      	movs	r3, #1
 8014552:	68fa      	ldr	r2, [r7, #12]
 8014554:	6839      	ldr	r1, [r7, #0]
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f7ff fc18 	bl	8013d8c <nk_layout_widget_space>
    layout->row.index++;
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014560:	1c5a      	adds	r2, r3, #1
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	669a      	str	r2, [r3, #104]	; 0x68
 8014566:	e000      	b.n	801456a <nk_panel_alloc_space+0xc2>
        return;
 8014568:	bf00      	nop
}
 801456a:	3710      	adds	r7, #16
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}
 8014570:	08021e08 	.word	0x08021e08
 8014574:	08023b74 	.word	0x08023b74
 8014578:	08021e0c 	.word	0x08021e0c
 801457c:	08021e28 	.word	0x08021e28
 8014580:	08021e38 	.word	0x08021e38

08014584 <nk_round_up_pow2>:
    return a0 + x*(a1 + x*(a2 + x*(a3 + x*(a4 + x*(a5 + x*(a6 + x*(a7 + x*a8)))))));
}
#endif
NK_LIB nk_uint
nk_round_up_pow2(nk_uint v)
{
 8014584:	b480      	push	{r7}
 8014586:	b083      	sub	sp, #12
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
    v--;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	3b01      	subs	r3, #1
 8014590:	607b      	str	r3, [r7, #4]
    v |= v >> 1;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	085b      	lsrs	r3, r3, #1
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	4313      	orrs	r3, r2
 801459a:	607b      	str	r3, [r7, #4]
    v |= v >> 2;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	089b      	lsrs	r3, r3, #2
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	4313      	orrs	r3, r2
 80145a4:	607b      	str	r3, [r7, #4]
    v |= v >> 4;
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	091b      	lsrs	r3, r3, #4
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	4313      	orrs	r3, r2
 80145ae:	607b      	str	r3, [r7, #4]
    v |= v >> 8;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	0a1b      	lsrs	r3, r3, #8
 80145b4:	687a      	ldr	r2, [r7, #4]
 80145b6:	4313      	orrs	r3, r2
 80145b8:	607b      	str	r3, [r7, #4]
    v |= v >> 16;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	0c1b      	lsrs	r3, r3, #16
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	4313      	orrs	r3, r2
 80145c2:	607b      	str	r3, [r7, #4]
    v++;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	3301      	adds	r3, #1
 80145c8:	607b      	str	r3, [r7, #4]
    return v;
 80145ca:	687b      	ldr	r3, [r7, #4]
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	370c      	adds	r7, #12
 80145d0:	46bd      	mov	sp, r7
 80145d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d6:	4770      	bx	lr

080145d8 <nk_rect>:
{
    return nk_null_rect;
}
NK_API struct nk_rect
nk_rect(float x, float y, float w, float h)
{
 80145d8:	b490      	push	{r4, r7}
 80145da:	b090      	sub	sp, #64	; 0x40
 80145dc:	af00      	add	r7, sp, #0
 80145de:	ed87 0a07 	vstr	s0, [r7, #28]
 80145e2:	edc7 0a06 	vstr	s1, [r7, #24]
 80145e6:	ed87 1a05 	vstr	s2, [r7, #20]
 80145ea:	edc7 1a04 	vstr	s3, [r7, #16]
    struct nk_rect r;
    r.x = x; r.y = y;
 80145ee:	69fb      	ldr	r3, [r7, #28]
 80145f0:	623b      	str	r3, [r7, #32]
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	627b      	str	r3, [r7, #36]	; 0x24
    r.w = w; r.h = h;
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 80145fe:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8014602:	f107 0320 	add.w	r3, r7, #32
 8014606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801460c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801460e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014614:	ee06 0a10 	vmov	s12, r0
 8014618:	ee06 1a90 	vmov	s13, r1
 801461c:	ee07 2a10 	vmov	s14, r2
 8014620:	ee07 3a90 	vmov	s15, r3
}
 8014624:	eeb0 0a46 	vmov.f32	s0, s12
 8014628:	eef0 0a66 	vmov.f32	s1, s13
 801462c:	eeb0 1a47 	vmov.f32	s2, s14
 8014630:	eef0 1a67 	vmov.f32	s3, s15
 8014634:	3740      	adds	r7, #64	; 0x40
 8014636:	46bd      	mov	sp, r7
 8014638:	bc90      	pop	{r4, r7}
 801463a:	4770      	bx	lr

0801463c <nk_shrink_rect>:
    ret.x = r.w; ret.y = r.h;
    return ret;
}
NK_LIB struct nk_rect
nk_shrink_rect(struct nk_rect r, float amount)
{
 801463c:	b490      	push	{r4, r7}
 801463e:	b092      	sub	sp, #72	; 0x48
 8014640:	af00      	add	r7, sp, #0
 8014642:	eeb0 6a40 	vmov.f32	s12, s0
 8014646:	eef0 6a60 	vmov.f32	s13, s1
 801464a:	eeb0 7a41 	vmov.f32	s14, s2
 801464e:	eef0 7a61 	vmov.f32	s15, s3
 8014652:	ed87 2a05 	vstr	s4, [r7, #20]
 8014656:	ed87 6a06 	vstr	s12, [r7, #24]
 801465a:	edc7 6a07 	vstr	s13, [r7, #28]
 801465e:	ed87 7a08 	vstr	s14, [r7, #32]
 8014662:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    struct nk_rect res;
    r.w = NK_MAX(r.w, 2 * amount);
 8014666:	ed97 7a08 	vldr	s14, [r7, #32]
 801466a:	edd7 7a05 	vldr	s15, [r7, #20]
 801466e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801467a:	d504      	bpl.n	8014686 <nk_shrink_rect+0x4a>
 801467c:	edd7 7a05 	vldr	s15, [r7, #20]
 8014680:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014684:	e001      	b.n	801468a <nk_shrink_rect+0x4e>
 8014686:	edd7 7a08 	vldr	s15, [r7, #32]
 801468a:	edc7 7a08 	vstr	s15, [r7, #32]
    r.h = NK_MAX(r.h, 2 * amount);
 801468e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014692:	edd7 7a05 	vldr	s15, [r7, #20]
 8014696:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801469a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a2:	d504      	bpl.n	80146ae <nk_shrink_rect+0x72>
 80146a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80146a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80146ac:	e001      	b.n	80146b2 <nk_shrink_rect+0x76>
 80146ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80146b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    res.x = r.x + amount;
 80146b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80146ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80146be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    res.y = r.y + amount;
 80146c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80146ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80146ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    res.w = r.w - 2 * amount;
 80146d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80146da:	edd7 7a05 	vldr	s15, [r7, #20]
 80146de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80146e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    res.h = r.h - 2 * amount;
 80146ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80146ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80146f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80146f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146fa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    return res;
 80146fe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8014702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801470c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801470e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014714:	ee06 0a10 	vmov	s12, r0
 8014718:	ee06 1a90 	vmov	s13, r1
 801471c:	ee07 2a10 	vmov	s14, r2
 8014720:	ee07 3a90 	vmov	s15, r3
}
 8014724:	eeb0 0a46 	vmov.f32	s0, s12
 8014728:	eef0 0a66 	vmov.f32	s1, s13
 801472c:	eeb0 1a47 	vmov.f32	s2, s14
 8014730:	eef0 1a67 	vmov.f32	s3, s15
 8014734:	3748      	adds	r7, #72	; 0x48
 8014736:	46bd      	mov	sp, r7
 8014738:	bc90      	pop	{r4, r7}
 801473a:	4770      	bx	lr

0801473c <nk_vec2>:
    r.h -= 2 * pad.y;
    return r;
}
NK_API struct nk_vec2
nk_vec2(float x, float y)
{
 801473c:	b480      	push	{r7}
 801473e:	b089      	sub	sp, #36	; 0x24
 8014740:	af00      	add	r7, sp, #0
 8014742:	ed87 0a03 	vstr	s0, [r7, #12]
 8014746:	edc7 0a02 	vstr	s1, [r7, #8]
    struct nk_vec2 ret;
    ret.x = x; ret.y = y;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	613b      	str	r3, [r7, #16]
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	617b      	str	r3, [r7, #20]
    return ret;
 8014752:	f107 0318 	add.w	r3, r7, #24
 8014756:	f107 0210 	add.w	r2, r7, #16
 801475a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801475e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014762:	69ba      	ldr	r2, [r7, #24]
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	ee07 2a10 	vmov	s14, r2
 801476a:	ee07 3a90 	vmov	s15, r3
}
 801476e:	eeb0 0a47 	vmov.f32	s0, s14
 8014772:	eef0 0a67 	vmov.f32	s1, s15
 8014776:	3724      	adds	r7, #36	; 0x24
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <nk_unify>:
    return nk_vec2i(v[0], v[1]);
}
NK_LIB void
nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,
    float x1, float y1)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b086      	sub	sp, #24
 8014784:	af00      	add	r7, sp, #0
 8014786:	6178      	str	r0, [r7, #20]
 8014788:	6139      	str	r1, [r7, #16]
 801478a:	ed87 0a03 	vstr	s0, [r7, #12]
 801478e:	edc7 0a02 	vstr	s1, [r7, #8]
 8014792:	ed87 1a01 	vstr	s2, [r7, #4]
 8014796:	edc7 1a00 	vstr	s3, [r7]
    NK_ASSERT(a);
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d106      	bne.n	80147ae <nk_unify+0x2e>
 80147a0:	4b4b      	ldr	r3, [pc, #300]	; (80148d0 <nk_unify+0x150>)
 80147a2:	4a4c      	ldr	r2, [pc, #304]	; (80148d4 <nk_unify+0x154>)
 80147a4:	f240 1101 	movw	r1, #257	; 0x101
 80147a8:	484b      	ldr	r0, [pc, #300]	; (80148d8 <nk_unify+0x158>)
 80147aa:	f009 fc4b 	bl	801e044 <__assert_func>
    NK_ASSERT(clip);
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d106      	bne.n	80147c2 <nk_unify+0x42>
 80147b4:	4b49      	ldr	r3, [pc, #292]	; (80148dc <nk_unify+0x15c>)
 80147b6:	4a47      	ldr	r2, [pc, #284]	; (80148d4 <nk_unify+0x154>)
 80147b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80147bc:	4846      	ldr	r0, [pc, #280]	; (80148d8 <nk_unify+0x158>)
 80147be:	f009 fc41 	bl	801e044 <__assert_func>
    clip->x = NK_MAX(a->x, x0);
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	edd3 7a00 	vldr	s15, [r3]
 80147c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80147cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d4:	dd01      	ble.n	80147da <nk_unify+0x5a>
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	e001      	b.n	80147de <nk_unify+0x5e>
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	697a      	ldr	r2, [r7, #20]
 80147e0:	6013      	str	r3, [r2, #0]
    clip->y = NK_MAX(a->y, y0);
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80147e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80147ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f4:	dd01      	ble.n	80147fa <nk_unify+0x7a>
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	e001      	b.n	80147fe <nk_unify+0x7e>
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	685b      	ldr	r3, [r3, #4]
 80147fe:	697a      	ldr	r2, [r7, #20]
 8014800:	6053      	str	r3, [r2, #4]
    clip->w = NK_MIN(a->x + a->w, x1) - clip->x;
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	ed93 7a00 	vldr	s14, [r3]
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	edd3 7a02 	vldr	s15, [r3, #8]
 801480e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014812:	ed97 7a01 	vldr	s14, [r7, #4]
 8014816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481e:	dd08      	ble.n	8014832 <nk_unify+0xb2>
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	ed93 7a00 	vldr	s14, [r3]
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	edd3 7a02 	vldr	s15, [r3, #8]
 801482c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014830:	e001      	b.n	8014836 <nk_unify+0xb6>
 8014832:	edd7 7a01 	vldr	s15, [r7, #4]
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	ed93 7a00 	vldr	s14, [r3]
 801483c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	edc3 7a02 	vstr	s15, [r3, #8]
    clip->h = NK_MIN(a->y + a->h, y1) - clip->y;
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	ed93 7a01 	vldr	s14, [r3, #4]
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	edd3 7a03 	vldr	s15, [r3, #12]
 8014852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014856:	ed97 7a00 	vldr	s14, [r7]
 801485a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801485e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014862:	dd08      	ble.n	8014876 <nk_unify+0xf6>
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	ed93 7a01 	vldr	s14, [r3, #4]
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	edd3 7a03 	vldr	s15, [r3, #12]
 8014870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014874:	e001      	b.n	801487a <nk_unify+0xfa>
 8014876:	edd7 7a00 	vldr	s15, [r7]
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	ed93 7a01 	vldr	s14, [r3, #4]
 8014880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	edc3 7a03 	vstr	s15, [r3, #12]
    clip->w = NK_MAX(0, clip->w);
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	edd3 7a02 	vldr	s15, [r3, #8]
 8014890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014898:	dd02      	ble.n	80148a0 <nk_unify+0x120>
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	689b      	ldr	r3, [r3, #8]
 801489e:	e001      	b.n	80148a4 <nk_unify+0x124>
 80148a0:	f04f 0300 	mov.w	r3, #0
 80148a4:	697a      	ldr	r2, [r7, #20]
 80148a6:	6093      	str	r3, [r2, #8]
    clip->h = NK_MAX(0, clip->h);
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80148ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80148b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b6:	dd02      	ble.n	80148be <nk_unify+0x13e>
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	68db      	ldr	r3, [r3, #12]
 80148bc:	e001      	b.n	80148c2 <nk_unify+0x142>
 80148be:	f04f 0300 	mov.w	r3, #0
 80148c2:	697a      	ldr	r2, [r7, #20]
 80148c4:	60d3      	str	r3, [r2, #12]
}
 80148c6:	bf00      	nop
 80148c8:	3718      	adds	r7, #24
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	08021fc8 	.word	0x08021fc8
 80148d4:	08023b8c 	.word	0x08023b8c
 80148d8:	08021fcc 	.word	0x08021fcc
 80148dc:	08021fe8 	.word	0x08021fe8

080148e0 <nk_triangle_from_direction>:

NK_API void
nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,
    float pad_x, float pad_y, enum nk_heading direction)
{
 80148e0:	b590      	push	{r4, r7, lr}
 80148e2:	b08b      	sub	sp, #44	; 0x2c
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	61f8      	str	r0, [r7, #28]
 80148e8:	eeb0 6a40 	vmov.f32	s12, s0
 80148ec:	eef0 6a60 	vmov.f32	s13, s1
 80148f0:	eeb0 7a41 	vmov.f32	s14, s2
 80148f4:	eef0 7a61 	vmov.f32	s15, s3
 80148f8:	ed87 2a02 	vstr	s4, [r7, #8]
 80148fc:	edc7 2a01 	vstr	s5, [r7, #4]
 8014900:	460b      	mov	r3, r1
 8014902:	ed87 6a03 	vstr	s12, [r7, #12]
 8014906:	edc7 6a04 	vstr	s13, [r7, #16]
 801490a:	ed87 7a05 	vstr	s14, [r7, #20]
 801490e:	edc7 7a06 	vstr	s15, [r7, #24]
 8014912:	70fb      	strb	r3, [r7, #3]
    float w_half, h_half;
    NK_ASSERT(result);
 8014914:	69fb      	ldr	r3, [r7, #28]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d106      	bne.n	8014928 <nk_triangle_from_direction+0x48>
 801491a:	4bcf      	ldr	r3, [pc, #828]	; (8014c58 <nk_triangle_from_direction+0x378>)
 801491c:	4acf      	ldr	r2, [pc, #828]	; (8014c5c <nk_triangle_from_direction+0x37c>)
 801491e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8014922:	48cf      	ldr	r0, [pc, #828]	; (8014c60 <nk_triangle_from_direction+0x380>)
 8014924:	f009 fb8e 	bl	801e044 <__assert_func>

    r.w = NK_MAX(2 * pad_x, r.w);
 8014928:	edd7 7a02 	vldr	s15, [r7, #8]
 801492c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8014930:	edd7 7a05 	vldr	s15, [r7, #20]
 8014934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801493c:	d502      	bpl.n	8014944 <nk_triangle_from_direction+0x64>
 801493e:	edd7 7a05 	vldr	s15, [r7, #20]
 8014942:	e003      	b.n	801494c <nk_triangle_from_direction+0x6c>
 8014944:	edd7 7a02 	vldr	s15, [r7, #8]
 8014948:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801494c:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = NK_MAX(2 * pad_y, r.h);
 8014950:	edd7 7a01 	vldr	s15, [r7, #4]
 8014954:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8014958:	edd7 7a06 	vldr	s15, [r7, #24]
 801495c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014964:	d502      	bpl.n	801496c <nk_triangle_from_direction+0x8c>
 8014966:	edd7 7a06 	vldr	s15, [r7, #24]
 801496a:	e003      	b.n	8014974 <nk_triangle_from_direction+0x94>
 801496c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014974:	edc7 7a06 	vstr	s15, [r7, #24]
    r.w = r.w - 2 * pad_x;
 8014978:	ed97 7a05 	vldr	s14, [r7, #20]
 801497c:	edd7 7a02 	vldr	s15, [r7, #8]
 8014980:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014988:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = r.h - 2 * pad_y;
 801498c:	ed97 7a06 	vldr	s14, [r7, #24]
 8014990:	edd7 7a01 	vldr	s15, [r7, #4]
 8014994:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014998:	ee77 7a67 	vsub.f32	s15, s14, s15
 801499c:	edc7 7a06 	vstr	s15, [r7, #24]

    r.x = r.x + pad_x;
 80149a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80149a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80149a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149ac:	edc7 7a03 	vstr	s15, [r7, #12]
    r.y = r.y + pad_y;
 80149b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80149b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80149b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149bc:	edc7 7a04 	vstr	s15, [r7, #16]

    w_half = r.w / 2.0f;
 80149c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80149c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80149c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80149cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    h_half = r.h / 2.0f;
 80149d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80149d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80149d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80149dc:	edc7 7a08 	vstr	s15, [r7, #32]

    if (direction == NK_UP) {
 80149e0:	78fb      	ldrb	r3, [r7, #3]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d14d      	bne.n	8014a82 <nk_triangle_from_direction+0x1a2>
        result[0] = nk_vec2(r.x + w_half, r.y);
 80149e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80149ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80149ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80149f6:	eef0 0a47 	vmov.f32	s1, s14
 80149fa:	eeb0 0a67 	vmov.f32	s0, s15
 80149fe:	f7ff fe9d 	bl	801473c <nk_vec2>
 8014a02:	eeb0 7a40 	vmov.f32	s14, s0
 8014a06:	eef0 7a60 	vmov.f32	s15, s1
 8014a0a:	69fb      	ldr	r3, [r7, #28]
 8014a0c:	ed83 7a00 	vstr	s14, [r3]
 8014a10:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + r.h);
 8014a14:	ed97 7a03 	vldr	s14, [r7, #12]
 8014a18:	edd7 7a05 	vldr	s15, [r7, #20]
 8014a1c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8014a20:	ed97 7a04 	vldr	s14, [r7, #16]
 8014a24:	edd7 7a06 	vldr	s15, [r7, #24]
 8014a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	f103 0408 	add.w	r4, r3, #8
 8014a32:	eef0 0a67 	vmov.f32	s1, s15
 8014a36:	eeb0 0a66 	vmov.f32	s0, s13
 8014a3a:	f7ff fe7f 	bl	801473c <nk_vec2>
 8014a3e:	eeb0 7a40 	vmov.f32	s14, s0
 8014a42:	eef0 7a60 	vmov.f32	s15, s1
 8014a46:	ed84 7a00 	vstr	s14, [r4]
 8014a4a:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8014a4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8014a52:	ed97 7a04 	vldr	s14, [r7, #16]
 8014a56:	edd7 7a06 	vldr	s15, [r7, #24]
 8014a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a5e:	69fb      	ldr	r3, [r7, #28]
 8014a60:	f103 0410 	add.w	r4, r3, #16
 8014a64:	eef0 0a67 	vmov.f32	s1, s15
 8014a68:	eeb0 0a66 	vmov.f32	s0, s13
 8014a6c:	f7ff fe66 	bl	801473c <nk_vec2>
 8014a70:	eeb0 7a40 	vmov.f32	s14, s0
 8014a74:	eef0 7a60 	vmov.f32	s15, s1
 8014a78:	ed84 7a00 	vstr	s14, [r4]
 8014a7c:	edc4 7a01 	vstr	s15, [r4, #4]
    } else {
        result[0] = nk_vec2(r.x, r.y + h_half);
        result[1] = nk_vec2(r.x + r.w, r.y);
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
    }
}
 8014a80:	e0e6      	b.n	8014c50 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_RIGHT) {
 8014a82:	78fb      	ldrb	r3, [r7, #3]
 8014a84:	2b01      	cmp	r3, #1
 8014a86:	d149      	bne.n	8014b1c <nk_triangle_from_direction+0x23c>
        result[0] = nk_vec2(r.x, r.y);
 8014a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8014a8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8014a90:	eef0 0a47 	vmov.f32	s1, s14
 8014a94:	eeb0 0a67 	vmov.f32	s0, s15
 8014a98:	f7ff fe50 	bl	801473c <nk_vec2>
 8014a9c:	eeb0 7a40 	vmov.f32	s14, s0
 8014aa0:	eef0 7a60 	vmov.f32	s15, s1
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	ed83 7a00 	vstr	s14, [r3]
 8014aaa:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + h_half);
 8014aae:	ed97 7a03 	vldr	s14, [r7, #12]
 8014ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8014ab6:	ee77 6a27 	vadd.f32	s13, s14, s15
 8014aba:	ed97 7a04 	vldr	s14, [r7, #16]
 8014abe:	edd7 7a08 	vldr	s15, [r7, #32]
 8014ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	f103 0408 	add.w	r4, r3, #8
 8014acc:	eef0 0a67 	vmov.f32	s1, s15
 8014ad0:	eeb0 0a66 	vmov.f32	s0, s13
 8014ad4:	f7ff fe32 	bl	801473c <nk_vec2>
 8014ad8:	eeb0 7a40 	vmov.f32	s14, s0
 8014adc:	eef0 7a60 	vmov.f32	s15, s1
 8014ae0:	ed84 7a00 	vstr	s14, [r4]
 8014ae4:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8014ae8:	edd7 6a03 	vldr	s13, [r7, #12]
 8014aec:	ed97 7a04 	vldr	s14, [r7, #16]
 8014af0:	edd7 7a06 	vldr	s15, [r7, #24]
 8014af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	f103 0410 	add.w	r4, r3, #16
 8014afe:	eef0 0a67 	vmov.f32	s1, s15
 8014b02:	eeb0 0a66 	vmov.f32	s0, s13
 8014b06:	f7ff fe19 	bl	801473c <nk_vec2>
 8014b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8014b0e:	eef0 7a60 	vmov.f32	s15, s1
 8014b12:	ed84 7a00 	vstr	s14, [r4]
 8014b16:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8014b1a:	e099      	b.n	8014c50 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_DOWN) {
 8014b1c:	78fb      	ldrb	r3, [r7, #3]
 8014b1e:	2b02      	cmp	r3, #2
 8014b20:	d149      	bne.n	8014bb6 <nk_triangle_from_direction+0x2d6>
        result[0] = nk_vec2(r.x, r.y);
 8014b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8014b26:	ed97 7a04 	vldr	s14, [r7, #16]
 8014b2a:	eef0 0a47 	vmov.f32	s1, s14
 8014b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8014b32:	f7ff fe03 	bl	801473c <nk_vec2>
 8014b36:	eeb0 7a40 	vmov.f32	s14, s0
 8014b3a:	eef0 7a60 	vmov.f32	s15, s1
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	ed83 7a00 	vstr	s14, [r3]
 8014b44:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8014b48:	ed97 7a03 	vldr	s14, [r7, #12]
 8014b4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8014b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b54:	ed97 7a04 	vldr	s14, [r7, #16]
 8014b58:	69fb      	ldr	r3, [r7, #28]
 8014b5a:	f103 0408 	add.w	r4, r3, #8
 8014b5e:	eef0 0a47 	vmov.f32	s1, s14
 8014b62:	eeb0 0a67 	vmov.f32	s0, s15
 8014b66:	f7ff fde9 	bl	801473c <nk_vec2>
 8014b6a:	eeb0 7a40 	vmov.f32	s14, s0
 8014b6e:	eef0 7a60 	vmov.f32	s15, s1
 8014b72:	ed84 7a00 	vstr	s14, [r4]
 8014b76:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + w_half, r.y + r.h);
 8014b7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8014b7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014b82:	ee77 6a27 	vadd.f32	s13, s14, s15
 8014b86:	ed97 7a04 	vldr	s14, [r7, #16]
 8014b8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8014b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b92:	69fb      	ldr	r3, [r7, #28]
 8014b94:	f103 0410 	add.w	r4, r3, #16
 8014b98:	eef0 0a67 	vmov.f32	s1, s15
 8014b9c:	eeb0 0a66 	vmov.f32	s0, s13
 8014ba0:	f7ff fdcc 	bl	801473c <nk_vec2>
 8014ba4:	eeb0 7a40 	vmov.f32	s14, s0
 8014ba8:	eef0 7a60 	vmov.f32	s15, s1
 8014bac:	ed84 7a00 	vstr	s14, [r4]
 8014bb0:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8014bb4:	e04c      	b.n	8014c50 <nk_triangle_from_direction+0x370>
        result[0] = nk_vec2(r.x, r.y + h_half);
 8014bb6:	edd7 6a03 	vldr	s13, [r7, #12]
 8014bba:	ed97 7a04 	vldr	s14, [r7, #16]
 8014bbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8014bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bc6:	eef0 0a67 	vmov.f32	s1, s15
 8014bca:	eeb0 0a66 	vmov.f32	s0, s13
 8014bce:	f7ff fdb5 	bl	801473c <nk_vec2>
 8014bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8014bd6:	eef0 7a60 	vmov.f32	s15, s1
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	ed83 7a00 	vstr	s14, [r3]
 8014be0:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8014be4:	ed97 7a03 	vldr	s14, [r7, #12]
 8014be8:	edd7 7a05 	vldr	s15, [r7, #20]
 8014bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bf0:	ed97 7a04 	vldr	s14, [r7, #16]
 8014bf4:	69fb      	ldr	r3, [r7, #28]
 8014bf6:	f103 0408 	add.w	r4, r3, #8
 8014bfa:	eef0 0a47 	vmov.f32	s1, s14
 8014bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8014c02:	f7ff fd9b 	bl	801473c <nk_vec2>
 8014c06:	eeb0 7a40 	vmov.f32	s14, s0
 8014c0a:	eef0 7a60 	vmov.f32	s15, s1
 8014c0e:	ed84 7a00 	vstr	s14, [r4]
 8014c12:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
 8014c16:	ed97 7a03 	vldr	s14, [r7, #12]
 8014c1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8014c1e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8014c22:	ed97 7a04 	vldr	s14, [r7, #16]
 8014c26:	edd7 7a06 	vldr	s15, [r7, #24]
 8014c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c2e:	69fb      	ldr	r3, [r7, #28]
 8014c30:	f103 0410 	add.w	r4, r3, #16
 8014c34:	eef0 0a67 	vmov.f32	s1, s15
 8014c38:	eeb0 0a66 	vmov.f32	s0, s13
 8014c3c:	f7ff fd7e 	bl	801473c <nk_vec2>
 8014c40:	eeb0 7a40 	vmov.f32	s14, s0
 8014c44:	eef0 7a60 	vmov.f32	s15, s1
 8014c48:	ed84 7a00 	vstr	s14, [r4]
 8014c4c:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8014c50:	bf00      	nop
 8014c52:	372c      	adds	r7, #44	; 0x2c
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd90      	pop	{r4, r7, pc}
 8014c58:	08021ff0 	.word	0x08021ff0
 8014c5c:	08023b98 	.word	0x08023b98
 8014c60:	08021fcc 	.word	0x08021fcc

08014c64 <nk_create_page_element>:
 *                          PAGE ELEMENT
 *
 * ===============================================================*/
NK_LIB struct nk_page_element*
nk_create_page_element(struct nk_context *ctx)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    if (ctx->freelist) {
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c72:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d00e      	beq.n	8014c98 <nk_create_page_element+0x34>
        /* unlink page element from free list */
        elem = ctx->freelist;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c80:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8014c84:	60fb      	str	r3, [r7, #12]
        ctx->freelist = elem->next;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8014c8c:	687a      	ldr	r2, [r7, #4]
 8014c8e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8014c92:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
 8014c96:	e036      	b.n	8014d06 <nk_create_page_element+0xa2>
    } else if (ctx->use_pool) {
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c9e:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d015      	beq.n	8014cd2 <nk_create_page_element+0x6e>
        /* allocate page element from memory pool */
        elem = nk_pool_alloc(&ctx->pool);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8014cac:	3324      	adds	r3, #36	; 0x24
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f002 fa88 	bl	80171c4 <nk_pool_alloc>
 8014cb4:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d105      	bne.n	8014cc8 <nk_create_page_element+0x64>
 8014cbc:	4b1b      	ldr	r3, [pc, #108]	; (8014d2c <nk_create_page_element+0xc8>)
 8014cbe:	4a1c      	ldr	r2, [pc, #112]	; (8014d30 <nk_create_page_element+0xcc>)
 8014cc0:	2114      	movs	r1, #20
 8014cc2:	481c      	ldr	r0, [pc, #112]	; (8014d34 <nk_create_page_element+0xd0>)
 8014cc4:	f009 f9be 	bl	801e044 <__assert_func>
        if (!elem) return 0;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d11b      	bne.n	8014d06 <nk_create_page_element+0xa2>
 8014cce:	2300      	movs	r3, #0
 8014cd0:	e027      	b.n	8014d22 <nk_create_page_element+0xbe>
    } else {
        /* allocate new page element from back of fixed size memory buffer */
        NK_STORAGE const nk_size size = sizeof(struct nk_page_element);
        NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_page_element);
        elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f503 50d4 	add.w	r0, r3, #6784	; 0x1a80
 8014cd8:	300c      	adds	r0, #12
 8014cda:	4b17      	ldr	r3, [pc, #92]	; (8014d38 <nk_create_page_element+0xd4>)
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	4b17      	ldr	r3, [pc, #92]	; (8014d3c <nk_create_page_element+0xd8>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2101      	movs	r1, #1
 8014ce4:	f7f9 fecc 	bl	800ea80 <nk_buffer_alloc>
 8014ce8:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d105      	bne.n	8014cfc <nk_create_page_element+0x98>
 8014cf0:	4b0e      	ldr	r3, [pc, #56]	; (8014d2c <nk_create_page_element+0xc8>)
 8014cf2:	4a0f      	ldr	r2, [pc, #60]	; (8014d30 <nk_create_page_element+0xcc>)
 8014cf4:	211b      	movs	r1, #27
 8014cf6:	480f      	ldr	r0, [pc, #60]	; (8014d34 <nk_create_page_element+0xd0>)
 8014cf8:	f009 f9a4 	bl	801e044 <__assert_func>
        if (!elem) return 0;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d101      	bne.n	8014d06 <nk_create_page_element+0xa2>
 8014d02:	2300      	movs	r3, #0
 8014d04:	e00d      	b.n	8014d22 <nk_create_page_element+0xbe>
    }
    nk_zero_struct(*elem);
 8014d06:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8014d0a:	68f8      	ldr	r0, [r7, #12]
 8014d0c:	f007 fca2 	bl	801c654 <nk_zero>
    elem->next = 0;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2200      	movs	r2, #0
 8014d14:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    elem->prev = 0;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    return elem;
 8014d20:	68fb      	ldr	r3, [r7, #12]
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	08021ff8 	.word	0x08021ff8
 8014d30:	08023bb4 	.word	0x08023bb4
 8014d34:	08022000 	.word	0x08022000
 8014d38:	08023bcc 	.word	0x08023bcc
 8014d3c:	08023bd0 	.word	0x08023bd0

08014d40 <nk_link_page_element_into_freelist>:
NK_LIB void
nk_link_page_element_into_freelist(struct nk_context *ctx,
    struct nk_page_element *elem)
{
 8014d40:	b480      	push	{r7}
 8014d42:	b083      	sub	sp, #12
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
 8014d48:	6039      	str	r1, [r7, #0]
    /* link table into freelist */
    if (!ctx->freelist) {
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014d50:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d107      	bne.n	8014d68 <nk_link_page_element_into_freelist+0x28>
        ctx->freelist = elem;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014d5e:	461a      	mov	r2, r3
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
    } else {
        elem->next = ctx->freelist;
        ctx->freelist = elem;
    }
}
 8014d66:	e00e      	b.n	8014d86 <nk_link_page_element_into_freelist+0x46>
        elem->next = ctx->freelist;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014d6e:	f8d3 265c 	ldr.w	r2, [r3, #1628]	; 0x65c
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        ctx->freelist = elem;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014d7e:	461a      	mov	r2, r3
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
}
 8014d86:	bf00      	nop
 8014d88:	370c      	adds	r7, #12
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr

08014d92 <nk_free_page_element>:
NK_LIB void
nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b084      	sub	sp, #16
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
 8014d9a:	6039      	str	r1, [r7, #0]
    /* we have a pool so just add to free list */
    if (ctx->use_pool) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014da2:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d004      	beq.n	8014db4 <nk_free_page_element+0x22>
        nk_link_page_element_into_freelist(ctx, elem);
 8014daa:	6839      	ldr	r1, [r7, #0]
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f7ff ffc7 	bl	8014d40 <nk_link_page_element_into_freelist>
        return;
 8014db2:	e024      	b.n	8014dfe <nk_free_page_element+0x6c>
    }
    /* if possible remove last element from back of fixed memory buffer */
    {void *elem_end = (void*)(elem + 1);
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8014dba:	60fb      	str	r3, [r7, #12]
    void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014dc2:	f8d3 2aac 	ldr.w	r2, [r3, #2732]	; 0xaac
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014dcc:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8014dd0:	4413      	add	r3, r2
 8014dd2:	60bb      	str	r3, [r7, #8]
    if (elem_end == buffer_end)
 8014dd4:	68fa      	ldr	r2, [r7, #12]
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d10c      	bne.n	8014df6 <nk_free_page_element+0x64>
        ctx->memory.size -= sizeof(struct nk_page_element);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014de2:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8014de6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014dea:	687a      	ldr	r2, [r7, #4]
 8014dec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014df0:	f8c2 3ac4 	str.w	r3, [r2, #2756]	; 0xac4
 8014df4:	e003      	b.n	8014dfe <nk_free_page_element+0x6c>
    else nk_link_page_element_into_freelist(ctx, elem);}
 8014df6:	6839      	ldr	r1, [r7, #0]
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f7ff ffa1 	bl	8014d40 <nk_link_page_element_into_freelist>
}
 8014dfe:	3710      	adds	r7, #16
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}

08014e04 <nk_create_panel>:
 *                              PANEL
 *
 * ===============================================================*/
NK_LIB void*
nk_create_panel(struct nk_context *ctx)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b084      	sub	sp, #16
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f7ff ff29 	bl	8014c64 <nk_create_page_element>
 8014e12:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d101      	bne.n	8014e1e <nk_create_panel+0x1a>
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	e005      	b.n	8014e2a <nk_create_panel+0x26>
    nk_zero_struct(*elem);
 8014e1e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8014e22:	68f8      	ldr	r0, [r7, #12]
 8014e24:	f007 fc16 	bl	801c654 <nk_zero>
    return &elem->data.pan;
 8014e28:	68fb      	ldr	r3, [r7, #12]
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3710      	adds	r7, #16
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}

08014e32 <nk_free_panel>:
NK_LIB void
nk_free_panel(struct nk_context *ctx, struct nk_panel *pan)
{
 8014e32:	b580      	push	{r7, lr}
 8014e34:	b084      	sub	sp, #16
 8014e36:	af00      	add	r7, sp, #0
 8014e38:	6078      	str	r0, [r7, #4]
 8014e3a:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(pan, union nk_page_data, pan);
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 8014e44:	68b9      	ldr	r1, [r7, #8]
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f7ff ffa3 	bl	8014d92 <nk_free_page_element>
}
 8014e4c:	bf00      	nop
 8014e4e:	3710      	adds	r7, #16
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <nk_panel_has_header>:
NK_LIB nk_bool
nk_panel_has_header(nk_flags flags, const char *title)
{
 8014e54:	b480      	push	{r7}
 8014e56:	b085      	sub	sp, #20
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]
    nk_bool active = 0;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	60fb      	str	r3, [r7, #12]
    active = (flags & (NK_WINDOW_CLOSABLE|NK_WINDOW_MINIMIZABLE));
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f003 0318 	and.w	r3, r3, #24
 8014e68:	60fb      	str	r3, [r7, #12]
    active = active || (flags & NK_WINDOW_TITLE);
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d104      	bne.n	8014e7a <nk_panel_has_header+0x26>
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d001      	beq.n	8014e7e <nk_panel_has_header+0x2a>
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	e000      	b.n	8014e80 <nk_panel_has_header+0x2c>
 8014e7e:	2300      	movs	r3, #0
 8014e80:	60fb      	str	r3, [r7, #12]
    active = active && !(flags & NK_WINDOW_HIDDEN) && title;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d009      	beq.n	8014e9c <nk_panel_has_header+0x48>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d104      	bne.n	8014e9c <nk_panel_has_header+0x48>
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d001      	beq.n	8014e9c <nk_panel_has_header+0x48>
 8014e98:	2301      	movs	r3, #1
 8014e9a:	e000      	b.n	8014e9e <nk_panel_has_header+0x4a>
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	60fb      	str	r3, [r7, #12]
    return active;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3714      	adds	r7, #20
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr
	...

08014eb0 <nk_panel_get_padding>:
NK_LIB struct nk_vec2
nk_panel_get_padding(const struct nk_style *style, enum nk_panel_type type)
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b087      	sub	sp, #28
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	460b      	mov	r3, r1
 8014eba:	72fb      	strb	r3, [r7, #11]
    switch (type) {
 8014ebc:	7afb      	ldrb	r3, [r7, #11]
 8014ebe:	2b80      	cmp	r3, #128	; 0x80
 8014ec0:	f000 809a 	beq.w	8014ff8 <nk_panel_get_padding+0x148>
 8014ec4:	2b80      	cmp	r3, #128	; 0x80
 8014ec6:	dc49      	bgt.n	8014f5c <nk_panel_get_padding+0xac>
 8014ec8:	2b20      	cmp	r3, #32
 8014eca:	dc45      	bgt.n	8014f58 <nk_panel_get_padding+0xa8>
 8014ecc:	2b02      	cmp	r3, #2
 8014ece:	db45      	blt.n	8014f5c <nk_panel_get_padding+0xac>
 8014ed0:	3b02      	subs	r3, #2
 8014ed2:	2b1e      	cmp	r3, #30
 8014ed4:	d842      	bhi.n	8014f5c <nk_panel_get_padding+0xac>
 8014ed6:	a201      	add	r2, pc, #4	; (adr r2, 8014edc <nk_panel_get_padding+0x2c>)
 8014ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014edc:	08014f77 	.word	0x08014f77
 8014ee0:	08014f5d 	.word	0x08014f5d
 8014ee4:	08014f91 	.word	0x08014f91
 8014ee8:	08014f5d 	.word	0x08014f5d
 8014eec:	08014f5d 	.word	0x08014f5d
 8014ef0:	08014f5d 	.word	0x08014f5d
 8014ef4:	08014f5d 	.word	0x08014f5d
 8014ef8:	08014f5d 	.word	0x08014f5d
 8014efc:	08014f5d 	.word	0x08014f5d
 8014f00:	08014f5d 	.word	0x08014f5d
 8014f04:	08014f5d 	.word	0x08014f5d
 8014f08:	08014f5d 	.word	0x08014f5d
 8014f0c:	08014f5d 	.word	0x08014f5d
 8014f10:	08014f5d 	.word	0x08014f5d
 8014f14:	08014fab 	.word	0x08014fab
 8014f18:	08014f5d 	.word	0x08014f5d
 8014f1c:	08014f5d 	.word	0x08014f5d
 8014f20:	08014f5d 	.word	0x08014f5d
 8014f24:	08014f5d 	.word	0x08014f5d
 8014f28:	08014f5d 	.word	0x08014f5d
 8014f2c:	08014f5d 	.word	0x08014f5d
 8014f30:	08014f5d 	.word	0x08014f5d
 8014f34:	08014f5d 	.word	0x08014f5d
 8014f38:	08014f5d 	.word	0x08014f5d
 8014f3c:	08014f5d 	.word	0x08014f5d
 8014f40:	08014f5d 	.word	0x08014f5d
 8014f44:	08014f5d 	.word	0x08014f5d
 8014f48:	08014f5d 	.word	0x08014f5d
 8014f4c:	08014f5d 	.word	0x08014f5d
 8014f50:	08014f5d 	.word	0x08014f5d
 8014f54:	08014fc5 	.word	0x08014fc5
 8014f58:	2b40      	cmp	r3, #64	; 0x40
 8014f5a:	d040      	beq.n	8014fde <nk_panel_get_padding+0x12e>
    default:
    case NK_PANEL_WINDOW: return style->window.padding;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f62:	461a      	mov	r2, r3
 8014f64:	f107 0310 	add.w	r3, r7, #16
 8014f68:	f602 02ec 	addw	r2, r2, #2284	; 0x8ec
 8014f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f70:	e883 0003 	stmia.w	r3, {r0, r1}
 8014f74:	e04c      	b.n	8015010 <nk_panel_get_padding+0x160>
    case NK_PANEL_GROUP: return style->window.group_padding;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f7c:	461a      	mov	r2, r3
 8014f7e:	f107 0310 	add.w	r3, r7, #16
 8014f82:	f602 02f4 	addw	r2, r2, #2292	; 0x8f4
 8014f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8014f8e:	e03f      	b.n	8015010 <nk_panel_get_padding+0x160>
    case NK_PANEL_POPUP: return style->window.popup_padding;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f96:	461a      	mov	r2, r3
 8014f98:	f107 0310 	add.w	r3, r7, #16
 8014f9c:	f602 02fc 	addw	r2, r2, #2300	; 0x8fc
 8014fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fa4:	e883 0003 	stmia.w	r3, {r0, r1}
 8014fa8:	e032      	b.n	8015010 <nk_panel_get_padding+0x160>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	f107 0310 	add.w	r3, r7, #16
 8014fb6:	f602 120c 	addw	r2, r2, #2316	; 0x90c
 8014fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8014fc2:	e025      	b.n	8015010 <nk_panel_get_padding+0x160>
    case NK_PANEL_COMBO: return style->window.combo_padding;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014fca:	461a      	mov	r2, r3
 8014fcc:	f107 0310 	add.w	r3, r7, #16
 8014fd0:	f602 1204 	addw	r2, r2, #2308	; 0x904
 8014fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8014fdc:	e018      	b.n	8015010 <nk_panel_get_padding+0x160>
    case NK_PANEL_MENU: return style->window.menu_padding;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	f107 0310 	add.w	r3, r7, #16
 8014fea:	f602 1214 	addw	r2, r2, #2324	; 0x914
 8014fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ff2:	e883 0003 	stmia.w	r3, {r0, r1}
 8014ff6:	e00b      	b.n	8015010 <nk_panel_get_padding+0x160>
    case NK_PANEL_TOOLTIP: return style->window.menu_padding;}
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ffe:	461a      	mov	r2, r3
 8015000:	f107 0310 	add.w	r3, r7, #16
 8015004:	f602 1214 	addw	r2, r2, #2324	; 0x914
 8015008:	e892 0003 	ldmia.w	r2, {r0, r1}
 801500c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8015010:	693a      	ldr	r2, [r7, #16]
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	ee07 2a10 	vmov	s14, r2
 8015018:	ee07 3a90 	vmov	s15, r3
 801501c:	eeb0 0a47 	vmov.f32	s0, s14
 8015020:	eef0 0a67 	vmov.f32	s1, s15
 8015024:	371c      	adds	r7, #28
 8015026:	46bd      	mov	sp, r7
 8015028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502c:	4770      	bx	lr
 801502e:	bf00      	nop

08015030 <nk_panel_get_border>:
NK_LIB float
nk_panel_get_border(const struct nk_style *style, nk_flags flags,
    enum nk_panel_type type)
{
 8015030:	b480      	push	{r7}
 8015032:	b085      	sub	sp, #20
 8015034:	af00      	add	r7, sp, #0
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	4613      	mov	r3, r2
 801503c:	71fb      	strb	r3, [r7, #7]
    if (flags & NK_WINDOW_BORDER) {
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	f003 0301 	and.w	r3, r3, #1
 8015044:	2b00      	cmp	r3, #0
 8015046:	f000 8080 	beq.w	801514a <nk_panel_get_border+0x11a>
        switch (type) {
 801504a:	79fb      	ldrb	r3, [r7, #7]
 801504c:	2b80      	cmp	r3, #128	; 0x80
 801504e:	d075      	beq.n	801513c <nk_panel_get_border+0x10c>
 8015050:	2b80      	cmp	r3, #128	; 0x80
 8015052:	dc49      	bgt.n	80150e8 <nk_panel_get_border+0xb8>
 8015054:	2b20      	cmp	r3, #32
 8015056:	dc45      	bgt.n	80150e4 <nk_panel_get_border+0xb4>
 8015058:	2b02      	cmp	r3, #2
 801505a:	db45      	blt.n	80150e8 <nk_panel_get_border+0xb8>
 801505c:	3b02      	subs	r3, #2
 801505e:	2b1e      	cmp	r3, #30
 8015060:	d842      	bhi.n	80150e8 <nk_panel_get_border+0xb8>
 8015062:	a201      	add	r2, pc, #4	; (adr r2, 8015068 <nk_panel_get_border+0x38>)
 8015064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015068:	080150f7 	.word	0x080150f7
 801506c:	080150e9 	.word	0x080150e9
 8015070:	08015105 	.word	0x08015105
 8015074:	080150e9 	.word	0x080150e9
 8015078:	080150e9 	.word	0x080150e9
 801507c:	080150e9 	.word	0x080150e9
 8015080:	080150e9 	.word	0x080150e9
 8015084:	080150e9 	.word	0x080150e9
 8015088:	080150e9 	.word	0x080150e9
 801508c:	080150e9 	.word	0x080150e9
 8015090:	080150e9 	.word	0x080150e9
 8015094:	080150e9 	.word	0x080150e9
 8015098:	080150e9 	.word	0x080150e9
 801509c:	080150e9 	.word	0x080150e9
 80150a0:	08015113 	.word	0x08015113
 80150a4:	080150e9 	.word	0x080150e9
 80150a8:	080150e9 	.word	0x080150e9
 80150ac:	080150e9 	.word	0x080150e9
 80150b0:	080150e9 	.word	0x080150e9
 80150b4:	080150e9 	.word	0x080150e9
 80150b8:	080150e9 	.word	0x080150e9
 80150bc:	080150e9 	.word	0x080150e9
 80150c0:	080150e9 	.word	0x080150e9
 80150c4:	080150e9 	.word	0x080150e9
 80150c8:	080150e9 	.word	0x080150e9
 80150cc:	080150e9 	.word	0x080150e9
 80150d0:	080150e9 	.word	0x080150e9
 80150d4:	080150e9 	.word	0x080150e9
 80150d8:	080150e9 	.word	0x080150e9
 80150dc:	080150e9 	.word	0x080150e9
 80150e0:	08015121 	.word	0x08015121
 80150e4:	2b40      	cmp	r3, #64	; 0x40
 80150e6:	d022      	beq.n	801512e <nk_panel_get_border+0xfe>
        default:
        case NK_PANEL_WINDOW: return style->window.border;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80150ee:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	e02b      	b.n	801514e <nk_panel_get_border+0x11e>
        case NK_PANEL_GROUP: return style->window.group_border;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80150fc:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	e024      	b.n	801514e <nk_panel_get_border+0x11e>
        case NK_PANEL_POPUP: return style->window.popup_border;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801510a:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	e01d      	b.n	801514e <nk_panel_get_border+0x11e>
        case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015118:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	e016      	b.n	801514e <nk_panel_get_border+0x11e>
        case NK_PANEL_COMBO: return style->window.combo_border;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015126:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	e00f      	b.n	801514e <nk_panel_get_border+0x11e>
        case NK_PANEL_MENU: return style->window.menu_border;
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015134:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	e008      	b.n	801514e <nk_panel_get_border+0x11e>
        case NK_PANEL_TOOLTIP: return style->window.menu_border;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015142:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	e001      	b.n	801514e <nk_panel_get_border+0x11e>
    }} else return 0;
 801514a:	f04f 0300 	mov.w	r3, #0
}
 801514e:	ee07 3a90 	vmov	s15, r3
 8015152:	eeb0 0a67 	vmov.f32	s0, s15
 8015156:	3714      	adds	r7, #20
 8015158:	46bd      	mov	sp, r7
 801515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515e:	4770      	bx	lr

08015160 <nk_panel_get_border_color>:
NK_LIB struct nk_color
nk_panel_get_border_color(const struct nk_style *style, enum nk_panel_type type)
{
 8015160:	b480      	push	{r7}
 8015162:	b085      	sub	sp, #20
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	460b      	mov	r3, r1
 801516a:	70fb      	strb	r3, [r7, #3]
    switch (type) {
 801516c:	78fb      	ldrb	r3, [r7, #3]
 801516e:	2b80      	cmp	r3, #128	; 0x80
 8015170:	d076      	beq.n	8015260 <nk_panel_get_border_color+0x100>
 8015172:	2b80      	cmp	r3, #128	; 0x80
 8015174:	dc4a      	bgt.n	801520c <nk_panel_get_border_color+0xac>
 8015176:	2b20      	cmp	r3, #32
 8015178:	dc46      	bgt.n	8015208 <nk_panel_get_border_color+0xa8>
 801517a:	2b02      	cmp	r3, #2
 801517c:	db46      	blt.n	801520c <nk_panel_get_border_color+0xac>
 801517e:	3b02      	subs	r3, #2
 8015180:	2b1e      	cmp	r3, #30
 8015182:	d843      	bhi.n	801520c <nk_panel_get_border_color+0xac>
 8015184:	a201      	add	r2, pc, #4	; (adr r2, 801518c <nk_panel_get_border_color+0x2c>)
 8015186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801518a:	bf00      	nop
 801518c:	0801521b 	.word	0x0801521b
 8015190:	0801520d 	.word	0x0801520d
 8015194:	08015229 	.word	0x08015229
 8015198:	0801520d 	.word	0x0801520d
 801519c:	0801520d 	.word	0x0801520d
 80151a0:	0801520d 	.word	0x0801520d
 80151a4:	0801520d 	.word	0x0801520d
 80151a8:	0801520d 	.word	0x0801520d
 80151ac:	0801520d 	.word	0x0801520d
 80151b0:	0801520d 	.word	0x0801520d
 80151b4:	0801520d 	.word	0x0801520d
 80151b8:	0801520d 	.word	0x0801520d
 80151bc:	0801520d 	.word	0x0801520d
 80151c0:	0801520d 	.word	0x0801520d
 80151c4:	08015237 	.word	0x08015237
 80151c8:	0801520d 	.word	0x0801520d
 80151cc:	0801520d 	.word	0x0801520d
 80151d0:	0801520d 	.word	0x0801520d
 80151d4:	0801520d 	.word	0x0801520d
 80151d8:	0801520d 	.word	0x0801520d
 80151dc:	0801520d 	.word	0x0801520d
 80151e0:	0801520d 	.word	0x0801520d
 80151e4:	0801520d 	.word	0x0801520d
 80151e8:	0801520d 	.word	0x0801520d
 80151ec:	0801520d 	.word	0x0801520d
 80151f0:	0801520d 	.word	0x0801520d
 80151f4:	0801520d 	.word	0x0801520d
 80151f8:	0801520d 	.word	0x0801520d
 80151fc:	0801520d 	.word	0x0801520d
 8015200:	0801520d 	.word	0x0801520d
 8015204:	08015245 	.word	0x08015245
 8015208:	2b40      	cmp	r3, #64	; 0x40
 801520a:	d022      	beq.n	8015252 <nk_panel_get_border_color+0xf2>
    default:
    case NK_PANEL_WINDOW: return style->window.border_color;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015212:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 8015216:	60fb      	str	r3, [r7, #12]
 8015218:	e028      	b.n	801526c <nk_panel_get_border_color+0x10c>
    case NK_PANEL_GROUP: return style->window.group_border_color;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015220:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 8015224:	60fb      	str	r3, [r7, #12]
 8015226:	e021      	b.n	801526c <nk_panel_get_border_color+0x10c>
    case NK_PANEL_POPUP: return style->window.popup_border_color;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801522e:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
 8015232:	60fb      	str	r3, [r7, #12]
 8015234:	e01a      	b.n	801526c <nk_panel_get_border_color+0x10c>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801523c:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 8015240:	60fb      	str	r3, [r7, #12]
 8015242:	e013      	b.n	801526c <nk_panel_get_border_color+0x10c>
    case NK_PANEL_COMBO: return style->window.combo_border_color;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801524a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 801524e:	60fb      	str	r3, [r7, #12]
 8015250:	e00c      	b.n	801526c <nk_panel_get_border_color+0x10c>
    case NK_PANEL_MENU: return style->window.menu_border_color;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015258:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 801525c:	60fb      	str	r3, [r7, #12]
 801525e:	e005      	b.n	801526c <nk_panel_get_border_color+0x10c>
    case NK_PANEL_TOOLTIP: return style->window.menu_border_color;}
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015266:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 801526a:	60fb      	str	r3, [r7, #12]
}
 801526c:	2300      	movs	r3, #0
 801526e:	7b3a      	ldrb	r2, [r7, #12]
 8015270:	f362 0307 	bfi	r3, r2, #0, #8
 8015274:	7b7a      	ldrb	r2, [r7, #13]
 8015276:	f362 230f 	bfi	r3, r2, #8, #8
 801527a:	7bba      	ldrb	r2, [r7, #14]
 801527c:	f362 4317 	bfi	r3, r2, #16, #8
 8015280:	7bfa      	ldrb	r2, [r7, #15]
 8015282:	f362 631f 	bfi	r3, r2, #24, #8
 8015286:	4618      	mov	r0, r3
 8015288:	3714      	adds	r7, #20
 801528a:	46bd      	mov	sp, r7
 801528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015290:	4770      	bx	lr
 8015292:	bf00      	nop

08015294 <nk_panel_is_sub>:
NK_LIB nk_bool
nk_panel_is_sub(enum nk_panel_type type)
{
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	4603      	mov	r3, r0
 801529c:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_SUB)?1:0;
 801529e:	79fb      	ldrb	r3, [r7, #7]
 80152a0:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	bf14      	ite	ne
 80152a8:	2301      	movne	r3, #1
 80152aa:	2300      	moveq	r3, #0
 80152ac:	b2db      	uxtb	r3, r3
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	370c      	adds	r7, #12
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr

080152ba <nk_panel_is_nonblock>:
NK_LIB nk_bool
nk_panel_is_nonblock(enum nk_panel_type type)
{
 80152ba:	b480      	push	{r7}
 80152bc:	b083      	sub	sp, #12
 80152be:	af00      	add	r7, sp, #0
 80152c0:	4603      	mov	r3, r0
 80152c2:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_NONBLOCK)?1:0;
 80152c4:	79fb      	ldrb	r3, [r7, #7]
 80152c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	bf14      	ite	ne
 80152ce:	2301      	movne	r3, #1
 80152d0:	2300      	moveq	r3, #0
 80152d2:	b2db      	uxtb	r3, r3
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	370c      	adds	r7, #12
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr

080152e0 <nk_panel_begin>:
NK_LIB nk_bool
nk_panel_begin(struct nk_context *ctx, const char *title, enum nk_panel_type panel_type)
{
 80152e0:	b590      	push	{r4, r7, lr}
 80152e2:	b0b7      	sub	sp, #220	; 0xdc
 80152e4:	af04      	add	r7, sp, #16
 80152e6:	60f8      	str	r0, [r7, #12]
 80152e8:	60b9      	str	r1, [r7, #8]
 80152ea:	4613      	mov	r3, r2
 80152ec:	71fb      	strb	r3, [r7, #7]
    const struct nk_user_font *font;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d105      	bne.n	8015300 <nk_panel_begin+0x20>
 80152f4:	4b7e      	ldr	r3, [pc, #504]	; (80154f0 <nk_panel_begin+0x210>)
 80152f6:	4a7f      	ldr	r2, [pc, #508]	; (80154f4 <nk_panel_begin+0x214>)
 80152f8:	2163      	movs	r1, #99	; 0x63
 80152fa:	487f      	ldr	r0, [pc, #508]	; (80154f8 <nk_panel_begin+0x218>)
 80152fc:	f008 fea2 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015306:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801530a:	2b00      	cmp	r3, #0
 801530c:	d105      	bne.n	801531a <nk_panel_begin+0x3a>
 801530e:	4b7b      	ldr	r3, [pc, #492]	; (80154fc <nk_panel_begin+0x21c>)
 8015310:	4a78      	ldr	r2, [pc, #480]	; (80154f4 <nk_panel_begin+0x214>)
 8015312:	2164      	movs	r1, #100	; 0x64
 8015314:	4878      	ldr	r0, [pc, #480]	; (80154f8 <nk_panel_begin+0x218>)
 8015316:	f008 fe95 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015320:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015328:	2b00      	cmp	r3, #0
 801532a:	d105      	bne.n	8015338 <nk_panel_begin+0x58>
 801532c:	4b74      	ldr	r3, [pc, #464]	; (8015500 <nk_panel_begin+0x220>)
 801532e:	4a71      	ldr	r2, [pc, #452]	; (80154f4 <nk_panel_begin+0x214>)
 8015330:	2165      	movs	r1, #101	; 0x65
 8015332:	4871      	ldr	r0, [pc, #452]	; (80154f8 <nk_panel_begin+0x218>)
 8015334:	f008 fe86 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return 0;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d00f      	beq.n	801535e <nk_panel_begin+0x7e>
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015344:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015348:	2b00      	cmp	r3, #0
 801534a:	d008      	beq.n	801535e <nk_panel_begin+0x7e>
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015352:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801535a:	2b00      	cmp	r3, #0
 801535c:	d102      	bne.n	8015364 <nk_panel_begin+0x84>
 801535e:	2300      	movs	r3, #0
 8015360:	f000 bef7 	b.w	8016152 <nk_panel_begin+0xe72>
    nk_zero(ctx->current->layout, sizeof(*ctx->current->layout));
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801536a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801536e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015372:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8015376:	4618      	mov	r0, r3
 8015378:	f007 f96c 	bl	801c654 <nk_zero>
    if ((ctx->current->flags & NK_WINDOW_HIDDEN) || (ctx->current->flags & NK_WINDOW_CLOSED)) {
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015382:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801538c:	2b00      	cmp	r3, #0
 801538e:	d109      	bne.n	80153a4 <nk_panel_begin+0xc4>
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015396:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801539a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801539c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d017      	beq.n	80153d4 <nk_panel_begin+0xf4>
        nk_zero(ctx->current->layout, sizeof(struct nk_panel));
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80153aa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80153ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153b2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80153b6:	4618      	mov	r0, r3
 80153b8:	f007 f94c 	bl	801c654 <nk_zero>
        ctx->current->layout->type = panel_type;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80153c2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80153c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153ca:	79fa      	ldrb	r2, [r7, #7]
 80153cc:	701a      	strb	r2, [r3, #0]
        return 0;
 80153ce:	2300      	movs	r3, #0
 80153d0:	f000 bebf 	b.w	8016152 <nk_panel_begin+0xe72>
    }
    /* pull state into local stack */
    style = &ctx->style;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80153da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    font = style->font;
 80153de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    win = ctx->current;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80153ee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80153f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    layout = win->layout;
 80153f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80153fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    out = &win->buffer;
 8015402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015406:	3364      	adds	r3, #100	; 0x64
 8015408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    in = (win->flags & NK_WINDOW_NO_INPUT) ? 0: &ctx->input;
 801540c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015416:	2b00      	cmp	r3, #0
 8015418:	d101      	bne.n	801541e <nk_panel_begin+0x13e>
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	e000      	b.n	8015420 <nk_panel_begin+0x140>
 801541e:	2300      	movs	r3, #0
 8015420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#ifdef NK_INCLUDE_COMMAND_USERDATA
    win->buffer.userdata = ctx->userdata;
#endif
    /* pull style configuration into local stack */
    scrollbar_size = style->window.scrollbar_size;
 8015424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801542c:	461a      	mov	r2, r3
 801542e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015432:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 8015436:	e892 0003 	ldmia.w	r2, {r0, r1}
 801543a:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, panel_type);
 801543e:	79fb      	ldrb	r3, [r7, #7]
 8015440:	4619      	mov	r1, r3
 8015442:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8015446:	f7ff fd33 	bl	8014eb0 <nk_panel_get_padding>
 801544a:	eeb0 7a40 	vmov.f32	s14, s0
 801544e:	eef0 7a60 	vmov.f32	s15, s1
 8015452:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 8015456:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

    /* window movement */
    if ((win->flags & NK_WINDOW_MOVABLE) && !(win->flags & NK_WINDOW_ROM)) {
 801545a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801545e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015460:	f003 0302 	and.w	r3, r3, #2
 8015464:	2b00      	cmp	r3, #0
 8015466:	f000 80bf 	beq.w	80155e8 <nk_panel_begin+0x308>
 801546a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801546e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015474:	2b00      	cmp	r3, #0
 8015476:	f040 80b7 	bne.w	80155e8 <nk_panel_begin+0x308>
        unsigned int left_mouse_clicked;
        int left_mouse_click_in_cursor;

        /* calculate draggable window space */
        struct nk_rect header;
        header.x = win->bounds.x;
 801547a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801547e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015480:	67bb      	str	r3, [r7, #120]	; 0x78
        header.y = win->bounds.y;
 8015482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015488:	67fb      	str	r3, [r7, #124]	; 0x7c
        header.w = win->bounds.w;
 801548a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (nk_panel_has_header(win->flags, title)) {
 8015494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801549a:	68b9      	ldr	r1, [r7, #8]
 801549c:	4618      	mov	r0, r3
 801549e:	f7ff fcd9 	bl	8014e54 <nk_panel_has_header>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d02d      	beq.n	8015504 <nk_panel_begin+0x224>
            header.h = font->height + 2.0f * style->window.header.padding.y;
 80154a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80154ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80154b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80154b8:	f603 0344 	addw	r3, r3, #2116	; 0x844
 80154bc:	edd3 7a00 	vldr	s15, [r3]
 80154c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80154c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154c8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            header.h += 2.0f * style->window.header.label_padding.y;
 80154cc:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80154d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80154d8:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 80154dc:	edd3 7a00 	vldr	s15, [r3]
 80154e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80154e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154e8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 80154ec:	e00e      	b.n	801550c <nk_panel_begin+0x22c>
 80154ee:	bf00      	nop
 80154f0:	08022024 	.word	0x08022024
 80154f4:	08023be8 	.word	0x08023be8
 80154f8:	08022028 	.word	0x08022028
 80154fc:	08022044 	.word	0x08022044
 8015500:	08022054 	.word	0x08022054
        } else header.h = panel_padding.y;
 8015504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* window movement by dragging */
        left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 801550c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015510:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8015514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 8015518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801551c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8015520:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8015524:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8015528:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801552c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015530:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015534:	2201      	movs	r2, #1
 8015536:	eeb0 0a46 	vmov.f32	s0, s12
 801553a:	eef0 0a66 	vmov.f32	s1, s13
 801553e:	eeb0 1a47 	vmov.f32	s2, s14
 8015542:	eef0 1a67 	vmov.f32	s3, s15
 8015546:	2100      	movs	r1, #0
 8015548:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801554c:	f7fd fee2 	bl	8013314 <nk_input_has_mouse_click_down_in_rect>
 8015550:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
            NK_BUTTON_LEFT, header, nk_true);
        if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8015554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015558:	2b00      	cmp	r3, #0
 801555a:	d045      	beq.n	80155e8 <nk_panel_begin+0x308>
 801555c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015560:	2b00      	cmp	r3, #0
 8015562:	d041      	beq.n	80155e8 <nk_panel_begin+0x308>
 8015564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015568:	2b00      	cmp	r3, #0
 801556a:	d13d      	bne.n	80155e8 <nk_panel_begin+0x308>
            win->bounds.x = win->bounds.x + in->mouse.delta.x;
 801556c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015570:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8015574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015578:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 801557c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015580:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015584:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            win->bounds.y = win->bounds.y + in->mouse.delta.y;
 8015588:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801558c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8015590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015594:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8015598:	ee77 7a27 	vadd.f32	s15, s14, s15
 801559c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80155a0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x += in->mouse.delta.x;
 80155a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155a8:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 80155ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155b0:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80155b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155bc:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y += in->mouse.delta.y;
 80155c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155c4:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 80155c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155cc:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80155d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155d8:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        }
    }

    /* setup panel */
    layout->type = panel_type;
 80155e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80155ec:	79fa      	ldrb	r2, [r7, #7]
 80155ee:	701a      	strb	r2, [r3, #0]
    layout->flags = win->flags;
 80155f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80155f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80155f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80155fa:	605a      	str	r2, [r3, #4]
    layout->bounds = win->bounds;
 80155fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015604:	f102 0408 	add.w	r4, r2, #8
 8015608:	334c      	adds	r3, #76	; 0x4c
 801560a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801560c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    layout->bounds.x += panel_padding.x;
 8015610:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015614:	ed93 7a02 	vldr	s14, [r3, #8]
 8015618:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801561c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015624:	edc3 7a02 	vstr	s15, [r3, #8]
    layout->bounds.w -= 2*panel_padding.x;
 8015628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801562c:	ed93 7a04 	vldr	s14, [r3, #16]
 8015630:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8015634:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015638:	ee77 7a67 	vsub.f32	s15, s14, s15
 801563c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015640:	edc3 7a04 	vstr	s15, [r3, #16]
    if (win->flags & NK_WINDOW_BORDER) {
 8015644:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801564a:	f003 0301 	and.w	r3, r3, #1
 801564e:	2b00      	cmp	r3, #0
 8015650:	d03b      	beq.n	80156ca <nk_panel_begin+0x3ea>
        layout->border = nk_panel_get_border(style, win->flags, panel_type);
 8015652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015658:	79fa      	ldrb	r2, [r7, #7]
 801565a:	4619      	mov	r1, r3
 801565c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8015660:	f7ff fce6 	bl	8015030 <nk_panel_get_border>
 8015664:	eef0 7a40 	vmov.f32	s15, s0
 8015668:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801566c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        layout->bounds = nk_shrink_rect(layout->bounds, layout->border);
 8015670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015674:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 8015678:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 801567c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015680:	ed93 6a02 	vldr	s12, [r3, #8]
 8015684:	edd3 6a03 	vldr	s13, [r3, #12]
 8015688:	ed93 7a04 	vldr	s14, [r3, #16]
 801568c:	edd3 7a05 	vldr	s15, [r3, #20]
 8015690:	eeb0 2a65 	vmov.f32	s4, s11
 8015694:	eeb0 0a46 	vmov.f32	s0, s12
 8015698:	eef0 0a66 	vmov.f32	s1, s13
 801569c:	eeb0 1a47 	vmov.f32	s2, s14
 80156a0:	eef0 1a67 	vmov.f32	s3, s15
 80156a4:	f7fe ffca 	bl	801463c <nk_shrink_rect>
 80156a8:	eeb0 6a40 	vmov.f32	s12, s0
 80156ac:	eef0 6a60 	vmov.f32	s13, s1
 80156b0:	eeb0 7a41 	vmov.f32	s14, s2
 80156b4:	eef0 7a61 	vmov.f32	s15, s3
 80156b8:	ed84 6a02 	vstr	s12, [r4, #8]
 80156bc:	edc4 6a03 	vstr	s13, [r4, #12]
 80156c0:	ed84 7a04 	vstr	s14, [r4, #16]
 80156c4:	edc4 7a05 	vstr	s15, [r4, #20]
 80156c8:	e004      	b.n	80156d4 <nk_panel_begin+0x3f4>
    } else layout->border = 0;
 80156ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80156ce:	f04f 0200 	mov.w	r2, #0
 80156d2:	635a      	str	r2, [r3, #52]	; 0x34
    layout->at_y = layout->bounds.y;
 80156d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80156d8:	68da      	ldr	r2, [r3, #12]
 80156da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80156de:	625a      	str	r2, [r3, #36]	; 0x24
    layout->at_x = layout->bounds.x;
 80156e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80156e4:	689a      	ldr	r2, [r3, #8]
 80156e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80156ea:	621a      	str	r2, [r3, #32]
    layout->max_x = 0;
 80156ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80156f0:	f04f 0200 	mov.w	r2, #0
 80156f4:	629a      	str	r2, [r3, #40]	; 0x28
    layout->header_height = 0;
 80156f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80156fa:	f04f 0200 	mov.w	r2, #0
 80156fe:	631a      	str	r2, [r3, #48]	; 0x30
    layout->footer_height = 0;
 8015700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015704:	f04f 0200 	mov.w	r2, #0
 8015708:	62da      	str	r2, [r3, #44]	; 0x2c
    nk_layout_reset_min_row_height(ctx);
 801570a:	68f8      	ldr	r0, [r7, #12]
 801570c:	f7fd ffac 	bl	8013668 <nk_layout_reset_min_row_height>
    layout->row.index = 0;
 8015710:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015714:	2200      	movs	r2, #0
 8015716:	669a      	str	r2, [r3, #104]	; 0x68
    layout->row.columns = 0;
 8015718:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801571c:	2200      	movs	r2, #0
 801571e:	675a      	str	r2, [r3, #116]	; 0x74
    layout->row.ratio = 0;
 8015720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015724:	2200      	movs	r2, #0
 8015726:	679a      	str	r2, [r3, #120]	; 0x78
    layout->row.item_width = 0;
 8015728:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801572c:	f04f 0200 	mov.w	r2, #0
 8015730:	67da      	str	r2, [r3, #124]	; 0x7c
    layout->row.tree_depth = 0;
 8015732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015736:	2200      	movs	r2, #0
 8015738:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    layout->row.height = panel_padding.y;
 801573c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015740:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015744:	66da      	str	r2, [r3, #108]	; 0x6c
    layout->has_scrolling = nk_true;
 8015746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801574a:	2201      	movs	r2, #1
 801574c:	639a      	str	r2, [r3, #56]	; 0x38
    if (!(win->flags & NK_WINDOW_NO_SCROLLBAR))
 801574e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015754:	f003 0320 	and.w	r3, r3, #32
 8015758:	2b00      	cmp	r3, #0
 801575a:	d10b      	bne.n	8015774 <nk_panel_begin+0x494>
        layout->bounds.w -= scrollbar_size.x;
 801575c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015760:	ed93 7a04 	vldr	s14, [r3, #16]
 8015764:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8015768:	ee77 7a67 	vsub.f32	s15, s14, s15
 801576c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015770:	edc3 7a04 	vstr	s15, [r3, #16]
    if (!nk_panel_is_nonblock(panel_type)) {
 8015774:	79fb      	ldrb	r3, [r7, #7]
 8015776:	4618      	mov	r0, r3
 8015778:	f7ff fd9f 	bl	80152ba <nk_panel_is_nonblock>
 801577c:	4603      	mov	r3, r0
 801577e:	2b00      	cmp	r3, #0
 8015780:	d125      	bne.n	80157ce <nk_panel_begin+0x4ee>
        layout->footer_height = 0;
 8015782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015786:	f04f 0200 	mov.w	r2, #0
 801578a:	62da      	str	r2, [r3, #44]	; 0x2c
        if (!(win->flags & NK_WINDOW_NO_SCROLLBAR) || win->flags & NK_WINDOW_SCALABLE)
 801578c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015792:	f003 0320 	and.w	r3, r3, #32
 8015796:	2b00      	cmp	r3, #0
 8015798:	d006      	beq.n	80157a8 <nk_panel_begin+0x4c8>
 801579a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801579e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80157a0:	f003 0304 	and.w	r3, r3, #4
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d004      	beq.n	80157b2 <nk_panel_begin+0x4d2>
            layout->footer_height = scrollbar_size.y;
 80157a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80157ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80157b0:	62da      	str	r2, [r3, #44]	; 0x2c
        layout->bounds.h -= layout->footer_height;
 80157b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80157b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80157ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80157be:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80157c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80157ca:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    /* panel header */
    if (nk_panel_has_header(win->flags, title))
 80157ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80157d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80157d4:	68b9      	ldr	r1, [r7, #8]
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7ff fb3c 	bl	8014e54 <nk_panel_has_header>
 80157dc:	4603      	mov	r3, r0
 80157de:	2b00      	cmp	r3, #0
 80157e0:	f000 83bc 	beq.w	8015f5c <nk_panel_begin+0xc7c>
    {
        struct nk_text text;
        struct nk_rect header;
        const struct nk_style_item *background = 0;
 80157e4:	2300      	movs	r3, #0
 80157e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /* calculate header bounds */
        header.x = win->bounds.x;
 80157ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80157ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80157f0:	65bb      	str	r3, [r7, #88]	; 0x58
        header.y = win->bounds.y;
 80157f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80157f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        header.w = win->bounds.w;
 80157fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80157fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015800:	663b      	str	r3, [r7, #96]	; 0x60
        header.h = font->height + 2.0f * style->window.header.padding.y;
 8015802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015806:	ed93 7a01 	vldr	s14, [r3, #4]
 801580a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801580e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015812:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8015816:	edd3 7a00 	vldr	s15, [r3]
 801581a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801581e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015822:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        header.h += (2.0f * style->window.header.label_padding.y);
 8015826:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801582a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801582e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015832:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8015836:	edd3 7a00 	vldr	s15, [r3]
 801583a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801583e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015842:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        /* shrink panel by header */
        layout->header_height = header.h;
 8015846:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801584c:	631a      	str	r2, [r3, #48]	; 0x30
        layout->bounds.y += header.h;
 801584e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015852:	ed93 7a03 	vldr	s14, [r3, #12]
 8015856:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801585a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801585e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015862:	edc3 7a03 	vstr	s15, [r3, #12]
        layout->bounds.h -= header.h;
 8015866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801586a:	ed93 7a05 	vldr	s14, [r3, #20]
 801586e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8015872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801587a:	edc3 7a05 	vstr	s15, [r3, #20]
        layout->at_y += header.h;
 801587e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015882:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8015886:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801588a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801588e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015892:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

        /* select correct header background and text color */
        if (ctx->active == win) {
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801589c:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 80158a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d112      	bne.n	80158ce <nk_panel_begin+0x5ee>
            background = &style->window.header.active;
 80158a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80158ac:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80158b0:	3304      	adds	r3, #4
 80158b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_active;
 80158b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80158ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80158be:	461a      	mov	r2, r3
 80158c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80158c4:	f602 023b 	addw	r2, r2, #2107	; 0x83b
 80158c8:	6810      	ldr	r0, [r2, #0]
 80158ca:	6018      	str	r0, [r3, #0]
 80158cc:	e03b      	b.n	8015946 <nk_panel_begin+0x666>
        } else if (nk_input_is_mouse_hovering_rect(&ctx->input, header)) {
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80158d4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80158d8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80158dc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80158e0:	eeb0 0a46 	vmov.f32	s0, s12
 80158e4:	eef0 0a66 	vmov.f32	s1, s13
 80158e8:	eeb0 1a47 	vmov.f32	s2, s14
 80158ec:	eef0 1a67 	vmov.f32	s3, s15
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7fd fd56 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 80158f6:	4603      	mov	r3, r0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d012      	beq.n	8015922 <nk_panel_begin+0x642>
            background = &style->window.header.hover;
 80158fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015900:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8015904:	3308      	adds	r3, #8
 8015906:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_hover;
 801590a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801590e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015912:	461a      	mov	r2, r3
 8015914:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015918:	f602 0237 	addw	r2, r2, #2103	; 0x837
 801591c:	6810      	ldr	r0, [r2, #0]
 801591e:	6018      	str	r0, [r3, #0]
 8015920:	e011      	b.n	8015946 <nk_panel_begin+0x666>
        } else {
            background = &style->window.header.normal;
 8015922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015926:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 801592a:	330c      	adds	r3, #12
 801592c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_normal;
 8015930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015938:	461a      	mov	r2, r3
 801593a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801593e:	f602 0233 	addw	r2, r2, #2099	; 0x833
 8015942:	6810      	ldr	r0, [r2, #0]
 8015944:	6018      	str	r0, [r3, #0]
        }

        /* draw header background */
        header.h += 1.0f;
 8015946:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801594a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801594e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015952:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        switch(background->type) {
 8015956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	2b02      	cmp	r3, #2
 801595e:	d02a      	beq.n	80159b6 <nk_panel_begin+0x6d6>
 8015960:	2b02      	cmp	r3, #2
 8015962:	dc6b      	bgt.n	8015a3c <nk_panel_begin+0x75c>
 8015964:	2b00      	cmp	r3, #0
 8015966:	d04b      	beq.n	8015a00 <nk_panel_begin+0x720>
 8015968:	2b01      	cmp	r3, #1
 801596a:	d167      	bne.n	8015a3c <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_IMAGE:
                text.background = nk_rgba(0,0,0,0);
 801596c:	2300      	movs	r3, #0
 801596e:	2200      	movs	r2, #0
 8015970:	2100      	movs	r1, #0
 8015972:	2000      	movs	r0, #0
 8015974:	f7fa f9c6 	bl	800fd04 <nk_rgba>
 8015978:	4603      	mov	r3, r0
 801597a:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 801597c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015980:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8015984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015988:	3304      	adds	r3, #4
 801598a:	4ad9      	ldr	r2, [pc, #868]	; (8015cf0 <nk_panel_begin+0xa10>)
 801598c:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8015990:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015994:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015998:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801599c:	6812      	ldr	r2, [r2, #0]
 801599e:	4619      	mov	r1, r3
 80159a0:	eeb0 0a46 	vmov.f32	s0, s12
 80159a4:	eef0 0a66 	vmov.f32	s1, s13
 80159a8:	eeb0 1a47 	vmov.f32	s2, s14
 80159ac:	eef0 1a67 	vmov.f32	s3, s15
 80159b0:	f7fc fc10 	bl	80121d4 <nk_draw_image>
                break;
 80159b4:	e042      	b.n	8015a3c <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_NINE_SLICE:
                text.background = nk_rgba(0, 0, 0, 0);
 80159b6:	2300      	movs	r3, #0
 80159b8:	2200      	movs	r2, #0
 80159ba:	2100      	movs	r1, #0
 80159bc:	2000      	movs	r0, #0
 80159be:	f7fa f9a1 	bl	800fd04 <nk_rgba>
 80159c2:	4603      	mov	r3, r0
 80159c4:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 80159c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80159ca:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80159ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80159d2:	3304      	adds	r3, #4
 80159d4:	4ac6      	ldr	r2, [pc, #792]	; (8015cf0 <nk_panel_begin+0xa10>)
 80159d6:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80159da:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80159de:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80159e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80159e6:	6812      	ldr	r2, [r2, #0]
 80159e8:	4619      	mov	r1, r3
 80159ea:	eeb0 0a46 	vmov.f32	s0, s12
 80159ee:	eef0 0a66 	vmov.f32	s1, s13
 80159f2:	eeb0 1a47 	vmov.f32	s2, s14
 80159f6:	eef0 1a67 	vmov.f32	s3, s15
 80159fa:	f7fc fcdd 	bl	80123b8 <nk_draw_nine_slice>
                break;
 80159fe:	e01d      	b.n	8015a3c <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_COLOR:
                text.background = background->data.color;
 8015a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015a04:	685b      	ldr	r3, [r3, #4]
 8015a06:	673b      	str	r3, [r7, #112]	; 0x70
                nk_fill_rect(out, header, 0, background->data.color);
 8015a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015a0c:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8015a10:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015a14:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015a18:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8015a1c:	6859      	ldr	r1, [r3, #4]
 8015a1e:	ed9f 2ab5 	vldr	s4, [pc, #724]	; 8015cf4 <nk_panel_begin+0xa14>
 8015a22:	eeb0 0a46 	vmov.f32	s0, s12
 8015a26:	eef0 0a66 	vmov.f32	s1, s13
 8015a2a:	eeb0 1a47 	vmov.f32	s2, s14
 8015a2e:	eef0 1a67 	vmov.f32	s3, s15
 8015a32:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8015a36:	f7fc f873 	bl	8011b20 <nk_fill_rect>
                break;
 8015a3a:	bf00      	nop
        }

        /* window close button */
        {struct nk_rect button;
        button.y = header.y + style->window.header.padding.y;
 8015a3c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015a40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015a48:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8015a4c:	edd3 7a00 	vldr	s15, [r3]
 8015a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a54:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        button.h = header.h - 2 * style->window.header.padding.y;
 8015a58:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8015a5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015a64:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8015a68:	edd3 7a00 	vldr	s15, [r3]
 8015a6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a74:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        button.w = button.h;
 8015a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a7a:	653b      	str	r3, [r7, #80]	; 0x50
        if (win->flags & NK_WINDOW_CLOSABLE) {
 8015a7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a82:	f003 0308 	and.w	r3, r3, #8
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	f000 80ad 	beq.w	8015be6 <nk_panel_begin+0x906>
            nk_flags ws = 0;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	647b      	str	r3, [r7, #68]	; 0x44
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8015a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015a98:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8015a9c:	2b01      	cmp	r3, #1
 8015a9e:	d132      	bne.n	8015b06 <nk_panel_begin+0x826>
                button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);
 8015aa0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015aa4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015aac:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8015ab0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ab8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015abc:	edd3 7a00 	vldr	s15, [r3]
 8015ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ac8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8015acc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015ad0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8015ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015adc:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8015ae0:	edd3 7a00 	vldr	s15, [r3]
 8015ae4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015ae8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015af0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015af4:	edd3 7a00 	vldr	s15, [r3]
 8015af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b00:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8015b04:	e029      	b.n	8015b5a <nk_panel_begin+0x87a>
            } else {
                button.x = header.x + style->window.header.padding.x;
 8015b06:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b12:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015b16:	edd3 7a00 	vldr	s15, [r3]
 8015b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b1e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8015b22:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015b26:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8015b2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b32:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8015b36:	edd3 7a00 	vldr	s15, [r3]
 8015b3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015b3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b46:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015b4a:	edd3 7a00 	vldr	s15, [r3]
 8015b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b56:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }

            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8015b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015b5e:	f103 0164 	add.w	r1, r3, #100	; 0x64
                style->window.header.close_symbol, NK_BUTTON_DEFAULT,
 8015b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b6a:	f893 4830 	ldrb.w	r4, [r3, #2096]	; 0x830
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8015b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015b72:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8015b76:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015b7a:	6812      	ldr	r2, [r2, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8015b7c:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8015b80:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8015b84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015b88:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015b8c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8015b90:	9202      	str	r2, [sp, #8]
 8015b92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8015b96:	9201      	str	r2, [sp, #4]
 8015b98:	9300      	str	r3, [sp, #0]
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	4622      	mov	r2, r4
 8015b9e:	eeb0 0a46 	vmov.f32	s0, s12
 8015ba2:	eef0 0a66 	vmov.f32	s1, s13
 8015ba6:	eeb0 1a47 	vmov.f32	s2, s14
 8015baa:	eef0 1a67 	vmov.f32	s3, s15
 8015bae:	f7f9 fe23 	bl	800f7f8 <nk_do_button_symbol>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d016      	beq.n	8015be6 <nk_panel_begin+0x906>
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8015bb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d10f      	bne.n	8015be6 <nk_panel_begin+0x906>
            {
                layout->flags |= NK_WINDOW_HIDDEN;
 8015bc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8015bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015bd4:	605a      	str	r2, [r3, #4]
                layout->flags &= (nk_flags)~NK_WINDOW_MINIMIZED;
 8015bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015bda:	685b      	ldr	r3, [r3, #4]
 8015bdc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8015be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015be4:	605a      	str	r2, [r3, #4]
            }
        }

        /* window minimize button */
        if (win->flags & NK_WINDOW_MINIMIZABLE) {
 8015be6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015bec:	f003 0310 	and.w	r3, r3, #16
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	f000 80c9 	beq.w	8015d88 <nk_panel_begin+0xaa8>
            nk_flags ws = 0;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	643b      	str	r3, [r7, #64]	; 0x40
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8015bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c02:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8015c06:	2b01      	cmp	r3, #1
 8015c08:	d141      	bne.n	8015c8e <nk_panel_begin+0x9ae>
                button.x = (header.w + header.x) - button.w;
 8015c0a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015c0e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c16:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c1e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                if (!(win->flags & NK_WINDOW_CLOSABLE)) {
 8015c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015c28:	f003 0308 	and.w	r3, r3, #8
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d11b      	bne.n	8015c68 <nk_panel_begin+0x988>
                    button.x -= style->window.header.padding.x;
 8015c30:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c3c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015c40:	edd3 7a00 	vldr	s15, [r3]
 8015c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    header.w -= style->window.header.padding.x;
 8015c4c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c58:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015c5c:	edd3 7a00 	vldr	s15, [r3]
 8015c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c64:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
                }
                header.w -= button.w + style->window.header.spacing.x;
 8015c68:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015c6c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8015c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c78:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8015c7c:	edd3 7a00 	vldr	s15, [r3]
 8015c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c88:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8015c8c:	e01d      	b.n	8015cca <nk_panel_begin+0x9ea>
            } else {
                button.x = header.x;
 8015c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015c90:	64bb      	str	r3, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8015c92:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015c96:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8015c9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ca2:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8015ca6:	edd3 7a00 	vldr	s15, [r3]
 8015caa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015cb6:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015cba:	edd3 7a00 	vldr	s15, [r3]
 8015cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cc6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8015cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015cce:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8015cd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015cd6:	685b      	ldr	r3, [r3, #4]
 8015cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d00b      	beq.n	8015cf8 <nk_panel_begin+0xa18>
 8015ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ce8:	f893 2832 	ldrb.w	r2, [r3, #2098]	; 0x832
 8015cec:	e00a      	b.n	8015d04 <nk_panel_begin+0xa24>
 8015cee:	bf00      	nop
 8015cf0:	08023be4 	.word	0x08023be4
 8015cf4:	00000000 	.word	0x00000000
 8015cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d00:	f893 2831 	ldrb.w	r2, [r3, #2097]	; 0x831
 8015d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015d08:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8015d0c:	3318      	adds	r3, #24
                style->window.header.maximize_symbol: style->window.header.minimize_symbol,
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8015d0e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8015d12:	6809      	ldr	r1, [r1, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8015d14:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8015d18:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8015d1c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015d20:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015d24:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8015d28:	9102      	str	r1, [sp, #8]
 8015d2a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8015d2e:	9101      	str	r1, [sp, #4]
 8015d30:	9300      	str	r3, [sp, #0]
 8015d32:	2300      	movs	r3, #0
 8015d34:	eeb0 0a46 	vmov.f32	s0, s12
 8015d38:	eef0 0a66 	vmov.f32	s1, s13
 8015d3c:	eeb0 1a47 	vmov.f32	s2, s14
 8015d40:	eef0 1a67 	vmov.f32	s3, s15
 8015d44:	4621      	mov	r1, r4
 8015d46:	f7f9 fd57 	bl	800f7f8 <nk_do_button_symbol>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d01b      	beq.n	8015d88 <nk_panel_begin+0xaa8>
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8015d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d114      	bne.n	8015d88 <nk_panel_begin+0xaa8>
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8015d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d005      	beq.n	8015d78 <nk_panel_begin+0xa98>
 8015d6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015d70:	685b      	ldr	r3, [r3, #4]
 8015d72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015d76:	e004      	b.n	8015d82 <nk_panel_begin+0xaa2>
                    layout->flags | NK_WINDOW_MINIMIZED;
 8015d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015d7c:	685b      	ldr	r3, [r3, #4]
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8015d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8015d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015d86:	6053      	str	r3, [r2, #4]
        }}

        {/* window header title */
        int text_len = nk_strlen(title);
 8015d88:	68b8      	ldr	r0, [r7, #8]
 8015d8a:	f006 fc81 	bl	801c690 <nk_strlen>
 8015d8e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        struct nk_rect label = {0,0,0,0};
 8015d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015d96:	2200      	movs	r2, #0
 8015d98:	601a      	str	r2, [r3, #0]
 8015d9a:	605a      	str	r2, [r3, #4]
 8015d9c:	609a      	str	r2, [r3, #8]
 8015d9e:	60da      	str	r2, [r3, #12]
        float t = font->width(font->userdata, font->height, title, text_len);
 8015da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015da4:	689b      	ldr	r3, [r3, #8]
 8015da6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015daa:	edd2 7a01 	vldr	s15, [r2, #4]
 8015dae:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015db2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015db6:	68b9      	ldr	r1, [r7, #8]
 8015db8:	eeb0 0a67 	vmov.f32	s0, s15
 8015dbc:	6800      	ldr	r0, [r0, #0]
 8015dbe:	4798      	blx	r3
 8015dc0:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        text.padding = nk_vec2(0,0);
 8015dc4:	ed5f 0a35 	vldr	s1, [pc, #-212]	; 8015cf4 <nk_panel_begin+0xa14>
 8015dc8:	ed1f 0a36 	vldr	s0, [pc, #-216]	; 8015cf4 <nk_panel_begin+0xa14>
 8015dcc:	f7fe fcb6 	bl	801473c <nk_vec2>
 8015dd0:	eeb0 7a40 	vmov.f32	s14, s0
 8015dd4:	eef0 7a60 	vmov.f32	s15, s1
 8015dd8:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 8015ddc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        label.x = header.x + style->window.header.padding.x;
 8015de0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015de4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015dec:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015df0:	edd3 7a00 	vldr	s15, [r3]
 8015df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015df8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.x += style->window.header.label_padding.x;
 8015dfc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e08:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8015e0c:	edd3 7a00 	vldr	s15, [r3]
 8015e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.y = header.y + style->window.header.label_padding.y;
 8015e18:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e24:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8015e28:	edd3 7a00 	vldr	s15, [r3]
 8015e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e30:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        label.h = font->height + 2 * style->window.header.label_padding.y;
 8015e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015e38:	ed93 7a01 	vldr	s14, [r3, #4]
 8015e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e44:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8015e48:	edd3 7a00 	vldr	s15, [r3]
 8015e4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e54:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.w = t + 2 * style->window.header.spacing.x;
 8015e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e60:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8015e64:	edd3 7a00 	vldr	s15, [r3]
 8015e68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8015e6c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8015e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e74:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);
 8015e78:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015e7c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8015e80:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015e84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015e88:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015e8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e98:	d50a      	bpl.n	8015eb0 <nk_panel_begin+0xbd0>
 8015e9a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea6:	bf4c      	ite	mi
 8015ea8:	2301      	movmi	r3, #1
 8015eaa:	2300      	movpl	r3, #0
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	e011      	b.n	8015ed4 <nk_panel_begin+0xbf4>
 8015eb0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015eb4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015ebc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ecc:	bf4c      	ite	mi
 8015ece:	2301      	movmi	r3, #1
 8015ed0:	2300      	movpl	r3, #0
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d002      	beq.n	8015ede <nk_panel_begin+0xbfe>
 8015ed8:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 8015cf4 <nk_panel_begin+0xa14>
 8015edc:	e01d      	b.n	8015f1a <nk_panel_begin+0xc3a>
 8015ede:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015ee2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8015ee6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015eee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015ef2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efe:	d502      	bpl.n	8015f06 <nk_panel_begin+0xc26>
 8015f00:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015f04:	e009      	b.n	8015f1a <nk_panel_begin+0xc3a>
 8015f06:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015f0a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015f12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015f1a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_widget_text(out, label, (const char*)title, text_len, &text, NK_TEXT_LEFT, font);}
 8015f1e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015f22:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8015f26:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8015f2a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015f2e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015f32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015f36:	9301      	str	r3, [sp, #4]
 8015f38:	2311      	movs	r3, #17
 8015f3a:	9300      	str	r3, [sp, #0]
 8015f3c:	4613      	mov	r3, r2
 8015f3e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015f42:	68b9      	ldr	r1, [r7, #8]
 8015f44:	eeb0 0a46 	vmov.f32	s0, s12
 8015f48:	eef0 0a66 	vmov.f32	s1, s13
 8015f4c:	eeb0 1a47 	vmov.f32	s2, s14
 8015f50:	eef0 1a67 	vmov.f32	s3, s15
 8015f54:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8015f58:	f005 f9be 	bl	801b2d8 <nk_widget_text>
    }

    /* draw window background */
    if (!(layout->flags & NK_WINDOW_MINIMIZED) && !(layout->flags & NK_WINDOW_DYNAMIC)) {
 8015f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	f040 808d 	bne.w	8016086 <nk_panel_begin+0xda6>
 8015f6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f70:	685b      	ldr	r3, [r3, #4]
 8015f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	f040 8085 	bne.w	8016086 <nk_panel_begin+0xda6>
        struct nk_rect body;
        body.x = win->bounds.x;
 8015f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f82:	623b      	str	r3, [r7, #32]
        body.w = win->bounds.w;
 8015f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f8a:	62bb      	str	r3, [r7, #40]	; 0x28
        body.y = (win->bounds.y + layout->header_height);
 8015f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015f90:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8015f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f98:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8015f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fa0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        body.h = (win->bounds.h - layout->header_height);
 8015fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015fa8:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8015fac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015fb0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8015fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fb8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        switch(style->window.fixed_background.type) {
 8015fbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015fc4:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8015fc8:	2b02      	cmp	r3, #2
 8015fca:	d022      	beq.n	8016012 <nk_panel_begin+0xd32>
 8015fcc:	2b02      	cmp	r3, #2
 8015fce:	dc5a      	bgt.n	8016086 <nk_panel_begin+0xda6>
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d03b      	beq.n	801604c <nk_panel_begin+0xd6c>
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d156      	bne.n	8016086 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, body, &style->window.fixed_background.data.image, nk_white);
 8015fd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015fdc:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8015fe0:	331c      	adds	r3, #28
 8015fe2:	4a5e      	ldr	r2, [pc, #376]	; (801615c <nk_panel_begin+0xe7c>)
 8015fe4:	ed97 6a08 	vldr	s12, [r7, #32]
 8015fe8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8015fec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015ff0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015ff4:	6812      	ldr	r2, [r2, #0]
 8015ff6:	4619      	mov	r1, r3
 8015ff8:	eeb0 0a46 	vmov.f32	s0, s12
 8015ffc:	eef0 0a66 	vmov.f32	s1, s13
 8016000:	eeb0 1a47 	vmov.f32	s2, s14
 8016004:	eef0 1a67 	vmov.f32	s3, s15
 8016008:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801600c:	f7fc f8e2 	bl	80121d4 <nk_draw_image>
                break;
 8016010:	e039      	b.n	8016086 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, body, &style->window.fixed_background.data.slice, nk_white);
 8016012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016016:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801601a:	331c      	adds	r3, #28
 801601c:	4a4f      	ldr	r2, [pc, #316]	; (801615c <nk_panel_begin+0xe7c>)
 801601e:	ed97 6a08 	vldr	s12, [r7, #32]
 8016022:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8016026:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801602a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801602e:	6812      	ldr	r2, [r2, #0]
 8016030:	4619      	mov	r1, r3
 8016032:	eeb0 0a46 	vmov.f32	s0, s12
 8016036:	eef0 0a66 	vmov.f32	s1, s13
 801603a:	eeb0 1a47 	vmov.f32	s2, s14
 801603e:	eef0 1a67 	vmov.f32	s3, s15
 8016042:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8016046:	f7fc f9b7 	bl	80123b8 <nk_draw_nine_slice>
                break;
 801604a:	e01c      	b.n	8016086 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, body, 0, style->window.fixed_background.data.color);
 801604c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016054:	ed97 6a08 	vldr	s12, [r7, #32]
 8016058:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801605c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016060:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016064:	f8d3 185c 	ldr.w	r1, [r3, #2140]	; 0x85c
 8016068:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8016160 <nk_panel_begin+0xe80>
 801606c:	eeb0 0a46 	vmov.f32	s0, s12
 8016070:	eef0 0a66 	vmov.f32	s1, s13
 8016074:	eeb0 1a47 	vmov.f32	s2, s14
 8016078:	eef0 1a67 	vmov.f32	s3, s15
 801607c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8016080:	f7fb fd4e 	bl	8011b20 <nk_fill_rect>
                break;
 8016084:	bf00      	nop
        }
    }

    /* set clipping rectangle */
    {struct nk_rect clip;
    layout->clip = layout->bounds;
 8016086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801608a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801608e:	f102 043c 	add.w	r4, r2, #60	; 0x3c
 8016092:	3308      	adds	r3, #8
 8016094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 801609a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801609e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80160a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160a6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80160aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160ae:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 80160b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160b6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80160ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 80160c2:	ee77 5a27 	vadd.f32	s11, s14, s15
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 80160c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160ca:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80160ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160d2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 80160d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160da:	f107 0310 	add.w	r3, r7, #16
 80160de:	eef0 1a67 	vmov.f32	s3, s15
 80160e2:	eeb0 1a65 	vmov.f32	s2, s11
 80160e6:	eef0 0a46 	vmov.f32	s1, s12
 80160ea:	eeb0 0a66 	vmov.f32	s0, s13
 80160ee:	4611      	mov	r1, r2
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7fe fb45 	bl	8014780 <nk_unify>
    nk_push_scissor(out, clip);
 80160f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80160fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80160fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8016102:	edd7 7a07 	vldr	s15, [r7, #28]
 8016106:	eeb0 0a46 	vmov.f32	s0, s12
 801610a:	eef0 0a66 	vmov.f32	s1, s13
 801610e:	eeb0 1a47 	vmov.f32	s2, s14
 8016112:	eef0 1a67 	vmov.f32	s3, s15
 8016116:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801611a:	f7fb fb81 	bl	8011820 <nk_push_scissor>
    layout->clip = clip;}
 801611e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016122:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8016126:	f107 0310 	add.w	r3, r7, #16
 801612a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801612c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return !(layout->flags & NK_WINDOW_HIDDEN) && !(layout->flags & NK_WINDOW_MINIMIZED);
 8016130:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016134:	685b      	ldr	r3, [r3, #4]
 8016136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801613a:	2b00      	cmp	r3, #0
 801613c:	d108      	bne.n	8016150 <nk_panel_begin+0xe70>
 801613e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016142:	685b      	ldr	r3, [r3, #4]
 8016144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016148:	2b00      	cmp	r3, #0
 801614a:	d101      	bne.n	8016150 <nk_panel_begin+0xe70>
 801614c:	2301      	movs	r3, #1
 801614e:	e000      	b.n	8016152 <nk_panel_begin+0xe72>
 8016150:	2300      	movs	r3, #0
}
 8016152:	4618      	mov	r0, r3
 8016154:	37cc      	adds	r7, #204	; 0xcc
 8016156:	46bd      	mov	sp, r7
 8016158:	bd90      	pop	{r4, r7, pc}
 801615a:	bf00      	nop
 801615c:	08023be4 	.word	0x08023be4
 8016160:	00000000 	.word	0x00000000

08016164 <nk_panel_end>:
NK_LIB void
nk_panel_end(struct nk_context *ctx)
{
 8016164:	b590      	push	{r4, r7, lr}
 8016166:	b0b3      	sub	sp, #204	; 0xcc
 8016168:	af02      	add	r7, sp, #8
 801616a:	6078      	str	r0, [r7, #4]
    struct nk_command_buffer *out;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d106      	bne.n	8016180 <nk_panel_end+0x1c>
 8016172:	4b31      	ldr	r3, [pc, #196]	; (8016238 <nk_panel_end+0xd4>)
 8016174:	4a31      	ldr	r2, [pc, #196]	; (801623c <nk_panel_end+0xd8>)
 8016176:	f44f 71a9 	mov.w	r1, #338	; 0x152
 801617a:	4831      	ldr	r0, [pc, #196]	; (8016240 <nk_panel_end+0xdc>)
 801617c:	f007 ff62 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016186:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801618a:	2b00      	cmp	r3, #0
 801618c:	d106      	bne.n	801619c <nk_panel_end+0x38>
 801618e:	4b2d      	ldr	r3, [pc, #180]	; (8016244 <nk_panel_end+0xe0>)
 8016190:	4a2a      	ldr	r2, [pc, #168]	; (801623c <nk_panel_end+0xd8>)
 8016192:	f240 1153 	movw	r1, #339	; 0x153
 8016196:	482a      	ldr	r0, [pc, #168]	; (8016240 <nk_panel_end+0xdc>)
 8016198:	f007 ff54 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80161a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80161a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d106      	bne.n	80161bc <nk_panel_end+0x58>
 80161ae:	4b26      	ldr	r3, [pc, #152]	; (8016248 <nk_panel_end+0xe4>)
 80161b0:	4a22      	ldr	r2, [pc, #136]	; (801623c <nk_panel_end+0xd8>)
 80161b2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80161b6:	4822      	ldr	r0, [pc, #136]	; (8016240 <nk_panel_end+0xdc>)
 80161b8:	f007 ff44 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	f000 8792 	beq.w	80170e8 <nk_panel_end+0xf84>
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80161ca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	f000 878a 	beq.w	80170e8 <nk_panel_end+0xf84>
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80161da:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80161de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	f000 8780 	beq.w	80170e8 <nk_panel_end+0xf84>
        return;

    window = ctx->current;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80161ee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80161f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    layout = window->layout;
 80161f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80161fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    style = &ctx->style;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8016208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    out = &window->buffer;
 801620c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016210:	3364      	adds	r3, #100	; 0x64
 8016212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    in = (layout->flags & NK_WINDOW_ROM || layout->flags & NK_WINDOW_NO_INPUT) ? 0 :&ctx->input;
 8016216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801621a:	685b      	ldr	r3, [r3, #4]
 801621c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016220:	2b00      	cmp	r3, #0
 8016222:	d113      	bne.n	801624c <nk_panel_end+0xe8>
 8016224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801622e:	2b00      	cmp	r3, #0
 8016230:	d10c      	bne.n	801624c <nk_panel_end+0xe8>
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	e00b      	b.n	801624e <nk_panel_end+0xea>
 8016236:	bf00      	nop
 8016238:	08022024 	.word	0x08022024
 801623c:	08023bf8 	.word	0x08023bf8
 8016240:	08022028 	.word	0x08022028
 8016244:	08022044 	.word	0x08022044
 8016248:	08022054 	.word	0x08022054
 801624c:	2300      	movs	r3, #0
 801624e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (!nk_panel_is_sub(layout->type))
 8016252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016256:	781b      	ldrb	r3, [r3, #0]
 8016258:	4618      	mov	r0, r3
 801625a:	f7ff f81b 	bl	8015294 <nk_panel_is_sub>
 801625e:	4603      	mov	r3, r0
 8016260:	2b00      	cmp	r3, #0
 8016262:	d114      	bne.n	801628e <nk_panel_end+0x12a>
        nk_push_scissor(out, nk_null_rect);
 8016264:	4bcb      	ldr	r3, [pc, #812]	; (8016594 <nk_panel_end+0x430>)
 8016266:	ed93 6a00 	vldr	s12, [r3]
 801626a:	edd3 6a01 	vldr	s13, [r3, #4]
 801626e:	ed93 7a02 	vldr	s14, [r3, #8]
 8016272:	edd3 7a03 	vldr	s15, [r3, #12]
 8016276:	eeb0 0a46 	vmov.f32	s0, s12
 801627a:	eef0 0a66 	vmov.f32	s1, s13
 801627e:	eeb0 1a47 	vmov.f32	s2, s14
 8016282:	eef0 1a67 	vmov.f32	s3, s15
 8016286:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801628a:	f7fb fac9 	bl	8011820 <nk_push_scissor>

    /* cache configuration data */
    scrollbar_size = style->window.scrollbar_size;
 801628e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016296:	461a      	mov	r2, r3
 8016298:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801629c:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 80162a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80162a4:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, layout->type);
 80162a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	4619      	mov	r1, r3
 80162b0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80162b4:	f7fe fdfc 	bl	8014eb0 <nk_panel_get_padding>
 80162b8:	eeb0 7a40 	vmov.f32	s14, s0
 80162bc:	eef0 7a60 	vmov.f32	s15, s1
 80162c0:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 80162c4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* update the current cursor Y-position to point over the last added widget */
    layout->at_y += layout->row.height;
 80162c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80162cc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80162d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80162d4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80162d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80162e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    /* dynamic panels */
    if (layout->flags & NK_WINDOW_DYNAMIC && !(layout->flags & NK_WINDOW_MINIMIZED))
 80162e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80162e8:	685b      	ldr	r3, [r3, #4]
 80162ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	f000 8111 	beq.w	8016516 <nk_panel_end+0x3b2>
 80162f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80162fe:	2b00      	cmp	r3, #0
 8016300:	f040 8109 	bne.w	8016516 <nk_panel_end+0x3b2>
    {
        /* update panel height to fit dynamic growth */
        struct nk_rect empty_space;
        if (layout->at_y < (layout->bounds.y + layout->bounds.h))
 8016304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016308:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801630c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016310:	edd3 6a03 	vldr	s13, [r3, #12]
 8016314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016318:	edd3 7a05 	vldr	s15, [r3, #20]
 801631c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016328:	d50d      	bpl.n	8016346 <nk_panel_end+0x1e2>
            layout->bounds.h = layout->at_y - layout->bounds.y;
 801632a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801632e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8016332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016336:	edd3 7a03 	vldr	s15, [r3, #12]
 801633a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801633e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016342:	edc3 7a05 	vstr	s15, [r3, #20]

        /* fill top empty space */
        empty_space.x = window->bounds.x;
 8016346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801634a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801634c:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 801634e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016352:	68db      	ldr	r3, [r3, #12]
 8016354:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.h = panel_padding.y;
 8016356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016358:	65fb      	str	r3, [r7, #92]	; 0x5c
        empty_space.w = window->bounds.w;
 801635a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016360:	65bb      	str	r3, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8016362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801636a:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 801636e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8016372:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8016376:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801637a:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 801637e:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8016598 <nk_panel_end+0x434>
 8016382:	eeb0 0a46 	vmov.f32	s0, s12
 8016386:	eef0 0a66 	vmov.f32	s1, s13
 801638a:	eeb0 1a47 	vmov.f32	s2, s14
 801638e:	eef0 1a67 	vmov.f32	s3, s15
 8016392:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016396:	f7fb fbc3 	bl	8011b20 <nk_fill_rect>

        /* fill left empty space */
        empty_space.x = window->bounds.x;
 801639a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801639e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163a0:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 80163a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80163a6:	68db      	ldr	r3, [r3, #12]
 80163a8:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 80163aa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80163ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80163b2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80163b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163ba:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 80163be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80163c2:	695b      	ldr	r3, [r3, #20]
 80163c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        nk_fill_rect(out, empty_space, 0, style->window.background);
 80163c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80163ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163ce:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80163d2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80163d6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80163da:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80163de:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80163e2:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8016598 <nk_panel_end+0x434>
 80163e6:	eeb0 0a46 	vmov.f32	s0, s12
 80163ea:	eef0 0a66 	vmov.f32	s1, s13
 80163ee:	eeb0 1a47 	vmov.f32	s2, s14
 80163f2:	eef0 1a67 	vmov.f32	s3, s15
 80163f6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80163fa:	f7fb fb91 	bl	8011b20 <nk_fill_rect>

        /* fill right empty space */
        empty_space.x = layout->bounds.x + layout->bounds.w;
 80163fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016402:	ed93 7a02 	vldr	s14, [r3, #8]
 8016406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801640a:	edd3 7a04 	vldr	s15, [r3, #16]
 801640e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016412:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 8016416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 801641e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8016422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016426:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801642a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801642e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 8016432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016436:	695b      	ldr	r3, [r3, #20]
 8016438:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (*layout->offset_y == 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR))
 801643a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801643e:	69db      	ldr	r3, [r3, #28]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d10e      	bne.n	8016464 <nk_panel_end+0x300>
 8016446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801644a:	685b      	ldr	r3, [r3, #4]
 801644c:	f003 0320 	and.w	r3, r3, #32
 8016450:	2b00      	cmp	r3, #0
 8016452:	d107      	bne.n	8016464 <nk_panel_end+0x300>
            empty_space.w += scrollbar_size.x;
 8016454:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8016458:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801645c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016460:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8016464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801646c:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8016470:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8016474:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8016478:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801647c:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8016480:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8016598 <nk_panel_end+0x434>
 8016484:	eeb0 0a46 	vmov.f32	s0, s12
 8016488:	eef0 0a66 	vmov.f32	s1, s13
 801648c:	eeb0 1a47 	vmov.f32	s2, s14
 8016490:	eef0 1a67 	vmov.f32	s3, s15
 8016494:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016498:	f7fb fb42 	bl	8011b20 <nk_fill_rect>

        /* fill bottom empty space */
        if (layout->footer_height > 0) {
 801649c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80164a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80164a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80164a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164ac:	dd33      	ble.n	8016516 <nk_panel_end+0x3b2>
            empty_space.x = window->bounds.x;
 80164ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80164b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80164b4:	653b      	str	r3, [r7, #80]	; 0x50
            empty_space.y = layout->bounds.y + layout->bounds.h;
 80164b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80164ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80164be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80164c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80164c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164ca:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            empty_space.w = window->bounds.w;
 80164ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80164d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80164d4:	65bb      	str	r3, [r7, #88]	; 0x58
            empty_space.h = layout->footer_height;
 80164d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80164da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164dc:	65fb      	str	r3, [r7, #92]	; 0x5c
            nk_fill_rect(out, empty_space, 0, style->window.background);
 80164de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80164e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164e6:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80164ea:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80164ee:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80164f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80164f6:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80164fa:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8016598 <nk_panel_end+0x434>
 80164fe:	eeb0 0a46 	vmov.f32	s0, s12
 8016502:	eef0 0a66 	vmov.f32	s1, s13
 8016506:	eeb0 1a47 	vmov.f32	s2, s14
 801650a:	eef0 1a67 	vmov.f32	s3, s15
 801650e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016512:	f7fb fb05 	bl	8011b20 <nk_fill_rect>
        }
    }

    /* scrollbars */
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8016516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	f003 0320 	and.w	r3, r3, #32
 8016520:	2b00      	cmp	r3, #0
 8016522:	f040 8232 	bne.w	801698a <nk_panel_end+0x826>
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 8016526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801652a:	685b      	ldr	r3, [r3, #4]
 801652c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8016530:	2b00      	cmp	r3, #0
 8016532:	f040 822a 	bne.w	801698a <nk_panel_end+0x826>
        window->scrollbar_hiding_timer < NK_SCROLLBAR_HIDING_TIMEOUT)
 8016536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801653a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 801653e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8016542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801654a:	f140 821e 	bpl.w	801698a <nk_panel_end+0x826>
        float scroll_offset;
        float scroll_step;
        float scroll_inc;

        /* mouse wheel scrolling */
        if (nk_panel_is_sub(layout->type))
 801654e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016552:	781b      	ldrb	r3, [r3, #0]
 8016554:	4618      	mov	r0, r3
 8016556:	f7fe fe9d 	bl	8015294 <nk_panel_is_sub>
 801655a:	4603      	mov	r3, r0
 801655c:	2b00      	cmp	r3, #0
 801655e:	f000 80cb 	beq.w	80166f8 <nk_panel_end+0x594>
        {
            /* sub-window mouse wheel scrolling */
            struct nk_window *root_window = window;
 8016562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            struct nk_panel *root_panel = window->layout;
 801656a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801656e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 8016576:	e005      	b.n	8016584 <nk_panel_end+0x420>
                root_panel = root_panel->parent;
 8016578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801657c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8016580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 8016584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016588:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 801658c:	2b00      	cmp	r3, #0
 801658e:	d1f3      	bne.n	8016578 <nk_panel_end+0x414>
            while (root_window->parent)
 8016590:	e012      	b.n	80165b8 <nk_panel_end+0x454>
 8016592:	bf00      	nop
 8016594:	08023bd4 	.word	0x08023bd4
 8016598:	00000000 	.word	0x00000000
 801659c:	3dcccccd 	.word	0x3dcccccd
 80165a0:	3c23d70a 	.word	0x3c23d70a
 80165a4:	3d4ccccd 	.word	0x3d4ccccd
 80165a8:	3ba3d70a 	.word	0x3ba3d70a
                root_window = root_window->parent;
 80165ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80165b0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80165b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            while (root_window->parent)
 80165b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80165bc:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d1f3      	bne.n	80165ac <nk_panel_end+0x448>

            /* only allow scrolling if parent window is active */
            scroll_has_scrolling = 0;
 80165c4:	2300      	movs	r3, #0
 80165c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if ((root_window == ctx->active) && layout->has_scrolling) {
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165d0:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 80165d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80165d8:	429a      	cmp	r2, r3
 80165da:	f040 80d2 	bne.w	8016782 <nk_panel_end+0x61e>
 80165de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80165e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	f000 80cc 	beq.w	8016782 <nk_panel_end+0x61e>
                /* and panel is being hovered and inside clip rect*/
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 80165ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80165ee:	ed93 6a02 	vldr	s12, [r3, #8]
 80165f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80165f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80165fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80165fe:	eeb0 0a46 	vmov.f32	s0, s12
 8016602:	eef0 0a66 	vmov.f32	s1, s13
 8016606:	eeb0 1a47 	vmov.f32	s2, s14
 801660a:	eef0 1a67 	vmov.f32	s3, s15
 801660e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8016612:	f7fc fec6 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 8016616:	4603      	mov	r3, r0
 8016618:	2b00      	cmp	r3, #0
 801661a:	f000 80b2 	beq.w	8016782 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 801661e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016622:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8016626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801662a:	edd3 6a02 	vldr	s13, [r3, #8]
 801662e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016632:	edd3 7a04 	vldr	s15, [r3, #16]
 8016636:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 801663a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016642:	f140 809e 	bpl.w	8016782 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 8016646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801664a:	ed93 7a02 	vldr	s14, [r3, #8]
 801664e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016652:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8016656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801665a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 801665e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016662:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801666a:	f140 808a 	bpl.w	8016782 <nk_panel_end+0x61e>
 801666e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016672:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8016676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801667a:	edd3 6a03 	vldr	s13, [r3, #12]
 801667e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016682:	edd3 7a05 	vldr	s15, [r3, #20]
 8016686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801668a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801668e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016692:	d576      	bpl.n	8016782 <nk_panel_end+0x61e>
 8016694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016698:	ed93 7a03 	vldr	s14, [r3, #12]
 801669c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80166a0:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80166a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80166a8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80166ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80166b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80166b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166b8:	d563      	bpl.n	8016782 <nk_panel_end+0x61e>
                        root_panel->clip.x, root_panel->clip.y, root_panel->clip.w, root_panel->clip.h))
                {
                    /* deactivate all parent scrolling */
                    root_panel = window->layout;
 80166ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80166c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 80166c6:	e009      	b.n	80166dc <nk_panel_end+0x578>
                        root_panel->has_scrolling = nk_false;
 80166c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80166cc:	2200      	movs	r2, #0
 80166ce:	639a      	str	r2, [r3, #56]	; 0x38
                        root_panel = root_panel->parent;
 80166d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80166d4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80166d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 80166dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80166e0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d1ef      	bne.n	80166c8 <nk_panel_end+0x564>
                    }
                    root_panel->has_scrolling = nk_false;
 80166e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80166ec:	2200      	movs	r2, #0
 80166ee:	639a      	str	r2, [r3, #56]	; 0x38
                    scroll_has_scrolling = nk_true;
 80166f0:	2301      	movs	r3, #1
 80166f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80166f6:	e044      	b.n	8016782 <nk_panel_end+0x61e>
                }
            }
        } else if (!nk_panel_is_sub(layout->type)) {
 80166f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	4618      	mov	r0, r3
 8016700:	f7fe fdc8 	bl	8015294 <nk_panel_is_sub>
 8016704:	4603      	mov	r3, r0
 8016706:	2b00      	cmp	r3, #0
 8016708:	d138      	bne.n	801677c <nk_panel_end+0x618>
            /* window mouse wheel scrolling */
            scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016710:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8016714:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016718:	429a      	cmp	r2, r3
 801671a:	d106      	bne.n	801672a <nk_panel_end+0x5c6>
 801671c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016722:	2b00      	cmp	r3, #0
 8016724:	d001      	beq.n	801672a <nk_panel_end+0x5c6>
 8016726:	2301      	movs	r3, #1
 8016728:	e000      	b.n	801672c <nk_panel_end+0x5c8>
 801672a:	2300      	movs	r3, #0
 801672c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)
 8016730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016734:	2b00      	cmp	r3, #0
 8016736:	d01b      	beq.n	8016770 <nk_panel_end+0x60c>
 8016738:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801673c:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8016740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016748:	dc08      	bgt.n	801675c <nk_panel_end+0x5f8>
 801674a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801674e:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 8016752:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801675a:	dd09      	ble.n	8016770 <nk_panel_end+0x60c>
 801675c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016760:	2b00      	cmp	r3, #0
 8016762:	d005      	beq.n	8016770 <nk_panel_end+0x60c>
                window->scrolled = nk_true;
 8016764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016768:	2201      	movs	r2, #1
 801676a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801676e:	e008      	b.n	8016782 <nk_panel_end+0x61e>
            else window->scrolled = nk_false;
 8016770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016774:	2200      	movs	r2, #0
 8016776:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801677a:	e002      	b.n	8016782 <nk_panel_end+0x61e>
        } else scroll_has_scrolling = nk_false;
 801677c:	2300      	movs	r3, #0
 801677e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        {
            /* vertical scrollbar */
            nk_flags state = 0;
 8016782:	2300      	movs	r3, #0
 8016784:	63fb      	str	r3, [r7, #60]	; 0x3c
            scroll.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 8016786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801678a:	ed93 7a02 	vldr	s14, [r3, #8]
 801678e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016792:	edd3 7a04 	vldr	s15, [r3, #16]
 8016796:	ee37 7a27 	vadd.f32	s14, s14, s15
 801679a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801679e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80167a2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y;
 80167a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80167aa:	68db      	ldr	r3, [r3, #12]
 80167ac:	647b      	str	r3, [r7, #68]	; 0x44
            scroll.w = scrollbar_size.x;
 80167ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80167b0:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = layout->bounds.h;
 80167b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80167b6:	695b      	ldr	r3, [r3, #20]
 80167b8:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_y;
 80167ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80167be:	69db      	ldr	r3, [r3, #28]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	ee07 3a90 	vmov	s15, r3
 80167c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167ca:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_step = scroll.h * 0.10f;
 80167ce:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80167d2:	ed1f 7a8e 	vldr	s14, [pc, #-568]	; 801659c <nk_panel_end+0x438>
 80167d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167da:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = scroll.h * 0.01f;
 80167de:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80167e2:	ed1f 7a91 	vldr	s14, [pc, #-580]	; 80165a0 <nk_panel_end+0x43c>
 80167e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167ea:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_target = (float)(int)(layout->at_y - scroll.y);
 80167ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80167f2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80167f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80167fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80167fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016806:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollv, in, style->font);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8016810:	3318      	adds	r3, #24
 8016812:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016816:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
 8016818:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801681c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8016820:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8016824:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8016828:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801682c:	9201      	str	r2, [sp, #4]
 801682e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016832:	9200      	str	r2, [sp, #0]
 8016834:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 8016838:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 801683c:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8016840:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8016844:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016848:	eeb0 0a46 	vmov.f32	s0, s12
 801684c:	eef0 0a66 	vmov.f32	s1, s13
 8016850:	eeb0 1a47 	vmov.f32	s2, s14
 8016854:	eef0 1a67 	vmov.f32	s3, s15
 8016858:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801685c:	f001 fe32 	bl	80184c4 <nk_do_scrollbarv>
 8016860:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_y = (nk_uint)scroll_offset;
 8016864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016868:	69db      	ldr	r3, [r3, #28]
 801686a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801686e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016872:	ee17 2a90 	vmov	r2, s15
 8016876:	601a      	str	r2, [r3, #0]
            if (in && scroll_has_scrolling)
 8016878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801687c:	2b00      	cmp	r3, #0
 801687e:	d009      	beq.n	8016894 <nk_panel_end+0x730>
 8016880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016884:	2b00      	cmp	r3, #0
 8016886:	d005      	beq.n	8016894 <nk_panel_end+0x730>
                in->mouse.scroll_delta.y = 0;
 8016888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801688c:	f04f 0200 	mov.w	r2, #0
 8016890:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        }
        {
            /* horizontal scrollbar */
            nk_flags state = 0;
 8016894:	2300      	movs	r3, #0
 8016896:	63bb      	str	r3, [r7, #56]	; 0x38
            scroll.x = layout->bounds.x;
 8016898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801689c:	689b      	ldr	r3, [r3, #8]
 801689e:	643b      	str	r3, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y + layout->bounds.h;
 80168a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80168a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80168a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80168ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80168b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80168b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            scroll.w = layout->bounds.w;
 80168b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80168bc:	691b      	ldr	r3, [r3, #16]
 80168be:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = scrollbar_size.y;
 80168c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80168c2:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_x;
 80168c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80168c8:	699b      	ldr	r3, [r3, #24]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	ee07 3a90 	vmov	s15, r3
 80168d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168d4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_target = (float)(int)(layout->max_x - scroll.x);
 80168d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80168dc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80168e0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80168e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80168e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80168ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80168f0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_step = layout->max_x * 0.05f;
 80168f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80168f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80168fc:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 80165a4 <nk_panel_end+0x440>
 8016900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016904:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = layout->max_x * 0.005f;
 8016908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801690c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8016910:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 80165a8 <nk_panel_end+0x444>
 8016914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016918:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollh, in, style->font);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8016922:	330c      	adds	r3, #12
 8016924:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016928:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
 801692a:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801692e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8016932:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8016936:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801693a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801693e:	9201      	str	r2, [sp, #4]
 8016940:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016944:	9200      	str	r2, [sp, #0]
 8016946:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 801694a:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 801694e:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8016952:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8016956:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801695a:	eeb0 0a46 	vmov.f32	s0, s12
 801695e:	eef0 0a66 	vmov.f32	s1, s13
 8016962:	eeb0 1a47 	vmov.f32	s2, s14
 8016966:	eef0 1a67 	vmov.f32	s3, s15
 801696a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801696e:	f002 f847 	bl	8018a00 <nk_do_scrollbarh>
 8016972:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_x = (nk_uint)scroll_offset;
 8016976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801697a:	699b      	ldr	r3, [r3, #24]
 801697c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8016980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016984:	ee17 2a90 	vmov	r2, s15
 8016988:	601a      	str	r2, [r3, #0]
        }
    }

    /* hide scroll if no user input */
    if (window->flags & NK_WINDOW_SCROLL_AUTO_HIDE) {
 801698a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801698e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016994:	2b00      	cmp	r3, #0
 8016996:	d051      	beq.n	8016a3c <nk_panel_end+0x8d8>
        int has_input = ctx->input.mouse.delta.x != 0 || ctx->input.mouse.delta.y != 0 || ctx->input.mouse.scroll_delta.y != 0;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 801699e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80169a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169a6:	d10f      	bne.n	80169c8 <nk_panel_end+0x864>
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80169ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80169b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b6:	d107      	bne.n	80169c8 <nk_panel_end+0x864>
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 80169be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80169c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169c6:	d001      	beq.n	80169cc <nk_panel_end+0x868>
 80169c8:	2301      	movs	r3, #1
 80169ca:	e000      	b.n	80169ce <nk_panel_end+0x86a>
 80169cc:	2300      	movs	r3, #0
 80169ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        int is_window_hovered = nk_window_is_hovered(ctx);
 80169d2:	6878      	ldr	r0, [r7, #4]
 80169d4:	f007 f97a 	bl	801dccc <nk_window_is_hovered>
 80169d8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80169e2:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 80169e6:	f003 0302 	and.w	r3, r3, #2
 80169ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))
 80169ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d103      	bne.n	80169fe <nk_panel_end+0x89a>
 80169f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d107      	bne.n	8016a0e <nk_panel_end+0x8aa>
 80169fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d113      	bne.n	8016a2e <nk_panel_end+0x8ca>
 8016a06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d10f      	bne.n	8016a2e <nk_panel_end+0x8ca>
            window->scrollbar_hiding_timer += ctx->delta_time_seconds;
 8016a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a12:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016a1c:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8016a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a28:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8016a2c:	e00c      	b.n	8016a48 <nk_panel_end+0x8e4>
        else window->scrollbar_hiding_timer = 0;
 8016a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a32:	f04f 0200 	mov.w	r2, #0
 8016a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8016a3a:	e005      	b.n	8016a48 <nk_panel_end+0x8e4>
    } else window->scrollbar_hiding_timer = 0;
 8016a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a40:	f04f 0200 	mov.w	r2, #0
 8016a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* window border */
    if (layout->flags & NK_WINDOW_BORDER)
 8016a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a4c:	685b      	ldr	r3, [r3, #4]
 8016a4e:	f003 0301 	and.w	r3, r3, #1
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d078      	beq.n	8016b48 <nk_panel_end+0x9e4>
    {
        struct nk_color border_color = nk_panel_get_border_color(style, layout->type);
 8016a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a5a:	781b      	ldrb	r3, [r3, #0]
 8016a5c:	4619      	mov	r1, r3
 8016a5e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8016a62:	f7fe fb7d 	bl	8015160 <nk_panel_get_border_color>
 8016a66:	4603      	mov	r3, r0
 8016a68:	637b      	str	r3, [r7, #52]	; 0x34
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8016a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            ? (style->window.border + window->bounds.y + layout->header_height)
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d014      	beq.n	8016aa2 <nk_panel_end+0x93e>
            ? (style->window.border + window->bounds.y + layout->header_height)
 8016a78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a80:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8016a84:	ed93 7a00 	vldr	s14, [r3]
 8016a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a8c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8016a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a98:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8016a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016aa0:	e021      	b.n	8016ae6 <nk_panel_end+0x982>
 8016aa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
                : (window->bounds.y + window->bounds.h));
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d010      	beq.n	8016ad2 <nk_panel_end+0x96e>
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
 8016ab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016ab4:	ed93 7a03 	vldr	s14, [r3, #12]
 8016ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016abc:	edd3 7a05 	vldr	s15, [r3, #20]
 8016ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016ac8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
                : (window->bounds.y + window->bounds.h));
 8016acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ad0:	e009      	b.n	8016ae6 <nk_panel_end+0x982>
 8016ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016ad6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8016ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016ade:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8016ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8016ae6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        struct nk_rect b = window->bounds;
 8016aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016aee:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8016af2:	334c      	adds	r3, #76	; 0x4c
 8016af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        b.h = padding_y - window->bounds.y;
 8016afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016afe:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8016b02:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8016b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b0a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        nk_stroke_rect(out, b, 0, layout->border, border_color);
 8016b0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016b12:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 8016b16:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8016b1a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8016b1e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016b22:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016b26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016b28:	eef0 2a65 	vmov.f32	s5, s11
 8016b2c:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8016ca8 <nk_panel_end+0xb44>
 8016b30:	eeb0 0a46 	vmov.f32	s0, s12
 8016b34:	eef0 0a66 	vmov.f32	s1, s13
 8016b38:	eeb0 1a47 	vmov.f32	s2, s14
 8016b3c:	eef0 1a67 	vmov.f32	s3, s15
 8016b40:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016b44:	f7fa fee4 	bl	8011910 <nk_stroke_rect>
    }

    /* scaler */
    if ((layout->flags & NK_WINDOW_SCALABLE) && in && !(layout->flags & NK_WINDOW_MINIMIZED))
 8016b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016b4c:	685b      	ldr	r3, [r3, #4]
 8016b4e:	f003 0304 	and.w	r3, r3, #4
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	f000 81e1 	beq.w	8016f1a <nk_panel_end+0xdb6>
 8016b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	f000 81dc 	beq.w	8016f1a <nk_panel_end+0xdb6>
 8016b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016b66:	685b      	ldr	r3, [r3, #4]
 8016b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	f040 81d4 	bne.w	8016f1a <nk_panel_end+0xdb6>
    {
        /* calculate scaler bounds */
        struct nk_rect scaler;
        scaler.w = scrollbar_size.x;
 8016b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b74:	61fb      	str	r3, [r7, #28]
        scaler.h = scrollbar_size.y;
 8016b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016b78:	623b      	str	r3, [r7, #32]
        scaler.y = layout->bounds.y + layout->bounds.h;
 8016b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016b7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8016b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016b86:	edd3 7a05 	vldr	s15, [r3, #20]
 8016b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b8e:	edc7 7a06 	vstr	s15, [r7, #24]
        if (layout->flags & NK_WINDOW_SCALE_LEFT)
 8016b92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016b96:	685b      	ldr	r3, [r3, #4]
 8016b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d00e      	beq.n	8016bbe <nk_panel_end+0xa5a>
            scaler.x = layout->bounds.x - panel_padding.x * 0.5f;
 8016ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016ba4:	ed93 7a02 	vldr	s14, [r3, #8]
 8016ba8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8016bac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016bb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016bb8:	edc7 7a05 	vstr	s15, [r7, #20]
 8016bbc:	e00f      	b.n	8016bde <nk_panel_end+0xa7a>
        else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 8016bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016bc2:	ed93 7a02 	vldr	s14, [r3, #8]
 8016bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016bca:	edd3 7a04 	vldr	s15, [r3, #16]
 8016bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016bd2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8016bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bda:	edc7 7a05 	vstr	s15, [r7, #20]
        if (layout->flags & NK_WINDOW_NO_SCROLLBAR)
 8016bde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016be2:	685b      	ldr	r3, [r3, #4]
 8016be4:	f003 0320 	and.w	r3, r3, #32
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d007      	beq.n	8016bfc <nk_panel_end+0xa98>
            scaler.x -= scaler.w;
 8016bec:	ed97 7a05 	vldr	s14, [r7, #20]
 8016bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8016bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016bf8:	edc7 7a05 	vstr	s15, [r7, #20]

        /* draw scaler */
        {const struct nk_style_item *item = &style->window.scaler;
 8016bfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016c00:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 8016c04:	3314      	adds	r3, #20
 8016c06:	67bb      	str	r3, [r7, #120]	; 0x78
        if (item->type == NK_STYLE_ITEM_IMAGE)
 8016c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	2b01      	cmp	r3, #1
 8016c0e:	d119      	bne.n	8016c44 <nk_panel_end+0xae0>
            nk_draw_image(out, scaler, &item->data.image, nk_white);
 8016c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016c12:	3304      	adds	r3, #4
 8016c14:	4a25      	ldr	r2, [pc, #148]	; (8016cac <nk_panel_end+0xb48>)
 8016c16:	ed97 6a05 	vldr	s12, [r7, #20]
 8016c1a:	edd7 6a06 	vldr	s13, [r7, #24]
 8016c1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8016c22:	edd7 7a08 	vldr	s15, [r7, #32]
 8016c26:	6812      	ldr	r2, [r2, #0]
 8016c28:	4619      	mov	r1, r3
 8016c2a:	eeb0 0a46 	vmov.f32	s0, s12
 8016c2e:	eef0 0a66 	vmov.f32	s1, s13
 8016c32:	eeb0 1a47 	vmov.f32	s2, s14
 8016c36:	eef0 1a67 	vmov.f32	s3, s15
 8016c3a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016c3e:	f7fb fac9 	bl	80121d4 <nk_draw_image>
 8016c42:	e063      	b.n	8016d0c <nk_panel_end+0xba8>
        else {
            if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8016c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016c48:	685b      	ldr	r3, [r3, #4]
 8016c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d02e      	beq.n	8016cb0 <nk_panel_end+0xb4c>
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8016c52:	edd7 6a05 	vldr	s13, [r7, #20]
 8016c56:	ed97 6a06 	vldr	s12, [r7, #24]
 8016c5a:	edd7 5a05 	vldr	s11, [r7, #20]
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8016c5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8016c62:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8016c66:	ee37 5a27 	vadd.f32	s10, s14, s15
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8016c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8016c6e:	edd7 7a07 	vldr	s15, [r7, #28]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8016c72:	ee77 4a27 	vadd.f32	s9, s14, s15
                    scaler.y + scaler.h, item->data.color);
 8016c76:	ed97 7a06 	vldr	s14, [r7, #24]
 8016c7a:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8016c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016c84:	6859      	ldr	r1, [r3, #4]
 8016c86:	eef0 2a67 	vmov.f32	s5, s15
 8016c8a:	eeb0 2a64 	vmov.f32	s4, s9
 8016c8e:	eef0 1a45 	vmov.f32	s3, s10
 8016c92:	eeb0 1a65 	vmov.f32	s2, s11
 8016c96:	eef0 0a46 	vmov.f32	s1, s12
 8016c9a:	eeb0 0a66 	vmov.f32	s0, s13
 8016c9e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016ca2:	f7fb f91d 	bl	8011ee0 <nk_fill_triangle>
 8016ca6:	e031      	b.n	8016d0c <nk_panel_end+0xba8>
 8016ca8:	00000000 	.word	0x00000000
 8016cac:	08023be4 	.word	0x08023be4
            } else {
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8016cb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8016cb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8016cb8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016cbc:	ed97 6a06 	vldr	s12, [r7, #24]
 8016cc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8016cc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8016cc8:	ee77 5a27 	vadd.f32	s11, s14, s15
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8016ccc:	ed97 7a06 	vldr	s14, [r7, #24]
 8016cd0:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8016cd4:	ee37 5a27 	vadd.f32	s10, s14, s15
 8016cd8:	edd7 4a05 	vldr	s9, [r7, #20]
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8016cdc:	ed97 7a06 	vldr	s14, [r7, #24]
 8016ce0:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8016ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016cea:	6859      	ldr	r1, [r3, #4]
 8016cec:	eef0 2a67 	vmov.f32	s5, s15
 8016cf0:	eeb0 2a64 	vmov.f32	s4, s9
 8016cf4:	eef0 1a45 	vmov.f32	s3, s10
 8016cf8:	eeb0 1a65 	vmov.f32	s2, s11
 8016cfc:	eef0 0a46 	vmov.f32	s1, s12
 8016d00:	eeb0 0a66 	vmov.f32	s0, s13
 8016d04:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016d08:	f7fb f8ea 	bl	8011ee0 <nk_fill_triangle>
            }
        }}

        /* do window scaling */
        if (!(window->flags & NK_WINDOW_ROM)) {
 8016d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	f040 80ff 	bne.w	8016f1a <nk_panel_end+0xdb6>
            struct nk_vec2 window_size = style->window.min_size;
 8016d1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d24:	461a      	mov	r2, r3
 8016d26:	f107 030c 	add.w	r3, r7, #12
 8016d2a:	f602 02e4 	addw	r2, r2, #2276	; 0x8e4
 8016d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d32:	e883 0003 	stmia.w	r3, {r0, r1}
            int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8016d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016d3a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8016d3e:	677b      	str	r3, [r7, #116]	; 0x74
            int left_mouse_click_in_scaler = nk_input_has_mouse_click_down_in_rect(in,
 8016d40:	ed97 6a05 	vldr	s12, [r7, #20]
 8016d44:	edd7 6a06 	vldr	s13, [r7, #24]
 8016d48:	ed97 7a07 	vldr	s14, [r7, #28]
 8016d4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8016d50:	2201      	movs	r2, #1
 8016d52:	eeb0 0a46 	vmov.f32	s0, s12
 8016d56:	eef0 0a66 	vmov.f32	s1, s13
 8016d5a:	eeb0 1a47 	vmov.f32	s2, s14
 8016d5e:	eef0 1a67 	vmov.f32	s3, s15
 8016d62:	2100      	movs	r1, #0
 8016d64:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8016d68:	f7fc fad4 	bl	8013314 <nk_input_has_mouse_click_down_in_rect>
 8016d6c:	6738      	str	r0, [r7, #112]	; 0x70
                    NK_BUTTON_LEFT, scaler, nk_true);

            if (left_mouse_down && left_mouse_click_in_scaler) {
 8016d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	f000 80d2 	beq.w	8016f1a <nk_panel_end+0xdb6>
 8016d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	f000 80ce 	beq.w	8016f1a <nk_panel_end+0xdb6>
                float delta_x = in->mouse.delta.x;
 8016d7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016d82:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8016d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8016d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d013      	beq.n	8016dc0 <nk_panel_end+0xc5c>
                    delta_x = -delta_x;
 8016d98:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016d9c:	eef1 7a67 	vneg.f32	s15, s15
 8016da0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
                    window->bounds.x += in->mouse.delta.x;
 8016da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016da8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8016dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016db0:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8016db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016dbc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
                }
                /* dragging in x-direction  */
                if (window->bounds.w + delta_x >= window_size.x) {
 8016dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016dc4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8016dc8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016dcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016dd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8016dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ddc:	db2e      	blt.n	8016e3c <nk_panel_end+0xcd8>
                    if ((delta_x < 0) || (delta_x > 0 && in->mouse.pos.x >= scaler.x)) {
 8016dde:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dea:	d411      	bmi.n	8016e10 <nk_panel_end+0xcac>
 8016dec:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016df0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df8:	dd20      	ble.n	8016e3c <nk_panel_end+0xcd8>
 8016dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016dfe:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8016e02:	edd7 7a05 	vldr	s15, [r7, #20]
 8016e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e0e:	db15      	blt.n	8016e3c <nk_panel_end+0xcd8>
                        window->bounds.w = window->bounds.w + delta_x;
 8016e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e14:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8016e18:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e24:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                        scaler.x += in->mouse.delta.x;
 8016e28:	ed97 7a05 	vldr	s14, [r7, #20]
 8016e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e30:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8016e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e38:	edc7 7a05 	vstr	s15, [r7, #20]
                    }
                }
                /* dragging in y-direction (only possible if static window) */
                if (!(layout->flags & NK_WINDOW_DYNAMIC)) {
 8016e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016e40:	685b      	ldr	r3, [r3, #4]
 8016e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d145      	bne.n	8016ed6 <nk_panel_end+0xd72>
                    if (window_size.y < window->bounds.h + in->mouse.delta.y) {
 8016e4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8016e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e52:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8016e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e5a:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e6a:	d534      	bpl.n	8016ed6 <nk_panel_end+0xd72>
                        if ((in->mouse.delta.y < 0) || (in->mouse.delta.y > 0 && in->mouse.pos.y >= scaler.y)) {
 8016e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e70:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e7c:	d413      	bmi.n	8016ea6 <nk_panel_end+0xd42>
 8016e7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e82:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e8e:	dd22      	ble.n	8016ed6 <nk_panel_end+0xd72>
 8016e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e94:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8016e98:	edd7 7a06 	vldr	s15, [r7, #24]
 8016e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea4:	db17      	blt.n	8016ed6 <nk_panel_end+0xd72>
                            window->bounds.h = window->bounds.h + in->mouse.delta.y;
 8016ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016eaa:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8016eae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016eb2:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016ebe:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                            scaler.y += in->mouse.delta.y;
 8016ec2:	ed97 7a06 	vldr	s14, [r7, #24]
 8016ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016eca:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ed2:	edc7 7a06 	vstr	s15, [r7, #24]
                        }
                    }
                }
                ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;
 8016ee2:	ed97 7a05 	vldr	s14, [r7, #20]
 8016ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8016eea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016eee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ef6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016efa:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;
 8016efe:	ed97 7a06 	vldr	s14, [r7, #24]
 8016f02:	edd7 6a08 	vldr	s13, [r7, #32]
 8016f06:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016f0a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016f16:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            }
        }
    }
    if (!nk_panel_is_sub(layout->type)) {
 8016f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7fe f9b7 	bl	8015294 <nk_panel_is_sub>
 8016f26:	4603      	mov	r3, r0
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d112      	bne.n	8016f52 <nk_panel_end+0xdee>
        /* window is hidden so clear command buffer  */
        if (layout->flags & NK_WINDOW_HIDDEN)
 8016f2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f30:	685b      	ldr	r3, [r3, #4]
 8016f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d006      	beq.n	8016f48 <nk_panel_end+0xde4>
            nk_command_buffer_reset(&window->buffer);
 8016f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f3e:	3364      	adds	r3, #100	; 0x64
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7fa fbd9 	bl	80116f8 <nk_command_buffer_reset>
 8016f46:	e004      	b.n	8016f52 <nk_panel_end+0xdee>
        /* window is visible and not tab */
        else nk_finish(ctx, window);
 8016f48:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016f4c:	6878      	ldr	r0, [r7, #4]
 8016f4e:	f7f9 ff83 	bl	8010e58 <nk_finish>
    }

    /* NK_WINDOW_REMOVE_ROM flag was set so remove NK_WINDOW_ROM */
    if (layout->flags & NK_WINDOW_REMOVE_ROM) {
 8016f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d00f      	beq.n	8016f80 <nk_panel_end+0xe1c>
        layout->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8016f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f6e:	605a      	str	r2, [r3, #4]
        layout->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 8016f70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f74:	685b      	ldr	r3, [r3, #4]
 8016f76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016f7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f7e:	605a      	str	r2, [r3, #4]
    }
    window->flags = layout->flags;
 8016f80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f84:	685a      	ldr	r2, [r3, #4]
 8016f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f8a:	649a      	str	r2, [r3, #72]	; 0x48

    /* property garbage collector */
    if (window->property.active && window->property.old != window->property.seq &&
 8016f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d01b      	beq.n	8016fd0 <nk_panel_end+0xe6c>
 8016f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f9c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8016fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	d011      	beq.n	8016fd0 <nk_panel_end+0xe6c>
        window->property.active == window->property.prev) {
 8016fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fb0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8016fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    if (window->property.active && window->property.old != window->property.seq &&
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d107      	bne.n	8016fd0 <nk_panel_end+0xe6c>
        nk_zero(&window->property, sizeof(window->property));
 8016fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fc4:	3394      	adds	r3, #148	; 0x94
 8016fc6:	2168      	movs	r1, #104	; 0x68
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f005 fb43 	bl	801c654 <nk_zero>
 8016fce:	e014      	b.n	8016ffa <nk_panel_end+0xe96>
    } else {
        window->property.old = window->property.seq;
 8016fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fd4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8016fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fdc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        window->property.prev = window->property.active;
 8016fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fe4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8016fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        window->property.seq = 0;
 8016ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    }
    /* edit garbage collector */
    if (window->edit.active && window->edit.old != window->edit.seq &&
 8016ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016ffe:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8017002:	2b00      	cmp	r3, #0
 8017004:	d01c      	beq.n	8017040 <nk_panel_end+0xedc>
 8017006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801700a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 801700e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017012:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8017016:	429a      	cmp	r2, r3
 8017018:	d012      	beq.n	8017040 <nk_panel_end+0xedc>
       window->edit.active == window->edit.prev) {
 801701a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801701e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8017022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017026:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    if (window->edit.active && window->edit.old != window->edit.seq &&
 801702a:	429a      	cmp	r2, r3
 801702c:	d108      	bne.n	8017040 <nk_panel_end+0xedc>
        nk_zero(&window->edit, sizeof(window->edit));
 801702e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017032:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8017036:	212c      	movs	r1, #44	; 0x2c
 8017038:	4618      	mov	r0, r3
 801703a:	f005 fb0b 	bl	801c654 <nk_zero>
 801703e:	e014      	b.n	801706a <nk_panel_end+0xf06>
    } else {
        window->edit.old = window->edit.seq;
 8017040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017044:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8017048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801704c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        window->edit.prev = window->edit.active;
 8017050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017054:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8017058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801705c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
        window->edit.seq = 0;
 8017060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017064:	2200      	movs	r2, #0
 8017066:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    }
    /* contextual garbage collector */
    if (window->popup.active_con && window->popup.con_old != window->popup.con_count) {
 801706a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801706e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8017072:	2b00      	cmp	r3, #0
 8017074:	d019      	beq.n	80170aa <nk_panel_end+0xf46>
 8017076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801707a:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 801707e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017082:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8017086:	429a      	cmp	r2, r3
 8017088:	d00f      	beq.n	80170aa <nk_panel_end+0xf46>
        window->popup.con_count = 0;
 801708a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801708e:	2200      	movs	r2, #0
 8017090:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        window->popup.con_old = 0;
 8017094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017098:	2200      	movs	r2, #0
 801709a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.active_con = 0;
 801709e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170a2:	2200      	movs	r2, #0
 80170a4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 80170a8:	e00c      	b.n	80170c4 <nk_panel_end+0xf60>
    } else {
        window->popup.con_old = window->popup.con_count;
 80170aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170ae:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80170b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.con_count = 0;
 80170ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170be:	2200      	movs	r2, #0
 80170c0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    }
    window->popup.combo_count = 0;
 80170c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170c8:	2200      	movs	r2, #0
 80170ca:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    /* helper to make sure you have a 'nk_tree_push' for every 'nk_tree_pop' */
    NK_ASSERT(!layout->row.tree_depth);
 80170ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80170d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d007      	beq.n	80170ea <nk_panel_end+0xf86>
 80170da:	4b05      	ldr	r3, [pc, #20]	; (80170f0 <nk_panel_end+0xf8c>)
 80170dc:	4a05      	ldr	r2, [pc, #20]	; (80170f4 <nk_panel_end+0xf90>)
 80170de:	f240 216b 	movw	r1, #619	; 0x26b
 80170e2:	4805      	ldr	r0, [pc, #20]	; (80170f8 <nk_panel_end+0xf94>)
 80170e4:	f006 ffae 	bl	801e044 <__assert_func>
        return;
 80170e8:	bf00      	nop
}
 80170ea:	37c4      	adds	r7, #196	; 0xc4
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd90      	pop	{r4, r7, pc}
 80170f0:	0802206c 	.word	0x0802206c
 80170f4:	08023bf8 	.word	0x08023bf8
 80170f8:	08022028 	.word	0x08022028

080170fc <nk_pool_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,
    unsigned int capacity)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b084      	sub	sp, #16
 8017100:	af00      	add	r7, sp, #0
 8017102:	60f8      	str	r0, [r7, #12]
 8017104:	60b9      	str	r1, [r7, #8]
 8017106:	607a      	str	r2, [r7, #4]
    NK_ASSERT(capacity >= 1);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d105      	bne.n	801711a <nk_pool_init+0x1e>
 801710e:	4b0e      	ldr	r3, [pc, #56]	; (8017148 <nk_pool_init+0x4c>)
 8017110:	4a0e      	ldr	r2, [pc, #56]	; (801714c <nk_pool_init+0x50>)
 8017112:	210d      	movs	r1, #13
 8017114:	480e      	ldr	r0, [pc, #56]	; (8017150 <nk_pool_init+0x54>)
 8017116:	f006 ff95 	bl	801e044 <__assert_func>
    nk_zero(pool, sizeof(*pool));
 801711a:	2128      	movs	r1, #40	; 0x28
 801711c:	68f8      	ldr	r0, [r7, #12]
 801711e:	f005 fa99 	bl	801c654 <nk_zero>
    pool->alloc = *alloc;
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	68ba      	ldr	r2, [r7, #8]
 8017126:	ca07      	ldmia	r2, {r0, r1, r2}
 8017128:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    pool->capacity = capacity;
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	687a      	ldr	r2, [r7, #4]
 8017130:	61da      	str	r2, [r3, #28]
    pool->type = NK_BUFFER_DYNAMIC;
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	2201      	movs	r2, #1
 8017136:	731a      	strb	r2, [r3, #12]
    pool->pages = 0;
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	2200      	movs	r2, #0
 801713c:	615a      	str	r2, [r3, #20]
}
 801713e:	bf00      	nop
 8017140:	3710      	adds	r7, #16
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	08022084 	.word	0x08022084
 801714c:	08023c08 	.word	0x08023c08
 8017150:	08022094 	.word	0x08022094

08017154 <nk_pool_init_fixed>:
        iter = next;
    }
}
NK_LIB void
nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b084      	sub	sp, #16
 8017158:	af00      	add	r7, sp, #0
 801715a:	60f8      	str	r0, [r7, #12]
 801715c:	60b9      	str	r1, [r7, #8]
 801715e:	607a      	str	r2, [r7, #4]
    nk_zero(pool, sizeof(*pool));
 8017160:	2128      	movs	r1, #40	; 0x28
 8017162:	68f8      	ldr	r0, [r7, #12]
 8017164:	f005 fa76 	bl	801c654 <nk_zero>
    NK_ASSERT(size >= sizeof(struct nk_page));
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 801716e:	d205      	bcs.n	801717c <nk_pool_init_fixed+0x28>
 8017170:	4b10      	ldr	r3, [pc, #64]	; (80171b4 <nk_pool_init_fixed+0x60>)
 8017172:	4a11      	ldr	r2, [pc, #68]	; (80171b8 <nk_pool_init_fixed+0x64>)
 8017174:	2125      	movs	r1, #37	; 0x25
 8017176:	4811      	ldr	r0, [pc, #68]	; (80171bc <nk_pool_init_fixed+0x68>)
 8017178:	f006 ff64 	bl	801e044 <__assert_func>
    if (size < sizeof(struct nk_page)) return;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8017182:	d313      	bcc.n	80171ac <nk_pool_init_fixed+0x58>
    /* first nk_page_element is embedded in nk_page, additional elements follow in adjacent space */
    pool->capacity = (unsigned)(1 + (size - sizeof(struct nk_page)) / sizeof(struct nk_page_element));
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801718a:	091b      	lsrs	r3, r3, #4
 801718c:	4a0c      	ldr	r2, [pc, #48]	; (80171c0 <nk_pool_init_fixed+0x6c>)
 801718e:	fba2 2303 	umull	r2, r3, r2, r3
 8017192:	1c5a      	adds	r2, r3, #1
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	61da      	str	r2, [r3, #28]
    pool->pages = (struct nk_page*)memory;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	68ba      	ldr	r2, [r7, #8]
 801719c:	615a      	str	r2, [r3, #20]
    pool->type = NK_BUFFER_FIXED;
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	2200      	movs	r2, #0
 80171a2:	731a      	strb	r2, [r3, #12]
    pool->size = size;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	621a      	str	r2, [r3, #32]
 80171aa:	e000      	b.n	80171ae <nk_pool_init_fixed+0x5a>
    if (size < sizeof(struct nk_page)) return;
 80171ac:	bf00      	nop
}
 80171ae:	3710      	adds	r7, #16
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	080220b0 	.word	0x080220b0
 80171b8:	08023c18 	.word	0x08023c18
 80171bc:	08022094 	.word	0x08022094
 80171c0:	097b425f 	.word	0x097b425f

080171c4 <nk_pool_alloc>:
NK_LIB struct nk_page_element*
nk_pool_alloc(struct nk_pool *pool)
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b084      	sub	sp, #16
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
    if (!pool->pages || pool->pages->size >= pool->capacity) {
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	695b      	ldr	r3, [r3, #20]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d006      	beq.n	80171e2 <nk_pool_alloc+0x1e>
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	695b      	ldr	r3, [r3, #20]
 80171d8:	681a      	ldr	r2, [r3, #0]
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	69db      	ldr	r3, [r3, #28]
 80171de:	429a      	cmp	r2, r3
 80171e0:	d342      	bcc.n	8017268 <nk_pool_alloc+0xa4>
        /* allocate new page */
        struct nk_page *page;
        if (pool->type == NK_BUFFER_FIXED) {
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	7b1b      	ldrb	r3, [r3, #12]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d11e      	bne.n	8017228 <nk_pool_alloc+0x64>
            NK_ASSERT(pool->pages);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	695b      	ldr	r3, [r3, #20]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d105      	bne.n	80171fe <nk_pool_alloc+0x3a>
 80171f2:	4b26      	ldr	r3, [pc, #152]	; (801728c <nk_pool_alloc+0xc8>)
 80171f4:	4a26      	ldr	r2, [pc, #152]	; (8017290 <nk_pool_alloc+0xcc>)
 80171f6:	2134      	movs	r1, #52	; 0x34
 80171f8:	4826      	ldr	r0, [pc, #152]	; (8017294 <nk_pool_alloc+0xd0>)
 80171fa:	f006 ff23 	bl	801e044 <__assert_func>
            if (!pool->pages) return 0;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	695b      	ldr	r3, [r3, #20]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d101      	bne.n	801720a <nk_pool_alloc+0x46>
 8017206:	2300      	movs	r3, #0
 8017208:	e03b      	b.n	8017282 <nk_pool_alloc+0xbe>
            NK_ASSERT(pool->pages->size < pool->capacity);
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	695b      	ldr	r3, [r3, #20]
 801720e:	681a      	ldr	r2, [r3, #0]
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	69db      	ldr	r3, [r3, #28]
 8017214:	429a      	cmp	r2, r3
 8017216:	d305      	bcc.n	8017224 <nk_pool_alloc+0x60>
 8017218:	4b1f      	ldr	r3, [pc, #124]	; (8017298 <nk_pool_alloc+0xd4>)
 801721a:	4a1d      	ldr	r2, [pc, #116]	; (8017290 <nk_pool_alloc+0xcc>)
 801721c:	2136      	movs	r1, #54	; 0x36
 801721e:	481d      	ldr	r0, [pc, #116]	; (8017294 <nk_pool_alloc+0xd0>)
 8017220:	f006 ff10 	bl	801e044 <__assert_func>
            return 0;
 8017224:	2300      	movs	r3, #0
 8017226:	e02c      	b.n	8017282 <nk_pool_alloc+0xbe>
        } else {
            nk_size size = sizeof(struct nk_page);
 8017228:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 801722c:	60fb      	str	r3, [r7, #12]
            size += (pool->capacity - 1) * sizeof(struct nk_page_element);
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	69db      	ldr	r3, [r3, #28]
 8017232:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8017236:	fb03 f202 	mul.w	r2, r3, r2
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	4413      	add	r3, r2
 801723e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8017242:	60fb      	str	r3, [r7, #12]
            page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	68fa      	ldr	r2, [r7, #12]
 801724c:	2100      	movs	r1, #0
 801724e:	6800      	ldr	r0, [r0, #0]
 8017250:	4798      	blx	r3
 8017252:	60b8      	str	r0, [r7, #8]
            page->next = pool->pages;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	695a      	ldr	r2, [r3, #20]
 8017258:	68bb      	ldr	r3, [r7, #8]
 801725a:	605a      	str	r2, [r3, #4]
            pool->pages = page;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	68ba      	ldr	r2, [r7, #8]
 8017260:	615a      	str	r2, [r3, #20]
            page->size = 0;
 8017262:	68bb      	ldr	r3, [r7, #8]
 8017264:	2200      	movs	r2, #0
 8017266:	601a      	str	r2, [r3, #0]
        }
    } return &pool->pages->win[pool->pages->size++];
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	6959      	ldr	r1, [r3, #20]
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	695a      	ldr	r2, [r3, #20]
 8017270:	6813      	ldr	r3, [r2, #0]
 8017272:	1c58      	adds	r0, r3, #1
 8017274:	6010      	str	r0, [r2, #0]
 8017276:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 801727a:	fb02 f303 	mul.w	r3, r2, r3
 801727e:	3308      	adds	r3, #8
 8017280:	440b      	add	r3, r1
}
 8017282:	4618      	mov	r0, r3
 8017284:	3710      	adds	r7, #16
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}
 801728a:	bf00      	nop
 801728c:	080220d0 	.word	0x080220d0
 8017290:	08023c2c 	.word	0x08023c2c
 8017294:	08022094 	.word	0x08022094
 8017298:	080220dc 	.word	0x080220dc

0801729c <nk_popup_begin>:
 *
 * ===============================================================*/
NK_API nk_bool
nk_popup_begin(struct nk_context *ctx, enum nk_popup_type type,
    const char *title, nk_flags flags, struct nk_rect rect)
{
 801729c:	b5b0      	push	{r4, r5, r7, lr}
 801729e:	b090      	sub	sp, #64	; 0x40
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	61f8      	str	r0, [r7, #28]
 80172a4:	617a      	str	r2, [r7, #20]
 80172a6:	613b      	str	r3, [r7, #16]
 80172a8:	eeb0 6a40 	vmov.f32	s12, s0
 80172ac:	eef0 6a60 	vmov.f32	s13, s1
 80172b0:	eeb0 7a41 	vmov.f32	s14, s2
 80172b4:	eef0 7a61 	vmov.f32	s15, s3
 80172b8:	460b      	mov	r3, r1
 80172ba:	76fb      	strb	r3, [r7, #27]
 80172bc:	ed87 6a00 	vstr	s12, [r7]
 80172c0:	edc7 6a01 	vstr	s13, [r7, #4]
 80172c4:	ed87 7a02 	vstr	s14, [r7, #8]
 80172c8:	edc7 7a03 	vstr	s15, [r7, #12]

    int title_len;
    nk_hash title_hash;
    nk_size allocated;

    NK_ASSERT(ctx);
 80172cc:	69fb      	ldr	r3, [r7, #28]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d105      	bne.n	80172de <nk_popup_begin+0x42>
 80172d2:	4ba8      	ldr	r3, [pc, #672]	; (8017574 <nk_popup_begin+0x2d8>)
 80172d4:	4aa8      	ldr	r2, [pc, #672]	; (8017578 <nk_popup_begin+0x2dc>)
 80172d6:	2115      	movs	r1, #21
 80172d8:	48a8      	ldr	r0, [pc, #672]	; (801757c <nk_popup_begin+0x2e0>)
 80172da:	f006 feb3 	bl	801e044 <__assert_func>
    NK_ASSERT(title);
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d105      	bne.n	80172f0 <nk_popup_begin+0x54>
 80172e4:	4ba6      	ldr	r3, [pc, #664]	; (8017580 <nk_popup_begin+0x2e4>)
 80172e6:	4aa4      	ldr	r2, [pc, #656]	; (8017578 <nk_popup_begin+0x2dc>)
 80172e8:	2116      	movs	r1, #22
 80172ea:	48a4      	ldr	r0, [pc, #656]	; (801757c <nk_popup_begin+0x2e0>)
 80172ec:	f006 feaa 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 80172f0:	69fb      	ldr	r3, [r7, #28]
 80172f2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80172f6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d105      	bne.n	801730a <nk_popup_begin+0x6e>
 80172fe:	4ba1      	ldr	r3, [pc, #644]	; (8017584 <nk_popup_begin+0x2e8>)
 8017300:	4a9d      	ldr	r2, [pc, #628]	; (8017578 <nk_popup_begin+0x2dc>)
 8017302:	2117      	movs	r1, #23
 8017304:	489d      	ldr	r0, [pc, #628]	; (801757c <nk_popup_begin+0x2e0>)
 8017306:	f006 fe9d 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801730a:	69fb      	ldr	r3, [r7, #28]
 801730c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017310:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017318:	2b00      	cmp	r3, #0
 801731a:	d105      	bne.n	8017328 <nk_popup_begin+0x8c>
 801731c:	4b9a      	ldr	r3, [pc, #616]	; (8017588 <nk_popup_begin+0x2ec>)
 801731e:	4a96      	ldr	r2, [pc, #600]	; (8017578 <nk_popup_begin+0x2dc>)
 8017320:	2118      	movs	r1, #24
 8017322:	4896      	ldr	r0, [pc, #600]	; (801757c <nk_popup_begin+0x2e0>)
 8017324:	f006 fe8e 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8017328:	69fb      	ldr	r3, [r7, #28]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d00f      	beq.n	801734e <nk_popup_begin+0xb2>
 801732e:	69fb      	ldr	r3, [r7, #28]
 8017330:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017334:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017338:	2b00      	cmp	r3, #0
 801733a:	d008      	beq.n	801734e <nk_popup_begin+0xb2>
 801733c:	69fb      	ldr	r3, [r7, #28]
 801733e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017342:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801734a:	2b00      	cmp	r3, #0
 801734c:	d101      	bne.n	8017352 <nk_popup_begin+0xb6>
        return 0;
 801734e:	2300      	movs	r3, #0
 8017350:	e14f      	b.n	80175f2 <nk_popup_begin+0x356>

    win = ctx->current;
 8017352:	69fb      	ldr	r3, [r7, #28]
 8017354:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017358:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801735c:	633b      	str	r3, [r7, #48]	; 0x30
    panel = win->layout;
 801735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017364:	62fb      	str	r3, [r7, #44]	; 0x2c
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP) && "popups are not allowed to have popups");
 8017366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 801736e:	2b00      	cmp	r3, #0
 8017370:	d005      	beq.n	801737e <nk_popup_begin+0xe2>
 8017372:	4b86      	ldr	r3, [pc, #536]	; (801758c <nk_popup_begin+0x2f0>)
 8017374:	4a80      	ldr	r2, [pc, #512]	; (8017578 <nk_popup_begin+0x2dc>)
 8017376:	211e      	movs	r1, #30
 8017378:	4880      	ldr	r0, [pc, #512]	; (801757c <nk_popup_begin+0x2e0>)
 801737a:	f006 fe63 	bl	801e044 <__assert_func>
    (void)panel;
    title_len = (int)nk_strlen(title);
 801737e:	6978      	ldr	r0, [r7, #20]
 8017380:	f005 f986 	bl	801c690 <nk_strlen>
 8017384:	62b8      	str	r0, [r7, #40]	; 0x28
    title_hash = nk_murmur_hash(title, (int)title_len, NK_PANEL_POPUP);
 8017386:	2204      	movs	r2, #4
 8017388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801738a:	6978      	ldr	r0, [r7, #20]
 801738c:	f005 fa00 	bl	801c790 <nk_murmur_hash>
 8017390:	6278      	str	r0, [r7, #36]	; 0x24

    popup = win->popup.win;
 8017392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017394:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8017398:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!popup) {
 801739a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801739c:	2b00      	cmp	r3, #0
 801739e:	d113      	bne.n	80173c8 <nk_popup_begin+0x12c>
        popup = (struct nk_window*)nk_create_window(ctx);
 80173a0:	69f8      	ldr	r0, [r7, #28]
 80173a2:	f005 fd6f 	bl	801ce84 <nk_create_window>
 80173a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        popup->parent = win;
 80173a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 80173b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80173b4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.active = 0;
 80173b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ba:	2200      	movs	r2, #0
 80173bc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        win->popup.type = NK_PANEL_POPUP;
 80173c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c2:	2204      	movs	r2, #4
 80173c4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    /* make sure we have correct popup */
    if (win->popup.name != title_hash) {
 80173c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ca:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80173ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d018      	beq.n	8017406 <nk_popup_begin+0x16a>
        if (!win->popup.active) {
 80173d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d111      	bne.n	8017402 <nk_popup_begin+0x166>
            nk_zero(popup, sizeof(*popup));
 80173de:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80173e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80173e4:	f005 f936 	bl	801c654 <nk_zero>
            win->popup.name = title_hash;
 80173e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            win->popup.active = 1;
 80173f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173f2:	2201      	movs	r2, #1
 80173f4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
            win->popup.type = NK_PANEL_POPUP;
 80173f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173fa:	2204      	movs	r2, #4
 80173fc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8017400:	e001      	b.n	8017406 <nk_popup_begin+0x16a>
        } else return 0;
 8017402:	2300      	movs	r3, #0
 8017404:	e0f5      	b.n	80175f2 <nk_popup_begin+0x356>
    }

    /* popup position is local to window */
    ctx->current = popup;
 8017406:	69fb      	ldr	r3, [r7, #28]
 8017408:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801740c:	461a      	mov	r2, r3
 801740e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017410:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    rect.x += win->layout->clip.x;
 8017414:	ed97 7a00 	vldr	s14, [r7]
 8017418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801741a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801741e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8017422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017426:	edc7 7a00 	vstr	s15, [r7]
    rect.y += win->layout->clip.y;
 801742a:	ed97 7a01 	vldr	s14, [r7, #4]
 801742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017434:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8017438:	ee77 7a27 	vadd.f32	s15, s14, s15
 801743c:	edc7 7a01 	vstr	s15, [r7, #4]

    /* setup popup data */
    popup->parent = win;
 8017440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017444:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->bounds = rect;
 8017448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801744a:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801744e:	463b      	mov	r3, r7
 8017450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->seq = ctx->seq;
 8017456:	69fb      	ldr	r3, [r7, #28]
 8017458:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801745c:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8017460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017462:	601a      	str	r2, [r3, #0]
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 8017464:	69f8      	ldr	r0, [r7, #28]
 8017466:	f7fd fccd 	bl	8014e04 <nk_create_panel>
 801746a:	4602      	mov	r2, r0
 801746c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801746e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 8017472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017474:	693a      	ldr	r2, [r7, #16]
 8017476:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 8017478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801747a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801747c:	f043 0201 	orr.w	r2, r3, #1
 8017480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017482:	649a      	str	r2, [r3, #72]	; 0x48
    if (type == NK_POPUP_DYNAMIC)
 8017484:	7efb      	ldrb	r3, [r7, #27]
 8017486:	2b01      	cmp	r3, #1
 8017488:	d105      	bne.n	8017496 <nk_popup_begin+0x1fa>
        popup->flags |= NK_WINDOW_DYNAMIC;
 801748a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801748c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801748e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8017492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017494:	649a      	str	r2, [r3, #72]	; 0x48

    popup->buffer = win->buffer;
 8017496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801749a:	f102 0464 	add.w	r4, r2, #100	; 0x64
 801749e:	f103 0564 	add.w	r5, r3, #100	; 0x64
 80174a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80174ae:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_start_popup(ctx, win);
 80174b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80174b4:	69f8      	ldr	r0, [r7, #28]
 80174b6:	f7f9 fc21 	bl	8010cfc <nk_start_popup>
    allocated = ctx->memory.allocated;
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80174c0:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 80174c4:	623b      	str	r3, [r7, #32]
    nk_push_scissor(&popup->buffer, nk_null_rect);
 80174c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174c8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80174cc:	4b30      	ldr	r3, [pc, #192]	; (8017590 <nk_popup_begin+0x2f4>)
 80174ce:	ed93 6a00 	vldr	s12, [r3]
 80174d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80174d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80174da:	edd3 7a03 	vldr	s15, [r3, #12]
 80174de:	eeb0 0a46 	vmov.f32	s0, s12
 80174e2:	eef0 0a66 	vmov.f32	s1, s13
 80174e6:	eeb0 1a47 	vmov.f32	s2, s14
 80174ea:	eef0 1a67 	vmov.f32	s3, s15
 80174ee:	4610      	mov	r0, r2
 80174f0:	f7fa f996 	bl	8011820 <nk_push_scissor>

    if (nk_panel_begin(ctx, title, NK_PANEL_POPUP)) {
 80174f4:	2204      	movs	r2, #4
 80174f6:	6979      	ldr	r1, [r7, #20]
 80174f8:	69f8      	ldr	r0, [r7, #28]
 80174fa:	f7fd fef1 	bl	80152e0 <nk_panel_begin>
 80174fe:	4603      	mov	r3, r0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d031      	beq.n	8017568 <nk_popup_begin+0x2cc>
        /* popup is running therefore invalidate parent panels */
        struct nk_panel *root;
        root = win->layout;
 8017504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801750a:	63bb      	str	r3, [r7, #56]	; 0x38
        while (root) {
 801750c:	e00f      	b.n	801752e <nk_popup_begin+0x292>
            root->flags |= NK_WINDOW_ROM;
 801750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017510:	685b      	ldr	r3, [r3, #4]
 8017512:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8017516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017518:	605a      	str	r2, [r3, #4]
            root->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 801751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8017522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017524:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8017526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017528:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 801752c:	63bb      	str	r3, [r7, #56]	; 0x38
        while (root) {
 801752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017530:	2b00      	cmp	r3, #0
 8017532:	d1ec      	bne.n	801750e <nk_popup_begin+0x272>
        }
        win->popup.active = 1;
 8017534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017536:	2201      	movs	r2, #1
 8017538:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        popup->layout->offset_x = &popup->scrollbar.x;
 801753c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801753e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017544:	325c      	adds	r2, #92	; 0x5c
 8017546:	619a      	str	r2, [r3, #24]
        popup->layout->offset_y = &popup->scrollbar.y;
 8017548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801754a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801754e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017550:	3260      	adds	r2, #96	; 0x60
 8017552:	61da      	str	r2, [r3, #28]
        popup->layout->parent = win->layout;
 8017554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801755a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801755c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8017560:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        return 1;
 8017564:	2301      	movs	r3, #1
 8017566:	e044      	b.n	80175f2 <nk_popup_begin+0x356>
    } else {
        /* popup was closed/is invalid so cleanup */
        struct nk_panel *root;
        root = win->layout;
 8017568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801756a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801756e:	637b      	str	r3, [r7, #52]	; 0x34
        while (root) {
 8017570:	e01a      	b.n	80175a8 <nk_popup_begin+0x30c>
 8017572:	bf00      	nop
 8017574:	08022100 	.word	0x08022100
 8017578:	08023c4c 	.word	0x08023c4c
 801757c:	08022104 	.word	0x08022104
 8017580:	08022120 	.word	0x08022120
 8017584:	08022128 	.word	0x08022128
 8017588:	08022138 	.word	0x08022138
 801758c:	08022150 	.word	0x08022150
 8017590:	08023c3c 	.word	0x08023c3c
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8017594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017596:	685b      	ldr	r3, [r3, #4]
 8017598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801759e:	605a      	str	r2, [r3, #4]
            root = root->parent;
 80175a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175a2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80175a6:	637b      	str	r3, [r7, #52]	; 0x34
        while (root) {
 80175a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d1f2      	bne.n	8017594 <nk_popup_begin+0x2f8>
        }
        win->popup.buf.active = 0;
 80175ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b0:	2200      	movs	r2, #0
 80175b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        win->popup.active = 0;
 80175b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b8:	2200      	movs	r2, #0
 80175ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        ctx->memory.allocated = allocated;
 80175be:	69fb      	ldr	r3, [r7, #28]
 80175c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175c4:	461a      	mov	r2, r3
 80175c6:	6a3b      	ldr	r3, [r7, #32]
 80175c8:	f8c2 3ab8 	str.w	r3, [r2, #2744]	; 0xab8
        ctx->current = win;
 80175cc:	69fb      	ldr	r3, [r7, #28]
 80175ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175d2:	461a      	mov	r2, r3
 80175d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175d6:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        nk_free_panel(ctx, popup->layout);
 80175da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175e0:	4619      	mov	r1, r3
 80175e2:	69f8      	ldr	r0, [r7, #28]
 80175e4:	f7fd fc25 	bl	8014e32 <nk_free_panel>
        popup->layout = 0;
 80175e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175ea:	2200      	movs	r2, #0
 80175ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 80175f0:	2300      	movs	r3, #0
    }
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	3740      	adds	r7, #64	; 0x40
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bdb0      	pop	{r4, r5, r7, pc}
 80175fa:	bf00      	nop

080175fc <nk_nonblock_begin>:
NK_LIB nk_bool
nk_nonblock_begin(struct nk_context *ctx,
    nk_flags flags, struct nk_rect body, struct nk_rect header,
    enum nk_panel_type panel_type)
{
 80175fc:	b5b0      	push	{r4, r5, r7, lr}
 80175fe:	b096      	sub	sp, #88	; 0x58
 8017600:	af00      	add	r7, sp, #0
 8017602:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017604:	62b9      	str	r1, [r7, #40]	; 0x28
 8017606:	eeb0 4a40 	vmov.f32	s8, s0
 801760a:	eef0 4a60 	vmov.f32	s9, s1
 801760e:	eeb0 5a41 	vmov.f32	s10, s2
 8017612:	eef0 5a61 	vmov.f32	s11, s3
 8017616:	eeb0 6a42 	vmov.f32	s12, s4
 801761a:	eef0 6a62 	vmov.f32	s13, s5
 801761e:	eeb0 7a43 	vmov.f32	s14, s6
 8017622:	eef0 7a63 	vmov.f32	s15, s7
 8017626:	4613      	mov	r3, r2
 8017628:	ed87 4a06 	vstr	s8, [r7, #24]
 801762c:	edc7 4a07 	vstr	s9, [r7, #28]
 8017630:	ed87 5a08 	vstr	s10, [r7, #32]
 8017634:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8017638:	ed87 6a02 	vstr	s12, [r7, #8]
 801763c:	edc7 6a03 	vstr	s13, [r7, #12]
 8017640:	ed87 7a04 	vstr	s14, [r7, #16]
 8017644:	edc7 7a05 	vstr	s15, [r7, #20]
 8017648:	71fb      	strb	r3, [r7, #7]
    struct nk_window *popup;
    struct nk_window *win;
    struct nk_panel *panel;
    int is_active = nk_true;
 801764a:	2301      	movs	r3, #1
 801764c:	653b      	str	r3, [r7, #80]	; 0x50

    NK_ASSERT(ctx);
 801764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017650:	2b00      	cmp	r3, #0
 8017652:	d105      	bne.n	8017660 <nk_nonblock_begin+0x64>
 8017654:	4baf      	ldr	r3, [pc, #700]	; (8017914 <nk_nonblock_begin+0x318>)
 8017656:	4ab0      	ldr	r2, [pc, #704]	; (8017918 <nk_nonblock_begin+0x31c>)
 8017658:	2173      	movs	r1, #115	; 0x73
 801765a:	48b0      	ldr	r0, [pc, #704]	; (801791c <nk_nonblock_begin+0x320>)
 801765c:	f006 fcf2 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8017660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017662:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017666:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801766a:	2b00      	cmp	r3, #0
 801766c:	d105      	bne.n	801767a <nk_nonblock_begin+0x7e>
 801766e:	4bac      	ldr	r3, [pc, #688]	; (8017920 <nk_nonblock_begin+0x324>)
 8017670:	4aa9      	ldr	r2, [pc, #676]	; (8017918 <nk_nonblock_begin+0x31c>)
 8017672:	2174      	movs	r1, #116	; 0x74
 8017674:	48a9      	ldr	r0, [pc, #676]	; (801791c <nk_nonblock_begin+0x320>)
 8017676:	f006 fce5 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801767c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017680:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017688:	2b00      	cmp	r3, #0
 801768a:	d105      	bne.n	8017698 <nk_nonblock_begin+0x9c>
 801768c:	4ba5      	ldr	r3, [pc, #660]	; (8017924 <nk_nonblock_begin+0x328>)
 801768e:	4aa2      	ldr	r2, [pc, #648]	; (8017918 <nk_nonblock_begin+0x31c>)
 8017690:	2175      	movs	r1, #117	; 0x75
 8017692:	48a2      	ldr	r0, [pc, #648]	; (801791c <nk_nonblock_begin+0x320>)
 8017694:	f006 fcd6 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8017698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801769a:	2b00      	cmp	r3, #0
 801769c:	d00f      	beq.n	80176be <nk_nonblock_begin+0xc2>
 801769e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80176a4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d008      	beq.n	80176be <nk_nonblock_begin+0xc2>
 80176ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80176b2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80176b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d101      	bne.n	80176c2 <nk_nonblock_begin+0xc6>
        return 0;
 80176be:	2300      	movs	r3, #0
 80176c0:	e146      	b.n	8017950 <nk_nonblock_begin+0x354>

    /* popups cannot have popups */
    win = ctx->current;
 80176c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80176c8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80176cc:	647b      	str	r3, [r7, #68]	; 0x44
    panel = win->layout;
 80176ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80176d4:	643b      	str	r3, [r7, #64]	; 0x40
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));
 80176d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d005      	beq.n	80176ee <nk_nonblock_begin+0xf2>
 80176e2:	4b91      	ldr	r3, [pc, #580]	; (8017928 <nk_nonblock_begin+0x32c>)
 80176e4:	4a8c      	ldr	r2, [pc, #560]	; (8017918 <nk_nonblock_begin+0x31c>)
 80176e6:	217c      	movs	r1, #124	; 0x7c
 80176e8:	488c      	ldr	r0, [pc, #560]	; (801791c <nk_nonblock_begin+0x320>)
 80176ea:	f006 fcab 	bl	801e044 <__assert_func>
    (void)panel;
    popup = win->popup.win;
 80176ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80176f4:	657b      	str	r3, [r7, #84]	; 0x54
    if (!popup) {
 80176f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d11b      	bne.n	8017734 <nk_nonblock_begin+0x138>
        /* create window for nonblocking popup */
        popup = (struct nk_window*)nk_create_window(ctx);
 80176fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80176fe:	f005 fbc1 	bl	801ce84 <nk_create_window>
 8017702:	6578      	str	r0, [r7, #84]	; 0x54
        popup->parent = win;
 8017704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017708:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 801770c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801770e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017710:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.type = panel_type;
 8017714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017716:	79fa      	ldrb	r2, [r7, #7]
 8017718:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        nk_command_buffer_init(&popup->buffer, &ctx->memory, NK_CLIPPING_ON);
 801771c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801771e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8017722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017724:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8017728:	330c      	adds	r3, #12
 801772a:	2201      	movs	r2, #1
 801772c:	4619      	mov	r1, r3
 801772e:	f7f9 ffa5 	bl	801167c <nk_command_buffer_init>
 8017732:	e03a      	b.n	80177aa <nk_nonblock_begin+0x1ae>
        /* close the popup if user pressed outside or in the header */
        int pressed, in_body, in_header;
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
        pressed = nk_input_is_mouse_released(&ctx->input, NK_BUTTON_LEFT);
#else
        pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 8017734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017736:	2100      	movs	r1, #0
 8017738:	4618      	mov	r0, r3
 801773a:	f7fb feee 	bl	801351a <nk_input_is_mouse_pressed>
 801773e:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
        in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 8017740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017742:	ed97 6a06 	vldr	s12, [r7, #24]
 8017746:	edd7 6a07 	vldr	s13, [r7, #28]
 801774a:	ed97 7a08 	vldr	s14, [r7, #32]
 801774e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017752:	eeb0 0a46 	vmov.f32	s0, s12
 8017756:	eef0 0a66 	vmov.f32	s1, s13
 801775a:	eeb0 1a47 	vmov.f32	s2, s14
 801775e:	eef0 1a67 	vmov.f32	s3, s15
 8017762:	4618      	mov	r0, r3
 8017764:	f7fb fe1d 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 8017768:	63b8      	str	r0, [r7, #56]	; 0x38
        in_header = nk_input_is_mouse_hovering_rect(&ctx->input, header);
 801776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801776c:	ed97 6a02 	vldr	s12, [r7, #8]
 8017770:	edd7 6a03 	vldr	s13, [r7, #12]
 8017774:	ed97 7a04 	vldr	s14, [r7, #16]
 8017778:	edd7 7a05 	vldr	s15, [r7, #20]
 801777c:	eeb0 0a46 	vmov.f32	s0, s12
 8017780:	eef0 0a66 	vmov.f32	s1, s13
 8017784:	eeb0 1a47 	vmov.f32	s2, s14
 8017788:	eef0 1a67 	vmov.f32	s3, s15
 801778c:	4618      	mov	r0, r3
 801778e:	f7fb fe08 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 8017792:	6378      	str	r0, [r7, #52]	; 0x34
        if (pressed && (!in_body || in_header))
 8017794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017796:	2b00      	cmp	r3, #0
 8017798:	d007      	beq.n	80177aa <nk_nonblock_begin+0x1ae>
 801779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801779c:	2b00      	cmp	r3, #0
 801779e:	d002      	beq.n	80177a6 <nk_nonblock_begin+0x1aa>
 80177a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d001      	beq.n	80177aa <nk_nonblock_begin+0x1ae>
            is_active = nk_false;
 80177a6:	2300      	movs	r3, #0
 80177a8:	653b      	str	r3, [r7, #80]	; 0x50
    }
    win->popup.header = header;
 80177aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177ac:	f503 7498 	add.w	r4, r3, #304	; 0x130
 80177b0:	f107 0308 	add.w	r3, r7, #8
 80177b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (!is_active) {
 80177ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d113      	bne.n	80177e8 <nk_nonblock_begin+0x1ec>
        /* remove read only mode from all parent panels */
        struct nk_panel *root = win->layout;
 80177c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80177c6:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 80177c8:	e009      	b.n	80177de <nk_nonblock_begin+0x1e2>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 80177ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177cc:	685b      	ldr	r3, [r3, #4]
 80177ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80177d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177d4:	605a      	str	r2, [r3, #4]
            root = root->parent;
 80177d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177d8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80177dc:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 80177de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d1f2      	bne.n	80177ca <nk_nonblock_begin+0x1ce>
        }
        return is_active;
 80177e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177e6:	e0b3      	b.n	8017950 <nk_nonblock_begin+0x354>
    }
    popup->bounds = body;
 80177e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177ea:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80177ee:	f107 0318 	add.w	r3, r7, #24
 80177f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->parent = win;
 80177f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80177fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 8017800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017802:	f7fd faff 	bl	8014e04 <nk_create_panel>
 8017806:	4602      	mov	r2, r0
 8017808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801780a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 801780e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017812:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 8017814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017818:	f043 0201 	orr.w	r2, r3, #1
 801781c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801781e:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_DYNAMIC;
 8017820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017824:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8017828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801782a:	649a      	str	r2, [r3, #72]	; 0x48
    popup->seq = ctx->seq;
 801782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801782e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017832:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8017836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017838:	601a      	str	r2, [r3, #0]
    win->popup.active = 1;
 801783a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801783c:	2201      	movs	r2, #1
 801783e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NK_ASSERT(popup->layout);
 8017842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017848:	2b00      	cmp	r3, #0
 801784a:	d105      	bne.n	8017858 <nk_nonblock_begin+0x25c>
 801784c:	4b37      	ldr	r3, [pc, #220]	; (801792c <nk_nonblock_begin+0x330>)
 801784e:	4a32      	ldr	r2, [pc, #200]	; (8017918 <nk_nonblock_begin+0x31c>)
 8017850:	21a6      	movs	r1, #166	; 0xa6
 8017852:	4832      	ldr	r0, [pc, #200]	; (801791c <nk_nonblock_begin+0x320>)
 8017854:	f006 fbf6 	bl	801e044 <__assert_func>

    nk_start_popup(ctx, win);
 8017858:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801785a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801785c:	f7f9 fa4e 	bl	8010cfc <nk_start_popup>
    popup->buffer = win->buffer;
 8017860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017864:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8017868:	f103 0564 	add.w	r5, r3, #100	; 0x64
 801786c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801786e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017874:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017878:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_push_scissor(&popup->buffer, nk_null_rect);
 801787c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801787e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8017882:	4b2b      	ldr	r3, [pc, #172]	; (8017930 <nk_nonblock_begin+0x334>)
 8017884:	ed93 6a00 	vldr	s12, [r3]
 8017888:	edd3 6a01 	vldr	s13, [r3, #4]
 801788c:	ed93 7a02 	vldr	s14, [r3, #8]
 8017890:	edd3 7a03 	vldr	s15, [r3, #12]
 8017894:	eeb0 0a46 	vmov.f32	s0, s12
 8017898:	eef0 0a66 	vmov.f32	s1, s13
 801789c:	eeb0 1a47 	vmov.f32	s2, s14
 80178a0:	eef0 1a67 	vmov.f32	s3, s15
 80178a4:	4610      	mov	r0, r2
 80178a6:	f7f9 ffbb 	bl	8011820 <nk_push_scissor>
    ctx->current = popup;
 80178aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80178b0:	461a      	mov	r2, r3
 80178b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178b4:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658

    nk_panel_begin(ctx, 0, panel_type);
 80178b8:	79fb      	ldrb	r3, [r7, #7]
 80178ba:	461a      	mov	r2, r3
 80178bc:	2100      	movs	r1, #0
 80178be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178c0:	f7fd fd0e 	bl	80152e0 <nk_panel_begin>
    win->buffer = popup->buffer;
 80178c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80178c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178c8:	f102 0464 	add.w	r4, r2, #100	; 0x64
 80178cc:	f103 0564 	add.w	r5, r3, #100	; 0x64
 80178d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80178dc:	e884 0003 	stmia.w	r4, {r0, r1}
    popup->layout->parent = win->layout;
 80178e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80178e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80178e8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80178ec:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    popup->layout->offset_x = &popup->scrollbar.x;
 80178f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80178f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80178f8:	325c      	adds	r2, #92	; 0x5c
 80178fa:	619a      	str	r2, [r3, #24]
    popup->layout->offset_y = &popup->scrollbar.y;
 80178fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017902:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017904:	3260      	adds	r2, #96	; 0x60
 8017906:	61da      	str	r2, [r3, #28]

    /* set read only mode to all parent panels */
    {struct nk_panel *root;
    root = win->layout;
 8017908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801790a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801790e:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8017910:	e01a      	b.n	8017948 <nk_nonblock_begin+0x34c>
 8017912:	bf00      	nop
 8017914:	08022100 	.word	0x08022100
 8017918:	08023c5c 	.word	0x08023c5c
 801791c:	08022104 	.word	0x08022104
 8017920:	08022128 	.word	0x08022128
 8017924:	08022138 	.word	0x08022138
 8017928:	080221a0 	.word	0x080221a0
 801792c:	080221c4 	.word	0x080221c4
 8017930:	08023c3c 	.word	0x08023c3c
        root->flags |= NK_WINDOW_ROM;
 8017934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017936:	685b      	ldr	r3, [r3, #4]
 8017938:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801793c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801793e:	605a      	str	r2, [r3, #4]
        root = root->parent;
 8017940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017942:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8017946:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8017948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801794a:	2b00      	cmp	r3, #0
 801794c:	d1f2      	bne.n	8017934 <nk_nonblock_begin+0x338>
    }}
    return is_active;
 801794e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8017950:	4618      	mov	r0, r3
 8017952:	3758      	adds	r7, #88	; 0x58
 8017954:	46bd      	mov	sp, r7
 8017956:	bdb0      	pop	{r4, r5, r7, pc}

08017958 <nk_popup_close>:
NK_API void
nk_popup_close(struct nk_context *ctx)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b084      	sub	sp, #16
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    NK_ASSERT(ctx);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d105      	bne.n	8017972 <nk_popup_close+0x1a>
 8017966:	4b1d      	ldr	r3, [pc, #116]	; (80179dc <nk_popup_close+0x84>)
 8017968:	4a1d      	ldr	r2, [pc, #116]	; (80179e0 <nk_popup_close+0x88>)
 801796a:	21c0      	movs	r1, #192	; 0xc0
 801796c:	481d      	ldr	r0, [pc, #116]	; (80179e4 <nk_popup_close+0x8c>)
 801796e:	f006 fb69 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current) return;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d02c      	beq.n	80179d2 <nk_popup_close+0x7a>
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801797e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017982:	2b00      	cmp	r3, #0
 8017984:	d025      	beq.n	80179d2 <nk_popup_close+0x7a>

    popup = ctx->current;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801798c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017990:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(popup->parent);
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8017998:	2b00      	cmp	r3, #0
 801799a:	d105      	bne.n	80179a8 <nk_popup_close+0x50>
 801799c:	4b12      	ldr	r3, [pc, #72]	; (80179e8 <nk_popup_close+0x90>)
 801799e:	4a10      	ldr	r2, [pc, #64]	; (80179e0 <nk_popup_close+0x88>)
 80179a0:	21c4      	movs	r1, #196	; 0xc4
 80179a2:	4810      	ldr	r0, [pc, #64]	; (80179e4 <nk_popup_close+0x8c>)
 80179a4:	f006 fb4e 	bl	801e044 <__assert_func>
    NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80179ae:	781b      	ldrb	r3, [r3, #0]
 80179b0:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d105      	bne.n	80179c4 <nk_popup_close+0x6c>
 80179b8:	4b0c      	ldr	r3, [pc, #48]	; (80179ec <nk_popup_close+0x94>)
 80179ba:	4a09      	ldr	r2, [pc, #36]	; (80179e0 <nk_popup_close+0x88>)
 80179bc:	21c5      	movs	r1, #197	; 0xc5
 80179be:	4809      	ldr	r0, [pc, #36]	; (80179e4 <nk_popup_close+0x8c>)
 80179c0:	f006 fb40 	bl	801e044 <__assert_func>
    popup->flags |= NK_WINDOW_HIDDEN;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80179c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	649a      	str	r2, [r3, #72]	; 0x48
 80179d0:	e000      	b.n	80179d4 <nk_popup_close+0x7c>
    if (!ctx || !ctx->current) return;
 80179d2:	bf00      	nop
}
 80179d4:	3710      	adds	r7, #16
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	08022100 	.word	0x08022100
 80179e0:	08023c70 	.word	0x08023c70
 80179e4:	08022104 	.word	0x08022104
 80179e8:	080221d4 	.word	0x080221d4
 80179ec:	080221e4 	.word	0x080221e4

080179f0 <nk_popup_end>:
NK_API void
nk_popup_end(struct nk_context *ctx)
{
 80179f0:	b5b0      	push	{r4, r5, r7, lr}
 80179f2:	b086      	sub	sp, #24
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_window *popup;

    NK_ASSERT(ctx);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d105      	bne.n	8017a0a <nk_popup_end+0x1a>
 80179fe:	4b5a      	ldr	r3, [pc, #360]	; (8017b68 <nk_popup_end+0x178>)
 8017a00:	4a5a      	ldr	r2, [pc, #360]	; (8017b6c <nk_popup_end+0x17c>)
 8017a02:	21ce      	movs	r1, #206	; 0xce
 8017a04:	485a      	ldr	r0, [pc, #360]	; (8017b70 <nk_popup_end+0x180>)
 8017a06:	f006 fb1d 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a10:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d105      	bne.n	8017a24 <nk_popup_end+0x34>
 8017a18:	4b56      	ldr	r3, [pc, #344]	; (8017b74 <nk_popup_end+0x184>)
 8017a1a:	4a54      	ldr	r2, [pc, #336]	; (8017b6c <nk_popup_end+0x17c>)
 8017a1c:	21cf      	movs	r1, #207	; 0xcf
 8017a1e:	4854      	ldr	r0, [pc, #336]	; (8017b70 <nk_popup_end+0x180>)
 8017a20:	f006 fb10 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a2a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d105      	bne.n	8017a42 <nk_popup_end+0x52>
 8017a36:	4b50      	ldr	r3, [pc, #320]	; (8017b78 <nk_popup_end+0x188>)
 8017a38:	4a4c      	ldr	r2, [pc, #304]	; (8017b6c <nk_popup_end+0x17c>)
 8017a3a:	21d0      	movs	r1, #208	; 0xd0
 8017a3c:	484c      	ldr	r0, [pc, #304]	; (8017b70 <nk_popup_end+0x180>)
 8017a3e:	f006 fb01 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	f000 8089 	beq.w	8017b5c <nk_popup_end+0x16c>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a50:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	f000 8081 	beq.w	8017b5c <nk_popup_end+0x16c>
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a60:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d077      	beq.n	8017b5c <nk_popup_end+0x16c>
        return;

    popup = ctx->current;
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a72:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017a76:	613b      	str	r3, [r7, #16]
    if (!popup->parent) return;
 8017a78:	693b      	ldr	r3, [r7, #16]
 8017a7a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d06e      	beq.n	8017b60 <nk_popup_end+0x170>
    win = popup->parent;
 8017a82:	693b      	ldr	r3, [r7, #16]
 8017a84:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8017a88:	60fb      	str	r3, [r7, #12]
    if (popup->flags & NK_WINDOW_HIDDEN) {
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d015      	beq.n	8017ac2 <nk_popup_end+0xd2>
        struct nk_panel *root;
        root = win->layout;
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017a9c:	617b      	str	r3, [r7, #20]
        while (root) {
 8017a9e:	e009      	b.n	8017ab4 <nk_popup_end+0xc4>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8017aa0:	697b      	ldr	r3, [r7, #20]
 8017aa2:	685b      	ldr	r3, [r3, #4]
 8017aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8017ab2:	617b      	str	r3, [r7, #20]
        while (root) {
 8017ab4:	697b      	ldr	r3, [r7, #20]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d1f2      	bne.n	8017aa0 <nk_popup_end+0xb0>
        }
        win->popup.active = 0;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2200      	movs	r2, #0
 8017abe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    }
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8017ac2:	693b      	ldr	r3, [r7, #16]
 8017ac4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8017ac8:	4b2c      	ldr	r3, [pc, #176]	; (8017b7c <nk_popup_end+0x18c>)
 8017aca:	ed93 6a00 	vldr	s12, [r3]
 8017ace:	edd3 6a01 	vldr	s13, [r3, #4]
 8017ad2:	ed93 7a02 	vldr	s14, [r3, #8]
 8017ad6:	edd3 7a03 	vldr	s15, [r3, #12]
 8017ada:	eeb0 0a46 	vmov.f32	s0, s12
 8017ade:	eef0 0a66 	vmov.f32	s1, s13
 8017ae2:	eeb0 1a47 	vmov.f32	s2, s14
 8017ae6:	eef0 1a67 	vmov.f32	s3, s15
 8017aea:	4610      	mov	r0, r2
 8017aec:	f7f9 fe98 	bl	8011820 <nk_push_scissor>
    nk_end(ctx);
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f006 f881 	bl	801dbf8 <nk_end>

    win->buffer = popup->buffer;
 8017af6:	68fa      	ldr	r2, [r7, #12]
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8017afe:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8017b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017b0e:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_finish_popup(ctx, win);
 8017b12:	68f9      	ldr	r1, [r7, #12]
 8017b14:	6878      	ldr	r0, [r7, #4]
 8017b16:	f7f9 f935 	bl	8010d84 <nk_finish_popup>
    ctx->current = win;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017b20:	461a      	mov	r2, r3
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    nk_push_scissor(&win->buffer, win->layout->clip);
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b34:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8017b38:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8017b3c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8017b40:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8017b44:	eeb0 0a46 	vmov.f32	s0, s12
 8017b48:	eef0 0a66 	vmov.f32	s1, s13
 8017b4c:	eeb0 1a47 	vmov.f32	s2, s14
 8017b50:	eef0 1a67 	vmov.f32	s3, s15
 8017b54:	4610      	mov	r0, r2
 8017b56:	f7f9 fe63 	bl	8011820 <nk_push_scissor>
 8017b5a:	e002      	b.n	8017b62 <nk_popup_end+0x172>
        return;
 8017b5c:	bf00      	nop
 8017b5e:	e000      	b.n	8017b62 <nk_popup_end+0x172>
    if (!popup->parent) return;
 8017b60:	bf00      	nop
}
 8017b62:	3718      	adds	r7, #24
 8017b64:	46bd      	mov	sp, r7
 8017b66:	bdb0      	pop	{r4, r5, r7, pc}
 8017b68:	08022100 	.word	0x08022100
 8017b6c:	08023c80 	.word	0x08023c80
 8017b70:	08022104 	.word	0x08022104
 8017b74:	08022128 	.word	0x08022128
 8017b78:	08022138 	.word	0x08022138
 8017b7c:	08023c3c 	.word	0x08023c3c

08017b80 <nk_scrollbar_behavior>:
nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,
    int has_scrolling, const struct nk_rect *scroll,
    const struct nk_rect *cursor, const struct nk_rect *empty0,
    const struct nk_rect *empty1, float scroll_offset,
    float target, float scroll_step, enum nk_orientation o)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b092      	sub	sp, #72	; 0x48
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	61f8      	str	r0, [r7, #28]
 8017b88:	61b9      	str	r1, [r7, #24]
 8017b8a:	617a      	str	r2, [r7, #20]
 8017b8c:	613b      	str	r3, [r7, #16]
 8017b8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8017b92:	edc7 0a02 	vstr	s1, [r7, #8]
 8017b96:	ed87 1a01 	vstr	s2, [r7, #4]
    nk_flags ws = 0;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	627b      	str	r3, [r7, #36]	; 0x24
    int left_mouse_down;
    unsigned int left_mouse_clicked;
    int left_mouse_click_in_cursor;
    float scroll_delta;

    nk_widget_state_reset(state);
 8017b9e:	69fb      	ldr	r3, [r7, #28]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	f003 0302 	and.w	r3, r3, #2
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d003      	beq.n	8017bb2 <nk_scrollbar_behavior+0x32>
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	2206      	movs	r2, #6
 8017bae:	601a      	str	r2, [r3, #0]
 8017bb0:	e002      	b.n	8017bb8 <nk_scrollbar_behavior+0x38>
 8017bb2:	69fb      	ldr	r3, [r7, #28]
 8017bb4:	2204      	movs	r2, #4
 8017bb6:	601a      	str	r2, [r3, #0]
    if (!in) return scroll_offset;
 8017bb8:	69bb      	ldr	r3, [r7, #24]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d101      	bne.n	8017bc2 <nk_scrollbar_behavior+0x42>
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	e35c      	b.n	801827c <nk_scrollbar_behavior+0x6fc>

    left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8017bc2:	69bb      	ldr	r3, [r7, #24]
 8017bc4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8017bc8:	647b      	str	r3, [r7, #68]	; 0x44
    left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 8017bca:	69bb      	ldr	r3, [r7, #24]
 8017bcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017bd0:	643b      	str	r3, [r7, #64]	; 0x40
    left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8017bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bd4:	ed93 6a00 	vldr	s12, [r3]
 8017bd8:	edd3 6a01 	vldr	s13, [r3, #4]
 8017bdc:	ed93 7a02 	vldr	s14, [r3, #8]
 8017be0:	edd3 7a03 	vldr	s15, [r3, #12]
 8017be4:	2201      	movs	r2, #1
 8017be6:	eeb0 0a46 	vmov.f32	s0, s12
 8017bea:	eef0 0a66 	vmov.f32	s1, s13
 8017bee:	eeb0 1a47 	vmov.f32	s2, s14
 8017bf2:	eef0 1a67 	vmov.f32	s3, s15
 8017bf6:	2100      	movs	r1, #0
 8017bf8:	69b8      	ldr	r0, [r7, #24]
 8017bfa:	f7fb fb8b 	bl	8013314 <nk_input_has_mouse_click_down_in_rect>
 8017bfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        NK_BUTTON_LEFT, *cursor, nk_true);
    if (nk_input_is_mouse_hovering_rect(in, *scroll))
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	ed93 6a00 	vldr	s12, [r3]
 8017c06:	edd3 6a01 	vldr	s13, [r3, #4]
 8017c0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8017c0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8017c12:	eeb0 0a46 	vmov.f32	s0, s12
 8017c16:	eef0 0a66 	vmov.f32	s1, s13
 8017c1a:	eeb0 1a47 	vmov.f32	s2, s14
 8017c1e:	eef0 1a67 	vmov.f32	s3, s15
 8017c22:	69b8      	ldr	r0, [r7, #24]
 8017c24:	f7fb fbbd 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d002      	beq.n	8017c34 <nk_scrollbar_behavior+0xb4>
        *state = NK_WIDGET_STATE_HOVERED;
 8017c2e:	69fb      	ldr	r3, [r7, #28]
 8017c30:	2212      	movs	r2, #18
 8017c32:	601a      	str	r2, [r3, #0]

    scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;
 8017c34:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d103      	bne.n	8017c44 <nk_scrollbar_behavior+0xc4>
 8017c3c:	69bb      	ldr	r3, [r7, #24]
 8017c3e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8017c42:	e002      	b.n	8017c4a <nk_scrollbar_behavior+0xca>
 8017c44:	69bb      	ldr	r3, [r7, #24]
 8017c46:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8017c4a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8017c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	f000 8122 	beq.w	8017e98 <nk_scrollbar_behavior+0x318>
 8017c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	f000 811e 	beq.w	8017e98 <nk_scrollbar_behavior+0x318>
 8017c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	f040 811a 	bne.w	8017e98 <nk_scrollbar_behavior+0x318>
        /* update cursor by mouse dragging */
        float pixel, delta;
        *state = NK_WIDGET_STATE_ACTIVE;
 8017c64:	69fb      	ldr	r3, [r7, #28]
 8017c66:	2222      	movs	r2, #34	; 0x22
 8017c68:	601a      	str	r2, [r3, #0]
        if (o == NK_VERTICAL) {
 8017c6a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	f040 8089 	bne.w	8017d86 <nk_scrollbar_behavior+0x206>
            float cursor_y;
            pixel = in->mouse.delta.y;
 8017c74:	69bb      	ldr	r3, [r7, #24]
 8017c76:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8017c7a:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->h) * target;
 8017c7c:	693b      	ldr	r3, [r7, #16]
 8017c7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8017c82:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8017c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017c8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8017c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017c92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);
 8017c96:	ed97 7a03 	vldr	s14, [r7, #12]
 8017c9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ca2:	693b      	ldr	r3, [r7, #16]
 8017ca4:	edd3 7a03 	vldr	s15, [r3, #12]
 8017ca8:	edd7 6a02 	vldr	s13, [r7, #8]
 8017cac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cb8:	d50e      	bpl.n	8017cd8 <nk_scrollbar_behavior+0x158>
 8017cba:	ed97 7a03 	vldr	s14, [r7, #12]
 8017cbe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cce:	bf4c      	ite	mi
 8017cd0:	2301      	movmi	r3, #1
 8017cd2:	2300      	movpl	r3, #0
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	e00e      	b.n	8017cf6 <nk_scrollbar_behavior+0x176>
 8017cd8:	693b      	ldr	r3, [r7, #16]
 8017cda:	edd3 7a03 	vldr	s15, [r3, #12]
 8017cde:	ed97 7a02 	vldr	s14, [r7, #8]
 8017ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cee:	bf4c      	ite	mi
 8017cf0:	2301      	movmi	r3, #1
 8017cf2:	2300      	movpl	r3, #0
 8017cf4:	b2db      	uxtb	r3, r3
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d002      	beq.n	8017d00 <nk_scrollbar_behavior+0x180>
 8017cfa:	eddf 7acd 	vldr	s15, [pc, #820]	; 8018030 <nk_scrollbar_behavior+0x4b0>
 8017cfe:	e01f      	b.n	8017d40 <nk_scrollbar_behavior+0x1c0>
 8017d00:	ed97 7a03 	vldr	s14, [r7, #12]
 8017d04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017d08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d0c:	693b      	ldr	r3, [r7, #16]
 8017d0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8017d12:	edd7 6a02 	vldr	s13, [r7, #8]
 8017d16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d22:	d506      	bpl.n	8017d32 <nk_scrollbar_behavior+0x1b2>
 8017d24:	ed97 7a03 	vldr	s14, [r7, #12]
 8017d28:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d30:	e006      	b.n	8017d40 <nk_scrollbar_behavior+0x1c0>
 8017d32:	693b      	ldr	r3, [r7, #16]
 8017d34:	edd3 7a03 	vldr	s15, [r3, #12]
 8017d38:	ed97 7a02 	vldr	s14, [r7, #8]
 8017d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d40:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_y = scroll->y + ((scroll_offset/target) * scroll->h);
 8017d44:	693b      	ldr	r3, [r7, #16]
 8017d46:	ed93 7a01 	vldr	s14, [r3, #4]
 8017d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8017d4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8017d52:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017d56:	693b      	ldr	r3, [r7, #16]
 8017d58:	edd3 7a03 	vldr	s15, [r3, #12]
 8017d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d64:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = cursor_y + cursor->h/2.0f;
 8017d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8017d6e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017d72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017d76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8017d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d7e:	69bb      	ldr	r3, [r7, #24]
 8017d80:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8017d84:	e238      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
        } else {
            float cursor_x;
            pixel = in->mouse.delta.x;
 8017d86:	69bb      	ldr	r3, [r7, #24]
 8017d88:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8017d8c:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->w) * target;
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	ed93 7a02 	vldr	s14, [r3, #8]
 8017d94:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8017d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017d9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8017da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017da4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);
 8017da8:	ed97 7a03 	vldr	s14, [r7, #12]
 8017dac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	edd3 7a02 	vldr	s15, [r3, #8]
 8017dba:	edd7 6a02 	vldr	s13, [r7, #8]
 8017dbe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dca:	d50e      	bpl.n	8017dea <nk_scrollbar_behavior+0x26a>
 8017dcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8017dd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017de0:	bf4c      	ite	mi
 8017de2:	2301      	movmi	r3, #1
 8017de4:	2300      	movpl	r3, #0
 8017de6:	b2db      	uxtb	r3, r3
 8017de8:	e00e      	b.n	8017e08 <nk_scrollbar_behavior+0x288>
 8017dea:	693b      	ldr	r3, [r7, #16]
 8017dec:	edd3 7a02 	vldr	s15, [r3, #8]
 8017df0:	ed97 7a02 	vldr	s14, [r7, #8]
 8017df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e00:	bf4c      	ite	mi
 8017e02:	2301      	movmi	r3, #1
 8017e04:	2300      	movpl	r3, #0
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d002      	beq.n	8017e12 <nk_scrollbar_behavior+0x292>
 8017e0c:	eddf 7a88 	vldr	s15, [pc, #544]	; 8018030 <nk_scrollbar_behavior+0x4b0>
 8017e10:	e01f      	b.n	8017e52 <nk_scrollbar_behavior+0x2d2>
 8017e12:	ed97 7a03 	vldr	s14, [r7, #12]
 8017e16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017e1e:	693b      	ldr	r3, [r7, #16]
 8017e20:	edd3 7a02 	vldr	s15, [r3, #8]
 8017e24:	edd7 6a02 	vldr	s13, [r7, #8]
 8017e28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e34:	d506      	bpl.n	8017e44 <nk_scrollbar_behavior+0x2c4>
 8017e36:	ed97 7a03 	vldr	s14, [r7, #12]
 8017e3a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017e42:	e006      	b.n	8017e52 <nk_scrollbar_behavior+0x2d2>
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	edd3 7a02 	vldr	s15, [r3, #8]
 8017e4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8017e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e52:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_x = scroll->x + ((scroll_offset/target) * scroll->w);
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	ed93 7a00 	vldr	s14, [r3]
 8017e5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8017e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8017e64:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017e68:	693b      	ldr	r3, [r7, #16]
 8017e6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8017e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017e76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = cursor_x + cursor->w/2.0f;
 8017e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8017e80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017e84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017e88:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8017e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017e90:	69bb      	ldr	r3, [r7, #24]
 8017e92:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8017e96:	e1af      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
        }
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 8017e98:	211d      	movs	r1, #29
 8017e9a:	69b8      	ldr	r0, [r7, #24]
 8017e9c:	f7fb fb60 	bl	8013560 <nk_input_is_key_pressed>
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d006      	beq.n	8017eb4 <nk_scrollbar_behavior+0x334>
 8017ea6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d102      	bne.n	8017eb4 <nk_scrollbar_behavior+0x334>
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d11a      	bne.n	8017eea <nk_scrollbar_behavior+0x36a>
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 8017eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017eb6:	ed93 6a00 	vldr	s12, [r3]
 8017eba:	edd3 6a01 	vldr	s13, [r3, #4]
 8017ebe:	ed93 7a02 	vldr	s14, [r3, #8]
 8017ec2:	edd3 7a03 	vldr	s15, [r3, #12]
 8017ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017eca:	2200      	movs	r2, #0
 8017ecc:	69b9      	ldr	r1, [r7, #24]
 8017ece:	eeb0 0a46 	vmov.f32	s0, s12
 8017ed2:	eef0 0a66 	vmov.f32	s1, s13
 8017ed6:	eeb0 1a47 	vmov.f32	s2, s14
 8017eda:	eef0 1a67 	vmov.f32	s3, s15
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f7f7 f8f8 	bl	800f0d4 <nk_button_behavior>
 8017ee4:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d035      	beq.n	8017f56 <nk_scrollbar_behavior+0x3d6>
        /* scroll page up by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 8017eea:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d118      	bne.n	8017f24 <nk_scrollbar_behavior+0x3a4>
            scroll_offset = NK_MAX(0, scroll_offset - scroll->h);
 8017ef2:	693b      	ldr	r3, [r7, #16]
 8017ef4:	edd3 7a03 	vldr	s15, [r3, #12]
 8017ef8:	ed97 7a03 	vldr	s14, [r7, #12]
 8017efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f08:	dd07      	ble.n	8017f1a <nk_scrollbar_behavior+0x39a>
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8017f10:	ed97 7a03 	vldr	s14, [r7, #12]
 8017f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f18:	e001      	b.n	8017f1e <nk_scrollbar_behavior+0x39e>
 8017f1a:	eddf 7a45 	vldr	s15, [pc, #276]	; 8018030 <nk_scrollbar_behavior+0x4b0>
 8017f1e:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8017f22:	e169      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MAX(0, scroll_offset - scroll->w);
 8017f24:	693b      	ldr	r3, [r7, #16]
 8017f26:	edd3 7a02 	vldr	s15, [r3, #8]
 8017f2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8017f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f3a:	dd07      	ble.n	8017f4c <nk_scrollbar_behavior+0x3cc>
 8017f3c:	693b      	ldr	r3, [r7, #16]
 8017f3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8017f42:	ed97 7a03 	vldr	s14, [r7, #12]
 8017f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f4a:	e001      	b.n	8017f50 <nk_scrollbar_behavior+0x3d0>
 8017f4c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8018030 <nk_scrollbar_behavior+0x4b0>
 8017f50:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8017f54:	e150      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 8017f56:	211c      	movs	r1, #28
 8017f58:	69b8      	ldr	r0, [r7, #24]
 8017f5a:	f7fb fb01 	bl	8013560 <nk_input_is_key_pressed>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d006      	beq.n	8017f72 <nk_scrollbar_behavior+0x3f2>
 8017f64:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d102      	bne.n	8017f72 <nk_scrollbar_behavior+0x3f2>
 8017f6c:	697b      	ldr	r3, [r7, #20]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d11a      	bne.n	8017fa8 <nk_scrollbar_behavior+0x428>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 8017f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017f74:	ed93 6a00 	vldr	s12, [r3]
 8017f78:	edd3 6a01 	vldr	s13, [r3, #4]
 8017f7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8017f80:	edd3 7a03 	vldr	s15, [r3, #12]
 8017f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017f88:	2200      	movs	r2, #0
 8017f8a:	69b9      	ldr	r1, [r7, #24]
 8017f8c:	eeb0 0a46 	vmov.f32	s0, s12
 8017f90:	eef0 0a66 	vmov.f32	s1, s13
 8017f94:	eeb0 1a47 	vmov.f32	s2, s14
 8017f98:	eef0 1a67 	vmov.f32	s3, s15
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7f7 f899 	bl	800f0d4 <nk_button_behavior>
 8017fa2:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d04f      	beq.n	8018048 <nk_scrollbar_behavior+0x4c8>
        /* scroll page down by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 8017fa8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d124      	bne.n	8017ffa <nk_scrollbar_behavior+0x47a>
            scroll_offset = NK_MIN(scroll_offset + scroll->h, target - scroll->h);
 8017fb0:	693b      	ldr	r3, [r7, #16]
 8017fb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8017fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8017fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017fbe:	693b      	ldr	r3, [r7, #16]
 8017fc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8017fc4:	edd7 6a02 	vldr	s13, [r7, #8]
 8017fc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fd4:	d507      	bpl.n	8017fe6 <nk_scrollbar_behavior+0x466>
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	ed93 7a03 	vldr	s14, [r3, #12]
 8017fdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8017fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017fe4:	e006      	b.n	8017ff4 <nk_scrollbar_behavior+0x474>
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	edd3 7a03 	vldr	s15, [r3, #12]
 8017fec:	ed97 7a02 	vldr	s14, [r7, #8]
 8017ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ff4:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8017ff8:	e0fe      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MIN(scroll_offset + scroll->w, target - scroll->w);
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	ed93 7a02 	vldr	s14, [r3, #8]
 8018000:	edd7 7a03 	vldr	s15, [r7, #12]
 8018004:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018008:	693b      	ldr	r3, [r7, #16]
 801800a:	edd3 7a02 	vldr	s15, [r3, #8]
 801800e:	edd7 6a02 	vldr	s13, [r7, #8]
 8018012:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801801a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801801e:	d509      	bpl.n	8018034 <nk_scrollbar_behavior+0x4b4>
 8018020:	693b      	ldr	r3, [r7, #16]
 8018022:	ed93 7a02 	vldr	s14, [r3, #8]
 8018026:	edd7 7a03 	vldr	s15, [r7, #12]
 801802a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801802e:	e008      	b.n	8018042 <nk_scrollbar_behavior+0x4c2>
 8018030:	00000000 	.word	0x00000000
 8018034:	693b      	ldr	r3, [r7, #16]
 8018036:	edd3 7a02 	vldr	s15, [r3, #8]
 801803a:	ed97 7a02 	vldr	s14, [r7, #8]
 801803e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018042:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8018046:	e0d7      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
    } else if (has_scrolling) {
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	2b00      	cmp	r3, #0
 801804c:	f000 80d4 	beq.w	80181f8 <nk_scrollbar_behavior+0x678>
        if ((scroll_delta < 0 || (scroll_delta > 0))) {
 8018050:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801805c:	d407      	bmi.n	801806e <nk_scrollbar_behavior+0x4ee>
 801805e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801806a:	f340 80a2 	ble.w	80181b2 <nk_scrollbar_behavior+0x632>
            /* update cursor by mouse scrolling */
            scroll_offset = scroll_offset + scroll_step * (-scroll_delta);
 801806e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018072:	eeb1 7a67 	vneg.f32	s14, s15
 8018076:	edd7 7a01 	vldr	s15, [r7, #4]
 801807a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801807e:	ed97 7a03 	vldr	s14, [r7, #12]
 8018082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018086:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 801808a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801808e:	2b00      	cmp	r3, #0
 8018090:	d147      	bne.n	8018122 <nk_scrollbar_behavior+0x5a2>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 8018092:	693b      	ldr	r3, [r7, #16]
 8018094:	edd3 7a03 	vldr	s15, [r3, #12]
 8018098:	ed97 7a02 	vldr	s14, [r7, #8]
 801809c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80180a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80180a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80180a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ac:	d50a      	bpl.n	80180c4 <nk_scrollbar_behavior+0x544>
 80180ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80180b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ba:	bf4c      	ite	mi
 80180bc:	2301      	movmi	r3, #1
 80180be:	2300      	movpl	r3, #0
 80180c0:	b2db      	uxtb	r3, r3
 80180c2:	e00e      	b.n	80180e2 <nk_scrollbar_behavior+0x562>
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80180ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80180ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80180d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180da:	bf4c      	ite	mi
 80180dc:	2301      	movmi	r3, #1
 80180de:	2300      	movpl	r3, #0
 80180e0:	b2db      	uxtb	r3, r3
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d002      	beq.n	80180ec <nk_scrollbar_behavior+0x56c>
 80180e6:	ed5f 7a2e 	vldr	s15, [pc, #-184]	; 8018030 <nk_scrollbar_behavior+0x4b0>
 80180ea:	e017      	b.n	801811c <nk_scrollbar_behavior+0x59c>
 80180ec:	693b      	ldr	r3, [r7, #16]
 80180ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80180f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80180f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80180fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80180fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018106:	d502      	bpl.n	801810e <nk_scrollbar_behavior+0x58e>
 8018108:	edd7 7a03 	vldr	s15, [r7, #12]
 801810c:	e006      	b.n	801811c <nk_scrollbar_behavior+0x59c>
 801810e:	693b      	ldr	r3, [r7, #16]
 8018110:	edd3 7a03 	vldr	s15, [r3, #12]
 8018114:	ed97 7a02 	vldr	s14, [r7, #8]
 8018118:	ee77 7a67 	vsub.f32	s15, s14, s15
 801811c:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8018120:	e06a      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
            else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	edd3 7a02 	vldr	s15, [r3, #8]
 8018128:	ed97 7a02 	vldr	s14, [r7, #8]
 801812c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018130:	ed97 7a03 	vldr	s14, [r7, #12]
 8018134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801813c:	d50a      	bpl.n	8018154 <nk_scrollbar_behavior+0x5d4>
 801813e:	edd7 7a03 	vldr	s15, [r7, #12]
 8018142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801814a:	bf4c      	ite	mi
 801814c:	2301      	movmi	r3, #1
 801814e:	2300      	movpl	r3, #0
 8018150:	b2db      	uxtb	r3, r3
 8018152:	e00e      	b.n	8018172 <nk_scrollbar_behavior+0x5f2>
 8018154:	693b      	ldr	r3, [r7, #16]
 8018156:	edd3 7a02 	vldr	s15, [r3, #8]
 801815a:	ed97 7a02 	vldr	s14, [r7, #8]
 801815e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801816a:	bf4c      	ite	mi
 801816c:	2301      	movmi	r3, #1
 801816e:	2300      	movpl	r3, #0
 8018170:	b2db      	uxtb	r3, r3
 8018172:	2b00      	cmp	r3, #0
 8018174:	d002      	beq.n	801817c <nk_scrollbar_behavior+0x5fc>
 8018176:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 8018030 <nk_scrollbar_behavior+0x4b0>
 801817a:	e017      	b.n	80181ac <nk_scrollbar_behavior+0x62c>
 801817c:	693b      	ldr	r3, [r7, #16]
 801817e:	edd3 7a02 	vldr	s15, [r3, #8]
 8018182:	ed97 7a02 	vldr	s14, [r7, #8]
 8018186:	ee77 7a67 	vsub.f32	s15, s14, s15
 801818a:	ed97 7a03 	vldr	s14, [r7, #12]
 801818e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018196:	d502      	bpl.n	801819e <nk_scrollbar_behavior+0x61e>
 8018198:	edd7 7a03 	vldr	s15, [r7, #12]
 801819c:	e006      	b.n	80181ac <nk_scrollbar_behavior+0x62c>
 801819e:	693b      	ldr	r3, [r7, #16]
 80181a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80181a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80181a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80181ac:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 80181b0:	e022      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_START)) {
 80181b2:	211a      	movs	r1, #26
 80181b4:	69b8      	ldr	r0, [r7, #24]
 80181b6:	f7fb f9d3 	bl	8013560 <nk_input_is_key_pressed>
 80181ba:	4603      	mov	r3, r0
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d007      	beq.n	80181d0 <nk_scrollbar_behavior+0x650>
            /* update cursor to the beginning  */
            if (o == NK_VERTICAL) scroll_offset = 0;
 80181c0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d117      	bne.n	80181f8 <nk_scrollbar_behavior+0x678>
 80181c8:	f04f 0300 	mov.w	r3, #0
 80181cc:	60fb      	str	r3, [r7, #12]
 80181ce:	e013      	b.n	80181f8 <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {
 80181d0:	211b      	movs	r1, #27
 80181d2:	69b8      	ldr	r0, [r7, #24]
 80181d4:	f7fb f9c4 	bl	8013560 <nk_input_is_key_pressed>
 80181d8:	4603      	mov	r3, r0
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d00c      	beq.n	80181f8 <nk_scrollbar_behavior+0x678>
            /* update cursor to the end */
            if (o == NK_VERTICAL) scroll_offset = target - scroll->h;
 80181de:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d108      	bne.n	80181f8 <nk_scrollbar_behavior+0x678>
 80181e6:	693b      	ldr	r3, [r7, #16]
 80181e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80181ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80181f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80181f4:	edc7 7a03 	vstr	s15, [r7, #12]
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 80181f8:	69fb      	ldr	r3, [r7, #28]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	f003 0310 	and.w	r3, r3, #16
 8018200:	2b00      	cmp	r3, #0
 8018202:	d01d      	beq.n	8018240 <nk_scrollbar_behavior+0x6c0>
 8018204:	693b      	ldr	r3, [r7, #16]
 8018206:	ed93 6a00 	vldr	s12, [r3]
 801820a:	edd3 6a01 	vldr	s13, [r3, #4]
 801820e:	ed93 7a02 	vldr	s14, [r3, #8]
 8018212:	edd3 7a03 	vldr	s15, [r3, #12]
 8018216:	eeb0 0a46 	vmov.f32	s0, s12
 801821a:	eef0 0a66 	vmov.f32	s1, s13
 801821e:	eeb0 1a47 	vmov.f32	s2, s14
 8018222:	eef0 1a67 	vmov.f32	s3, s15
 8018226:	69b8      	ldr	r0, [r7, #24]
 8018228:	f7fb f90d 	bl	8013446 <nk_input_is_mouse_prev_hovering_rect>
 801822c:	4603      	mov	r3, r0
 801822e:	2b00      	cmp	r3, #0
 8018230:	d106      	bne.n	8018240 <nk_scrollbar_behavior+0x6c0>
        *state |= NK_WIDGET_STATE_ENTERED;
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	f043 0208 	orr.w	r2, r3, #8
 801823a:	69fb      	ldr	r3, [r7, #28]
 801823c:	601a      	str	r2, [r3, #0]
 801823e:	e01c      	b.n	801827a <nk_scrollbar_behavior+0x6fa>
    else if (nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 8018240:	693b      	ldr	r3, [r7, #16]
 8018242:	ed93 6a00 	vldr	s12, [r3]
 8018246:	edd3 6a01 	vldr	s13, [r3, #4]
 801824a:	ed93 7a02 	vldr	s14, [r3, #8]
 801824e:	edd3 7a03 	vldr	s15, [r3, #12]
 8018252:	eeb0 0a46 	vmov.f32	s0, s12
 8018256:	eef0 0a66 	vmov.f32	s1, s13
 801825a:	eeb0 1a47 	vmov.f32	s2, s14
 801825e:	eef0 1a67 	vmov.f32	s3, s15
 8018262:	69b8      	ldr	r0, [r7, #24]
 8018264:	f7fb f8ef 	bl	8013446 <nk_input_is_mouse_prev_hovering_rect>
 8018268:	4603      	mov	r3, r0
 801826a:	2b00      	cmp	r3, #0
 801826c:	d005      	beq.n	801827a <nk_scrollbar_behavior+0x6fa>
        *state |= NK_WIDGET_STATE_LEFT;
 801826e:	69fb      	ldr	r3, [r7, #28]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018276:	69fb      	ldr	r3, [r7, #28]
 8018278:	601a      	str	r2, [r3, #0]
    return scroll_offset;
 801827a:	68fb      	ldr	r3, [r7, #12]
}
 801827c:	ee07 3a90 	vmov	s15, r3
 8018280:	eeb0 0a67 	vmov.f32	s0, s15
 8018284:	3748      	adds	r7, #72	; 0x48
 8018286:	46bd      	mov	sp, r7
 8018288:	bd80      	pop	{r7, pc}
 801828a:	bf00      	nop

0801828c <nk_draw_scrollbar>:
NK_LIB void
nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_scrollbar *style, const struct nk_rect *bounds,
    const struct nk_rect *scroll)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b086      	sub	sp, #24
 8018290:	af00      	add	r7, sp, #0
 8018292:	60f8      	str	r0, [r7, #12]
 8018294:	60b9      	str	r1, [r7, #8]
 8018296:	607a      	str	r2, [r7, #4]
 8018298:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;

    /* select correct colors/images to draw */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 801829a:	68bb      	ldr	r3, [r7, #8]
 801829c:	f003 0320 	and.w	r3, r3, #32
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d006      	beq.n	80182b2 <nk_draw_scrollbar+0x26>
        background = &style->active;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	3338      	adds	r3, #56	; 0x38
 80182a8:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_active;
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	3390      	adds	r3, #144	; 0x90
 80182ae:	613b      	str	r3, [r7, #16]
 80182b0:	e010      	b.n	80182d4 <nk_draw_scrollbar+0x48>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	f003 0310 	and.w	r3, r3, #16
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d006      	beq.n	80182ca <nk_draw_scrollbar+0x3e>
        background = &style->hover;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	331c      	adds	r3, #28
 80182c0:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_hover;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	3374      	adds	r3, #116	; 0x74
 80182c6:	613b      	str	r3, [r7, #16]
 80182c8:	e004      	b.n	80182d4 <nk_draw_scrollbar+0x48>
    } else {
        background = &style->normal;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_normal;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	3358      	adds	r3, #88	; 0x58
 80182d2:	613b      	str	r3, [r7, #16]
    }

    /* draw background */
    switch (background->type) {
 80182d4:	697b      	ldr	r3, [r7, #20]
 80182d6:	781b      	ldrb	r3, [r3, #0]
 80182d8:	2b02      	cmp	r3, #2
 80182da:	d01e      	beq.n	801831a <nk_draw_scrollbar+0x8e>
 80182dc:	2b02      	cmp	r3, #2
 80182de:	dc71      	bgt.n	80183c4 <nk_draw_scrollbar+0x138>
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d033      	beq.n	801834c <nk_draw_scrollbar+0xc0>
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	d16d      	bne.n	80183c4 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 80182e8:	697b      	ldr	r3, [r7, #20]
 80182ea:	1d19      	adds	r1, r3, #4
 80182ec:	4a74      	ldr	r2, [pc, #464]	; (80184c0 <nk_draw_scrollbar+0x234>)
 80182ee:	683b      	ldr	r3, [r7, #0]
 80182f0:	ed93 6a00 	vldr	s12, [r3]
 80182f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80182f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80182fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8018300:	6812      	ldr	r2, [r2, #0]
 8018302:	eeb0 0a46 	vmov.f32	s0, s12
 8018306:	eef0 0a66 	vmov.f32	s1, s13
 801830a:	eeb0 1a47 	vmov.f32	s2, s14
 801830e:	eef0 1a67 	vmov.f32	s3, s15
 8018312:	68f8      	ldr	r0, [r7, #12]
 8018314:	f7f9 ff5e 	bl	80121d4 <nk_draw_image>
            break;
 8018318:	e054      	b.n	80183c4 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 801831a:	697b      	ldr	r3, [r7, #20]
 801831c:	1d19      	adds	r1, r3, #4
 801831e:	4a68      	ldr	r2, [pc, #416]	; (80184c0 <nk_draw_scrollbar+0x234>)
 8018320:	683b      	ldr	r3, [r7, #0]
 8018322:	ed93 6a00 	vldr	s12, [r3]
 8018326:	edd3 6a01 	vldr	s13, [r3, #4]
 801832a:	ed93 7a02 	vldr	s14, [r3, #8]
 801832e:	edd3 7a03 	vldr	s15, [r3, #12]
 8018332:	6812      	ldr	r2, [r2, #0]
 8018334:	eeb0 0a46 	vmov.f32	s0, s12
 8018338:	eef0 0a66 	vmov.f32	s1, s13
 801833c:	eeb0 1a47 	vmov.f32	s2, s14
 8018340:	eef0 1a67 	vmov.f32	s3, s15
 8018344:	68f8      	ldr	r0, [r7, #12]
 8018346:	f7fa f837 	bl	80123b8 <nk_draw_nine_slice>
            break;
 801834a:	e03b      	b.n	80183c4 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 8018352:	697a      	ldr	r2, [r7, #20]
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	ed93 6a00 	vldr	s12, [r3]
 801835a:	edd3 6a01 	vldr	s13, [r3, #4]
 801835e:	ed93 7a02 	vldr	s14, [r3, #8]
 8018362:	edd3 7a03 	vldr	s15, [r3, #12]
 8018366:	6851      	ldr	r1, [r2, #4]
 8018368:	eeb0 2a65 	vmov.f32	s4, s11
 801836c:	eeb0 0a46 	vmov.f32	s0, s12
 8018370:	eef0 0a66 	vmov.f32	s1, s13
 8018374:	eeb0 1a47 	vmov.f32	s2, s14
 8018378:	eef0 1a67 	vmov.f32	s3, s15
 801837c:	68f8      	ldr	r0, [r7, #12]
 801837e:	f7f9 fbcf 	bl	8011b20 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
 801838e:	687a      	ldr	r2, [r7, #4]
 8018390:	683b      	ldr	r3, [r7, #0]
 8018392:	ed93 6a00 	vldr	s12, [r3]
 8018396:	edd3 6a01 	vldr	s13, [r3, #4]
 801839a:	ed93 7a02 	vldr	s14, [r3, #8]
 801839e:	edd3 7a03 	vldr	s15, [r3, #12]
 80183a2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80183a4:	eef0 2a45 	vmov.f32	s5, s10
 80183a8:	eeb0 2a65 	vmov.f32	s4, s11
 80183ac:	eeb0 0a46 	vmov.f32	s0, s12
 80183b0:	eef0 0a66 	vmov.f32	s1, s13
 80183b4:	eeb0 1a47 	vmov.f32	s2, s14
 80183b8:	eef0 1a67 	vmov.f32	s3, s15
 80183bc:	68f8      	ldr	r0, [r7, #12]
 80183be:	f7f9 faa7 	bl	8011910 <nk_stroke_rect>
            break;
 80183c2:	bf00      	nop
    }

    /* draw cursor */
    switch (cursor->type) {
 80183c4:	693b      	ldr	r3, [r7, #16]
 80183c6:	781b      	ldrb	r3, [r3, #0]
 80183c8:	2b02      	cmp	r3, #2
 80183ca:	d01e      	beq.n	801840a <nk_draw_scrollbar+0x17e>
 80183cc:	2b02      	cmp	r3, #2
 80183ce:	dc72      	bgt.n	80184b6 <nk_draw_scrollbar+0x22a>
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d033      	beq.n	801843c <nk_draw_scrollbar+0x1b0>
 80183d4:	2b01      	cmp	r3, #1
 80183d6:	d16e      	bne.n	80184b6 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *scroll, &cursor->data.image, nk_white);
 80183d8:	693b      	ldr	r3, [r7, #16]
 80183da:	1d19      	adds	r1, r3, #4
 80183dc:	4a38      	ldr	r2, [pc, #224]	; (80184c0 <nk_draw_scrollbar+0x234>)
 80183de:	6a3b      	ldr	r3, [r7, #32]
 80183e0:	ed93 6a00 	vldr	s12, [r3]
 80183e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80183e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80183ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80183f0:	6812      	ldr	r2, [r2, #0]
 80183f2:	eeb0 0a46 	vmov.f32	s0, s12
 80183f6:	eef0 0a66 	vmov.f32	s1, s13
 80183fa:	eeb0 1a47 	vmov.f32	s2, s14
 80183fe:	eef0 1a67 	vmov.f32	s3, s15
 8018402:	68f8      	ldr	r0, [r7, #12]
 8018404:	f7f9 fee6 	bl	80121d4 <nk_draw_image>
            break;
 8018408:	e055      	b.n	80184b6 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *scroll, &cursor->data.slice, nk_white);
 801840a:	693b      	ldr	r3, [r7, #16]
 801840c:	1d19      	adds	r1, r3, #4
 801840e:	4a2c      	ldr	r2, [pc, #176]	; (80184c0 <nk_draw_scrollbar+0x234>)
 8018410:	6a3b      	ldr	r3, [r7, #32]
 8018412:	ed93 6a00 	vldr	s12, [r3]
 8018416:	edd3 6a01 	vldr	s13, [r3, #4]
 801841a:	ed93 7a02 	vldr	s14, [r3, #8]
 801841e:	edd3 7a03 	vldr	s15, [r3, #12]
 8018422:	6812      	ldr	r2, [r2, #0]
 8018424:	eeb0 0a46 	vmov.f32	s0, s12
 8018428:	eef0 0a66 	vmov.f32	s1, s13
 801842c:	eeb0 1a47 	vmov.f32	s2, s14
 8018430:	eef0 1a67 	vmov.f32	s3, s15
 8018434:	68f8      	ldr	r0, [r7, #12]
 8018436:	f7f9 ffbf 	bl	80123b8 <nk_draw_nine_slice>
            break;
 801843a:	e03c      	b.n	80184b6 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 8018442:	693a      	ldr	r2, [r7, #16]
 8018444:	6a3b      	ldr	r3, [r7, #32]
 8018446:	ed93 6a00 	vldr	s12, [r3]
 801844a:	edd3 6a01 	vldr	s13, [r3, #4]
 801844e:	ed93 7a02 	vldr	s14, [r3, #8]
 8018452:	edd3 7a03 	vldr	s15, [r3, #12]
 8018456:	6851      	ldr	r1, [r2, #4]
 8018458:	eeb0 2a65 	vmov.f32	s4, s11
 801845c:	eeb0 0a46 	vmov.f32	s0, s12
 8018460:	eef0 0a66 	vmov.f32	s1, s13
 8018464:	eeb0 1a47 	vmov.f32	s2, s14
 8018468:	eef0 1a67 	vmov.f32	s3, s15
 801846c:	68f8      	ldr	r0, [r7, #12]
 801846e:	f7f9 fb57 	bl	8011b20 <nk_fill_rect>
            nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	ed93 5a2e 	vldr	s10, [r3, #184]	; 0xb8
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	6a3b      	ldr	r3, [r7, #32]
 8018482:	ed93 6a00 	vldr	s12, [r3]
 8018486:	edd3 6a01 	vldr	s13, [r3, #4]
 801848a:	ed93 7a02 	vldr	s14, [r3, #8]
 801848e:	edd3 7a03 	vldr	s15, [r3, #12]
 8018492:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 8018496:	eef0 2a45 	vmov.f32	s5, s10
 801849a:	eeb0 2a65 	vmov.f32	s4, s11
 801849e:	eeb0 0a46 	vmov.f32	s0, s12
 80184a2:	eef0 0a66 	vmov.f32	s1, s13
 80184a6:	eeb0 1a47 	vmov.f32	s2, s14
 80184aa:	eef0 1a67 	vmov.f32	s3, s15
 80184ae:	68f8      	ldr	r0, [r7, #12]
 80184b0:	f7f9 fa2e 	bl	8011910 <nk_stroke_rect>
            break;
 80184b4:	bf00      	nop
    }
}
 80184b6:	bf00      	nop
 80184b8:	3718      	adds	r7, #24
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
 80184be:	bf00      	nop
 80184c0:	08023c90 	.word	0x08023c90

080184c4 <nk_do_scrollbarv>:
nk_do_scrollbarv(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b0a6      	sub	sp, #152	; 0x98
 80184c8:	af04      	add	r7, sp, #16
 80184ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80184cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80184ce:	eeb0 6a40 	vmov.f32	s12, s0
 80184d2:	eef0 6a60 	vmov.f32	s13, s1
 80184d6:	eeb0 7a41 	vmov.f32	s14, s2
 80184da:	eef0 7a61 	vmov.f32	s15, s3
 80184de:	617a      	str	r2, [r7, #20]
 80184e0:	ed87 2a04 	vstr	s4, [r7, #16]
 80184e4:	edc7 2a03 	vstr	s5, [r7, #12]
 80184e8:	ed87 3a02 	vstr	s6, [r7, #8]
 80184ec:	edc7 3a01 	vstr	s7, [r7, #4]
 80184f0:	603b      	str	r3, [r7, #0]
 80184f2:	ed87 6a06 	vstr	s12, [r7, #24]
 80184f6:	edc7 6a07 	vstr	s13, [r7, #28]
 80184fa:	ed87 7a08 	vstr	s14, [r7, #32]
 80184fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 8018502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018504:	2b00      	cmp	r3, #0
 8018506:	d105      	bne.n	8018514 <nk_do_scrollbarv+0x50>
 8018508:	4bb6      	ldr	r3, [pc, #728]	; (80187e4 <nk_do_scrollbarv+0x320>)
 801850a:	4ab7      	ldr	r2, [pc, #732]	; (80187e8 <nk_do_scrollbarv+0x324>)
 801850c:	2195      	movs	r1, #149	; 0x95
 801850e:	48b7      	ldr	r0, [pc, #732]	; (80187ec <nk_do_scrollbarv+0x328>)
 8018510:	f005 fd98 	bl	801e044 <__assert_func>
    NK_ASSERT(style);
 8018514:	683b      	ldr	r3, [r7, #0]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d105      	bne.n	8018526 <nk_do_scrollbarv+0x62>
 801851a:	4bb5      	ldr	r3, [pc, #724]	; (80187f0 <nk_do_scrollbarv+0x32c>)
 801851c:	4ab2      	ldr	r2, [pc, #712]	; (80187e8 <nk_do_scrollbarv+0x324>)
 801851e:	2196      	movs	r1, #150	; 0x96
 8018520:	48b2      	ldr	r0, [pc, #712]	; (80187ec <nk_do_scrollbarv+0x328>)
 8018522:	f005 fd8f 	bl	801e044 <__assert_func>
    NK_ASSERT(state);
 8018526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018528:	2b00      	cmp	r3, #0
 801852a:	d105      	bne.n	8018538 <nk_do_scrollbarv+0x74>
 801852c:	4bb1      	ldr	r3, [pc, #708]	; (80187f4 <nk_do_scrollbarv+0x330>)
 801852e:	4aae      	ldr	r2, [pc, #696]	; (80187e8 <nk_do_scrollbarv+0x324>)
 8018530:	2197      	movs	r1, #151	; 0x97
 8018532:	48ae      	ldr	r0, [pc, #696]	; (80187ec <nk_do_scrollbarv+0x328>)
 8018534:	f005 fd86 	bl	801e044 <__assert_func>
    if (!out || !style) return 0;
 8018538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801853a:	2b00      	cmp	r3, #0
 801853c:	d002      	beq.n	8018544 <nk_do_scrollbarv+0x80>
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d102      	bne.n	801854a <nk_do_scrollbarv+0x86>
 8018544:	f04f 0300 	mov.w	r3, #0
 8018548:	e253      	b.n	80189f2 <nk_do_scrollbarv+0x52e>

    scroll.w = NK_MAX(scroll.w, 1);
 801854a:	edd7 7a08 	vldr	s15, [r7, #32]
 801854e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801855a:	d502      	bpl.n	8018562 <nk_do_scrollbarv+0x9e>
 801855c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8018560:	e000      	b.n	8018564 <nk_do_scrollbarv+0xa0>
 8018562:	6a3b      	ldr	r3, [r7, #32]
 8018564:	623b      	str	r3, [r7, #32]
    scroll.h = NK_MAX(scroll.h, 0);
 8018566:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801856a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801856e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018572:	d502      	bpl.n	801857a <nk_do_scrollbarv+0xb6>
 8018574:	f04f 0300 	mov.w	r3, #0
 8018578:	e000      	b.n	801857c <nk_do_scrollbarv+0xb8>
 801857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801857c:	627b      	str	r3, [r7, #36]	; 0x24
    if (target <= scroll.h) return 0;
 801857e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018582:	ed97 7a03 	vldr	s14, [r7, #12]
 8018586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801858a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801858e:	d802      	bhi.n	8018596 <nk_do_scrollbarv+0xd2>
 8018590:	f04f 0300 	mov.w	r3, #0
 8018594:	e22d      	b.n	80189f2 <nk_do_scrollbarv+0x52e>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 8018596:	683b      	ldr	r3, [r7, #0]
 8018598:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801859c:	2b00      	cmp	r3, #0
 801859e:	f000 80a4 	beq.w	80186ea <nk_do_scrollbarv+0x226>
        nk_flags ws;
        float scroll_h;
        struct nk_rect button;

        button.x = scroll.x;
 80185a2:	69bb      	ldr	r3, [r7, #24]
 80185a4:	633b      	str	r3, [r7, #48]	; 0x30
        button.w = scroll.w;
 80185a6:	6a3b      	ldr	r3, [r7, #32]
 80185a8:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.w;
 80185aa:	6a3b      	ldr	r3, [r7, #32]
 80185ac:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_h = NK_MAX(scroll.h - 2 * button.h,0);
 80185ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80185b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80185b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80185ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80185be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80185c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c6:	d502      	bpl.n	80185ce <nk_do_scrollbarv+0x10a>
 80185c8:	eddf 7a8b 	vldr	s15, [pc, #556]	; 80187f8 <nk_do_scrollbarv+0x334>
 80185cc:	e007      	b.n	80185de <nk_do_scrollbarv+0x11a>
 80185ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80185d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80185d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80185da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80185de:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 80185e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80185e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80185ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80185ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185f2:	d501      	bpl.n	80185f8 <nk_do_scrollbarv+0x134>
 80185f4:	68bb      	ldr	r3, [r7, #8]
 80185f6:	e000      	b.n	80185fa <nk_do_scrollbarv+0x136>
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.y = scroll.y;
 80185fe:	69fb      	ldr	r3, [r7, #28]
 8018600:	637b      	str	r3, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 8018602:	683b      	ldr	r3, [r7, #0]
 8018604:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801860e:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8018612:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8018616:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801861a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801861e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8018622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018626:	9202      	str	r2, [sp, #8]
 8018628:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801862c:	9201      	str	r2, [sp, #4]
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	2301      	movs	r3, #1
 8018632:	460a      	mov	r2, r1
 8018634:	eeb0 0a46 	vmov.f32	s0, s12
 8018638:	eef0 0a66 	vmov.f32	s1, s13
 801863c:	eeb0 1a47 	vmov.f32	s2, s14
 8018640:	eef0 1a67 	vmov.f32	s3, s15
 8018644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018646:	f7f7 f8d7 	bl	800f7f8 <nk_do_button_symbol>
 801864a:	4603      	mov	r3, r0
 801864c:	2b00      	cmp	r3, #0
 801864e:	d007      	beq.n	8018660 <nk_do_scrollbarv+0x19c>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 8018650:	ed97 7a04 	vldr	s14, [r7, #16]
 8018654:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8018658:	ee77 7a67 	vsub.f32	s15, s14, s15
 801865c:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.y = scroll.y + scroll.h - button.h;
 8018660:	ed97 7a07 	vldr	s14, [r7, #28]
 8018664:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018668:	ee37 7a27 	vadd.f32	s14, s14, s15
 801866c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018674:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	33cc      	adds	r3, #204	; 0xcc
 8018682:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8018686:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801868a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801868e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018692:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8018696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801869a:	9202      	str	r2, [sp, #8]
 801869c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80186a0:	9201      	str	r2, [sp, #4]
 80186a2:	9300      	str	r3, [sp, #0]
 80186a4:	2301      	movs	r3, #1
 80186a6:	460a      	mov	r2, r1
 80186a8:	eeb0 0a46 	vmov.f32	s0, s12
 80186ac:	eef0 0a66 	vmov.f32	s1, s13
 80186b0:	eeb0 1a47 	vmov.f32	s2, s14
 80186b4:	eef0 1a67 	vmov.f32	s3, s15
 80186b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80186ba:	f7f7 f89d 	bl	800f7f8 <nk_do_button_symbol>
 80186be:	4603      	mov	r3, r0
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d007      	beq.n	80186d4 <nk_do_scrollbarv+0x210>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 80186c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80186c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80186cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80186d0:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.y = scroll.y + button.h;
 80186d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80186d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80186dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80186e0:	edc7 7a07 	vstr	s15, [r7, #28]
        scroll.h = scroll_h;
 80186e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80186e8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.h);
 80186ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80186ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80186f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80186f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186fa:	d501      	bpl.n	8018700 <nk_do_scrollbarv+0x23c>
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	e000      	b.n	8018702 <nk_do_scrollbarv+0x23e>
 8018700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.h);
 8018706:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801870a:	ed97 7a03 	vldr	s14, [r7, #12]
 801870e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018712:	ed97 7a04 	vldr	s14, [r7, #16]
 8018716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801871a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801871e:	d50a      	bpl.n	8018736 <nk_do_scrollbarv+0x272>
 8018720:	edd7 7a04 	vldr	s15, [r7, #16]
 8018724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801872c:	bf4c      	ite	mi
 801872e:	2301      	movmi	r3, #1
 8018730:	2300      	movpl	r3, #0
 8018732:	b2db      	uxtb	r3, r3
 8018734:	e00d      	b.n	8018752 <nk_do_scrollbarv+0x28e>
 8018736:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801873a:	ed97 7a03 	vldr	s14, [r7, #12]
 801873e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801874a:	bf4c      	ite	mi
 801874c:	2301      	movmi	r3, #1
 801874e:	2300      	movpl	r3, #0
 8018750:	b2db      	uxtb	r3, r3
 8018752:	2b00      	cmp	r3, #0
 8018754:	d002      	beq.n	801875c <nk_do_scrollbarv+0x298>
 8018756:	eddf 7a28 	vldr	s15, [pc, #160]	; 80187f8 <nk_do_scrollbarv+0x334>
 801875a:	e015      	b.n	8018788 <nk_do_scrollbarv+0x2c4>
 801875c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018760:	ed97 7a03 	vldr	s14, [r7, #12]
 8018764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018768:	ed97 7a04 	vldr	s14, [r7, #16]
 801876c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018774:	d502      	bpl.n	801877c <nk_do_scrollbarv+0x2b8>
 8018776:	edd7 7a04 	vldr	s15, [r7, #16]
 801877a:	e005      	b.n	8018788 <nk_do_scrollbarv+0x2c4>
 801877c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018780:	ed97 7a03 	vldr	s14, [r7, #12]
 8018784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018788:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.h / target;
 801878c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8018790:	ed97 7a03 	vldr	s14, [r7, #12]
 8018794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018798:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 801879c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80187a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80187a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80187a8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate scrollbar cursor bounds */
    cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);
 80187ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80187b0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80187b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80187be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80187c2:	683b      	ldr	r3, [r7, #0]
 80187c4:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80187c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80187cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80187d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80187d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80187d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187dc:	d50e      	bpl.n	80187fc <nk_do_scrollbarv+0x338>
 80187de:	eddf 7a06 	vldr	s15, [pc, #24]	; 80187f8 <nk_do_scrollbarv+0x334>
 80187e2:	e01f      	b.n	8018824 <nk_do_scrollbarv+0x360>
 80187e4:	08022210 	.word	0x08022210
 80187e8:	08023c94 	.word	0x08023c94
 80187ec:	08022214 	.word	0x08022214
 80187f0:	08022234 	.word	0x08022234
 80187f4:	0802223c 	.word	0x0802223c
 80187f8:	00000000 	.word	0x00000000
 80187fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018800:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8018804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018808:	683b      	ldr	r3, [r7, #0]
 801880a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801880e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8018818:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801881c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018824:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border + style->padding.y;
 8018828:	ed97 7a07 	vldr	s14, [r7, #28]
 801882c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8018830:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8018834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018838:	ee37 7a27 	vadd.f32	s14, s14, s15
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801884c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018850:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    cursor.w = scroll.w - (2 * style->border + 2 * style->padding.x);
 8018854:	ed97 7a08 	vldr	s14, [r7, #32]
 8018858:	683b      	ldr	r3, [r7, #0]
 801885a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801885e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8018868:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801886c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018874:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    cursor.x = scroll.x + style->border + style->padding.x;
 8018878:	ed97 7a06 	vldr	s14, [r7, #24]
 801887c:	683b      	ldr	r3, [r7, #0]
 801887e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018882:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801888c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018890:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    /* calculate empty space around cursor */
    empty_north.x = scroll.x;
 8018894:	69bb      	ldr	r3, [r7, #24]
 8018896:	667b      	str	r3, [r7, #100]	; 0x64
    empty_north.y = scroll.y;
 8018898:	69fb      	ldr	r3, [r7, #28]
 801889a:	66bb      	str	r3, [r7, #104]	; 0x68
    empty_north.w = scroll.w;
 801889c:	6a3b      	ldr	r3, [r7, #32]
 801889e:	66fb      	str	r3, [r7, #108]	; 0x6c
    empty_north.h = NK_MAX(cursor.y - scroll.y, 0);
 80188a0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80188a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80188a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80188b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b4:	d502      	bpl.n	80188bc <nk_do_scrollbarv+0x3f8>
 80188b6:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 80187f8 <nk_do_scrollbarv+0x334>
 80188ba:	e005      	b.n	80188c8 <nk_do_scrollbarv+0x404>
 80188bc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80188c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80188c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188c8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    empty_south.x = scroll.x;
 80188cc:	69bb      	ldr	r3, [r7, #24]
 80188ce:	657b      	str	r3, [r7, #84]	; 0x54
    empty_south.y = cursor.y + cursor.h;
 80188d0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80188d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80188d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188dc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    empty_south.w = scroll.w;
 80188e0:	6a3b      	ldr	r3, [r7, #32]
 80188e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    empty_south.h = NK_MAX((scroll.y + scroll.h) - (cursor.y + cursor.h), 0);
 80188e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80188e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80188ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80188f0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80188f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80188f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80188fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018900:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018908:	d502      	bpl.n	8018910 <nk_do_scrollbarv+0x44c>
 801890a:	ed5f 7a45 	vldr	s15, [pc, #-276]	; 80187f8 <nk_do_scrollbarv+0x334>
 801890e:	e00d      	b.n	801892c <nk_do_scrollbarv+0x468>
 8018910:	ed97 7a07 	vldr	s14, [r7, #28]
 8018914:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018918:	ee37 7a27 	vadd.f32	s14, s14, s15
 801891c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8018920:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8018924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018928:	ee77 7a67 	vsub.f32	s15, s14, s15
 801892c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 8018930:	f107 0218 	add.w	r2, r7, #24
 8018934:	2300      	movs	r3, #0
 8018936:	9303      	str	r3, [sp, #12]
 8018938:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801893c:	9302      	str	r3, [sp, #8]
 801893e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018942:	9301      	str	r3, [sp, #4]
 8018944:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018948:	9300      	str	r3, [sp, #0]
 801894a:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 801894e:	edd7 0a03 	vldr	s1, [r7, #12]
 8018952:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8018956:	4613      	mov	r3, r2
 8018958:	697a      	ldr	r2, [r7, #20]
 801895a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801895e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018960:	f7ff f90e 	bl	8017b80 <nk_scrollbar_behavior>
 8018964:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_north, &empty_south, scroll_offset, target, scroll_step, NK_VERTICAL);
    scroll_off = scroll_offset / target;
 8018968:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801896c:	ed97 7a03 	vldr	s14, [r7, #12]
 8018970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018974:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border_cursor + style->padding.y;
 8018978:	ed97 7a07 	vldr	s14, [r7, #28]
 801897c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8018980:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8018984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018988:	ee37 7a27 	vadd.f32	s14, s14, s15
 801898c:	683b      	ldr	r3, [r7, #0]
 801898e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8018992:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018996:	683b      	ldr	r3, [r7, #0]
 8018998:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801899c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80189a0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 80189a4:	683b      	ldr	r3, [r7, #0]
 80189a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d007      	beq.n	80189be <nk_do_scrollbarv+0x4fa>
 80189ae:	683b      	ldr	r3, [r7, #0]
 80189b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80189b4:	683a      	ldr	r2, [r7, #0]
 80189b6:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80189ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189bc:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 80189be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189c0:	6819      	ldr	r1, [r3, #0]
 80189c2:	f107 0218 	add.w	r2, r7, #24
 80189c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80189ca:	9300      	str	r3, [sp, #0]
 80189cc:	4613      	mov	r3, r2
 80189ce:	683a      	ldr	r2, [r7, #0]
 80189d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189d2:	f7ff fc5b 	bl	801828c <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 80189d6:	683b      	ldr	r3, [r7, #0]
 80189d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d007      	beq.n	80189f0 <nk_do_scrollbarv+0x52c>
 80189e0:	683b      	ldr	r3, [r7, #0]
 80189e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80189e6:	683a      	ldr	r2, [r7, #0]
 80189e8:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80189ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189ee:	4798      	blx	r3
    return scroll_offset;
 80189f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 80189f2:	ee07 3a90 	vmov	s15, r3
 80189f6:	eeb0 0a67 	vmov.f32	s0, s15
 80189fa:	3788      	adds	r7, #136	; 0x88
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}

08018a00 <nk_do_scrollbarh>:
nk_do_scrollbarh(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b0a6      	sub	sp, #152	; 0x98
 8018a04:	af04      	add	r7, sp, #16
 8018a06:	62f8      	str	r0, [r7, #44]	; 0x2c
 8018a08:	62b9      	str	r1, [r7, #40]	; 0x28
 8018a0a:	eeb0 6a40 	vmov.f32	s12, s0
 8018a0e:	eef0 6a60 	vmov.f32	s13, s1
 8018a12:	eeb0 7a41 	vmov.f32	s14, s2
 8018a16:	eef0 7a61 	vmov.f32	s15, s3
 8018a1a:	617a      	str	r2, [r7, #20]
 8018a1c:	ed87 2a04 	vstr	s4, [r7, #16]
 8018a20:	edc7 2a03 	vstr	s5, [r7, #12]
 8018a24:	ed87 3a02 	vstr	s6, [r7, #8]
 8018a28:	edc7 3a01 	vstr	s7, [r7, #4]
 8018a2c:	603b      	str	r3, [r7, #0]
 8018a2e:	ed87 6a06 	vstr	s12, [r7, #24]
 8018a32:	edc7 6a07 	vstr	s13, [r7, #28]
 8018a36:	ed87 7a08 	vstr	s14, [r7, #32]
 8018a3a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 8018a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d105      	bne.n	8018a50 <nk_do_scrollbarh+0x50>
 8018a44:	4b94      	ldr	r3, [pc, #592]	; (8018c98 <nk_do_scrollbarh+0x298>)
 8018a46:	4a95      	ldr	r2, [pc, #596]	; (8018c9c <nk_do_scrollbarh+0x29c>)
 8018a48:	21ee      	movs	r1, #238	; 0xee
 8018a4a:	4895      	ldr	r0, [pc, #596]	; (8018ca0 <nk_do_scrollbarh+0x2a0>)
 8018a4c:	f005 fafa 	bl	801e044 <__assert_func>
    NK_ASSERT(style);
 8018a50:	683b      	ldr	r3, [r7, #0]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d105      	bne.n	8018a62 <nk_do_scrollbarh+0x62>
 8018a56:	4b93      	ldr	r3, [pc, #588]	; (8018ca4 <nk_do_scrollbarh+0x2a4>)
 8018a58:	4a90      	ldr	r2, [pc, #576]	; (8018c9c <nk_do_scrollbarh+0x29c>)
 8018a5a:	21ef      	movs	r1, #239	; 0xef
 8018a5c:	4890      	ldr	r0, [pc, #576]	; (8018ca0 <nk_do_scrollbarh+0x2a0>)
 8018a5e:	f005 faf1 	bl	801e044 <__assert_func>
    if (!out || !style) return 0;
 8018a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d002      	beq.n	8018a6e <nk_do_scrollbarh+0x6e>
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d102      	bne.n	8018a74 <nk_do_scrollbarh+0x74>
 8018a6e:	f04f 0300 	mov.w	r3, #0
 8018a72:	e200      	b.n	8018e76 <nk_do_scrollbarh+0x476>

    /* scrollbar background */
    scroll.h = NK_MAX(scroll.h, 1);
 8018a74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018a78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a84:	d502      	bpl.n	8018a8c <nk_do_scrollbarh+0x8c>
 8018a86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8018a8a:	e000      	b.n	8018a8e <nk_do_scrollbarh+0x8e>
 8018a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a8e:	627b      	str	r3, [r7, #36]	; 0x24
    scroll.w = NK_MAX(scroll.w, 2 * scroll.h);
 8018a90:	ed97 7a08 	vldr	s14, [r7, #32]
 8018a94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018a98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aa4:	d504      	bpl.n	8018ab0 <nk_do_scrollbarh+0xb0>
 8018aa6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018aaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018aae:	e001      	b.n	8018ab4 <nk_do_scrollbarh+0xb4>
 8018ab0:	edd7 7a08 	vldr	s15, [r7, #32]
 8018ab4:	edc7 7a08 	vstr	s15, [r7, #32]
    if (target <= scroll.w) return 0;
 8018ab8:	edd7 7a08 	vldr	s15, [r7, #32]
 8018abc:	ed97 7a03 	vldr	s14, [r7, #12]
 8018ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ac8:	d802      	bhi.n	8018ad0 <nk_do_scrollbarh+0xd0>
 8018aca:	f04f 0300 	mov.w	r3, #0
 8018ace:	e1d2      	b.n	8018e76 <nk_do_scrollbarh+0x476>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 8018ad0:	683b      	ldr	r3, [r7, #0]
 8018ad2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	f000 8094 	beq.w	8018c04 <nk_do_scrollbarh+0x204>
        nk_flags ws;
        float scroll_w;
        struct nk_rect button;
        button.y = scroll.y;
 8018adc:	69fb      	ldr	r3, [r7, #28]
 8018ade:	637b      	str	r3, [r7, #52]	; 0x34
        button.w = scroll.h;
 8018ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae2:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.h;
 8018ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae6:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_w = scroll.w - 2 * button.w;
 8018ae8:	ed97 7a08 	vldr	s14, [r7, #32]
 8018aec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018af0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018af8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 8018afc:	ed97 7a02 	vldr	s14, [r7, #8]
 8018b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8018b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b0c:	d501      	bpl.n	8018b12 <nk_do_scrollbarh+0x112>
 8018b0e:	68bb      	ldr	r3, [r7, #8]
 8018b10:	e000      	b.n	8018b14 <nk_do_scrollbarh+0x114>
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.x = scroll.x;
 8018b18:	69bb      	ldr	r3, [r7, #24]
 8018b1a:	633b      	str	r3, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 8018b1c:	683b      	ldr	r3, [r7, #0]
 8018b1e:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018b28:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8018b2c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8018b30:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8018b34:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018b38:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8018b3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018b40:	9202      	str	r2, [sp, #8]
 8018b42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8018b46:	9201      	str	r2, [sp, #4]
 8018b48:	9300      	str	r3, [sp, #0]
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	460a      	mov	r2, r1
 8018b4e:	eeb0 0a46 	vmov.f32	s0, s12
 8018b52:	eef0 0a66 	vmov.f32	s1, s13
 8018b56:	eeb0 1a47 	vmov.f32	s2, s14
 8018b5a:	eef0 1a67 	vmov.f32	s3, s15
 8018b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018b60:	f7f6 fe4a 	bl	800f7f8 <nk_do_button_symbol>
 8018b64:	4603      	mov	r3, r0
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d007      	beq.n	8018b7a <nk_do_scrollbarh+0x17a>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 8018b6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8018b6e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8018b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b76:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.x = scroll.x + scroll.w - button.w;
 8018b7a:	ed97 7a06 	vldr	s14, [r7, #24]
 8018b7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8018b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b86:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b8e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 8018b98:	683b      	ldr	r3, [r7, #0]
 8018b9a:	33cc      	adds	r3, #204	; 0xcc
 8018b9c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8018ba0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8018ba4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8018ba8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018bac:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8018bb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018bb4:	9202      	str	r2, [sp, #8]
 8018bb6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8018bba:	9201      	str	r2, [sp, #4]
 8018bbc:	9300      	str	r3, [sp, #0]
 8018bbe:	2301      	movs	r3, #1
 8018bc0:	460a      	mov	r2, r1
 8018bc2:	eeb0 0a46 	vmov.f32	s0, s12
 8018bc6:	eef0 0a66 	vmov.f32	s1, s13
 8018bca:	eeb0 1a47 	vmov.f32	s2, s14
 8018bce:	eef0 1a67 	vmov.f32	s3, s15
 8018bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018bd4:	f7f6 fe10 	bl	800f7f8 <nk_do_button_symbol>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d007      	beq.n	8018bee <nk_do_scrollbarh+0x1ee>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 8018bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8018be2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8018be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018bea:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.x = scroll.x + button.w;
 8018bee:	ed97 7a06 	vldr	s14, [r7, #24]
 8018bf2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018bfa:	edc7 7a06 	vstr	s15, [r7, #24]
        scroll.w = scroll_w;
 8018bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018c02:	623b      	str	r3, [r7, #32]
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.w);
 8018c04:	edd7 7a08 	vldr	s15, [r7, #32]
 8018c08:	ed97 7a02 	vldr	s14, [r7, #8]
 8018c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c14:	d501      	bpl.n	8018c1a <nk_do_scrollbarh+0x21a>
 8018c16:	68bb      	ldr	r3, [r7, #8]
 8018c18:	e000      	b.n	8018c1c <nk_do_scrollbarh+0x21c>
 8018c1a:	6a3b      	ldr	r3, [r7, #32]
 8018c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.w);
 8018c20:	edd7 7a08 	vldr	s15, [r7, #32]
 8018c24:	ed97 7a03 	vldr	s14, [r7, #12]
 8018c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8018c30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c38:	d50a      	bpl.n	8018c50 <nk_do_scrollbarh+0x250>
 8018c3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8018c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c46:	bf4c      	ite	mi
 8018c48:	2301      	movmi	r3, #1
 8018c4a:	2300      	movpl	r3, #0
 8018c4c:	b2db      	uxtb	r3, r3
 8018c4e:	e00d      	b.n	8018c6c <nk_do_scrollbarh+0x26c>
 8018c50:	edd7 7a08 	vldr	s15, [r7, #32]
 8018c54:	ed97 7a03 	vldr	s14, [r7, #12]
 8018c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c64:	bf4c      	ite	mi
 8018c66:	2301      	movmi	r3, #1
 8018c68:	2300      	movpl	r3, #0
 8018c6a:	b2db      	uxtb	r3, r3
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d002      	beq.n	8018c76 <nk_do_scrollbarh+0x276>
 8018c70:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018ca8 <nk_do_scrollbarh+0x2a8>
 8018c74:	e020      	b.n	8018cb8 <nk_do_scrollbarh+0x2b8>
 8018c76:	edd7 7a08 	vldr	s15, [r7, #32]
 8018c7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8018c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c82:	ed97 7a04 	vldr	s14, [r7, #16]
 8018c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c8e:	d50d      	bpl.n	8018cac <nk_do_scrollbarh+0x2ac>
 8018c90:	edd7 7a04 	vldr	s15, [r7, #16]
 8018c94:	e010      	b.n	8018cb8 <nk_do_scrollbarh+0x2b8>
 8018c96:	bf00      	nop
 8018c98:	08022210 	.word	0x08022210
 8018c9c:	08023ca8 	.word	0x08023ca8
 8018ca0:	08022214 	.word	0x08022214
 8018ca4:	08022234 	.word	0x08022234
 8018ca8:	00000000 	.word	0x00000000
 8018cac:	edd7 7a08 	vldr	s15, [r7, #32]
 8018cb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8018cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018cb8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.w / target;
 8018cbc:	edd7 6a08 	vldr	s13, [r7, #32]
 8018cc0:	ed97 7a03 	vldr	s14, [r7, #12]
 8018cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018cc8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 8018ccc:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8018cd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8018cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018cd8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate cursor bounds */
    cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);
 8018cdc:	ed97 7a08 	vldr	s14, [r7, #32]
 8018ce0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8018ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018cee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8018cf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d04:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;
 8018d08:	ed97 7a06 	vldr	s14, [r7, #24]
 8018d0c:	edd7 6a08 	vldr	s13, [r7, #32]
 8018d10:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8018d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018d1c:	683b      	ldr	r3, [r7, #0]
 8018d1e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8018d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d30:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    cursor.h = scroll.h - (2 * style->border + 2 * style->padding.y);
 8018d34:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018d38:	683b      	ldr	r3, [r7, #0]
 8018d3a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018d3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8018d48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d54:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    cursor.y = scroll.y + style->border + style->padding.y;
 8018d58:	ed97 7a07 	vldr	s14, [r7, #28]
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018d66:	683b      	ldr	r3, [r7, #0]
 8018d68:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8018d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d70:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* calculate empty space around cursor */
    empty_west.x = scroll.x;
 8018d74:	69bb      	ldr	r3, [r7, #24]
 8018d76:	657b      	str	r3, [r7, #84]	; 0x54
    empty_west.y = scroll.y;
 8018d78:	69fb      	ldr	r3, [r7, #28]
 8018d7a:	65bb      	str	r3, [r7, #88]	; 0x58
    empty_west.w = cursor.x - scroll.x;
 8018d7c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8018d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8018d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d88:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    empty_west.h = scroll.h;
 8018d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d8e:	663b      	str	r3, [r7, #96]	; 0x60

    empty_east.x = cursor.x + cursor.w;
 8018d90:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8018d94:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8018d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d9c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    empty_east.y = scroll.y;
 8018da0:	69fb      	ldr	r3, [r7, #28]
 8018da2:	64bb      	str	r3, [r7, #72]	; 0x48
    empty_east.w = (scroll.x + scroll.w) - (cursor.x + cursor.w);
 8018da4:	ed97 7a06 	vldr	s14, [r7, #24]
 8018da8:	edd7 7a08 	vldr	s15, [r7, #32]
 8018dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018db0:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8018db4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8018db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018dc0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    empty_east.h = scroll.h;
 8018dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc6:	653b      	str	r3, [r7, #80]	; 0x50

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 8018dc8:	f107 0218 	add.w	r2, r7, #24
 8018dcc:	2301      	movs	r3, #1
 8018dce:	9303      	str	r3, [sp, #12]
 8018dd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018dd4:	9302      	str	r3, [sp, #8]
 8018dd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018dda:	9301      	str	r3, [sp, #4]
 8018ddc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018de0:	9300      	str	r3, [sp, #0]
 8018de2:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 8018de6:	edd7 0a03 	vldr	s1, [r7, #12]
 8018dea:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8018dee:	4613      	mov	r3, r2
 8018df0:	697a      	ldr	r2, [r7, #20]
 8018df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8018df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018df8:	f7fe fec2 	bl	8017b80 <nk_scrollbar_behavior>
 8018dfc:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_west, &empty_east, scroll_offset, target, scroll_step, NK_HORIZONTAL);
    scroll_off = scroll_offset / target;
 8018e00:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8018e04:	ed97 7a03 	vldr	s14, [r7, #12]
 8018e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018e0c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.x = scroll.x + (scroll_off * scroll.w);
 8018e10:	ed97 7a06 	vldr	s14, [r7, #24]
 8018e14:	edd7 6a08 	vldr	s13, [r7, #32]
 8018e18:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8018e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e24:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d007      	beq.n	8018e42 <nk_do_scrollbarh+0x442>
 8018e32:	683b      	ldr	r3, [r7, #0]
 8018e34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8018e38:	683a      	ldr	r2, [r7, #0]
 8018e3a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8018e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e40:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 8018e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e44:	6819      	ldr	r1, [r3, #0]
 8018e46:	f107 0218 	add.w	r2, r7, #24
 8018e4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018e4e:	9300      	str	r3, [sp, #0]
 8018e50:	4613      	mov	r3, r2
 8018e52:	683a      	ldr	r2, [r7, #0]
 8018e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e56:	f7ff fa19 	bl	801828c <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 8018e5a:	683b      	ldr	r3, [r7, #0]
 8018e5c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d007      	beq.n	8018e74 <nk_do_scrollbarh+0x474>
 8018e64:	683b      	ldr	r3, [r7, #0]
 8018e66:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8018e6a:	683a      	ldr	r2, [r7, #0]
 8018e6c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8018e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e72:	4798      	blx	r3
    return scroll_offset;
 8018e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8018e76:	ee07 3a90 	vmov	s15, r3
 8018e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8018e7e:	3788      	adds	r7, #136	; 0x88
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}

08018e84 <nk_style_default>:
/* ===============================================================
 *
 *                              STYLE
 *
 * ===============================================================*/
NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	2100      	movs	r1, #0
 8018e8e:	6878      	ldr	r0, [r7, #4]
 8018e90:	f000 f838 	bl	8018f04 <nk_style_from_table>
 8018e94:	bf00      	nop
 8018e96:	3708      	adds	r7, #8
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd80      	pop	{r7, pc}

08018e9c <nk_style_item_color>:
{
    return nk_color_names[c];
}
NK_API struct nk_style_item
nk_style_item_color(struct nk_color col)
{
 8018e9c:	b4b0      	push	{r4, r5, r7}
 8018e9e:	b08b      	sub	sp, #44	; 0x2c
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
 8018ea4:	6039      	str	r1, [r7, #0]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	733b      	strb	r3, [r7, #12]
    i.data.color = col;
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	613b      	str	r3, [r7, #16]
    return i;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	461d      	mov	r5, r3
 8018eb2:	f107 040c 	add.w	r4, r7, #12
 8018eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018eba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018ebe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8018ec2:	6878      	ldr	r0, [r7, #4]
 8018ec4:	372c      	adds	r7, #44	; 0x2c
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bcb0      	pop	{r4, r5, r7}
 8018eca:	4770      	bx	lr

08018ecc <nk_style_item_hide>:
    i.data.slice = slice;
    return i;
}
NK_API struct nk_style_item
nk_style_item_hide(void)
{
 8018ecc:	b5b0      	push	{r4, r5, r7, lr}
 8018ece:	b08a      	sub	sp, #40	; 0x28
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	733b      	strb	r3, [r7, #12]
    i.data.color = nk_rgba(0,0,0,0);
 8018ed8:	2300      	movs	r3, #0
 8018eda:	2200      	movs	r2, #0
 8018edc:	2100      	movs	r1, #0
 8018ede:	2000      	movs	r0, #0
 8018ee0:	f7f6 ff10 	bl	800fd04 <nk_rgba>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	613b      	str	r3, [r7, #16]
    return i;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	461d      	mov	r5, r3
 8018eec:	f107 040c 	add.w	r4, r7, #12
 8018ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018ef4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018ef8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	3728      	adds	r7, #40	; 0x28
 8018f00:	46bd      	mov	sp, r7
 8018f02:	bdb0      	pop	{r4, r5, r7, pc}

08018f04 <nk_style_from_table>:
NK_API void
nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)
{
 8018f04:	b5b0      	push	{r4, r5, r7, lr}
 8018f06:	b09e      	sub	sp, #120	; 0x78
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6278      	str	r0, [r7, #36]	; 0x24
 8018f0c:	6239      	str	r1, [r7, #32]
    struct nk_style_combo *combo;
    struct nk_style_chart *chart;
    struct nk_style_tab *tab;
    struct nk_style_window *win;

    NK_ASSERT(ctx);
 8018f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d105      	bne.n	8018f20 <nk_style_from_table+0x1c>
 8018f14:	4b09      	ldr	r3, [pc, #36]	; (8018f3c <nk_style_from_table+0x38>)
 8018f16:	4a0a      	ldr	r2, [pc, #40]	; (8018f40 <nk_style_from_table+0x3c>)
 8018f18:	216b      	movs	r1, #107	; 0x6b
 8018f1a:	480a      	ldr	r0, [pc, #40]	; (8018f44 <nk_style_from_table+0x40>)
 8018f1c:	f005 f892 	bl	801e044 <__assert_func>
    if (!ctx) return;
 8018f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	f002 8079 	beq.w	801b01a <nk_style_from_table+0x2116>
    style = &ctx->style;
 8018f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8018f2e:	677b      	str	r3, [r7, #116]	; 0x74
    table = (!table) ? nk_default_color_style: table;
 8018f30:	6a3b      	ldr	r3, [r7, #32]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d008      	beq.n	8018f48 <nk_style_from_table+0x44>
 8018f36:	6a3b      	ldr	r3, [r7, #32]
 8018f38:	e007      	b.n	8018f4a <nk_style_from_table+0x46>
 8018f3a:	bf00      	nop
 8018f3c:	080224b0 	.word	0x080224b0
 8018f40:	08023d2c 	.word	0x08023d2c
 8018f44:	080224b4 	.word	0x080224b4
 8018f48:	4bc6      	ldr	r3, [pc, #792]	; (8019264 <nk_style_from_table+0x360>)
 8018f4a:	623b      	str	r3, [r7, #32]

    /* default text */
    text = &style->text;
 8018f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018f4e:	332c      	adds	r3, #44	; 0x2c
 8018f50:	673b      	str	r3, [r7, #112]	; 0x70
    text->color = table[NK_COLOR_TEXT];
 8018f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018f54:	6a3a      	ldr	r2, [r7, #32]
 8018f56:	6810      	ldr	r0, [r2, #0]
 8018f58:	6018      	str	r0, [r3, #0]
    text->padding = nk_vec2(0,0);
 8018f5a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8018f5c:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8019268 <nk_style_from_table+0x364>
 8018f60:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8019268 <nk_style_from_table+0x364>
 8018f64:	f7fb fbea 	bl	801473c <nk_vec2>
 8018f68:	eeb0 7a40 	vmov.f32	s14, s0
 8018f6c:	eef0 7a60 	vmov.f32	s15, s1
 8018f70:	ed84 7a01 	vstr	s14, [r4, #4]
 8018f74:	edc4 7a02 	vstr	s15, [r4, #8]

    /* default button */
    button = &style->button;
 8018f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018f7a:	3338      	adds	r3, #56	; 0x38
 8018f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8018f7e:	2198      	movs	r1, #152	; 0x98
 8018f80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018f82:	f003 fb67 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_BUTTON]);
 8018f86:	6a3b      	ldr	r3, [r7, #32]
 8018f88:	3310      	adds	r3, #16
 8018f8a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f8c:	463a      	mov	r2, r7
 8018f8e:	6819      	ldr	r1, [r3, #0]
 8018f90:	460b      	mov	r3, r1
 8018f92:	4619      	mov	r1, r3
 8018f94:	4610      	mov	r0, r2
 8018f96:	f7ff ff81 	bl	8018e9c <nk_style_item_color>
 8018f9a:	4625      	mov	r5, r4
 8018f9c:	463c      	mov	r4, r7
 8018f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018fa2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018fa6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 8018faa:	6a3b      	ldr	r3, [r7, #32]
 8018fac:	3314      	adds	r3, #20
 8018fae:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018fb0:	463a      	mov	r2, r7
 8018fb2:	6819      	ldr	r1, [r3, #0]
 8018fb4:	460b      	mov	r3, r1
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	4610      	mov	r0, r2
 8018fba:	f7ff ff6f 	bl	8018e9c <nk_style_item_color>
 8018fbe:	341c      	adds	r4, #28
 8018fc0:	463d      	mov	r5, r7
 8018fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018fc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 8018fce:	6a3b      	ldr	r3, [r7, #32]
 8018fd0:	3318      	adds	r3, #24
 8018fd2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018fd4:	463a      	mov	r2, r7
 8018fd6:	6819      	ldr	r1, [r3, #0]
 8018fd8:	460b      	mov	r3, r1
 8018fda:	4619      	mov	r1, r3
 8018fdc:	4610      	mov	r0, r2
 8018fde:	f7ff ff5d 	bl	8018e9c <nk_style_item_color>
 8018fe2:	3438      	adds	r4, #56	; 0x38
 8018fe4:	463d      	mov	r5, r7
 8018fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_BORDER];
 8018ff2:	6a3b      	ldr	r3, [r7, #32]
 8018ff4:	f103 020c 	add.w	r2, r3, #12
 8018ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ffa:	3354      	adds	r3, #84	; 0x54
 8018ffc:	6810      	ldr	r0, [r2, #0]
 8018ffe:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_BUTTON];
 8019000:	6a3b      	ldr	r3, [r7, #32]
 8019002:	f103 0210 	add.w	r2, r3, #16
 8019006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019008:	3358      	adds	r3, #88	; 0x58
 801900a:	6810      	ldr	r0, [r2, #0]
 801900c:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801900e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019010:	6a3a      	ldr	r2, [r7, #32]
 8019012:	335c      	adds	r3, #92	; 0x5c
 8019014:	6810      	ldr	r0, [r2, #0]
 8019016:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801901a:	6a3a      	ldr	r2, [r7, #32]
 801901c:	3360      	adds	r3, #96	; 0x60
 801901e:	6810      	ldr	r0, [r2, #0]
 8019020:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8019022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019024:	6a3a      	ldr	r2, [r7, #32]
 8019026:	3364      	adds	r3, #100	; 0x64
 8019028:	6810      	ldr	r0, [r2, #0]
 801902a:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801902c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801902e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019032:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019036:	f7fb fb81 	bl	801473c <nk_vec2>
 801903a:	eeb0 7a40 	vmov.f32	s14, s0
 801903e:	eef0 7a60 	vmov.f32	s15, s1
 8019042:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019046:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->image_padding   = nk_vec2(0.0f,0.0f);
 801904a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801904c:	eddf 0a86 	vldr	s1, [pc, #536]	; 8019268 <nk_style_from_table+0x364>
 8019050:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8019268 <nk_style_from_table+0x364>
 8019054:	f7fb fb72 	bl	801473c <nk_vec2>
 8019058:	eeb0 7a40 	vmov.f32	s14, s0
 801905c:	eef0 7a60 	vmov.f32	s15, s1
 8019060:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 8019064:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
    button->touch_padding   = nk_vec2(0.0f, 0.0f);
 8019068:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801906a:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8019268 <nk_style_from_table+0x364>
 801906e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8019268 <nk_style_from_table+0x364>
 8019072:	f7fb fb63 	bl	801473c <nk_vec2>
 8019076:	eeb0 7a40 	vmov.f32	s14, s0
 801907a:	eef0 7a60 	vmov.f32	s15, s1
 801907e:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019082:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019086:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019088:	2000      	movs	r0, #0
 801908a:	f7f9 ff0b 	bl	8012ea4 <nk_handle_ptr>
 801908e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019094:	2212      	movs	r2, #18
 8019096:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 8019098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801909a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801909e:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 4.0f;
 80190a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80190a2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80190a6:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80190a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80190aa:	2200      	movs	r2, #0
 80190ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 80190b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80190b2:	2200      	movs	r2, #0
 80190b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* contextual button */
    button = &style->contextual_button;
 80190b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80190ba:	33d0      	adds	r3, #208	; 0xd0
 80190bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 80190be:	2198      	movs	r1, #152	; 0x98
 80190c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80190c2:	f003 fac7 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 80190c6:	6a3b      	ldr	r3, [r7, #32]
 80190c8:	3304      	adds	r3, #4
 80190ca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80190cc:	463a      	mov	r2, r7
 80190ce:	6819      	ldr	r1, [r3, #0]
 80190d0:	460b      	mov	r3, r1
 80190d2:	4619      	mov	r1, r3
 80190d4:	4610      	mov	r0, r2
 80190d6:	f7ff fee1 	bl	8018e9c <nk_style_item_color>
 80190da:	4625      	mov	r5, r4
 80190dc:	463c      	mov	r4, r7
 80190de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80190e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80190e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 80190ea:	6a3b      	ldr	r3, [r7, #32]
 80190ec:	3314      	adds	r3, #20
 80190ee:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80190f0:	463a      	mov	r2, r7
 80190f2:	6819      	ldr	r1, [r3, #0]
 80190f4:	460b      	mov	r3, r1
 80190f6:	4619      	mov	r1, r3
 80190f8:	4610      	mov	r0, r2
 80190fa:	f7ff fecf 	bl	8018e9c <nk_style_item_color>
 80190fe:	341c      	adds	r4, #28
 8019100:	463d      	mov	r5, r7
 8019102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019106:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801910a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 801910e:	6a3b      	ldr	r3, [r7, #32]
 8019110:	3318      	adds	r3, #24
 8019112:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019114:	463a      	mov	r2, r7
 8019116:	6819      	ldr	r1, [r3, #0]
 8019118:	460b      	mov	r3, r1
 801911a:	4619      	mov	r1, r3
 801911c:	4610      	mov	r0, r2
 801911e:	f7ff febd 	bl	8018e9c <nk_style_item_color>
 8019122:	3438      	adds	r4, #56	; 0x38
 8019124:	463d      	mov	r5, r7
 8019126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801912a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801912e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 8019132:	6a3b      	ldr	r3, [r7, #32]
 8019134:	1d1a      	adds	r2, r3, #4
 8019136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019138:	3354      	adds	r3, #84	; 0x54
 801913a:	6810      	ldr	r0, [r2, #0]
 801913c:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 801913e:	6a3b      	ldr	r3, [r7, #32]
 8019140:	1d1a      	adds	r2, r3, #4
 8019142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019144:	3358      	adds	r3, #88	; 0x58
 8019146:	6810      	ldr	r0, [r2, #0]
 8019148:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801914a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801914c:	6a3a      	ldr	r2, [r7, #32]
 801914e:	335c      	adds	r3, #92	; 0x5c
 8019150:	6810      	ldr	r0, [r2, #0]
 8019152:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019156:	6a3a      	ldr	r2, [r7, #32]
 8019158:	3360      	adds	r3, #96	; 0x60
 801915a:	6810      	ldr	r0, [r2, #0]
 801915c:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801915e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019160:	6a3a      	ldr	r2, [r7, #32]
 8019162:	3364      	adds	r3, #100	; 0x64
 8019164:	6810      	ldr	r0, [r2, #0]
 8019166:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8019168:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801916a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801916e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019172:	f7fb fae3 	bl	801473c <nk_vec2>
 8019176:	eeb0 7a40 	vmov.f32	s14, s0
 801917a:	eef0 7a60 	vmov.f32	s15, s1
 801917e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019182:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8019186:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019188:	eddf 0a37 	vldr	s1, [pc, #220]	; 8019268 <nk_style_from_table+0x364>
 801918c:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8019268 <nk_style_from_table+0x364>
 8019190:	f7fb fad4 	bl	801473c <nk_vec2>
 8019194:	eeb0 7a40 	vmov.f32	s14, s0
 8019198:	eef0 7a60 	vmov.f32	s15, s1
 801919c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80191a0:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80191a4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80191a6:	2000      	movs	r0, #0
 80191a8:	f7f9 fe7c 	bl	8012ea4 <nk_handle_ptr>
 80191ac:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80191b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80191b2:	2212      	movs	r2, #18
 80191b4:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 80191b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80191b8:	f04f 0200 	mov.w	r2, #0
 80191bc:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 80191be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80191c0:	f04f 0200 	mov.w	r2, #0
 80191c4:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80191c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80191c8:	2200      	movs	r2, #0
 80191ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 80191ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80191d0:	2200      	movs	r2, #0
 80191d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* menu button */
    button = &style->menu_button;
 80191d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80191d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80191dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 80191de:	2198      	movs	r1, #152	; 0x98
 80191e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80191e2:	f003 fa37 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 80191e6:	6a3b      	ldr	r3, [r7, #32]
 80191e8:	3304      	adds	r3, #4
 80191ea:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80191ec:	463a      	mov	r2, r7
 80191ee:	6819      	ldr	r1, [r3, #0]
 80191f0:	460b      	mov	r3, r1
 80191f2:	4619      	mov	r1, r3
 80191f4:	4610      	mov	r0, r2
 80191f6:	f7ff fe51 	bl	8018e9c <nk_style_item_color>
 80191fa:	4625      	mov	r5, r4
 80191fc:	463c      	mov	r4, r7
 80191fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019202:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019206:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801920a:	6a3b      	ldr	r3, [r7, #32]
 801920c:	3304      	adds	r3, #4
 801920e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019210:	463a      	mov	r2, r7
 8019212:	6819      	ldr	r1, [r3, #0]
 8019214:	460b      	mov	r3, r1
 8019216:	4619      	mov	r1, r3
 8019218:	4610      	mov	r0, r2
 801921a:	f7ff fe3f 	bl	8018e9c <nk_style_item_color>
 801921e:	341c      	adds	r4, #28
 8019220:	463d      	mov	r5, r7
 8019222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801922a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801922e:	6a3b      	ldr	r3, [r7, #32]
 8019230:	3304      	adds	r3, #4
 8019232:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019234:	463a      	mov	r2, r7
 8019236:	6819      	ldr	r1, [r3, #0]
 8019238:	460b      	mov	r3, r1
 801923a:	4619      	mov	r1, r3
 801923c:	4610      	mov	r0, r2
 801923e:	f7ff fe2d 	bl	8018e9c <nk_style_item_color>
 8019242:	3438      	adds	r4, #56	; 0x38
 8019244:	463d      	mov	r5, r7
 8019246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801924a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801924e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 8019252:	6a3b      	ldr	r3, [r7, #32]
 8019254:	1d1a      	adds	r2, r3, #4
 8019256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019258:	3354      	adds	r3, #84	; 0x54
 801925a:	6810      	ldr	r0, [r2, #0]
 801925c:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 801925e:	6a3b      	ldr	r3, [r7, #32]
 8019260:	1d1a      	adds	r2, r3, #4
 8019262:	e003      	b.n	801926c <nk_style_from_table+0x368>
 8019264:	08023cbc 	.word	0x08023cbc
 8019268:	00000000 	.word	0x00000000
 801926c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801926e:	3358      	adds	r3, #88	; 0x58
 8019270:	6810      	ldr	r0, [r2, #0]
 8019272:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019276:	6a3a      	ldr	r2, [r7, #32]
 8019278:	335c      	adds	r3, #92	; 0x5c
 801927a:	6810      	ldr	r0, [r2, #0]
 801927c:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801927e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019280:	6a3a      	ldr	r2, [r7, #32]
 8019282:	3360      	adds	r3, #96	; 0x60
 8019284:	6810      	ldr	r0, [r2, #0]
 8019286:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8019288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801928a:	6a3a      	ldr	r2, [r7, #32]
 801928c:	3364      	adds	r3, #100	; 0x64
 801928e:	6810      	ldr	r0, [r2, #0]
 8019290:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8019292:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019294:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019298:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801929c:	f7fb fa4e 	bl	801473c <nk_vec2>
 80192a0:	eeb0 7a40 	vmov.f32	s14, s0
 80192a4:	eef0 7a60 	vmov.f32	s15, s1
 80192a8:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80192ac:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80192b0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192b2:	ed5f 0a13 	vldr	s1, [pc, #-76]	; 8019268 <nk_style_from_table+0x364>
 80192b6:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 8019268 <nk_style_from_table+0x364>
 80192ba:	f7fb fa3f 	bl	801473c <nk_vec2>
 80192be:	eeb0 7a40 	vmov.f32	s14, s0
 80192c2:	eef0 7a60 	vmov.f32	s15, s1
 80192c6:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80192ca:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80192ce:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192d0:	2000      	movs	r0, #0
 80192d2:	f7f9 fde7 	bl	8012ea4 <nk_handle_ptr>
 80192d6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80192da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192dc:	2212      	movs	r2, #18
 80192de:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 80192e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192e2:	f04f 0200 	mov.w	r2, #0
 80192e6:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 1.0f;
 80192e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80192ee:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80192f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192f2:	2200      	movs	r2, #0
 80192f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 80192f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192fa:	2200      	movs	r2, #0
 80192fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* checkbox toggle */
    toggle = &style->checkbox;
 8019300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019302:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8019306:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 8019308:	21c8      	movs	r1, #200	; 0xc8
 801930a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801930c:	f003 f9a2 	bl	801c654 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 8019310:	6a3b      	ldr	r3, [r7, #32]
 8019312:	331c      	adds	r3, #28
 8019314:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019316:	463a      	mov	r2, r7
 8019318:	6819      	ldr	r1, [r3, #0]
 801931a:	460b      	mov	r3, r1
 801931c:	4619      	mov	r1, r3
 801931e:	4610      	mov	r0, r2
 8019320:	f7ff fdbc 	bl	8018e9c <nk_style_item_color>
 8019324:	4625      	mov	r5, r4
 8019326:	463c      	mov	r4, r7
 8019328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801932a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801932c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019330:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8019334:	6a3b      	ldr	r3, [r7, #32]
 8019336:	3320      	adds	r3, #32
 8019338:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801933a:	463a      	mov	r2, r7
 801933c:	6819      	ldr	r1, [r3, #0]
 801933e:	460b      	mov	r3, r1
 8019340:	4619      	mov	r1, r3
 8019342:	4610      	mov	r0, r2
 8019344:	f7ff fdaa 	bl	8018e9c <nk_style_item_color>
 8019348:	341c      	adds	r4, #28
 801934a:	463d      	mov	r5, r7
 801934c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801934e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019350:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8019358:	6a3b      	ldr	r3, [r7, #32]
 801935a:	3320      	adds	r3, #32
 801935c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801935e:	463a      	mov	r2, r7
 8019360:	6819      	ldr	r1, [r3, #0]
 8019362:	460b      	mov	r3, r1
 8019364:	4619      	mov	r1, r3
 8019366:	4610      	mov	r0, r2
 8019368:	f7ff fd98 	bl	8018e9c <nk_style_item_color>
 801936c:	3438      	adds	r4, #56	; 0x38
 801936e:	463d      	mov	r5, r7
 8019370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801937c:	6a3b      	ldr	r3, [r7, #32]
 801937e:	3324      	adds	r3, #36	; 0x24
 8019380:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019382:	463a      	mov	r2, r7
 8019384:	6819      	ldr	r1, [r3, #0]
 8019386:	460b      	mov	r3, r1
 8019388:	4619      	mov	r1, r3
 801938a:	4610      	mov	r0, r2
 801938c:	f7ff fd86 	bl	8018e9c <nk_style_item_color>
 8019390:	3458      	adds	r4, #88	; 0x58
 8019392:	463d      	mov	r5, r7
 8019394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019398:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801939c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 80193a0:	6a3b      	ldr	r3, [r7, #32]
 80193a2:	3324      	adds	r3, #36	; 0x24
 80193a4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80193a6:	463a      	mov	r2, r7
 80193a8:	6819      	ldr	r1, [r3, #0]
 80193aa:	460b      	mov	r3, r1
 80193ac:	4619      	mov	r1, r3
 80193ae:	4610      	mov	r0, r2
 80193b0:	f7ff fd74 	bl	8018e9c <nk_style_item_color>
 80193b4:	3474      	adds	r4, #116	; 0x74
 80193b6:	463d      	mov	r5, r7
 80193b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80193c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 80193c4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80193c6:	2000      	movs	r0, #0
 80193c8:	f7f9 fd6c 	bl	8012ea4 <nk_handle_ptr>
 80193cc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 80193d0:	6a3b      	ldr	r3, [r7, #32]
 80193d2:	1d1a      	adds	r2, r3, #4
 80193d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80193d6:	339c      	adds	r3, #156	; 0x9c
 80193d8:	6810      	ldr	r0, [r2, #0]
 80193da:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 80193dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80193de:	6a3a      	ldr	r2, [r7, #32]
 80193e0:	3390      	adds	r3, #144	; 0x90
 80193e2:	6810      	ldr	r0, [r2, #0]
 80193e4:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 80193e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80193e8:	6a3a      	ldr	r2, [r7, #32]
 80193ea:	3394      	adds	r3, #148	; 0x94
 80193ec:	6810      	ldr	r0, [r2, #0]
 80193ee:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 80193f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80193f2:	6a3a      	ldr	r2, [r7, #32]
 80193f4:	3398      	adds	r3, #152	; 0x98
 80193f6:	6810      	ldr	r0, [r2, #0]
 80193f8:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(2.0f, 2.0f);
 80193fa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80193fc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019400:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019404:	f7fb f99a 	bl	801473c <nk_vec2>
 8019408:	eeb0 7a40 	vmov.f32	s14, s0
 801940c:	eef0 7a60 	vmov.f32	s15, s1
 8019410:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 8019414:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 8019418:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801941a:	ed5f 0a6d 	vldr	s1, [pc, #-436]	; 8019268 <nk_style_from_table+0x364>
 801941e:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 8019268 <nk_style_from_table+0x364>
 8019422:	f7fb f98b 	bl	801473c <nk_vec2>
 8019426:	eeb0 7a40 	vmov.f32	s14, s0
 801942a:	eef0 7a60 	vmov.f32	s15, s1
 801942e:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 8019432:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 8019436:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019438:	2300      	movs	r3, #0
 801943a:	2200      	movs	r2, #0
 801943c:	2100      	movs	r1, #0
 801943e:	2000      	movs	r0, #0
 8019440:	f7f6 fc60 	bl	800fd04 <nk_rgba>
 8019444:	4603      	mov	r3, r0
 8019446:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 8019448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801944a:	f04f 0200 	mov.w	r2, #0
 801944e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 8019452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019454:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8019458:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* option toggle */
    toggle = &style->option;
 801945c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801945e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019462:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 8019464:	21c8      	movs	r1, #200	; 0xc8
 8019466:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8019468:	f003 f8f4 	bl	801c654 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 801946c:	6a3b      	ldr	r3, [r7, #32]
 801946e:	331c      	adds	r3, #28
 8019470:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019472:	463a      	mov	r2, r7
 8019474:	6819      	ldr	r1, [r3, #0]
 8019476:	460b      	mov	r3, r1
 8019478:	4619      	mov	r1, r3
 801947a:	4610      	mov	r0, r2
 801947c:	f7ff fd0e 	bl	8018e9c <nk_style_item_color>
 8019480:	4625      	mov	r5, r4
 8019482:	463c      	mov	r4, r7
 8019484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019488:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801948c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8019490:	6a3b      	ldr	r3, [r7, #32]
 8019492:	3320      	adds	r3, #32
 8019494:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019496:	463a      	mov	r2, r7
 8019498:	6819      	ldr	r1, [r3, #0]
 801949a:	460b      	mov	r3, r1
 801949c:	4619      	mov	r1, r3
 801949e:	4610      	mov	r0, r2
 80194a0:	f7ff fcfc 	bl	8018e9c <nk_style_item_color>
 80194a4:	341c      	adds	r4, #28
 80194a6:	463d      	mov	r5, r7
 80194a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80194b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 80194b4:	6a3b      	ldr	r3, [r7, #32]
 80194b6:	3320      	adds	r3, #32
 80194b8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80194ba:	463a      	mov	r2, r7
 80194bc:	6819      	ldr	r1, [r3, #0]
 80194be:	460b      	mov	r3, r1
 80194c0:	4619      	mov	r1, r3
 80194c2:	4610      	mov	r0, r2
 80194c4:	f7ff fcea 	bl	8018e9c <nk_style_item_color>
 80194c8:	3438      	adds	r4, #56	; 0x38
 80194ca:	463d      	mov	r5, r7
 80194cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80194d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 80194d8:	6a3b      	ldr	r3, [r7, #32]
 80194da:	3324      	adds	r3, #36	; 0x24
 80194dc:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80194de:	463a      	mov	r2, r7
 80194e0:	6819      	ldr	r1, [r3, #0]
 80194e2:	460b      	mov	r3, r1
 80194e4:	4619      	mov	r1, r3
 80194e6:	4610      	mov	r0, r2
 80194e8:	f7ff fcd8 	bl	8018e9c <nk_style_item_color>
 80194ec:	3458      	adds	r4, #88	; 0x58
 80194ee:	463d      	mov	r5, r7
 80194f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80194f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 80194fc:	6a3b      	ldr	r3, [r7, #32]
 80194fe:	3324      	adds	r3, #36	; 0x24
 8019500:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019502:	463a      	mov	r2, r7
 8019504:	6819      	ldr	r1, [r3, #0]
 8019506:	460b      	mov	r3, r1
 8019508:	4619      	mov	r1, r3
 801950a:	4610      	mov	r0, r2
 801950c:	f7ff fcc6 	bl	8018e9c <nk_style_item_color>
 8019510:	3474      	adds	r4, #116	; 0x74
 8019512:	463d      	mov	r5, r7
 8019514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019518:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801951c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 8019520:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019522:	2000      	movs	r0, #0
 8019524:	f7f9 fcbe 	bl	8012ea4 <nk_handle_ptr>
 8019528:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 801952c:	6a3b      	ldr	r3, [r7, #32]
 801952e:	1d1a      	adds	r2, r3, #4
 8019530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019532:	339c      	adds	r3, #156	; 0x9c
 8019534:	6810      	ldr	r0, [r2, #0]
 8019536:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 8019538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801953a:	6a3a      	ldr	r2, [r7, #32]
 801953c:	3390      	adds	r3, #144	; 0x90
 801953e:	6810      	ldr	r0, [r2, #0]
 8019540:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 8019542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019544:	6a3a      	ldr	r2, [r7, #32]
 8019546:	3394      	adds	r3, #148	; 0x94
 8019548:	6810      	ldr	r0, [r2, #0]
 801954a:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 801954c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801954e:	6a3a      	ldr	r2, [r7, #32]
 8019550:	3398      	adds	r3, #152	; 0x98
 8019552:	6810      	ldr	r0, [r2, #0]
 8019554:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(3.0f, 3.0f);
 8019556:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019558:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 801955c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8019560:	f7fb f8ec 	bl	801473c <nk_vec2>
 8019564:	eeb0 7a40 	vmov.f32	s14, s0
 8019568:	eef0 7a60 	vmov.f32	s15, s1
 801956c:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 8019570:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 8019574:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019576:	ed5f 0ac4 	vldr	s1, [pc, #-784]	; 8019268 <nk_style_from_table+0x364>
 801957a:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 8019268 <nk_style_from_table+0x364>
 801957e:	f7fb f8dd 	bl	801473c <nk_vec2>
 8019582:	eeb0 7a40 	vmov.f32	s14, s0
 8019586:	eef0 7a60 	vmov.f32	s15, s1
 801958a:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 801958e:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 8019592:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8019594:	2300      	movs	r3, #0
 8019596:	2200      	movs	r2, #0
 8019598:	2100      	movs	r1, #0
 801959a:	2000      	movs	r0, #0
 801959c:	f7f6 fbb2 	bl	800fd04 <nk_rgba>
 80195a0:	4603      	mov	r3, r0
 80195a2:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 80195a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80195a6:	f04f 0200 	mov.w	r2, #0
 80195aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 80195ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80195b0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80195b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* selectable */
    select = &style->selectable;
 80195b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80195ba:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80195be:	667b      	str	r3, [r7, #100]	; 0x64
    nk_zero_struct(*select);
 80195c0:	21f0      	movs	r1, #240	; 0xf0
 80195c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80195c4:	f003 f846 	bl	801c654 <nk_zero>
    select->normal          = nk_style_item_color(table[NK_COLOR_SELECT]);
 80195c8:	6a3b      	ldr	r3, [r7, #32]
 80195ca:	3328      	adds	r3, #40	; 0x28
 80195cc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80195ce:	463a      	mov	r2, r7
 80195d0:	6819      	ldr	r1, [r3, #0]
 80195d2:	460b      	mov	r3, r1
 80195d4:	4619      	mov	r1, r3
 80195d6:	4610      	mov	r0, r2
 80195d8:	f7ff fc60 	bl	8018e9c <nk_style_item_color>
 80195dc:	4625      	mov	r5, r4
 80195de:	463c      	mov	r4, r7
 80195e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80195e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80195e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    select->hover           = nk_style_item_color(table[NK_COLOR_SELECT]);
 80195ec:	6a3b      	ldr	r3, [r7, #32]
 80195ee:	3328      	adds	r3, #40	; 0x28
 80195f0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80195f2:	463a      	mov	r2, r7
 80195f4:	6819      	ldr	r1, [r3, #0]
 80195f6:	460b      	mov	r3, r1
 80195f8:	4619      	mov	r1, r3
 80195fa:	4610      	mov	r0, r2
 80195fc:	f7ff fc4e 	bl	8018e9c <nk_style_item_color>
 8019600:	341c      	adds	r4, #28
 8019602:	463d      	mov	r5, r7
 8019604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801960c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed         = nk_style_item_color(table[NK_COLOR_SELECT]);
 8019610:	6a3b      	ldr	r3, [r7, #32]
 8019612:	3328      	adds	r3, #40	; 0x28
 8019614:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8019616:	463a      	mov	r2, r7
 8019618:	6819      	ldr	r1, [r3, #0]
 801961a:	460b      	mov	r3, r1
 801961c:	4619      	mov	r1, r3
 801961e:	4610      	mov	r0, r2
 8019620:	f7ff fc3c 	bl	8018e9c <nk_style_item_color>
 8019624:	3438      	adds	r4, #56	; 0x38
 8019626:	463d      	mov	r5, r7
 8019628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801962a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801962c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->normal_active   = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8019634:	6a3b      	ldr	r3, [r7, #32]
 8019636:	332c      	adds	r3, #44	; 0x2c
 8019638:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801963a:	463a      	mov	r2, r7
 801963c:	6819      	ldr	r1, [r3, #0]
 801963e:	460b      	mov	r3, r1
 8019640:	4619      	mov	r1, r3
 8019642:	4610      	mov	r0, r2
 8019644:	f7ff fc2a 	bl	8018e9c <nk_style_item_color>
 8019648:	3454      	adds	r4, #84	; 0x54
 801964a:	463d      	mov	r5, r7
 801964c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801964e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->hover_active    = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8019658:	6a3b      	ldr	r3, [r7, #32]
 801965a:	332c      	adds	r3, #44	; 0x2c
 801965c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801965e:	463a      	mov	r2, r7
 8019660:	6819      	ldr	r1, [r3, #0]
 8019662:	460b      	mov	r3, r1
 8019664:	4619      	mov	r1, r3
 8019666:	4610      	mov	r0, r2
 8019668:	f7ff fc18 	bl	8018e9c <nk_style_item_color>
 801966c:	3470      	adds	r4, #112	; 0x70
 801966e:	463d      	mov	r5, r7
 8019670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed_active  = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 801967c:	6a3b      	ldr	r3, [r7, #32]
 801967e:	332c      	adds	r3, #44	; 0x2c
 8019680:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8019682:	463a      	mov	r2, r7
 8019684:	6819      	ldr	r1, [r3, #0]
 8019686:	460b      	mov	r3, r1
 8019688:	4619      	mov	r1, r3
 801968a:	4610      	mov	r0, r2
 801968c:	f7ff fc06 	bl	8018e9c <nk_style_item_color>
 8019690:	348c      	adds	r4, #140	; 0x8c
 8019692:	463d      	mov	r5, r7
 8019694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801969c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->text_normal     = table[NK_COLOR_TEXT];
 80196a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80196a2:	6a3a      	ldr	r2, [r7, #32]
 80196a4:	33a8      	adds	r3, #168	; 0xa8
 80196a6:	6810      	ldr	r0, [r2, #0]
 80196a8:	6018      	str	r0, [r3, #0]
    select->text_hover      = table[NK_COLOR_TEXT];
 80196aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80196ac:	6a3a      	ldr	r2, [r7, #32]
 80196ae:	33ac      	adds	r3, #172	; 0xac
 80196b0:	6810      	ldr	r0, [r2, #0]
 80196b2:	6018      	str	r0, [r3, #0]
    select->text_pressed    = table[NK_COLOR_TEXT];
 80196b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80196b6:	6a3a      	ldr	r2, [r7, #32]
 80196b8:	33b0      	adds	r3, #176	; 0xb0
 80196ba:	6810      	ldr	r0, [r2, #0]
 80196bc:	6018      	str	r0, [r3, #0]
    select->text_normal_active  = table[NK_COLOR_TEXT];
 80196be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80196c0:	6a3a      	ldr	r2, [r7, #32]
 80196c2:	33b4      	adds	r3, #180	; 0xb4
 80196c4:	6810      	ldr	r0, [r2, #0]
 80196c6:	6018      	str	r0, [r3, #0]
    select->text_hover_active   = table[NK_COLOR_TEXT];
 80196c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80196ca:	6a3a      	ldr	r2, [r7, #32]
 80196cc:	33b8      	adds	r3, #184	; 0xb8
 80196ce:	6810      	ldr	r0, [r2, #0]
 80196d0:	6018      	str	r0, [r3, #0]
    select->text_pressed_active = table[NK_COLOR_TEXT];
 80196d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80196d4:	6a3a      	ldr	r2, [r7, #32]
 80196d6:	33bc      	adds	r3, #188	; 0xbc
 80196d8:	6810      	ldr	r0, [r2, #0]
 80196da:	6018      	str	r0, [r3, #0]
    select->padding         = nk_vec2(2.0f,2.0f);
 80196dc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80196de:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80196e2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80196e6:	f7fb f829 	bl	801473c <nk_vec2>
 80196ea:	eeb0 7a40 	vmov.f32	s14, s0
 80196ee:	eef0 7a60 	vmov.f32	s15, s1
 80196f2:	ed84 7a33 	vstr	s14, [r4, #204]	; 0xcc
 80196f6:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    select->image_padding   = nk_vec2(2.0f,2.0f);
 80196fa:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80196fc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019700:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019704:	f7fb f81a 	bl	801473c <nk_vec2>
 8019708:	eeb0 7a40 	vmov.f32	s14, s0
 801970c:	eef0 7a60 	vmov.f32	s15, s1
 8019710:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 8019714:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
    select->touch_padding   = nk_vec2(0,0);
 8019718:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801971a:	eddf 0ad0 	vldr	s1, [pc, #832]	; 8019a5c <nk_style_from_table+0xb58>
 801971e:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8019a5c <nk_style_from_table+0xb58>
 8019722:	f7fb f80b 	bl	801473c <nk_vec2>
 8019726:	eeb0 7a40 	vmov.f32	s14, s0
 801972a:	eef0 7a60 	vmov.f32	s15, s1
 801972e:	ed84 7a35 	vstr	s14, [r4, #212]	; 0xd4
 8019732:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
    select->userdata        = nk_handle_ptr(0);
 8019736:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8019738:	2000      	movs	r0, #0
 801973a:	f7f9 fbb3 	bl	8012ea4 <nk_handle_ptr>
 801973e:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    select->rounding        = 0.0f;
 8019742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019744:	f04f 0200 	mov.w	r2, #0
 8019748:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    select->draw_begin      = 0;
 801974c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801974e:	2200      	movs	r2, #0
 8019750:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    select->draw_end        = 0;
 8019754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019756:	2200      	movs	r2, #0
 8019758:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    /* slider */
    slider = &style->slider;
 801975c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801975e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019762:	663b      	str	r3, [r7, #96]	; 0x60
    nk_zero_struct(*slider);
 8019764:	f44f 7109 	mov.w	r1, #548	; 0x224
 8019768:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801976a:	f002 ff73 	bl	801c654 <nk_zero>
    slider->normal          = nk_style_item_hide();
 801976e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8019770:	463b      	mov	r3, r7
 8019772:	4618      	mov	r0, r3
 8019774:	f7ff fbaa 	bl	8018ecc <nk_style_item_hide>
 8019778:	4625      	mov	r5, r4
 801977a:	463c      	mov	r4, r7
 801977c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801977e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019780:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019784:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    slider->hover           = nk_style_item_hide();
 8019788:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801978a:	463b      	mov	r3, r7
 801978c:	4618      	mov	r0, r3
 801978e:	f7ff fb9d 	bl	8018ecc <nk_style_item_hide>
 8019792:	341c      	adds	r4, #28
 8019794:	463d      	mov	r5, r7
 8019796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801979a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801979e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->active          = nk_style_item_hide();
 80197a2:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80197a4:	463b      	mov	r3, r7
 80197a6:	4618      	mov	r0, r3
 80197a8:	f7ff fb90 	bl	8018ecc <nk_style_item_hide>
 80197ac:	3438      	adds	r4, #56	; 0x38
 80197ae:	463d      	mov	r5, r7
 80197b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80197b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->bar_normal      = table[NK_COLOR_SLIDER];
 80197bc:	6a3b      	ldr	r3, [r7, #32]
 80197be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80197c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80197c4:	3358      	adds	r3, #88	; 0x58
 80197c6:	6810      	ldr	r0, [r2, #0]
 80197c8:	6018      	str	r0, [r3, #0]
    slider->bar_hover       = table[NK_COLOR_SLIDER];
 80197ca:	6a3b      	ldr	r3, [r7, #32]
 80197cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80197d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80197d2:	335c      	adds	r3, #92	; 0x5c
 80197d4:	6810      	ldr	r0, [r2, #0]
 80197d6:	6018      	str	r0, [r3, #0]
    slider->bar_active      = table[NK_COLOR_SLIDER];
 80197d8:	6a3b      	ldr	r3, [r7, #32]
 80197da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80197de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80197e0:	3360      	adds	r3, #96	; 0x60
 80197e2:	6810      	ldr	r0, [r2, #0]
 80197e4:	6018      	str	r0, [r3, #0]
    slider->bar_filled      = table[NK_COLOR_SLIDER_CURSOR];
 80197e6:	6a3b      	ldr	r3, [r7, #32]
 80197e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80197ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80197ee:	3364      	adds	r3, #100	; 0x64
 80197f0:	6810      	ldr	r0, [r2, #0]
 80197f2:	6018      	str	r0, [r3, #0]
    slider->cursor_normal   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 80197f4:	6a3b      	ldr	r3, [r7, #32]
 80197f6:	3334      	adds	r3, #52	; 0x34
 80197f8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80197fa:	463a      	mov	r2, r7
 80197fc:	6819      	ldr	r1, [r3, #0]
 80197fe:	460b      	mov	r3, r1
 8019800:	4619      	mov	r1, r3
 8019802:	4610      	mov	r0, r2
 8019804:	f7ff fb4a 	bl	8018e9c <nk_style_item_color>
 8019808:	3468      	adds	r4, #104	; 0x68
 801980a:	463d      	mov	r5, r7
 801980c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801980e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019810:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019814:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_hover    = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 8019818:	6a3b      	ldr	r3, [r7, #32]
 801981a:	3338      	adds	r3, #56	; 0x38
 801981c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801981e:	463a      	mov	r2, r7
 8019820:	6819      	ldr	r1, [r3, #0]
 8019822:	460b      	mov	r3, r1
 8019824:	4619      	mov	r1, r3
 8019826:	4610      	mov	r0, r2
 8019828:	f7ff fb38 	bl	8018e9c <nk_style_item_color>
 801982c:	3484      	adds	r4, #132	; 0x84
 801982e:	463d      	mov	r5, r7
 8019830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019834:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_active   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 801983c:	6a3b      	ldr	r3, [r7, #32]
 801983e:	333c      	adds	r3, #60	; 0x3c
 8019840:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8019842:	463a      	mov	r2, r7
 8019844:	6819      	ldr	r1, [r3, #0]
 8019846:	460b      	mov	r3, r1
 8019848:	4619      	mov	r1, r3
 801984a:	4610      	mov	r0, r2
 801984c:	f7ff fb26 	bl	8018e9c <nk_style_item_color>
 8019850:	34a0      	adds	r4, #160	; 0xa0
 8019852:	463d      	mov	r5, r7
 8019854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019858:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801985c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->inc_symbol      = NK_SYMBOL_TRIANGLE_RIGHT;
 8019860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019862:	220a      	movs	r2, #10
 8019864:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    slider->dec_symbol      = NK_SYMBOL_TRIANGLE_LEFT;
 8019868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801986a:	2209      	movs	r2, #9
 801986c:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
    slider->cursor_size     = nk_vec2(16,16);
 8019870:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8019872:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 8019876:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 801987a:	f7fa ff5f 	bl	801473c <nk_vec2>
 801987e:	eeb0 7a40 	vmov.f32	s14, s0
 8019882:	eef0 7a60 	vmov.f32	s15, s1
 8019886:	ed84 7a36 	vstr	s14, [r4, #216]	; 0xd8
 801988a:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
    slider->padding         = nk_vec2(2,2);
 801988e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8019890:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019894:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019898:	f7fa ff50 	bl	801473c <nk_vec2>
 801989c:	eeb0 7a40 	vmov.f32	s14, s0
 80198a0:	eef0 7a60 	vmov.f32	s15, s1
 80198a4:	ed84 7a32 	vstr	s14, [r4, #200]	; 0xc8
 80198a8:	edc4 7a33 	vstr	s15, [r4, #204]	; 0xcc
    slider->spacing         = nk_vec2(2,2);
 80198ac:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80198ae:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80198b2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80198b6:	f7fa ff41 	bl	801473c <nk_vec2>
 80198ba:	eeb0 7a40 	vmov.f32	s14, s0
 80198be:	eef0 7a60 	vmov.f32	s15, s1
 80198c2:	ed84 7a34 	vstr	s14, [r4, #208]	; 0xd0
 80198c6:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
    slider->userdata        = nk_handle_ptr(0);
 80198ca:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80198cc:	2000      	movs	r0, #0
 80198ce:	f7f9 fae9 	bl	8012ea4 <nk_handle_ptr>
 80198d2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
    slider->show_buttons    = nk_false;
 80198d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80198d8:	2200      	movs	r2, #0
 80198da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    slider->bar_height      = 8;
 80198de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80198e0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80198e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    slider->rounding        = 0;
 80198e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80198ea:	f04f 0200 	mov.w	r2, #0
 80198ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    slider->draw_begin      = 0;
 80198f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80198f4:	2200      	movs	r2, #0
 80198f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    slider->draw_end        = 0;
 80198fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80198fc:	2200      	movs	r2, #0
 80198fe:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    /* slider buttons */
    button = &style->slider.inc_button;
 8019902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019904:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8019908:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 801990a:	2228      	movs	r2, #40	; 0x28
 801990c:	2128      	movs	r1, #40	; 0x28
 801990e:	2028      	movs	r0, #40	; 0x28
 8019910:	f7f6 fa48 	bl	800fda4 <nk_rgb>
 8019914:	4603      	mov	r3, r0
 8019916:	62bb      	str	r3, [r7, #40]	; 0x28
 8019918:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801991a:	463b      	mov	r3, r7
 801991c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801991e:	4618      	mov	r0, r3
 8019920:	f7ff fabc 	bl	8018e9c <nk_style_item_color>
 8019924:	4625      	mov	r5, r4
 8019926:	463c      	mov	r4, r7
 8019928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801992a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801992c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019930:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 8019934:	222a      	movs	r2, #42	; 0x2a
 8019936:	212a      	movs	r1, #42	; 0x2a
 8019938:	202a      	movs	r0, #42	; 0x2a
 801993a:	f7f6 fa33 	bl	800fda4 <nk_rgb>
 801993e:	4603      	mov	r3, r0
 8019940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019942:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019944:	463b      	mov	r3, r7
 8019946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019948:	4618      	mov	r0, r3
 801994a:	f7ff faa7 	bl	8018e9c <nk_style_item_color>
 801994e:	341c      	adds	r4, #28
 8019950:	463d      	mov	r5, r7
 8019952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019956:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801995a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 801995e:	222c      	movs	r2, #44	; 0x2c
 8019960:	212c      	movs	r1, #44	; 0x2c
 8019962:	202c      	movs	r0, #44	; 0x2c
 8019964:	f7f6 fa1e 	bl	800fda4 <nk_rgb>
 8019968:	4603      	mov	r3, r0
 801996a:	633b      	str	r3, [r7, #48]	; 0x30
 801996c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801996e:	463b      	mov	r3, r7
 8019970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019972:	4618      	mov	r0, r3
 8019974:	f7ff fa92 	bl	8018e9c <nk_style_item_color>
 8019978:	3438      	adds	r4, #56	; 0x38
 801997a:	463d      	mov	r5, r7
 801997c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801997e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019980:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 8019988:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801998a:	2241      	movs	r2, #65	; 0x41
 801998c:	2141      	movs	r1, #65	; 0x41
 801998e:	2041      	movs	r0, #65	; 0x41
 8019990:	f7f6 fa08 	bl	800fda4 <nk_rgb>
 8019994:	4603      	mov	r3, r0
 8019996:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 8019998:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801999a:	2228      	movs	r2, #40	; 0x28
 801999c:	2128      	movs	r1, #40	; 0x28
 801999e:	2028      	movs	r0, #40	; 0x28
 80199a0:	f7f6 fa00 	bl	800fda4 <nk_rgb>
 80199a4:	4603      	mov	r3, r0
 80199a6:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 80199a8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80199aa:	22af      	movs	r2, #175	; 0xaf
 80199ac:	21af      	movs	r1, #175	; 0xaf
 80199ae:	20af      	movs	r0, #175	; 0xaf
 80199b0:	f7f6 f9f8 	bl	800fda4 <nk_rgb>
 80199b4:	4603      	mov	r3, r0
 80199b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 80199b8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80199ba:	22af      	movs	r2, #175	; 0xaf
 80199bc:	21af      	movs	r1, #175	; 0xaf
 80199be:	20af      	movs	r0, #175	; 0xaf
 80199c0:	f7f6 f9f0 	bl	800fda4 <nk_rgb>
 80199c4:	4603      	mov	r3, r0
 80199c6:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 80199c8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80199ca:	22af      	movs	r2, #175	; 0xaf
 80199cc:	21af      	movs	r1, #175	; 0xaf
 80199ce:	20af      	movs	r0, #175	; 0xaf
 80199d0:	f7f6 f9e8 	bl	800fda4 <nk_rgb>
 80199d4:	4603      	mov	r3, r0
 80199d6:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(8.0f,8.0f);
 80199d8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80199da:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 80199de:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80199e2:	f7fa feab 	bl	801473c <nk_vec2>
 80199e6:	eeb0 7a40 	vmov.f32	s14, s0
 80199ea:	eef0 7a60 	vmov.f32	s15, s1
 80199ee:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80199f2:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80199f6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80199f8:	eddf 0a18 	vldr	s1, [pc, #96]	; 8019a5c <nk_style_from_table+0xb58>
 80199fc:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8019a5c <nk_style_from_table+0xb58>
 8019a00:	f7fa fe9c 	bl	801473c <nk_vec2>
 8019a04:	eeb0 7a40 	vmov.f32	s14, s0
 8019a08:	eef0 7a60 	vmov.f32	s15, s1
 8019a0c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019a10:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019a14:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019a16:	2000      	movs	r0, #0
 8019a18:	f7f9 fa44 	bl	8012ea4 <nk_handle_ptr>
 8019a1c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a22:	2212      	movs	r2, #18
 8019a24:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 8019a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019a2c:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a30:	f04f 0200 	mov.w	r2, #0
 8019a34:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8019a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a38:	2200      	movs	r2, #0
 8019a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a40:	2200      	movs	r2, #0
 8019a42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->slider.dec_button = style->slider.inc_button;
 8019a46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019a4a:	f202 50fc 	addw	r0, r2, #1532	; 0x5fc
 8019a4e:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8019a52:	2298      	movs	r2, #152	; 0x98
 8019a54:	4619      	mov	r1, r3
 8019a56:	f005 f91d 	bl	801ec94 <memcpy>
 8019a5a:	e003      	b.n	8019a64 <nk_style_from_table+0xb60>
	...

    /* progressbar */
    prog = &style->progress;
 8019a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019a66:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8019a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    nk_zero_struct(*prog);
 8019a6c:	21d4      	movs	r1, #212	; 0xd4
 8019a6e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019a70:	f002 fdf0 	bl	801c654 <nk_zero>
    prog->normal            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8019a74:	6a3b      	ldr	r3, [r7, #32]
 8019a76:	3330      	adds	r3, #48	; 0x30
 8019a78:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019a7a:	463a      	mov	r2, r7
 8019a7c:	6819      	ldr	r1, [r3, #0]
 8019a7e:	460b      	mov	r3, r1
 8019a80:	4619      	mov	r1, r3
 8019a82:	4610      	mov	r0, r2
 8019a84:	f7ff fa0a 	bl	8018e9c <nk_style_item_color>
 8019a88:	4625      	mov	r5, r4
 8019a8a:	463c      	mov	r4, r7
 8019a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019a90:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019a94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    prog->hover             = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8019a98:	6a3b      	ldr	r3, [r7, #32]
 8019a9a:	3330      	adds	r3, #48	; 0x30
 8019a9c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019a9e:	463a      	mov	r2, r7
 8019aa0:	6819      	ldr	r1, [r3, #0]
 8019aa2:	460b      	mov	r3, r1
 8019aa4:	4619      	mov	r1, r3
 8019aa6:	4610      	mov	r0, r2
 8019aa8:	f7ff f9f8 	bl	8018e9c <nk_style_item_color>
 8019aac:	341c      	adds	r4, #28
 8019aae:	463d      	mov	r5, r7
 8019ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->active            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8019abc:	6a3b      	ldr	r3, [r7, #32]
 8019abe:	3330      	adds	r3, #48	; 0x30
 8019ac0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019ac2:	463a      	mov	r2, r7
 8019ac4:	6819      	ldr	r1, [r3, #0]
 8019ac6:	460b      	mov	r3, r1
 8019ac8:	4619      	mov	r1, r3
 8019aca:	4610      	mov	r0, r2
 8019acc:	f7ff f9e6 	bl	8018e9c <nk_style_item_color>
 8019ad0:	3438      	adds	r4, #56	; 0x38
 8019ad2:	463d      	mov	r5, r7
 8019ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ad8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_normal     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 8019ae0:	6a3b      	ldr	r3, [r7, #32]
 8019ae2:	3334      	adds	r3, #52	; 0x34
 8019ae4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019ae6:	463a      	mov	r2, r7
 8019ae8:	6819      	ldr	r1, [r3, #0]
 8019aea:	460b      	mov	r3, r1
 8019aec:	4619      	mov	r1, r3
 8019aee:	4610      	mov	r0, r2
 8019af0:	f7ff f9d4 	bl	8018e9c <nk_style_item_color>
 8019af4:	3458      	adds	r4, #88	; 0x58
 8019af6:	463d      	mov	r5, r7
 8019af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019b00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_hover      = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 8019b04:	6a3b      	ldr	r3, [r7, #32]
 8019b06:	3338      	adds	r3, #56	; 0x38
 8019b08:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019b0a:	463a      	mov	r2, r7
 8019b0c:	6819      	ldr	r1, [r3, #0]
 8019b0e:	460b      	mov	r3, r1
 8019b10:	4619      	mov	r1, r3
 8019b12:	4610      	mov	r0, r2
 8019b14:	f7ff f9c2 	bl	8018e9c <nk_style_item_color>
 8019b18:	3474      	adds	r4, #116	; 0x74
 8019b1a:	463d      	mov	r5, r7
 8019b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_active     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 8019b28:	6a3b      	ldr	r3, [r7, #32]
 8019b2a:	333c      	adds	r3, #60	; 0x3c
 8019b2c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019b2e:	463a      	mov	r2, r7
 8019b30:	6819      	ldr	r1, [r3, #0]
 8019b32:	460b      	mov	r3, r1
 8019b34:	4619      	mov	r1, r3
 8019b36:	4610      	mov	r0, r2
 8019b38:	f7ff f9b0 	bl	8018e9c <nk_style_item_color>
 8019b3c:	3490      	adds	r4, #144	; 0x90
 8019b3e:	463d      	mov	r5, r7
 8019b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->border_color      = nk_rgba(0,0,0,0);
 8019b4c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019b4e:	2300      	movs	r3, #0
 8019b50:	2200      	movs	r2, #0
 8019b52:	2100      	movs	r1, #0
 8019b54:	2000      	movs	r0, #0
 8019b56:	f7f6 f8d5 	bl	800fd04 <nk_rgba>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	6563      	str	r3, [r4, #84]	; 0x54
    prog->cursor_border_color = nk_rgba(0,0,0,0);
 8019b5e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019b60:	2300      	movs	r3, #0
 8019b62:	2200      	movs	r2, #0
 8019b64:	2100      	movs	r1, #0
 8019b66:	2000      	movs	r0, #0
 8019b68:	f7f6 f8cc 	bl	800fd04 <nk_rgba>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    prog->userdata          = nk_handle_ptr(0);
 8019b72:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019b74:	2000      	movs	r0, #0
 8019b76:	f7f9 f995 	bl	8012ea4 <nk_handle_ptr>
 8019b7a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    prog->padding           = nk_vec2(4,4);
 8019b7e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019b80:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019b84:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019b88:	f7fa fdd8 	bl	801473c <nk_vec2>
 8019b8c:	eeb0 7a40 	vmov.f32	s14, s0
 8019b90:	eef0 7a60 	vmov.f32	s15, s1
 8019b94:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 8019b98:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    prog->rounding          = 0;
 8019b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b9e:	f04f 0200 	mov.w	r2, #0
 8019ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    prog->border            = 0;
 8019ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019ba8:	f04f 0200 	mov.w	r2, #0
 8019bac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    prog->cursor_rounding   = 0;
 8019bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bb2:	f04f 0200 	mov.w	r2, #0
 8019bb6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    prog->cursor_border     = 0;
 8019bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bbc:	f04f 0200 	mov.w	r2, #0
 8019bc0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    prog->draw_begin        = 0;
 8019bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    prog->draw_end          = 0;
 8019bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bce:	2200      	movs	r2, #0
 8019bd0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* scrollbars */
    scroll = &style->scrollh;
 8019bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019bd6:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 8019bda:	65bb      	str	r3, [r7, #88]	; 0x58
    nk_zero_struct(*scroll);
 8019bdc:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8019be0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8019be2:	f002 fd37 	bl	801c654 <nk_zero>
    scroll->normal          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8019be6:	6a3b      	ldr	r3, [r7, #32]
 8019be8:	335c      	adds	r3, #92	; 0x5c
 8019bea:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019bec:	463a      	mov	r2, r7
 8019bee:	6819      	ldr	r1, [r3, #0]
 8019bf0:	460b      	mov	r3, r1
 8019bf2:	4619      	mov	r1, r3
 8019bf4:	4610      	mov	r0, r2
 8019bf6:	f7ff f951 	bl	8018e9c <nk_style_item_color>
 8019bfa:	4625      	mov	r5, r4
 8019bfc:	463c      	mov	r4, r7
 8019bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019c06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    scroll->hover           = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8019c0a:	6a3b      	ldr	r3, [r7, #32]
 8019c0c:	335c      	adds	r3, #92	; 0x5c
 8019c0e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019c10:	463a      	mov	r2, r7
 8019c12:	6819      	ldr	r1, [r3, #0]
 8019c14:	460b      	mov	r3, r1
 8019c16:	4619      	mov	r1, r3
 8019c18:	4610      	mov	r0, r2
 8019c1a:	f7ff f93f 	bl	8018e9c <nk_style_item_color>
 8019c1e:	341c      	adds	r4, #28
 8019c20:	463d      	mov	r5, r7
 8019c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->active          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8019c2e:	6a3b      	ldr	r3, [r7, #32]
 8019c30:	335c      	adds	r3, #92	; 0x5c
 8019c32:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019c34:	463a      	mov	r2, r7
 8019c36:	6819      	ldr	r1, [r3, #0]
 8019c38:	460b      	mov	r3, r1
 8019c3a:	4619      	mov	r1, r3
 8019c3c:	4610      	mov	r0, r2
 8019c3e:	f7ff f92d 	bl	8018e9c <nk_style_item_color>
 8019c42:	3438      	adds	r4, #56	; 0x38
 8019c44:	463d      	mov	r5, r7
 8019c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019c4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_normal   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR]);
 8019c52:	6a3b      	ldr	r3, [r7, #32]
 8019c54:	3360      	adds	r3, #96	; 0x60
 8019c56:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019c58:	463a      	mov	r2, r7
 8019c5a:	6819      	ldr	r1, [r3, #0]
 8019c5c:	460b      	mov	r3, r1
 8019c5e:	4619      	mov	r1, r3
 8019c60:	4610      	mov	r0, r2
 8019c62:	f7ff f91b 	bl	8018e9c <nk_style_item_color>
 8019c66:	3458      	adds	r4, #88	; 0x58
 8019c68:	463d      	mov	r5, r7
 8019c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019c72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_hover    = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_HOVER]);
 8019c76:	6a3b      	ldr	r3, [r7, #32]
 8019c78:	3364      	adds	r3, #100	; 0x64
 8019c7a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019c7c:	463a      	mov	r2, r7
 8019c7e:	6819      	ldr	r1, [r3, #0]
 8019c80:	460b      	mov	r3, r1
 8019c82:	4619      	mov	r1, r3
 8019c84:	4610      	mov	r0, r2
 8019c86:	f7ff f909 	bl	8018e9c <nk_style_item_color>
 8019c8a:	3474      	adds	r4, #116	; 0x74
 8019c8c:	463d      	mov	r5, r7
 8019c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_active   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE]);
 8019c9a:	6a3b      	ldr	r3, [r7, #32]
 8019c9c:	3368      	adds	r3, #104	; 0x68
 8019c9e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019ca0:	463a      	mov	r2, r7
 8019ca2:	6819      	ldr	r1, [r3, #0]
 8019ca4:	460b      	mov	r3, r1
 8019ca6:	4619      	mov	r1, r3
 8019ca8:	4610      	mov	r0, r2
 8019caa:	f7ff f8f7 	bl	8018e9c <nk_style_item_color>
 8019cae:	3490      	adds	r4, #144	; 0x90
 8019cb0:	463d      	mov	r5, r7
 8019cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019cb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->dec_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 8019cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019cc0:	2203      	movs	r2, #3
 8019cc2:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    scroll->inc_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 8019cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019cc8:	2203      	movs	r2, #3
 8019cca:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    scroll->userdata        = nk_handle_ptr(0);
 8019cce:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019cd0:	2000      	movs	r0, #0
 8019cd2:	f7f9 f8e7 	bl	8012ea4 <nk_handle_ptr>
 8019cd6:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    scroll->border_color    = table[NK_COLOR_SCROLLBAR];
 8019cda:	6a3b      	ldr	r3, [r7, #32]
 8019cdc:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8019ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019ce2:	3354      	adds	r3, #84	; 0x54
 8019ce4:	6810      	ldr	r0, [r2, #0]
 8019ce6:	6018      	str	r0, [r3, #0]
    scroll->cursor_border_color = table[NK_COLOR_SCROLLBAR];
 8019ce8:	6a3b      	ldr	r3, [r7, #32]
 8019cea:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8019cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019cf0:	33ac      	adds	r3, #172	; 0xac
 8019cf2:	6810      	ldr	r0, [r2, #0]
 8019cf4:	6018      	str	r0, [r3, #0]
    scroll->padding         = nk_vec2(0,0);
 8019cf6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019cf8:	ed5f 0aa7 	vldr	s1, [pc, #-668]	; 8019a60 <nk_style_from_table+0xb5c>
 8019cfc:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8019a60 <nk_style_from_table+0xb5c>
 8019d00:	f7fa fd1c 	bl	801473c <nk_vec2>
 8019d04:	eeb0 7a40 	vmov.f32	s14, s0
 8019d08:	eef0 7a60 	vmov.f32	s15, s1
 8019d0c:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 8019d10:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    scroll->show_buttons    = nk_false;
 8019d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d16:	2200      	movs	r2, #0
 8019d18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    scroll->border          = 0;
 8019d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d1e:	f04f 0200 	mov.w	r2, #0
 8019d22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    scroll->rounding        = 0;
 8019d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d28:	f04f 0200 	mov.w	r2, #0
 8019d2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    scroll->border_cursor   = 0;
 8019d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d32:	f04f 0200 	mov.w	r2, #0
 8019d36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    scroll->rounding_cursor = 0;
 8019d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d3c:	f04f 0200 	mov.w	r2, #0
 8019d40:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    scroll->draw_begin      = 0;
 8019d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d46:	2200      	movs	r2, #0
 8019d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    scroll->draw_end        = 0;
 8019d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d4e:	2200      	movs	r2, #0
 8019d50:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    style->scrollv = style->scrollh;
 8019d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d5a:	461a      	mov	r2, r3
 8019d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d5e:	f102 00d0 	add.w	r0, r2, #208	; 0xd0
 8019d62:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 8019d66:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8019d6a:	4619      	mov	r1, r3
 8019d6c:	f004 ff92 	bl	801ec94 <memcpy>

    /* scrollbars buttons */
    button = &style->scrollh.inc_button;
 8019d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d72:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8019d76:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 8019d78:	2228      	movs	r2, #40	; 0x28
 8019d7a:	2128      	movs	r1, #40	; 0x28
 8019d7c:	2028      	movs	r0, #40	; 0x28
 8019d7e:	f7f6 f811 	bl	800fda4 <nk_rgb>
 8019d82:	4603      	mov	r3, r0
 8019d84:	637b      	str	r3, [r7, #52]	; 0x34
 8019d86:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019d88:	463b      	mov	r3, r7
 8019d8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	f7ff f885 	bl	8018e9c <nk_style_item_color>
 8019d92:	4625      	mov	r5, r4
 8019d94:	463c      	mov	r4, r7
 8019d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019d9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 8019da2:	222a      	movs	r2, #42	; 0x2a
 8019da4:	212a      	movs	r1, #42	; 0x2a
 8019da6:	202a      	movs	r0, #42	; 0x2a
 8019da8:	f7f5 fffc 	bl	800fda4 <nk_rgb>
 8019dac:	4603      	mov	r3, r0
 8019dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8019db0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019db2:	463b      	mov	r3, r7
 8019db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019db6:	4618      	mov	r0, r3
 8019db8:	f7ff f870 	bl	8018e9c <nk_style_item_color>
 8019dbc:	341c      	adds	r4, #28
 8019dbe:	463d      	mov	r5, r7
 8019dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019dc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019dc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 8019dcc:	222c      	movs	r2, #44	; 0x2c
 8019dce:	212c      	movs	r1, #44	; 0x2c
 8019dd0:	202c      	movs	r0, #44	; 0x2c
 8019dd2:	f7f5 ffe7 	bl	800fda4 <nk_rgb>
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019dda:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019ddc:	463b      	mov	r3, r7
 8019dde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019de0:	4618      	mov	r0, r3
 8019de2:	f7ff f85b 	bl	8018e9c <nk_style_item_color>
 8019de6:	3438      	adds	r4, #56	; 0x38
 8019de8:	463d      	mov	r5, r7
 8019dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019dee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 8019df6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019df8:	2241      	movs	r2, #65	; 0x41
 8019dfa:	2141      	movs	r1, #65	; 0x41
 8019dfc:	2041      	movs	r0, #65	; 0x41
 8019dfe:	f7f5 ffd1 	bl	800fda4 <nk_rgb>
 8019e02:	4603      	mov	r3, r0
 8019e04:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 8019e06:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e08:	2228      	movs	r2, #40	; 0x28
 8019e0a:	2128      	movs	r1, #40	; 0x28
 8019e0c:	2028      	movs	r0, #40	; 0x28
 8019e0e:	f7f5 ffc9 	bl	800fda4 <nk_rgb>
 8019e12:	4603      	mov	r3, r0
 8019e14:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 8019e16:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e18:	22af      	movs	r2, #175	; 0xaf
 8019e1a:	21af      	movs	r1, #175	; 0xaf
 8019e1c:	20af      	movs	r0, #175	; 0xaf
 8019e1e:	f7f5 ffc1 	bl	800fda4 <nk_rgb>
 8019e22:	4603      	mov	r3, r0
 8019e24:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 8019e26:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e28:	22af      	movs	r2, #175	; 0xaf
 8019e2a:	21af      	movs	r1, #175	; 0xaf
 8019e2c:	20af      	movs	r0, #175	; 0xaf
 8019e2e:	f7f5 ffb9 	bl	800fda4 <nk_rgb>
 8019e32:	4603      	mov	r3, r0
 8019e34:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 8019e36:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e38:	22af      	movs	r2, #175	; 0xaf
 8019e3a:	21af      	movs	r1, #175	; 0xaf
 8019e3c:	20af      	movs	r0, #175	; 0xaf
 8019e3e:	f7f5 ffb1 	bl	800fda4 <nk_rgb>
 8019e42:	4603      	mov	r3, r0
 8019e44:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(4.0f,4.0f);
 8019e46:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e48:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019e4c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019e50:	f7fa fc74 	bl	801473c <nk_vec2>
 8019e54:	eeb0 7a40 	vmov.f32	s14, s0
 8019e58:	eef0 7a60 	vmov.f32	s15, s1
 8019e5c:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019e60:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8019e64:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e66:	eddf 0ac9 	vldr	s1, [pc, #804]	; 801a18c <nk_style_from_table+0x1288>
 8019e6a:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 801a18c <nk_style_from_table+0x1288>
 8019e6e:	f7fa fc65 	bl	801473c <nk_vec2>
 8019e72:	eeb0 7a40 	vmov.f32	s14, s0
 8019e76:	eef0 7a60 	vmov.f32	s15, s1
 8019e7a:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019e7e:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019e82:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e84:	2000      	movs	r0, #0
 8019e86:	f7f9 f80d 	bl	8012ea4 <nk_handle_ptr>
 8019e8a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e90:	2212      	movs	r2, #18
 8019e92:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 8019e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019e9a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e9e:	f04f 0200 	mov.w	r2, #0
 8019ea2:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8019ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019eae:	2200      	movs	r2, #0
 8019eb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->scrollh.dec_button = style->scrollh.inc_button;
 8019eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019eba:	461a      	mov	r2, r3
 8019ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ebe:	f102 0028 	add.w	r0, r2, #40	; 0x28
 8019ec2:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8019ec6:	2298      	movs	r2, #152	; 0x98
 8019ec8:	4619      	mov	r1, r3
 8019eca:	f004 fee3 	bl	801ec94 <memcpy>
    style->scrollv.inc_button = style->scrollh.inc_button;
 8019ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ed4:	461a      	mov	r2, r3
 8019ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ed8:	f502 70ce 	add.w	r0, r2, #412	; 0x19c
 8019edc:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8019ee0:	2298      	movs	r2, #152	; 0x98
 8019ee2:	4619      	mov	r1, r3
 8019ee4:	f004 fed6 	bl	801ec94 <memcpy>
    style->scrollv.dec_button = style->scrollh.inc_button;
 8019ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019eee:	461a      	mov	r2, r3
 8019ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ef2:	f502 700d 	add.w	r0, r2, #564	; 0x234
 8019ef6:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8019efa:	2298      	movs	r2, #152	; 0x98
 8019efc:	4619      	mov	r1, r3
 8019efe:	f004 fec9 	bl	801ec94 <memcpy>

    /* edit */
    edit = &style->edit;
 8019f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019f04:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8019f08:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 8019f0a:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8019f0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019f10:	f002 fba0 	bl	801c654 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_EDIT]);
 8019f14:	6a3b      	ldr	r3, [r7, #32]
 8019f16:	3344      	adds	r3, #68	; 0x44
 8019f18:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019f1a:	463a      	mov	r2, r7
 8019f1c:	6819      	ldr	r1, [r3, #0]
 8019f1e:	460b      	mov	r3, r1
 8019f20:	4619      	mov	r1, r3
 8019f22:	4610      	mov	r0, r2
 8019f24:	f7fe ffba 	bl	8018e9c <nk_style_item_color>
 8019f28:	4625      	mov	r5, r4
 8019f2a:	463c      	mov	r4, r7
 8019f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019f30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019f34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_EDIT]);
 8019f38:	6a3b      	ldr	r3, [r7, #32]
 8019f3a:	3344      	adds	r3, #68	; 0x44
 8019f3c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019f3e:	463a      	mov	r2, r7
 8019f40:	6819      	ldr	r1, [r3, #0]
 8019f42:	460b      	mov	r3, r1
 8019f44:	4619      	mov	r1, r3
 8019f46:	4610      	mov	r0, r2
 8019f48:	f7fe ffa8 	bl	8018e9c <nk_style_item_color>
 8019f4c:	341c      	adds	r4, #28
 8019f4e:	463d      	mov	r5, r7
 8019f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019f58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_EDIT]);
 8019f5c:	6a3b      	ldr	r3, [r7, #32]
 8019f5e:	3344      	adds	r3, #68	; 0x44
 8019f60:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019f62:	463a      	mov	r2, r7
 8019f64:	6819      	ldr	r1, [r3, #0]
 8019f66:	460b      	mov	r3, r1
 8019f68:	4619      	mov	r1, r3
 8019f6a:	4610      	mov	r0, r2
 8019f6c:	f7fe ff96 	bl	8018e9c <nk_style_item_color>
 8019f70:	3438      	adds	r4, #56	; 0x38
 8019f72:	463d      	mov	r5, r7
 8019f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 8019f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f82:	6a3a      	ldr	r2, [r7, #32]
 8019f84:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8019f88:	6810      	ldr	r0, [r2, #0]
 8019f8a:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 8019f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f8e:	6a3a      	ldr	r2, [r7, #32]
 8019f90:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8019f94:	6810      	ldr	r0, [r2, #0]
 8019f96:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 8019f98:	6a3b      	ldr	r3, [r7, #32]
 8019f9a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fa0:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8019fa4:	6810      	ldr	r0, [r2, #0]
 8019fa6:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 8019fa8:	6a3b      	ldr	r3, [r7, #32]
 8019faa:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fb0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8019fb4:	6810      	ldr	r0, [r2, #0]
 8019fb6:	6018      	str	r0, [r3, #0]
    edit->border_color      = table[NK_COLOR_BORDER];
 8019fb8:	6a3b      	ldr	r3, [r7, #32]
 8019fba:	f103 020c 	add.w	r2, r3, #12
 8019fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fc0:	3354      	adds	r3, #84	; 0x54
 8019fc2:	6810      	ldr	r0, [r2, #0]
 8019fc4:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 8019fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fc8:	6a3a      	ldr	r2, [r7, #32]
 8019fca:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8019fce:	6810      	ldr	r0, [r2, #0]
 8019fd0:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 8019fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fd4:	6a3a      	ldr	r2, [r7, #32]
 8019fd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8019fda:	6810      	ldr	r0, [r2, #0]
 8019fdc:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 8019fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fe0:	6a3a      	ldr	r2, [r7, #32]
 8019fe2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8019fe6:	6810      	ldr	r0, [r2, #0]
 8019fe8:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 8019fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fec:	6a3a      	ldr	r2, [r7, #32]
 8019fee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8019ff2:	6810      	ldr	r0, [r2, #0]
 8019ff4:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 8019ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ff8:	6a3a      	ldr	r2, [r7, #32]
 8019ffa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8019ffe:	6810      	ldr	r0, [r2, #0]
 801a000:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 801a002:	6a3b      	ldr	r3, [r7, #32]
 801a004:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801a008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a00a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a00e:	6810      	ldr	r0, [r2, #0]
 801a010:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 801a012:	6a3b      	ldr	r3, [r7, #32]
 801a014:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801a018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a01a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801a01e:	6810      	ldr	r0, [r2, #0]
 801a020:	6018      	str	r0, [r3, #0]
    edit->scrollbar_size    = nk_vec2(10,10);
 801a022:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801a024:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 801a028:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801a02c:	f7fa fb86 	bl	801473c <nk_vec2>
 801a030:	eeb0 7a40 	vmov.f32	s14, s0
 801a034:	eef0 7a60 	vmov.f32	s15, s1
 801a038:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 801a03c:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    edit->scrollbar         = style->scrollv;
 801a040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a042:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a044:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a048:	3358      	adds	r3, #88	; 0x58
 801a04a:	f102 01d0 	add.w	r1, r2, #208	; 0xd0
 801a04e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801a052:	4618      	mov	r0, r3
 801a054:	f004 fe1e 	bl	801ec94 <memcpy>
    edit->padding           = nk_vec2(4,4);
 801a058:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801a05a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a05e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a062:	f7fa fb6b 	bl	801473c <nk_vec2>
 801a066:	eeb0 7a40 	vmov.f32	s14, s0
 801a06a:	eef0 7a60 	vmov.f32	s15, s1
 801a06e:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 801a072:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->row_padding       = 2;
 801a076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a078:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a07c:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    edit->cursor_size       = 4;
 801a080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a082:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801a086:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 1;
 801a08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a08c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a090:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 801a094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a096:	f04f 0200 	mov.w	r2, #0
 801a09a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* property */
    property = &style->property;
 801a09e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a0a0:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 801a0a4:	653b      	str	r3, [r7, #80]	; 0x50
    nk_zero_struct(*property);
 801a0a6:	f240 4164 	movw	r1, #1124	; 0x464
 801a0aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a0ac:	f002 fad2 	bl	801c654 <nk_zero>
    property->normal        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a0b0:	6a3b      	ldr	r3, [r7, #32]
 801a0b2:	3340      	adds	r3, #64	; 0x40
 801a0b4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801a0b6:	463a      	mov	r2, r7
 801a0b8:	6819      	ldr	r1, [r3, #0]
 801a0ba:	460b      	mov	r3, r1
 801a0bc:	4619      	mov	r1, r3
 801a0be:	4610      	mov	r0, r2
 801a0c0:	f7fe feec 	bl	8018e9c <nk_style_item_color>
 801a0c4:	4625      	mov	r5, r4
 801a0c6:	463c      	mov	r4, r7
 801a0c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a0ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a0cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a0d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    property->hover         = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a0d4:	6a3b      	ldr	r3, [r7, #32]
 801a0d6:	3340      	adds	r3, #64	; 0x40
 801a0d8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801a0da:	463a      	mov	r2, r7
 801a0dc:	6819      	ldr	r1, [r3, #0]
 801a0de:	460b      	mov	r3, r1
 801a0e0:	4619      	mov	r1, r3
 801a0e2:	4610      	mov	r0, r2
 801a0e4:	f7fe feda 	bl	8018e9c <nk_style_item_color>
 801a0e8:	341c      	adds	r4, #28
 801a0ea:	463d      	mov	r5, r7
 801a0ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a0ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a0f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a0f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->active        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a0f8:	6a3b      	ldr	r3, [r7, #32]
 801a0fa:	3340      	adds	r3, #64	; 0x40
 801a0fc:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801a0fe:	463a      	mov	r2, r7
 801a100:	6819      	ldr	r1, [r3, #0]
 801a102:	460b      	mov	r3, r1
 801a104:	4619      	mov	r1, r3
 801a106:	4610      	mov	r0, r2
 801a108:	f7fe fec8 	bl	8018e9c <nk_style_item_color>
 801a10c:	3438      	adds	r4, #56	; 0x38
 801a10e:	463d      	mov	r5, r7
 801a110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a114:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->border_color  = table[NK_COLOR_BORDER];
 801a11c:	6a3b      	ldr	r3, [r7, #32]
 801a11e:	f103 020c 	add.w	r2, r3, #12
 801a122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a124:	3354      	adds	r3, #84	; 0x54
 801a126:	6810      	ldr	r0, [r2, #0]
 801a128:	6018      	str	r0, [r3, #0]
    property->label_normal  = table[NK_COLOR_TEXT];
 801a12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a12c:	6a3a      	ldr	r2, [r7, #32]
 801a12e:	3358      	adds	r3, #88	; 0x58
 801a130:	6810      	ldr	r0, [r2, #0]
 801a132:	6018      	str	r0, [r3, #0]
    property->label_hover   = table[NK_COLOR_TEXT];
 801a134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a136:	6a3a      	ldr	r2, [r7, #32]
 801a138:	335c      	adds	r3, #92	; 0x5c
 801a13a:	6810      	ldr	r0, [r2, #0]
 801a13c:	6018      	str	r0, [r3, #0]
    property->label_active  = table[NK_COLOR_TEXT];
 801a13e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a140:	6a3a      	ldr	r2, [r7, #32]
 801a142:	3360      	adds	r3, #96	; 0x60
 801a144:	6810      	ldr	r0, [r2, #0]
 801a146:	6018      	str	r0, [r3, #0]
    property->sym_left      = NK_SYMBOL_TRIANGLE_LEFT;
 801a148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a14a:	2209      	movs	r2, #9
 801a14c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    property->sym_right     = NK_SYMBOL_TRIANGLE_RIGHT;
 801a150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a152:	220a      	movs	r2, #10
 801a154:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    property->userdata      = nk_handle_ptr(0);
 801a158:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801a15a:	2000      	movs	r0, #0
 801a15c:	f7f8 fea2 	bl	8012ea4 <nk_handle_ptr>
 801a160:	f8c4 0458 	str.w	r0, [r4, #1112]	; 0x458
    property->padding       = nk_vec2(4,4);
 801a164:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801a166:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a16a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a16e:	f7fa fae5 	bl	801473c <nk_vec2>
 801a172:	eeb0 7a40 	vmov.f32	s14, s0
 801a176:	eef0 7a60 	vmov.f32	s15, s1
 801a17a:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 801a17e:	edc4 7a1d 	vstr	s15, [r4, #116]	; 0x74
    property->border        = 1;
 801a182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a184:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a188:	e002      	b.n	801a190 <nk_style_from_table+0x128c>
 801a18a:	bf00      	nop
 801a18c:	00000000 	.word	0x00000000
 801a190:	669a      	str	r2, [r3, #104]	; 0x68
    property->rounding      = 10;
 801a192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a194:	4ac3      	ldr	r2, [pc, #780]	; (801a4a4 <nk_style_from_table+0x15a0>)
 801a196:	66da      	str	r2, [r3, #108]	; 0x6c
    property->draw_begin    = 0;
 801a198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a19a:	2200      	movs	r2, #0
 801a19c:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
    property->draw_end      = 0;
 801a1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1a2:	2200      	movs	r2, #0
 801a1a4:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460

    /* property buttons */
    button = &style->property.dec_button;
 801a1a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a1aa:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 801a1ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a1b0:	2198      	movs	r1, #152	; 0x98
 801a1b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a1b4:	f002 fa4e 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a1b8:	6a3b      	ldr	r3, [r7, #32]
 801a1ba:	3340      	adds	r3, #64	; 0x40
 801a1bc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a1be:	463a      	mov	r2, r7
 801a1c0:	6819      	ldr	r1, [r3, #0]
 801a1c2:	460b      	mov	r3, r1
 801a1c4:	4619      	mov	r1, r3
 801a1c6:	4610      	mov	r0, r2
 801a1c8:	f7fe fe68 	bl	8018e9c <nk_style_item_color>
 801a1cc:	4625      	mov	r5, r4
 801a1ce:	463c      	mov	r4, r7
 801a1d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a1d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a1d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a1dc:	6a3b      	ldr	r3, [r7, #32]
 801a1de:	3340      	adds	r3, #64	; 0x40
 801a1e0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a1e2:	463a      	mov	r2, r7
 801a1e4:	6819      	ldr	r1, [r3, #0]
 801a1e6:	460b      	mov	r3, r1
 801a1e8:	4619      	mov	r1, r3
 801a1ea:	4610      	mov	r0, r2
 801a1ec:	f7fe fe56 	bl	8018e9c <nk_style_item_color>
 801a1f0:	341c      	adds	r4, #28
 801a1f2:	463d      	mov	r5, r7
 801a1f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a1f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a1f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a1fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a200:	6a3b      	ldr	r3, [r7, #32]
 801a202:	3340      	adds	r3, #64	; 0x40
 801a204:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a206:	463a      	mov	r2, r7
 801a208:	6819      	ldr	r1, [r3, #0]
 801a20a:	460b      	mov	r3, r1
 801a20c:	4619      	mov	r1, r3
 801a20e:	4610      	mov	r0, r2
 801a210:	f7fe fe44 	bl	8018e9c <nk_style_item_color>
 801a214:	3438      	adds	r4, #56	; 0x38
 801a216:	463d      	mov	r5, r7
 801a218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a21a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a21c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a224:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a226:	2300      	movs	r3, #0
 801a228:	2200      	movs	r2, #0
 801a22a:	2100      	movs	r1, #0
 801a22c:	2000      	movs	r0, #0
 801a22e:	f7f5 fd69 	bl	800fd04 <nk_rgba>
 801a232:	4603      	mov	r3, r0
 801a234:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_PROPERTY];
 801a236:	6a3b      	ldr	r3, [r7, #32]
 801a238:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801a23c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a23e:	3358      	adds	r3, #88	; 0x58
 801a240:	6810      	ldr	r0, [r2, #0]
 801a242:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a246:	6a3a      	ldr	r2, [r7, #32]
 801a248:	335c      	adds	r3, #92	; 0x5c
 801a24a:	6810      	ldr	r0, [r2, #0]
 801a24c:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a250:	6a3a      	ldr	r2, [r7, #32]
 801a252:	3360      	adds	r3, #96	; 0x60
 801a254:	6810      	ldr	r0, [r2, #0]
 801a256:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a25a:	6a3a      	ldr	r2, [r7, #32]
 801a25c:	3364      	adds	r3, #100	; 0x64
 801a25e:	6810      	ldr	r0, [r2, #0]
 801a260:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801a262:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a264:	eddf 0a90 	vldr	s1, [pc, #576]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a268:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a26c:	f7fa fa66 	bl	801473c <nk_vec2>
 801a270:	eeb0 7a40 	vmov.f32	s14, s0
 801a274:	eef0 7a60 	vmov.f32	s15, s1
 801a278:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a27c:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a280:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a282:	eddf 0a89 	vldr	s1, [pc, #548]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a286:	ed9f 0a88 	vldr	s0, [pc, #544]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a28a:	f7fa fa57 	bl	801473c <nk_vec2>
 801a28e:	eeb0 7a40 	vmov.f32	s14, s0
 801a292:	eef0 7a60 	vmov.f32	s15, s1
 801a296:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a29a:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a29e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a2a0:	2000      	movs	r0, #0
 801a2a2:	f7f8 fdff 	bl	8012ea4 <nk_handle_ptr>
 801a2a6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2ac:	2212      	movs	r2, #18
 801a2ae:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2b2:	f04f 0200 	mov.w	r2, #0
 801a2b6:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a2b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2ba:	f04f 0200 	mov.w	r2, #0
 801a2be:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2c2:	2200      	movs	r2, #0
 801a2c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->property.inc_button = style->property.dec_button;
 801a2d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a2d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a2d4:	f502 602a 	add.w	r0, r2, #2720	; 0xaa0
 801a2d8:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 801a2dc:	2298      	movs	r2, #152	; 0x98
 801a2de:	4619      	mov	r1, r3
 801a2e0:	f004 fcd8 	bl	801ec94 <memcpy>

    /* property edit */
    edit = &style->property.edit;
 801a2e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a2e6:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 801a2ea:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 801a2ec:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 801a2f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a2f2:	f002 f9af 	bl	801c654 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a2f6:	6a3b      	ldr	r3, [r7, #32]
 801a2f8:	3340      	adds	r3, #64	; 0x40
 801a2fa:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801a2fc:	463a      	mov	r2, r7
 801a2fe:	6819      	ldr	r1, [r3, #0]
 801a300:	460b      	mov	r3, r1
 801a302:	4619      	mov	r1, r3
 801a304:	4610      	mov	r0, r2
 801a306:	f7fe fdc9 	bl	8018e9c <nk_style_item_color>
 801a30a:	4625      	mov	r5, r4
 801a30c:	463c      	mov	r4, r7
 801a30e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a312:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a316:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a31a:	6a3b      	ldr	r3, [r7, #32]
 801a31c:	3340      	adds	r3, #64	; 0x40
 801a31e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801a320:	463a      	mov	r2, r7
 801a322:	6819      	ldr	r1, [r3, #0]
 801a324:	460b      	mov	r3, r1
 801a326:	4619      	mov	r1, r3
 801a328:	4610      	mov	r0, r2
 801a32a:	f7fe fdb7 	bl	8018e9c <nk_style_item_color>
 801a32e:	341c      	adds	r4, #28
 801a330:	463d      	mov	r5, r7
 801a332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a33a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801a33e:	6a3b      	ldr	r3, [r7, #32]
 801a340:	3340      	adds	r3, #64	; 0x40
 801a342:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801a344:	463a      	mov	r2, r7
 801a346:	6819      	ldr	r1, [r3, #0]
 801a348:	460b      	mov	r3, r1
 801a34a:	4619      	mov	r1, r3
 801a34c:	4610      	mov	r0, r2
 801a34e:	f7fe fda5 	bl	8018e9c <nk_style_item_color>
 801a352:	3438      	adds	r4, #56	; 0x38
 801a354:	463d      	mov	r5, r7
 801a356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a35a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a35e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->border_color      = nk_rgba(0,0,0,0);
 801a362:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801a364:	2300      	movs	r3, #0
 801a366:	2200      	movs	r2, #0
 801a368:	2100      	movs	r1, #0
 801a36a:	2000      	movs	r0, #0
 801a36c:	f7f5 fcca 	bl	800fd04 <nk_rgba>
 801a370:	4603      	mov	r3, r0
 801a372:	6563      	str	r3, [r4, #84]	; 0x54
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 801a374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a376:	6a3a      	ldr	r2, [r7, #32]
 801a378:	f503 7319 	add.w	r3, r3, #612	; 0x264
 801a37c:	6810      	ldr	r0, [r2, #0]
 801a37e:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 801a380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a382:	6a3a      	ldr	r2, [r7, #32]
 801a384:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801a388:	6810      	ldr	r0, [r2, #0]
 801a38a:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 801a38c:	6a3b      	ldr	r3, [r7, #32]
 801a38e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801a392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a394:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 801a398:	6810      	ldr	r0, [r2, #0]
 801a39a:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 801a39c:	6a3b      	ldr	r3, [r7, #32]
 801a39e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801a3a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3a4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 801a3a8:	6810      	ldr	r0, [r2, #0]
 801a3aa:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 801a3ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3ae:	6a3a      	ldr	r2, [r7, #32]
 801a3b0:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801a3b4:	6810      	ldr	r0, [r2, #0]
 801a3b6:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 801a3b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3ba:	6a3a      	ldr	r2, [r7, #32]
 801a3bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a3c0:	6810      	ldr	r0, [r2, #0]
 801a3c2:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 801a3c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3c6:	6a3a      	ldr	r2, [r7, #32]
 801a3c8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801a3cc:	6810      	ldr	r0, [r2, #0]
 801a3ce:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801a3d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3d2:	6a3a      	ldr	r2, [r7, #32]
 801a3d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801a3d8:	6810      	ldr	r0, [r2, #0]
 801a3da:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 801a3dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3de:	6a3a      	ldr	r2, [r7, #32]
 801a3e0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801a3e4:	6810      	ldr	r0, [r2, #0]
 801a3e6:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 801a3e8:	6a3b      	ldr	r3, [r7, #32]
 801a3ea:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801a3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a3f4:	6810      	ldr	r0, [r2, #0]
 801a3f6:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 801a3f8:	6a3b      	ldr	r3, [r7, #32]
 801a3fa:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801a3fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a400:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801a404:	6810      	ldr	r0, [r2, #0]
 801a406:	6018      	str	r0, [r3, #0]
    edit->padding           = nk_vec2(0,0);
 801a408:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801a40a:	eddf 0a27 	vldr	s1, [pc, #156]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a40e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a412:	f7fa f993 	bl	801473c <nk_vec2>
 801a416:	eeb0 7a40 	vmov.f32	s14, s0
 801a41a:	eef0 7a60 	vmov.f32	s15, s1
 801a41e:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 801a422:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->cursor_size       = 8;
 801a426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a428:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801a42c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 0;
 801a430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a432:	f04f 0200 	mov.w	r2, #0
 801a436:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 801a43a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a43c:	f04f 0200 	mov.w	r2, #0
 801a440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* chart */
    chart = &style->chart;
 801a444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a446:	f603 638c 	addw	r3, r3, #3724	; 0xe8c
 801a44a:	64fb      	str	r3, [r7, #76]	; 0x4c
    nk_zero_struct(*chart);
 801a44c:	2138      	movs	r1, #56	; 0x38
 801a44e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a450:	f002 f900 	bl	801c654 <nk_zero>
    chart->background       = nk_style_item_color(table[NK_COLOR_CHART]);
 801a454:	6a3b      	ldr	r3, [r7, #32]
 801a456:	3350      	adds	r3, #80	; 0x50
 801a458:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801a45a:	463a      	mov	r2, r7
 801a45c:	6819      	ldr	r1, [r3, #0]
 801a45e:	460b      	mov	r3, r1
 801a460:	4619      	mov	r1, r3
 801a462:	4610      	mov	r0, r2
 801a464:	f7fe fd1a 	bl	8018e9c <nk_style_item_color>
 801a468:	4625      	mov	r5, r4
 801a46a:	463c      	mov	r4, r7
 801a46c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a46e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a470:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a474:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    chart->border_color     = table[NK_COLOR_BORDER];
 801a478:	6a3b      	ldr	r3, [r7, #32]
 801a47a:	f103 020c 	add.w	r2, r3, #12
 801a47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a480:	331c      	adds	r3, #28
 801a482:	6810      	ldr	r0, [r2, #0]
 801a484:	6018      	str	r0, [r3, #0]
    chart->selected_color   = table[NK_COLOR_CHART_COLOR_HIGHLIGHT];
 801a486:	6a3b      	ldr	r3, [r7, #32]
 801a488:	f103 0258 	add.w	r2, r3, #88	; 0x58
 801a48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a48e:	3320      	adds	r3, #32
 801a490:	6810      	ldr	r0, [r2, #0]
 801a492:	6018      	str	r0, [r3, #0]
    chart->color            = table[NK_COLOR_CHART_COLOR];
 801a494:	6a3b      	ldr	r3, [r7, #32]
 801a496:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801a49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a49c:	3324      	adds	r3, #36	; 0x24
 801a49e:	6810      	ldr	r0, [r2, #0]
 801a4a0:	6018      	str	r0, [r3, #0]
 801a4a2:	e003      	b.n	801a4ac <nk_style_from_table+0x15a8>
 801a4a4:	41200000 	.word	0x41200000
 801a4a8:	00000000 	.word	0x00000000
    chart->padding          = nk_vec2(4,4);
 801a4ac:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801a4ae:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a4b2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a4b6:	f7fa f941 	bl	801473c <nk_vec2>
 801a4ba:	eeb0 7a40 	vmov.f32	s14, s0
 801a4be:	eef0 7a60 	vmov.f32	s15, s1
 801a4c2:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
 801a4c6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    chart->border           = 0;
 801a4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4cc:	f04f 0200 	mov.w	r2, #0
 801a4d0:	629a      	str	r2, [r3, #40]	; 0x28
    chart->rounding         = 0;
 801a4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4d4:	f04f 0200 	mov.w	r2, #0
 801a4d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* combo */
    combo = &style->combo;
 801a4da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a4dc:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 801a4e0:	64bb      	str	r3, [r7, #72]	; 0x48
    combo->normal           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801a4e2:	6a3b      	ldr	r3, [r7, #32]
 801a4e4:	334c      	adds	r3, #76	; 0x4c
 801a4e6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801a4e8:	463a      	mov	r2, r7
 801a4ea:	6819      	ldr	r1, [r3, #0]
 801a4ec:	460b      	mov	r3, r1
 801a4ee:	4619      	mov	r1, r3
 801a4f0:	4610      	mov	r0, r2
 801a4f2:	f7fe fcd3 	bl	8018e9c <nk_style_item_color>
 801a4f6:	4625      	mov	r5, r4
 801a4f8:	463c      	mov	r4, r7
 801a4fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a4fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a502:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    combo->hover            = nk_style_item_color(table[NK_COLOR_COMBO]);
 801a506:	6a3b      	ldr	r3, [r7, #32]
 801a508:	334c      	adds	r3, #76	; 0x4c
 801a50a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801a50c:	463a      	mov	r2, r7
 801a50e:	6819      	ldr	r1, [r3, #0]
 801a510:	460b      	mov	r3, r1
 801a512:	4619      	mov	r1, r3
 801a514:	4610      	mov	r0, r2
 801a516:	f7fe fcc1 	bl	8018e9c <nk_style_item_color>
 801a51a:	341c      	adds	r4, #28
 801a51c:	463d      	mov	r5, r7
 801a51e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->active           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801a52a:	6a3b      	ldr	r3, [r7, #32]
 801a52c:	334c      	adds	r3, #76	; 0x4c
 801a52e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801a530:	463a      	mov	r2, r7
 801a532:	6819      	ldr	r1, [r3, #0]
 801a534:	460b      	mov	r3, r1
 801a536:	4619      	mov	r1, r3
 801a538:	4610      	mov	r0, r2
 801a53a:	f7fe fcaf 	bl	8018e9c <nk_style_item_color>
 801a53e:	3438      	adds	r4, #56	; 0x38
 801a540:	463d      	mov	r5, r7
 801a542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a54a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->border_color     = table[NK_COLOR_BORDER];
 801a54e:	6a3b      	ldr	r3, [r7, #32]
 801a550:	f103 020c 	add.w	r2, r3, #12
 801a554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a556:	3354      	adds	r3, #84	; 0x54
 801a558:	6810      	ldr	r0, [r2, #0]
 801a55a:	6018      	str	r0, [r3, #0]
    combo->label_normal     = table[NK_COLOR_TEXT];
 801a55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a55e:	6a3a      	ldr	r2, [r7, #32]
 801a560:	3358      	adds	r3, #88	; 0x58
 801a562:	6810      	ldr	r0, [r2, #0]
 801a564:	6018      	str	r0, [r3, #0]
    combo->label_hover      = table[NK_COLOR_TEXT];
 801a566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a568:	6a3a      	ldr	r2, [r7, #32]
 801a56a:	335c      	adds	r3, #92	; 0x5c
 801a56c:	6810      	ldr	r0, [r2, #0]
 801a56e:	6018      	str	r0, [r3, #0]
    combo->label_active     = table[NK_COLOR_TEXT];
 801a570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a572:	6a3a      	ldr	r2, [r7, #32]
 801a574:	3360      	adds	r3, #96	; 0x60
 801a576:	6810      	ldr	r0, [r2, #0]
 801a578:	6018      	str	r0, [r3, #0]
    combo->sym_normal       = NK_SYMBOL_TRIANGLE_DOWN;
 801a57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a57c:	2208      	movs	r2, #8
 801a57e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    combo->sym_hover        = NK_SYMBOL_TRIANGLE_DOWN;
 801a582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a584:	2208      	movs	r2, #8
 801a586:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    combo->sym_active       = NK_SYMBOL_TRIANGLE_DOWN;
 801a58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a58c:	2208      	movs	r2, #8
 801a58e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    combo->content_padding  = nk_vec2(4,4);
 801a592:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801a594:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a598:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a59c:	f7fa f8ce 	bl	801473c <nk_vec2>
 801a5a0:	eeb0 7a40 	vmov.f32	s14, s0
 801a5a4:	eef0 7a60 	vmov.f32	s15, s1
 801a5a8:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 801a5ac:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
    combo->button_padding   = nk_vec2(0,4);
 801a5b0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801a5b2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a5b6:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a5ba:	f7fa f8bf 	bl	801473c <nk_vec2>
 801a5be:	eeb0 7a40 	vmov.f32	s14, s0
 801a5c2:	eef0 7a60 	vmov.f32	s15, s1
 801a5c6:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 801a5ca:	edc4 7a48 	vstr	s15, [r4, #288]	; 0x120
    combo->spacing          = nk_vec2(4,0);
 801a5ce:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801a5d0:	ed5f 0a4b 	vldr	s1, [pc, #-300]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a5d4:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a5d8:	f7fa f8b0 	bl	801473c <nk_vec2>
 801a5dc:	eeb0 7a40 	vmov.f32	s14, s0
 801a5e0:	eef0 7a60 	vmov.f32	s15, s1
 801a5e4:	ed84 7a49 	vstr	s14, [r4, #292]	; 0x124
 801a5e8:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
    combo->border           = 1;
 801a5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a5f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    combo->rounding         = 0;
 801a5f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5f8:	f04f 0200 	mov.w	r2, #0
 801a5fc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    /* combo button */
    button = &style->combo.button;
 801a600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a602:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 801a606:	3310      	adds	r3, #16
 801a608:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a60a:	2198      	movs	r1, #152	; 0x98
 801a60c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a60e:	f002 f821 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_COMBO]);
 801a612:	6a3b      	ldr	r3, [r7, #32]
 801a614:	334c      	adds	r3, #76	; 0x4c
 801a616:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a618:	463a      	mov	r2, r7
 801a61a:	6819      	ldr	r1, [r3, #0]
 801a61c:	460b      	mov	r3, r1
 801a61e:	4619      	mov	r1, r3
 801a620:	4610      	mov	r0, r2
 801a622:	f7fe fc3b 	bl	8018e9c <nk_style_item_color>
 801a626:	4625      	mov	r5, r4
 801a628:	463c      	mov	r4, r7
 801a62a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a62c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a62e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a632:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801a636:	6a3b      	ldr	r3, [r7, #32]
 801a638:	334c      	adds	r3, #76	; 0x4c
 801a63a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a63c:	463a      	mov	r2, r7
 801a63e:	6819      	ldr	r1, [r3, #0]
 801a640:	460b      	mov	r3, r1
 801a642:	4619      	mov	r1, r3
 801a644:	4610      	mov	r0, r2
 801a646:	f7fe fc29 	bl	8018e9c <nk_style_item_color>
 801a64a:	341c      	adds	r4, #28
 801a64c:	463d      	mov	r5, r7
 801a64e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_COMBO]);
 801a65a:	6a3b      	ldr	r3, [r7, #32]
 801a65c:	334c      	adds	r3, #76	; 0x4c
 801a65e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a660:	463a      	mov	r2, r7
 801a662:	6819      	ldr	r1, [r3, #0]
 801a664:	460b      	mov	r3, r1
 801a666:	4619      	mov	r1, r3
 801a668:	4610      	mov	r0, r2
 801a66a:	f7fe fc17 	bl	8018e9c <nk_style_item_color>
 801a66e:	3438      	adds	r4, #56	; 0x38
 801a670:	463d      	mov	r5, r7
 801a672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a67a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a67e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a680:	2300      	movs	r3, #0
 801a682:	2200      	movs	r2, #0
 801a684:	2100      	movs	r1, #0
 801a686:	2000      	movs	r0, #0
 801a688:	f7f5 fb3c 	bl	800fd04 <nk_rgba>
 801a68c:	4603      	mov	r3, r0
 801a68e:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_COMBO];
 801a690:	6a3b      	ldr	r3, [r7, #32]
 801a692:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801a696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a698:	3358      	adds	r3, #88	; 0x58
 801a69a:	6810      	ldr	r0, [r2, #0]
 801a69c:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a6a0:	6a3a      	ldr	r2, [r7, #32]
 801a6a2:	335c      	adds	r3, #92	; 0x5c
 801a6a4:	6810      	ldr	r0, [r2, #0]
 801a6a6:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a6aa:	6a3a      	ldr	r2, [r7, #32]
 801a6ac:	3360      	adds	r3, #96	; 0x60
 801a6ae:	6810      	ldr	r0, [r2, #0]
 801a6b0:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a6b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a6b4:	6a3a      	ldr	r2, [r7, #32]
 801a6b6:	3364      	adds	r3, #100	; 0x64
 801a6b8:	6810      	ldr	r0, [r2, #0]
 801a6ba:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801a6bc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a6be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801a6c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801a6c6:	f7fa f839 	bl	801473c <nk_vec2>
 801a6ca:	eeb0 7a40 	vmov.f32	s14, s0
 801a6ce:	eef0 7a60 	vmov.f32	s15, s1
 801a6d2:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a6d6:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a6da:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a6dc:	ed5f 0a8e 	vldr	s1, [pc, #-568]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a6e0:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 801a4a8 <nk_style_from_table+0x15a4>
 801a6e4:	f7fa f82a 	bl	801473c <nk_vec2>
 801a6e8:	eeb0 7a40 	vmov.f32	s14, s0
 801a6ec:	eef0 7a60 	vmov.f32	s15, s1
 801a6f0:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a6f4:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a6f8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a6fa:	2000      	movs	r0, #0
 801a6fc:	f7f8 fbd2 	bl	8012ea4 <nk_handle_ptr>
 801a700:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a706:	2212      	movs	r2, #18
 801a708:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a70c:	f04f 0200 	mov.w	r2, #0
 801a710:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a714:	f04f 0200 	mov.w	r2, #0
 801a718:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a71a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a71c:	2200      	movs	r2, #0
 801a71e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a724:	2200      	movs	r2, #0
 801a726:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* tab */
    tab = &style->tab;
 801a72a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a72c:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 801a730:	331c      	adds	r3, #28
 801a732:	647b      	str	r3, [r7, #68]	; 0x44
    tab->background         = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801a734:	6a3b      	ldr	r3, [r7, #32]
 801a736:	336c      	adds	r3, #108	; 0x6c
 801a738:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801a73a:	463a      	mov	r2, r7
 801a73c:	6819      	ldr	r1, [r3, #0]
 801a73e:	460b      	mov	r3, r1
 801a740:	4619      	mov	r1, r3
 801a742:	4610      	mov	r0, r2
 801a744:	f7fe fbaa 	bl	8018e9c <nk_style_item_color>
 801a748:	4625      	mov	r5, r4
 801a74a:	463c      	mov	r4, r7
 801a74c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a74e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a750:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a754:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    tab->border_color       = table[NK_COLOR_BORDER];
 801a758:	6a3b      	ldr	r3, [r7, #32]
 801a75a:	f103 020c 	add.w	r2, r3, #12
 801a75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a760:	331c      	adds	r3, #28
 801a762:	6810      	ldr	r0, [r2, #0]
 801a764:	6018      	str	r0, [r3, #0]
    tab->text               = table[NK_COLOR_TEXT];
 801a766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a768:	6a3a      	ldr	r2, [r7, #32]
 801a76a:	3320      	adds	r3, #32
 801a76c:	6810      	ldr	r0, [r2, #0]
 801a76e:	6018      	str	r0, [r3, #0]
    tab->sym_minimize       = NK_SYMBOL_TRIANGLE_RIGHT;
 801a770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a772:	220a      	movs	r2, #10
 801a774:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    tab->sym_maximize       = NK_SYMBOL_TRIANGLE_DOWN;
 801a778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a77a:	2208      	movs	r2, #8
 801a77c:	f883 2285 	strb.w	r2, [r3, #645]	; 0x285
    tab->padding            = nk_vec2(4,4);
 801a780:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801a782:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a786:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a78a:	f7f9 ffd7 	bl	801473c <nk_vec2>
 801a78e:	eeb0 7a40 	vmov.f32	s14, s0
 801a792:	eef0 7a60 	vmov.f32	s15, s1
 801a796:	ed84 7aa5 	vstr	s14, [r4, #660]	; 0x294
 801a79a:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
    tab->spacing            = nk_vec2(4,4);
 801a79e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801a7a0:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a7a4:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a7a8:	f7f9 ffc8 	bl	801473c <nk_vec2>
 801a7ac:	eeb0 7a40 	vmov.f32	s14, s0
 801a7b0:	eef0 7a60 	vmov.f32	s15, s1
 801a7b4:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 801a7b8:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    tab->indent             = 10.0f;
 801a7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7be:	4aca      	ldr	r2, [pc, #808]	; (801aae8 <nk_style_from_table+0x1be4>)
 801a7c0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    tab->border             = 1;
 801a7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a7ca:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    tab->rounding           = 0;
 801a7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7d0:	f04f 0200 	mov.w	r2, #0
 801a7d4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

    /* tab button */
    button = &style->tab.tab_minimize_button;
 801a7d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a7da:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801a7de:	3318      	adds	r3, #24
 801a7e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a7e2:	2198      	movs	r1, #152	; 0x98
 801a7e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a7e6:	f001 ff35 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801a7ea:	6a3b      	ldr	r3, [r7, #32]
 801a7ec:	336c      	adds	r3, #108	; 0x6c
 801a7ee:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a7f0:	463a      	mov	r2, r7
 801a7f2:	6819      	ldr	r1, [r3, #0]
 801a7f4:	460b      	mov	r3, r1
 801a7f6:	4619      	mov	r1, r3
 801a7f8:	4610      	mov	r0, r2
 801a7fa:	f7fe fb4f 	bl	8018e9c <nk_style_item_color>
 801a7fe:	4625      	mov	r5, r4
 801a800:	463c      	mov	r4, r7
 801a802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a806:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a80a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801a80e:	6a3b      	ldr	r3, [r7, #32]
 801a810:	336c      	adds	r3, #108	; 0x6c
 801a812:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a814:	463a      	mov	r2, r7
 801a816:	6819      	ldr	r1, [r3, #0]
 801a818:	460b      	mov	r3, r1
 801a81a:	4619      	mov	r1, r3
 801a81c:	4610      	mov	r0, r2
 801a81e:	f7fe fb3d 	bl	8018e9c <nk_style_item_color>
 801a822:	341c      	adds	r4, #28
 801a824:	463d      	mov	r5, r7
 801a826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a82a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a82e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801a832:	6a3b      	ldr	r3, [r7, #32]
 801a834:	336c      	adds	r3, #108	; 0x6c
 801a836:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a838:	463a      	mov	r2, r7
 801a83a:	6819      	ldr	r1, [r3, #0]
 801a83c:	460b      	mov	r3, r1
 801a83e:	4619      	mov	r1, r3
 801a840:	4610      	mov	r0, r2
 801a842:	f7fe fb2b 	bl	8018e9c <nk_style_item_color>
 801a846:	3438      	adds	r4, #56	; 0x38
 801a848:	463d      	mov	r5, r7
 801a84a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a84c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a84e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a856:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a858:	2300      	movs	r3, #0
 801a85a:	2200      	movs	r2, #0
 801a85c:	2100      	movs	r1, #0
 801a85e:	2000      	movs	r0, #0
 801a860:	f7f5 fa50 	bl	800fd04 <nk_rgba>
 801a864:	4603      	mov	r3, r0
 801a866:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801a868:	6a3b      	ldr	r3, [r7, #32]
 801a86a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801a86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a870:	3358      	adds	r3, #88	; 0x58
 801a872:	6810      	ldr	r0, [r2, #0]
 801a874:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a878:	6a3a      	ldr	r2, [r7, #32]
 801a87a:	335c      	adds	r3, #92	; 0x5c
 801a87c:	6810      	ldr	r0, [r2, #0]
 801a87e:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a882:	6a3a      	ldr	r2, [r7, #32]
 801a884:	3360      	adds	r3, #96	; 0x60
 801a886:	6810      	ldr	r0, [r2, #0]
 801a888:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a88a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a88c:	6a3a      	ldr	r2, [r7, #32]
 801a88e:	3364      	adds	r3, #100	; 0x64
 801a890:	6810      	ldr	r0, [r2, #0]
 801a892:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801a894:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a896:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801a89a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801a89e:	f7f9 ff4d 	bl	801473c <nk_vec2>
 801a8a2:	eeb0 7a40 	vmov.f32	s14, s0
 801a8a6:	eef0 7a60 	vmov.f32	s15, s1
 801a8aa:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a8ae:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a8b2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a8b4:	eddf 0a8d 	vldr	s1, [pc, #564]	; 801aaec <nk_style_from_table+0x1be8>
 801a8b8:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801aaec <nk_style_from_table+0x1be8>
 801a8bc:	f7f9 ff3e 	bl	801473c <nk_vec2>
 801a8c0:	eeb0 7a40 	vmov.f32	s14, s0
 801a8c4:	eef0 7a60 	vmov.f32	s15, s1
 801a8c8:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a8cc:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a8d0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a8d2:	2000      	movs	r0, #0
 801a8d4:	f7f8 fae6 	bl	8012ea4 <nk_handle_ptr>
 801a8d8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a8dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a8de:	2212      	movs	r2, #18
 801a8e0:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a8e4:	f04f 0200 	mov.w	r2, #0
 801a8e8:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a8ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a8ec:	f04f 0200 	mov.w	r2, #0
 801a8f0:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.tab_maximize_button =*button;
 801a902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a90a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801a90e:	4611      	mov	r1, r2
 801a910:	2298      	movs	r2, #152	; 0x98
 801a912:	4618      	mov	r0, r3
 801a914:	f004 f9be 	bl	801ec94 <memcpy>

    /* node button */
    button = &style->tab.node_minimize_button;
 801a918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a91a:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 801a91e:	3308      	adds	r3, #8
 801a920:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a922:	2198      	movs	r1, #152	; 0x98
 801a924:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a926:	f001 fe95 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801a92a:	6a3b      	ldr	r3, [r7, #32]
 801a92c:	3304      	adds	r3, #4
 801a92e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a930:	463a      	mov	r2, r7
 801a932:	6819      	ldr	r1, [r3, #0]
 801a934:	460b      	mov	r3, r1
 801a936:	4619      	mov	r1, r3
 801a938:	4610      	mov	r0, r2
 801a93a:	f7fe faaf 	bl	8018e9c <nk_style_item_color>
 801a93e:	4625      	mov	r5, r4
 801a940:	463c      	mov	r4, r7
 801a942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a946:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a94a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801a94e:	6a3b      	ldr	r3, [r7, #32]
 801a950:	3304      	adds	r3, #4
 801a952:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a954:	463a      	mov	r2, r7
 801a956:	6819      	ldr	r1, [r3, #0]
 801a958:	460b      	mov	r3, r1
 801a95a:	4619      	mov	r1, r3
 801a95c:	4610      	mov	r0, r2
 801a95e:	f7fe fa9d 	bl	8018e9c <nk_style_item_color>
 801a962:	341c      	adds	r4, #28
 801a964:	463d      	mov	r5, r7
 801a966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a96a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a96e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801a972:	6a3b      	ldr	r3, [r7, #32]
 801a974:	3304      	adds	r3, #4
 801a976:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a978:	463a      	mov	r2, r7
 801a97a:	6819      	ldr	r1, [r3, #0]
 801a97c:	460b      	mov	r3, r1
 801a97e:	4619      	mov	r1, r3
 801a980:	4610      	mov	r0, r2
 801a982:	f7fe fa8b 	bl	8018e9c <nk_style_item_color>
 801a986:	3438      	adds	r4, #56	; 0x38
 801a988:	463d      	mov	r5, r7
 801a98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a98c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a98e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a996:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a998:	2300      	movs	r3, #0
 801a99a:	2200      	movs	r2, #0
 801a99c:	2100      	movs	r1, #0
 801a99e:	2000      	movs	r0, #0
 801a9a0:	f7f5 f9b0 	bl	800fd04 <nk_rgba>
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801a9a8:	6a3b      	ldr	r3, [r7, #32]
 801a9aa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801a9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a9b0:	3358      	adds	r3, #88	; 0x58
 801a9b2:	6810      	ldr	r0, [r2, #0]
 801a9b4:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a9b8:	6a3a      	ldr	r2, [r7, #32]
 801a9ba:	335c      	adds	r3, #92	; 0x5c
 801a9bc:	6810      	ldr	r0, [r2, #0]
 801a9be:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a9c2:	6a3a      	ldr	r2, [r7, #32]
 801a9c4:	3360      	adds	r3, #96	; 0x60
 801a9c6:	6810      	ldr	r0, [r2, #0]
 801a9c8:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a9ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a9cc:	6a3a      	ldr	r2, [r7, #32]
 801a9ce:	3364      	adds	r3, #100	; 0x64
 801a9d0:	6810      	ldr	r0, [r2, #0]
 801a9d2:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801a9d4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a9d6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801a9da:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801a9de:	f7f9 fead 	bl	801473c <nk_vec2>
 801a9e2:	eeb0 7a40 	vmov.f32	s14, s0
 801a9e6:	eef0 7a60 	vmov.f32	s15, s1
 801a9ea:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a9ee:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a9f2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a9f4:	eddf 0a3d 	vldr	s1, [pc, #244]	; 801aaec <nk_style_from_table+0x1be8>
 801a9f8:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801aaec <nk_style_from_table+0x1be8>
 801a9fc:	f7f9 fe9e 	bl	801473c <nk_vec2>
 801aa00:	eeb0 7a40 	vmov.f32	s14, s0
 801aa04:	eef0 7a60 	vmov.f32	s15, s1
 801aa08:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801aa0c:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801aa10:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801aa12:	2000      	movs	r0, #0
 801aa14:	f7f8 fa46 	bl	8012ea4 <nk_handle_ptr>
 801aa18:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801aa1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aa1e:	2212      	movs	r2, #18
 801aa20:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801aa22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aa24:	f04f 0200 	mov.w	r2, #0
 801aa28:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801aa2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aa2c:	f04f 0200 	mov.w	r2, #0
 801aa30:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801aa32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aa34:	2200      	movs	r2, #0
 801aa36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801aa3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.node_maximize_button =*button;
 801aa42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801aa4a:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 801aa4e:	4611      	mov	r1, r2
 801aa50:	2298      	movs	r2, #152	; 0x98
 801aa52:	4618      	mov	r0, r3
 801aa54:	f004 f91e 	bl	801ec94 <memcpy>

    /* window header */
    win = &style->window;
 801aa58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa5a:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 801aa5e:	330c      	adds	r3, #12
 801aa60:	643b      	str	r3, [r7, #64]	; 0x40
    win->header.align = NK_HEADER_RIGHT;
 801aa62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa64:	2201      	movs	r2, #1
 801aa66:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
    win->header.close_symbol = NK_SYMBOL_X;
 801aa6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa6c:	2201      	movs	r2, #1
 801aa6e:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
    win->header.minimize_symbol = NK_SYMBOL_MINUS;
 801aa72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa74:	220c      	movs	r2, #12
 801aa76:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
    win->header.maximize_symbol = NK_SYMBOL_PLUS;
 801aa7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa7c:	220b      	movs	r2, #11
 801aa7e:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    win->header.normal = nk_style_item_color(table[NK_COLOR_HEADER]);
 801aa82:	6a3b      	ldr	r3, [r7, #32]
 801aa84:	3308      	adds	r3, #8
 801aa86:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801aa88:	463a      	mov	r2, r7
 801aa8a:	6819      	ldr	r1, [r3, #0]
 801aa8c:	460b      	mov	r3, r1
 801aa8e:	4619      	mov	r1, r3
 801aa90:	4610      	mov	r0, r2
 801aa92:	f7fe fa03 	bl	8018e9c <nk_style_item_color>
 801aa96:	4625      	mov	r5, r4
 801aa98:	463c      	mov	r4, r7
 801aa9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aa9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aa9e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801aaa2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    win->header.hover = nk_style_item_color(table[NK_COLOR_HEADER]);
 801aaa6:	6a3b      	ldr	r3, [r7, #32]
 801aaa8:	3308      	adds	r3, #8
 801aaaa:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801aaac:	463a      	mov	r2, r7
 801aaae:	6819      	ldr	r1, [r3, #0]
 801aab0:	460b      	mov	r3, r1
 801aab2:	4619      	mov	r1, r3
 801aab4:	4610      	mov	r0, r2
 801aab6:	f7fe f9f1 	bl	8018e9c <nk_style_item_color>
 801aaba:	341c      	adds	r4, #28
 801aabc:	463d      	mov	r5, r7
 801aabe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801aac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.active = nk_style_item_color(table[NK_COLOR_HEADER]);
 801aaca:	6a3b      	ldr	r3, [r7, #32]
 801aacc:	3308      	adds	r3, #8
 801aace:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801aad0:	463a      	mov	r2, r7
 801aad2:	6819      	ldr	r1, [r3, #0]
 801aad4:	460b      	mov	r3, r1
 801aad6:	4619      	mov	r1, r3
 801aad8:	4610      	mov	r0, r2
 801aada:	f7fe f9df 	bl	8018e9c <nk_style_item_color>
 801aade:	3438      	adds	r4, #56	; 0x38
 801aae0:	463d      	mov	r5, r7
 801aae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aae4:	e004      	b.n	801aaf0 <nk_style_from_table+0x1bec>
 801aae6:	bf00      	nop
 801aae8:	41200000 	.word	0x41200000
 801aaec:	00000000 	.word	0x00000000
 801aaf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aaf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801aaf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.label_normal = table[NK_COLOR_TEXT];
 801aafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aafc:	6a3a      	ldr	r2, [r7, #32]
 801aafe:	f203 1387 	addw	r3, r3, #391	; 0x187
 801ab02:	6812      	ldr	r2, [r2, #0]
 801ab04:	601a      	str	r2, [r3, #0]
    win->header.label_hover = table[NK_COLOR_TEXT];
 801ab06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab08:	6a3a      	ldr	r2, [r7, #32]
 801ab0a:	f203 138b 	addw	r3, r3, #395	; 0x18b
 801ab0e:	6812      	ldr	r2, [r2, #0]
 801ab10:	601a      	str	r2, [r3, #0]
    win->header.label_active = table[NK_COLOR_TEXT];
 801ab12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab14:	6a3a      	ldr	r2, [r7, #32]
 801ab16:	f203 138f 	addw	r3, r3, #399	; 0x18f
 801ab1a:	6812      	ldr	r2, [r2, #0]
 801ab1c:	601a      	str	r2, [r3, #0]
    win->header.label_padding = nk_vec2(4,4);
 801ab1e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ab20:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801ab24:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801ab28:	f7f9 fe08 	bl	801473c <nk_vec2>
 801ab2c:	eeb0 7a40 	vmov.f32	s14, s0
 801ab30:	eef0 7a60 	vmov.f32	s15, s1
 801ab34:	ed84 7a67 	vstr	s14, [r4, #412]	; 0x19c
 801ab38:	edc4 7a68 	vstr	s15, [r4, #416]	; 0x1a0
    win->header.padding = nk_vec2(4,4);
 801ab3c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ab3e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801ab42:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801ab46:	f7f9 fdf9 	bl	801473c <nk_vec2>
 801ab4a:	eeb0 7a40 	vmov.f32	s14, s0
 801ab4e:	eef0 7a60 	vmov.f32	s15, s1
 801ab52:	ed84 7a65 	vstr	s14, [r4, #404]	; 0x194
 801ab56:	edc4 7a66 	vstr	s15, [r4, #408]	; 0x198
    win->header.spacing = nk_vec2(0,0);
 801ab5a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ab5c:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 801aaec <nk_style_from_table+0x1be8>
 801ab60:	ed1f 0a1e 	vldr	s0, [pc, #-120]	; 801aaec <nk_style_from_table+0x1be8>
 801ab64:	f7f9 fdea 	bl	801473c <nk_vec2>
 801ab68:	eeb0 7a40 	vmov.f32	s14, s0
 801ab6c:	eef0 7a60 	vmov.f32	s15, s1
 801ab70:	ed84 7a69 	vstr	s14, [r4, #420]	; 0x1a4
 801ab74:	edc4 7a6a 	vstr	s15, [r4, #424]	; 0x1a8

    /* window header close button */
    button = &style->window.header.close_button;
 801ab78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab7a:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 801ab7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ab80:	2198      	movs	r1, #152	; 0x98
 801ab82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ab84:	f001 fd66 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ab88:	6a3b      	ldr	r3, [r7, #32]
 801ab8a:	3308      	adds	r3, #8
 801ab8c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ab8e:	463a      	mov	r2, r7
 801ab90:	6819      	ldr	r1, [r3, #0]
 801ab92:	460b      	mov	r3, r1
 801ab94:	4619      	mov	r1, r3
 801ab96:	4610      	mov	r0, r2
 801ab98:	f7fe f980 	bl	8018e9c <nk_style_item_color>
 801ab9c:	4625      	mov	r5, r4
 801ab9e:	463c      	mov	r4, r7
 801aba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aba4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801aba8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801abac:	6a3b      	ldr	r3, [r7, #32]
 801abae:	3308      	adds	r3, #8
 801abb0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801abb2:	463a      	mov	r2, r7
 801abb4:	6819      	ldr	r1, [r3, #0]
 801abb6:	460b      	mov	r3, r1
 801abb8:	4619      	mov	r1, r3
 801abba:	4610      	mov	r0, r2
 801abbc:	f7fe f96e 	bl	8018e9c <nk_style_item_color>
 801abc0:	341c      	adds	r4, #28
 801abc2:	463d      	mov	r5, r7
 801abc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801abcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801abd0:	6a3b      	ldr	r3, [r7, #32]
 801abd2:	3308      	adds	r3, #8
 801abd4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801abd6:	463a      	mov	r2, r7
 801abd8:	6819      	ldr	r1, [r3, #0]
 801abda:	460b      	mov	r3, r1
 801abdc:	4619      	mov	r1, r3
 801abde:	4610      	mov	r0, r2
 801abe0:	f7fe f95c 	bl	8018e9c <nk_style_item_color>
 801abe4:	3438      	adds	r4, #56	; 0x38
 801abe6:	463d      	mov	r5, r7
 801abe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801abf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801abf4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801abf6:	2300      	movs	r3, #0
 801abf8:	2200      	movs	r2, #0
 801abfa:	2100      	movs	r1, #0
 801abfc:	2000      	movs	r0, #0
 801abfe:	f7f5 f881 	bl	800fd04 <nk_rgba>
 801ac02:	4603      	mov	r3, r0
 801ac04:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801ac06:	6a3b      	ldr	r3, [r7, #32]
 801ac08:	f103 0208 	add.w	r2, r3, #8
 801ac0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac0e:	3358      	adds	r3, #88	; 0x58
 801ac10:	6810      	ldr	r0, [r2, #0]
 801ac12:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801ac14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac16:	6a3a      	ldr	r2, [r7, #32]
 801ac18:	335c      	adds	r3, #92	; 0x5c
 801ac1a:	6810      	ldr	r0, [r2, #0]
 801ac1c:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801ac1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac20:	6a3a      	ldr	r2, [r7, #32]
 801ac22:	3360      	adds	r3, #96	; 0x60
 801ac24:	6810      	ldr	r0, [r2, #0]
 801ac26:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801ac28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac2a:	6a3a      	ldr	r2, [r7, #32]
 801ac2c:	3364      	adds	r3, #100	; 0x64
 801ac2e:	6810      	ldr	r0, [r2, #0]
 801ac30:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801ac32:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ac34:	ed5f 0a53 	vldr	s1, [pc, #-332]	; 801aaec <nk_style_from_table+0x1be8>
 801ac38:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 801aaec <nk_style_from_table+0x1be8>
 801ac3c:	f7f9 fd7e 	bl	801473c <nk_vec2>
 801ac40:	eeb0 7a40 	vmov.f32	s14, s0
 801ac44:	eef0 7a60 	vmov.f32	s15, s1
 801ac48:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801ac4c:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801ac50:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ac52:	ed5f 0a5a 	vldr	s1, [pc, #-360]	; 801aaec <nk_style_from_table+0x1be8>
 801ac56:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 801aaec <nk_style_from_table+0x1be8>
 801ac5a:	f7f9 fd6f 	bl	801473c <nk_vec2>
 801ac5e:	eeb0 7a40 	vmov.f32	s14, s0
 801ac62:	eef0 7a60 	vmov.f32	s15, s1
 801ac66:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801ac6a:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801ac6e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ac70:	2000      	movs	r0, #0
 801ac72:	f7f8 f917 	bl	8012ea4 <nk_handle_ptr>
 801ac76:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801ac7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac7c:	2212      	movs	r2, #18
 801ac7e:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801ac80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac82:	f04f 0200 	mov.w	r2, #0
 801ac86:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801ac88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac8a:	f04f 0200 	mov.w	r2, #0
 801ac8e:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801ac90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac92:	2200      	movs	r2, #0
 801ac94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801ac98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window header minimize button */
    button = &style->window.header.minimize_button;
 801aca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aca2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 801aca6:	3318      	adds	r3, #24
 801aca8:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801acaa:	2198      	movs	r1, #152	; 0x98
 801acac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801acae:	f001 fcd1 	bl	801c654 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801acb2:	6a3b      	ldr	r3, [r7, #32]
 801acb4:	3308      	adds	r3, #8
 801acb6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801acb8:	463a      	mov	r2, r7
 801acba:	6819      	ldr	r1, [r3, #0]
 801acbc:	460b      	mov	r3, r1
 801acbe:	4619      	mov	r1, r3
 801acc0:	4610      	mov	r0, r2
 801acc2:	f7fe f8eb 	bl	8018e9c <nk_style_item_color>
 801acc6:	4625      	mov	r5, r4
 801acc8:	463c      	mov	r4, r7
 801acca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801accc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801acce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801acd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801acd6:	6a3b      	ldr	r3, [r7, #32]
 801acd8:	3308      	adds	r3, #8
 801acda:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801acdc:	463a      	mov	r2, r7
 801acde:	6819      	ldr	r1, [r3, #0]
 801ace0:	460b      	mov	r3, r1
 801ace2:	4619      	mov	r1, r3
 801ace4:	4610      	mov	r0, r2
 801ace6:	f7fe f8d9 	bl	8018e9c <nk_style_item_color>
 801acea:	341c      	adds	r4, #28
 801acec:	463d      	mov	r5, r7
 801acee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801acf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801acf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801acfa:	6a3b      	ldr	r3, [r7, #32]
 801acfc:	3308      	adds	r3, #8
 801acfe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ad00:	463a      	mov	r2, r7
 801ad02:	6819      	ldr	r1, [r3, #0]
 801ad04:	460b      	mov	r3, r1
 801ad06:	4619      	mov	r1, r3
 801ad08:	4610      	mov	r0, r2
 801ad0a:	f7fe f8c7 	bl	8018e9c <nk_style_item_color>
 801ad0e:	3438      	adds	r4, #56	; 0x38
 801ad10:	463d      	mov	r5, r7
 801ad12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ad1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801ad1e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ad20:	2300      	movs	r3, #0
 801ad22:	2200      	movs	r2, #0
 801ad24:	2100      	movs	r1, #0
 801ad26:	2000      	movs	r0, #0
 801ad28:	f7f4 ffec 	bl	800fd04 <nk_rgba>
 801ad2c:	4603      	mov	r3, r0
 801ad2e:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801ad30:	6a3b      	ldr	r3, [r7, #32]
 801ad32:	f103 0208 	add.w	r2, r3, #8
 801ad36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad38:	3358      	adds	r3, #88	; 0x58
 801ad3a:	6810      	ldr	r0, [r2, #0]
 801ad3c:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801ad3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad40:	6a3a      	ldr	r2, [r7, #32]
 801ad42:	335c      	adds	r3, #92	; 0x5c
 801ad44:	6810      	ldr	r0, [r2, #0]
 801ad46:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801ad48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad4a:	6a3a      	ldr	r2, [r7, #32]
 801ad4c:	3360      	adds	r3, #96	; 0x60
 801ad4e:	6810      	ldr	r0, [r2, #0]
 801ad50:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801ad52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad54:	6a3a      	ldr	r2, [r7, #32]
 801ad56:	3364      	adds	r3, #100	; 0x64
 801ad58:	6810      	ldr	r0, [r2, #0]
 801ad5a:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801ad5c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ad5e:	ed5f 0a9d 	vldr	s1, [pc, #-628]	; 801aaec <nk_style_from_table+0x1be8>
 801ad62:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 801aaec <nk_style_from_table+0x1be8>
 801ad66:	f7f9 fce9 	bl	801473c <nk_vec2>
 801ad6a:	eeb0 7a40 	vmov.f32	s14, s0
 801ad6e:	eef0 7a60 	vmov.f32	s15, s1
 801ad72:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801ad76:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801ad7a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ad7c:	ed5f 0aa5 	vldr	s1, [pc, #-660]	; 801aaec <nk_style_from_table+0x1be8>
 801ad80:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 801aaec <nk_style_from_table+0x1be8>
 801ad84:	f7f9 fcda 	bl	801473c <nk_vec2>
 801ad88:	eeb0 7a40 	vmov.f32	s14, s0
 801ad8c:	eef0 7a60 	vmov.f32	s15, s1
 801ad90:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801ad94:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801ad98:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ad9a:	2000      	movs	r0, #0
 801ad9c:	f7f8 f882 	bl	8012ea4 <nk_handle_ptr>
 801ada0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801ada4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ada6:	2212      	movs	r2, #18
 801ada8:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801adaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801adac:	f04f 0200 	mov.w	r2, #0
 801adb0:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801adb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801adb4:	f04f 0200 	mov.w	r2, #0
 801adb8:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801adba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801adbc:	2200      	movs	r2, #0
 801adbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801adc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801adc4:	2200      	movs	r2, #0
 801adc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window */
    win->background = table[NK_COLOR_WINDOW];
 801adca:	6a3b      	ldr	r3, [r7, #32]
 801adcc:	1d1a      	adds	r2, r3, #4
 801adce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801add0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801add4:	6810      	ldr	r0, [r2, #0]
 801add6:	6018      	str	r0, [r3, #0]
    win->fixed_background = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801add8:	6a3b      	ldr	r3, [r7, #32]
 801adda:	3304      	adds	r3, #4
 801addc:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801adde:	463a      	mov	r2, r7
 801ade0:	6819      	ldr	r1, [r3, #0]
 801ade2:	460b      	mov	r3, r1
 801ade4:	4619      	mov	r1, r3
 801ade6:	4610      	mov	r0, r2
 801ade8:	f7fe f858 	bl	8018e9c <nk_style_item_color>
 801adec:	f504 74d6 	add.w	r4, r4, #428	; 0x1ac
 801adf0:	463d      	mov	r5, r7
 801adf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801adf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801adfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->border_color = table[NK_COLOR_BORDER];
 801adfe:	6a3b      	ldr	r3, [r7, #32]
 801ae00:	f103 020c 	add.w	r2, r3, #12
 801ae04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae06:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801ae0a:	6810      	ldr	r0, [r2, #0]
 801ae0c:	6018      	str	r0, [r3, #0]
    win->popup_border_color = table[NK_COLOR_BORDER];
 801ae0e:	6a3b      	ldr	r3, [r7, #32]
 801ae10:	f103 020c 	add.w	r2, r3, #12
 801ae14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae16:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 801ae1a:	6810      	ldr	r0, [r2, #0]
 801ae1c:	6018      	str	r0, [r3, #0]
    win->combo_border_color = table[NK_COLOR_BORDER];
 801ae1e:	6a3b      	ldr	r3, [r7, #32]
 801ae20:	f103 020c 	add.w	r2, r3, #12
 801ae24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae26:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801ae2a:	6810      	ldr	r0, [r2, #0]
 801ae2c:	6018      	str	r0, [r3, #0]
    win->contextual_border_color = table[NK_COLOR_BORDER];
 801ae2e:	6a3b      	ldr	r3, [r7, #32]
 801ae30:	f103 020c 	add.w	r2, r3, #12
 801ae34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae36:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801ae3a:	6810      	ldr	r0, [r2, #0]
 801ae3c:	6018      	str	r0, [r3, #0]
    win->menu_border_color = table[NK_COLOR_BORDER];
 801ae3e:	6a3b      	ldr	r3, [r7, #32]
 801ae40:	f103 020c 	add.w	r2, r3, #12
 801ae44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae46:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801ae4a:	6810      	ldr	r0, [r2, #0]
 801ae4c:	6018      	str	r0, [r3, #0]
    win->group_border_color = table[NK_COLOR_BORDER];
 801ae4e:	6a3b      	ldr	r3, [r7, #32]
 801ae50:	f103 020c 	add.w	r2, r3, #12
 801ae54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae56:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801ae5a:	6810      	ldr	r0, [r2, #0]
 801ae5c:	6018      	str	r0, [r3, #0]
    win->tooltip_border_color = table[NK_COLOR_BORDER];
 801ae5e:	6a3b      	ldr	r3, [r7, #32]
 801ae60:	f103 020c 	add.w	r2, r3, #12
 801ae64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801ae6a:	6810      	ldr	r0, [r2, #0]
 801ae6c:	6018      	str	r0, [r3, #0]
    win->scaler = nk_style_item_color(table[NK_COLOR_TEXT]);
 801ae6e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ae70:	463a      	mov	r2, r7
 801ae72:	6a3b      	ldr	r3, [r7, #32]
 801ae74:	6819      	ldr	r1, [r3, #0]
 801ae76:	460b      	mov	r3, r1
 801ae78:	4619      	mov	r1, r3
 801ae7a:	4610      	mov	r0, r2
 801ae7c:	f7fe f80e 	bl	8018e9c <nk_style_item_color>
 801ae80:	f504 74f4 	add.w	r4, r4, #488	; 0x1e8
 801ae84:	463d      	mov	r5, r7
 801ae86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ae88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ae8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    win->rounding = 0.0f;
 801ae92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae94:	f04f 0200 	mov.w	r2, #0
 801ae98:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    win->spacing = nk_vec2(4,4);
 801ae9c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ae9e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801aea2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801aea6:	f7f9 fc49 	bl	801473c <nk_vec2>
 801aeaa:	eeb0 7a40 	vmov.f32	s14, s0
 801aeae:	eef0 7a60 	vmov.f32	s15, s1
 801aeb2:	ed84 7a8a 	vstr	s14, [r4, #552]	; 0x228
 801aeb6:	edc4 7a8b 	vstr	s15, [r4, #556]	; 0x22c
    win->scrollbar_size = nk_vec2(20,20);
 801aeba:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801aebc:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 801aec0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801aec4:	f7f9 fc3a 	bl	801473c <nk_vec2>
 801aec8:	eeb0 7a40 	vmov.f32	s14, s0
 801aecc:	eef0 7a60 	vmov.f32	s15, s1
 801aed0:	ed84 7a8c 	vstr	s14, [r4, #560]	; 0x230
 801aed4:	edc4 7a8d 	vstr	s15, [r4, #564]	; 0x234
    win->min_size = nk_vec2(64,64);
 801aed8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801aeda:	eddf 0a52 	vldr	s1, [pc, #328]	; 801b024 <nk_style_from_table+0x2120>
 801aede:	ed9f 0a51 	vldr	s0, [pc, #324]	; 801b024 <nk_style_from_table+0x2120>
 801aee2:	f7f9 fc2b 	bl	801473c <nk_vec2>
 801aee6:	eeb0 7a40 	vmov.f32	s14, s0
 801aeea:	eef0 7a60 	vmov.f32	s15, s1
 801aeee:	ed84 7a8e 	vstr	s14, [r4, #568]	; 0x238
 801aef2:	edc4 7a8f 	vstr	s15, [r4, #572]	; 0x23c

    win->combo_border = 1.0f;
 801aef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aef8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801aefc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    win->contextual_border = 1.0f;
 801af00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801af06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    win->menu_border = 1.0f;
 801af0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801af10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    win->group_border = 1.0f;
 801af14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801af1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    win->tooltip_border = 1.0f;
 801af1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801af24:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    win->popup_border = 1.0f;
 801af28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801af2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    win->border = 2.0f;
 801af32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801af38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    win->min_row_height_padding = 8;
 801af3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af3e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801af42:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    win->padding = nk_vec2(4,4);
 801af46:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801af48:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801af4c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801af50:	f7f9 fbf4 	bl	801473c <nk_vec2>
 801af54:	eeb0 7a40 	vmov.f32	s14, s0
 801af58:	eef0 7a60 	vmov.f32	s15, s1
 801af5c:	ed84 7a90 	vstr	s14, [r4, #576]	; 0x240
 801af60:	edc4 7a91 	vstr	s15, [r4, #580]	; 0x244
    win->group_padding = nk_vec2(4,4);
 801af64:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801af66:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801af6a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801af6e:	f7f9 fbe5 	bl	801473c <nk_vec2>
 801af72:	eeb0 7a40 	vmov.f32	s14, s0
 801af76:	eef0 7a60 	vmov.f32	s15, s1
 801af7a:	ed84 7a92 	vstr	s14, [r4, #584]	; 0x248
 801af7e:	edc4 7a93 	vstr	s15, [r4, #588]	; 0x24c
    win->popup_padding = nk_vec2(4,4);
 801af82:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801af84:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801af88:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801af8c:	f7f9 fbd6 	bl	801473c <nk_vec2>
 801af90:	eeb0 7a40 	vmov.f32	s14, s0
 801af94:	eef0 7a60 	vmov.f32	s15, s1
 801af98:	ed84 7a94 	vstr	s14, [r4, #592]	; 0x250
 801af9c:	edc4 7a95 	vstr	s15, [r4, #596]	; 0x254
    win->combo_padding = nk_vec2(4,4);
 801afa0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801afa2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801afa6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801afaa:	f7f9 fbc7 	bl	801473c <nk_vec2>
 801afae:	eeb0 7a40 	vmov.f32	s14, s0
 801afb2:	eef0 7a60 	vmov.f32	s15, s1
 801afb6:	ed84 7a96 	vstr	s14, [r4, #600]	; 0x258
 801afba:	edc4 7a97 	vstr	s15, [r4, #604]	; 0x25c
    win->contextual_padding = nk_vec2(4,4);
 801afbe:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801afc0:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801afc4:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801afc8:	f7f9 fbb8 	bl	801473c <nk_vec2>
 801afcc:	eeb0 7a40 	vmov.f32	s14, s0
 801afd0:	eef0 7a60 	vmov.f32	s15, s1
 801afd4:	ed84 7a98 	vstr	s14, [r4, #608]	; 0x260
 801afd8:	edc4 7a99 	vstr	s15, [r4, #612]	; 0x264
    win->menu_padding = nk_vec2(4,4);
 801afdc:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801afde:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801afe2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801afe6:	f7f9 fba9 	bl	801473c <nk_vec2>
 801afea:	eeb0 7a40 	vmov.f32	s14, s0
 801afee:	eef0 7a60 	vmov.f32	s15, s1
 801aff2:	ed84 7a9a 	vstr	s14, [r4, #616]	; 0x268
 801aff6:	edc4 7a9b 	vstr	s15, [r4, #620]	; 0x26c
    win->tooltip_padding = nk_vec2(4,4);
 801affa:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801affc:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801b000:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801b004:	f7f9 fb9a 	bl	801473c <nk_vec2>
 801b008:	eeb0 7a40 	vmov.f32	s14, s0
 801b00c:	eef0 7a60 	vmov.f32	s15, s1
 801b010:	ed84 7a9c 	vstr	s14, [r4, #624]	; 0x270
 801b014:	edc4 7a9d 	vstr	s15, [r4, #628]	; 0x274
 801b018:	e000      	b.n	801b01c <nk_style_from_table+0x2118>
    if (!ctx) return;
 801b01a:	bf00      	nop
}
 801b01c:	3778      	adds	r7, #120	; 0x78
 801b01e:	46bd      	mov	sp, r7
 801b020:	bdb0      	pop	{r4, r5, r7, pc}
 801b022:	bf00      	nop
 801b024:	42800000 	.word	0x42800000

0801b028 <nk_create_table>:
 *                              TABLE
 *
 * ===============================================================*/
NK_LIB struct nk_table*
nk_create_table(struct nk_context *ctx)
{
 801b028:	b580      	push	{r7, lr}
 801b02a:	b084      	sub	sp, #16
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801b030:	6878      	ldr	r0, [r7, #4]
 801b032:	f7f9 fe17 	bl	8014c64 <nk_create_page_element>
 801b036:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d101      	bne.n	801b042 <nk_create_table+0x1a>
 801b03e:	2300      	movs	r3, #0
 801b040:	e005      	b.n	801b04e <nk_create_table+0x26>
    nk_zero_struct(*elem);
 801b042:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801b046:	68f8      	ldr	r0, [r7, #12]
 801b048:	f001 fb04 	bl	801c654 <nk_zero>
    return &elem->data.tbl;
 801b04c:	68fb      	ldr	r3, [r7, #12]
}
 801b04e:	4618      	mov	r0, r3
 801b050:	3710      	adds	r7, #16
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}

0801b056 <nk_free_table>:
NK_LIB void
nk_free_table(struct nk_context *ctx, struct nk_table *tbl)
{
 801b056:	b580      	push	{r7, lr}
 801b058:	b084      	sub	sp, #16
 801b05a:	af00      	add	r7, sp, #0
 801b05c:	6078      	str	r0, [r7, #4]
 801b05e:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(tbl, union nk_page_data, tbl);
 801b060:	683b      	ldr	r3, [r7, #0]
 801b062:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 801b068:	68b9      	ldr	r1, [r7, #8]
 801b06a:	6878      	ldr	r0, [r7, #4]
 801b06c:	f7f9 fe91 	bl	8014d92 <nk_free_page_element>
}
 801b070:	bf00      	nop
 801b072:	3710      	adds	r7, #16
 801b074:	46bd      	mov	sp, r7
 801b076:	bd80      	pop	{r7, pc}

0801b078 <nk_push_table>:
NK_LIB void
nk_push_table(struct nk_window *win, struct nk_table *tbl)
{
 801b078:	b480      	push	{r7}
 801b07a:	b083      	sub	sp, #12
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
 801b080:	6039      	str	r1, [r7, #0]
    if (!win->tables) {
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d113      	bne.n	801b0b4 <nk_push_table+0x3c>
        win->tables = tbl;
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	683a      	ldr	r2, [r7, #0]
 801b090:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        tbl->next = 0;
 801b094:	683b      	ldr	r3, [r7, #0]
 801b096:	2200      	movs	r2, #0
 801b098:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        tbl->prev = 0;
 801b09c:	683b      	ldr	r3, [r7, #0]
 801b09e:	2200      	movs	r2, #0
 801b0a0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
        tbl->size = 0;
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	605a      	str	r2, [r3, #4]
        win->table_count = 1;
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	2201      	movs	r2, #1
 801b0ae:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        return;
 801b0b2:	e01d      	b.n	801b0f0 <nk_push_table+0x78>
    }
    win->tables->prev = tbl;
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b0ba:	683a      	ldr	r2, [r7, #0]
 801b0bc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->next = win->tables;
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801b0c6:	683b      	ldr	r3, [r7, #0]
 801b0c8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801b0cc:	683b      	ldr	r3, [r7, #0]
 801b0ce:	2200      	movs	r2, #0
 801b0d0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->size = 0;
 801b0d4:	683b      	ldr	r3, [r7, #0]
 801b0d6:	2200      	movs	r2, #0
 801b0d8:	605a      	str	r2, [r3, #4]
    win->tables = tbl;
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	683a      	ldr	r2, [r7, #0]
 801b0de:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    win->table_count++;
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 801b0e8:	1c5a      	adds	r2, r3, #1
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
}
 801b0f0:	370c      	adds	r7, #12
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0f8:	4770      	bx	lr

0801b0fa <nk_remove_table>:
NK_LIB void
nk_remove_table(struct nk_window *win, struct nk_table *tbl)
{
 801b0fa:	b480      	push	{r7}
 801b0fc:	b083      	sub	sp, #12
 801b0fe:	af00      	add	r7, sp, #0
 801b100:	6078      	str	r0, [r7, #4]
 801b102:	6039      	str	r1, [r7, #0]
    if (win->tables == tbl)
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b10a:	683a      	ldr	r2, [r7, #0]
 801b10c:	429a      	cmp	r2, r3
 801b10e:	d105      	bne.n	801b11c <nk_remove_table+0x22>
        win->tables = tbl->next;
 801b110:	683b      	ldr	r3, [r7, #0]
 801b112:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    if (tbl->next)
 801b11c:	683b      	ldr	r3, [r7, #0]
 801b11e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801b122:	2b00      	cmp	r3, #0
 801b124:	d007      	beq.n	801b136 <nk_remove_table+0x3c>
        tbl->next->prev = tbl->prev;
 801b126:	683b      	ldr	r3, [r7, #0]
 801b128:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801b12c:	683a      	ldr	r2, [r7, #0]
 801b12e:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 801b132:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    if (tbl->prev)
 801b136:	683b      	ldr	r3, [r7, #0]
 801b138:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d007      	beq.n	801b150 <nk_remove_table+0x56>
        tbl->prev->next = tbl->next;
 801b140:	683b      	ldr	r3, [r7, #0]
 801b142:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801b146:	683a      	ldr	r2, [r7, #0]
 801b148:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 801b14c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->next = 0;
 801b150:	683b      	ldr	r3, [r7, #0]
 801b152:	2200      	movs	r2, #0
 801b154:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801b158:	683b      	ldr	r3, [r7, #0]
 801b15a:	2200      	movs	r2, #0
 801b15c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 801b160:	bf00      	nop
 801b162:	370c      	adds	r7, #12
 801b164:	46bd      	mov	sp, r7
 801b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b16a:	4770      	bx	lr

0801b16c <nk_add_value>:
NK_LIB nk_uint*
nk_add_value(struct nk_context *ctx, struct nk_window *win,
            nk_hash name, nk_uint value)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b086      	sub	sp, #24
 801b170:	af00      	add	r7, sp, #0
 801b172:	60f8      	str	r0, [r7, #12]
 801b174:	60b9      	str	r1, [r7, #8]
 801b176:	607a      	str	r2, [r7, #4]
 801b178:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d105      	bne.n	801b18c <nk_add_value+0x20>
 801b180:	4b32      	ldr	r3, [pc, #200]	; (801b24c <nk_add_value+0xe0>)
 801b182:	4a33      	ldr	r2, [pc, #204]	; (801b250 <nk_add_value+0xe4>)
 801b184:	213b      	movs	r1, #59	; 0x3b
 801b186:	4833      	ldr	r0, [pc, #204]	; (801b254 <nk_add_value+0xe8>)
 801b188:	f002 ff5c 	bl	801e044 <__assert_func>
    NK_ASSERT(win);
 801b18c:	68bb      	ldr	r3, [r7, #8]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d105      	bne.n	801b19e <nk_add_value+0x32>
 801b192:	4b31      	ldr	r3, [pc, #196]	; (801b258 <nk_add_value+0xec>)
 801b194:	4a2e      	ldr	r2, [pc, #184]	; (801b250 <nk_add_value+0xe4>)
 801b196:	213c      	movs	r1, #60	; 0x3c
 801b198:	482e      	ldr	r0, [pc, #184]	; (801b254 <nk_add_value+0xe8>)
 801b19a:	f002 ff53 	bl	801e044 <__assert_func>
    if (!win || !ctx) return 0;
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d002      	beq.n	801b1aa <nk_add_value+0x3e>
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d101      	bne.n	801b1ae <nk_add_value+0x42>
 801b1aa:	2300      	movs	r3, #0
 801b1ac:	e04a      	b.n	801b244 <nk_add_value+0xd8>
    if (!win->tables || win->tables->size >= NK_VALUE_PAGE_CAPACITY) {
 801b1ae:	68bb      	ldr	r3, [r7, #8]
 801b1b0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d005      	beq.n	801b1c4 <nk_add_value+0x58>
 801b1b8:	68bb      	ldr	r3, [r7, #8]
 801b1ba:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b1be:	685b      	ldr	r3, [r3, #4]
 801b1c0:	2b32      	cmp	r3, #50	; 0x32
 801b1c2:	d915      	bls.n	801b1f0 <nk_add_value+0x84>
        struct nk_table *tbl = nk_create_table(ctx);
 801b1c4:	68f8      	ldr	r0, [r7, #12]
 801b1c6:	f7ff ff2f 	bl	801b028 <nk_create_table>
 801b1ca:	6178      	str	r0, [r7, #20]
        NK_ASSERT(tbl);
 801b1cc:	697b      	ldr	r3, [r7, #20]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d105      	bne.n	801b1de <nk_add_value+0x72>
 801b1d2:	4b22      	ldr	r3, [pc, #136]	; (801b25c <nk_add_value+0xf0>)
 801b1d4:	4a1e      	ldr	r2, [pc, #120]	; (801b250 <nk_add_value+0xe4>)
 801b1d6:	2140      	movs	r1, #64	; 0x40
 801b1d8:	481e      	ldr	r0, [pc, #120]	; (801b254 <nk_add_value+0xe8>)
 801b1da:	f002 ff33 	bl	801e044 <__assert_func>
        if (!tbl) return 0;
 801b1de:	697b      	ldr	r3, [r7, #20]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d101      	bne.n	801b1e8 <nk_add_value+0x7c>
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	e02d      	b.n	801b244 <nk_add_value+0xd8>
        nk_push_table(win, tbl);
 801b1e8:	6979      	ldr	r1, [r7, #20]
 801b1ea:	68b8      	ldr	r0, [r7, #8]
 801b1ec:	f7ff ff44 	bl	801b078 <nk_push_table>
    }
    win->tables->seq = win->seq;
 801b1f0:	68bb      	ldr	r3, [r7, #8]
 801b1f2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b1f6:	68ba      	ldr	r2, [r7, #8]
 801b1f8:	6812      	ldr	r2, [r2, #0]
 801b1fa:	601a      	str	r2, [r3, #0]
    win->tables->keys[win->tables->size] = name;
 801b1fc:	68bb      	ldr	r3, [r7, #8]
 801b1fe:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b202:	68ba      	ldr	r2, [r7, #8]
 801b204:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 801b208:	6852      	ldr	r2, [r2, #4]
 801b20a:	3202      	adds	r2, #2
 801b20c:	6879      	ldr	r1, [r7, #4]
 801b20e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    win->tables->values[win->tables->size] = value;
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801b218:	68bb      	ldr	r3, [r7, #8]
 801b21a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b21e:	685b      	ldr	r3, [r3, #4]
 801b220:	3334      	adds	r3, #52	; 0x34
 801b222:	009b      	lsls	r3, r3, #2
 801b224:	4413      	add	r3, r2
 801b226:	683a      	ldr	r2, [r7, #0]
 801b228:	605a      	str	r2, [r3, #4]
    return &win->tables->values[win->tables->size++];
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 801b230:	68bb      	ldr	r3, [r7, #8]
 801b232:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801b236:	6853      	ldr	r3, [r2, #4]
 801b238:	1c58      	adds	r0, r3, #1
 801b23a:	6050      	str	r0, [r2, #4]
 801b23c:	3334      	adds	r3, #52	; 0x34
 801b23e:	009b      	lsls	r3, r3, #2
 801b240:	440b      	add	r3, r1
 801b242:	3304      	adds	r3, #4
}
 801b244:	4618      	mov	r0, r3
 801b246:	3718      	adds	r7, #24
 801b248:	46bd      	mov	sp, r7
 801b24a:	bd80      	pop	{r7, pc}
 801b24c:	080225b0 	.word	0x080225b0
 801b250:	08023d40 	.word	0x08023d40
 801b254:	080225b4 	.word	0x080225b4
 801b258:	080225d0 	.word	0x080225d0
 801b25c:	080225d4 	.word	0x080225d4

0801b260 <nk_find_value>:
NK_LIB nk_uint*
nk_find_value(struct nk_window *win, nk_hash name)
{
 801b260:	b480      	push	{r7}
 801b262:	b087      	sub	sp, #28
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
 801b268:	6039      	str	r1, [r7, #0]
    struct nk_table *iter = win->tables;
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b270:	617b      	str	r3, [r7, #20]
    while (iter) {
 801b272:	e027      	b.n	801b2c4 <nk_find_value+0x64>
        unsigned int i = 0;
 801b274:	2300      	movs	r3, #0
 801b276:	613b      	str	r3, [r7, #16]
        unsigned int size = iter->size;
 801b278:	697b      	ldr	r3, [r7, #20]
 801b27a:	685b      	ldr	r3, [r3, #4]
 801b27c:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < size; ++i) {
 801b27e:	2300      	movs	r3, #0
 801b280:	613b      	str	r3, [r7, #16]
 801b282:	e015      	b.n	801b2b0 <nk_find_value+0x50>
            if (iter->keys[i] == name) {
 801b284:	697b      	ldr	r3, [r7, #20]
 801b286:	693a      	ldr	r2, [r7, #16]
 801b288:	3202      	adds	r2, #2
 801b28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b28e:	683a      	ldr	r2, [r7, #0]
 801b290:	429a      	cmp	r2, r3
 801b292:	d10a      	bne.n	801b2aa <nk_find_value+0x4a>
                iter->seq = win->seq;
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	681a      	ldr	r2, [r3, #0]
 801b298:	697b      	ldr	r3, [r7, #20]
 801b29a:	601a      	str	r2, [r3, #0]
                return &iter->values[i];
 801b29c:	693b      	ldr	r3, [r7, #16]
 801b29e:	3334      	adds	r3, #52	; 0x34
 801b2a0:	009b      	lsls	r3, r3, #2
 801b2a2:	697a      	ldr	r2, [r7, #20]
 801b2a4:	4413      	add	r3, r2
 801b2a6:	3304      	adds	r3, #4
 801b2a8:	e010      	b.n	801b2cc <nk_find_value+0x6c>
        for (i = 0; i < size; ++i) {
 801b2aa:	693b      	ldr	r3, [r7, #16]
 801b2ac:	3301      	adds	r3, #1
 801b2ae:	613b      	str	r3, [r7, #16]
 801b2b0:	693a      	ldr	r2, [r7, #16]
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	429a      	cmp	r2, r3
 801b2b6:	d3e5      	bcc.n	801b284 <nk_find_value+0x24>
            }
        } size = NK_VALUE_PAGE_CAPACITY;
 801b2b8:	2333      	movs	r3, #51	; 0x33
 801b2ba:	60fb      	str	r3, [r7, #12]
        iter = iter->next;
 801b2bc:	697b      	ldr	r3, [r7, #20]
 801b2be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801b2c2:	617b      	str	r3, [r7, #20]
    while (iter) {
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d1d4      	bne.n	801b274 <nk_find_value+0x14>
    }
    return 0;
 801b2ca:	2300      	movs	r3, #0
}
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	371c      	adds	r7, #28
 801b2d0:	46bd      	mov	sp, r7
 801b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d6:	4770      	bx	lr

0801b2d8 <nk_widget_text>:
 * ===============================================================*/
NK_LIB void
nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,
    const char *string, int len, const struct nk_text *t,
    nk_flags a, const struct nk_user_font *f)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b090      	sub	sp, #64	; 0x40
 801b2dc:	af02      	add	r7, sp, #8
 801b2de:	61f8      	str	r0, [r7, #28]
 801b2e0:	eeb0 6a40 	vmov.f32	s12, s0
 801b2e4:	eef0 6a60 	vmov.f32	s13, s1
 801b2e8:	eeb0 7a41 	vmov.f32	s14, s2
 801b2ec:	eef0 7a61 	vmov.f32	s15, s3
 801b2f0:	60b9      	str	r1, [r7, #8]
 801b2f2:	607a      	str	r2, [r7, #4]
 801b2f4:	603b      	str	r3, [r7, #0]
 801b2f6:	ed87 6a03 	vstr	s12, [r7, #12]
 801b2fa:	edc7 6a04 	vstr	s13, [r7, #16]
 801b2fe:	ed87 7a05 	vstr	s14, [r7, #20]
 801b302:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_rect label;
    float text_width;

    NK_ASSERT(o);
 801b306:	69fb      	ldr	r3, [r7, #28]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d105      	bne.n	801b318 <nk_widget_text+0x40>
 801b30c:	4bb0      	ldr	r3, [pc, #704]	; (801b5d0 <nk_widget_text+0x2f8>)
 801b30e:	4ab1      	ldr	r2, [pc, #708]	; (801b5d4 <nk_widget_text+0x2fc>)
 801b310:	2111      	movs	r1, #17
 801b312:	48b1      	ldr	r0, [pc, #708]	; (801b5d8 <nk_widget_text+0x300>)
 801b314:	f002 fe96 	bl	801e044 <__assert_func>
    NK_ASSERT(t);
 801b318:	683b      	ldr	r3, [r7, #0]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d105      	bne.n	801b32a <nk_widget_text+0x52>
 801b31e:	4baf      	ldr	r3, [pc, #700]	; (801b5dc <nk_widget_text+0x304>)
 801b320:	4aac      	ldr	r2, [pc, #688]	; (801b5d4 <nk_widget_text+0x2fc>)
 801b322:	2112      	movs	r1, #18
 801b324:	48ac      	ldr	r0, [pc, #688]	; (801b5d8 <nk_widget_text+0x300>)
 801b326:	f002 fe8d 	bl	801e044 <__assert_func>
    if (!o || !t) return;
 801b32a:	69fb      	ldr	r3, [r7, #28]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	f000 81f4 	beq.w	801b71a <nk_widget_text+0x442>
 801b332:	683b      	ldr	r3, [r7, #0]
 801b334:	2b00      	cmp	r3, #0
 801b336:	f000 81f0 	beq.w	801b71a <nk_widget_text+0x442>

    b.h = NK_MAX(b.h, 2 * t->padding.y);
 801b33a:	ed97 7a06 	vldr	s14, [r7, #24]
 801b33e:	683b      	ldr	r3, [r7, #0]
 801b340:	edd3 7a01 	vldr	s15, [r3, #4]
 801b344:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b350:	d505      	bpl.n	801b35e <nk_widget_text+0x86>
 801b352:	683b      	ldr	r3, [r7, #0]
 801b354:	edd3 7a01 	vldr	s15, [r3, #4]
 801b358:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b35c:	e001      	b.n	801b362 <nk_widget_text+0x8a>
 801b35e:	edd7 7a06 	vldr	s15, [r7, #24]
 801b362:	edc7 7a06 	vstr	s15, [r7, #24]
    label.x = 0; label.w = 0;
 801b366:	f04f 0300 	mov.w	r3, #0
 801b36a:	627b      	str	r3, [r7, #36]	; 0x24
 801b36c:	f04f 0300 	mov.w	r3, #0
 801b370:	62fb      	str	r3, [r7, #44]	; 0x2c
    label.y = b.y + t->padding.y;
 801b372:	ed97 7a04 	vldr	s14, [r7, #16]
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	edd3 7a01 	vldr	s15, [r3, #4]
 801b37c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b380:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    label.h = NK_MIN(f->height, b.h - 2 * t->padding.y);
 801b384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b386:	ed93 7a01 	vldr	s14, [r3, #4]
 801b38a:	edd7 6a06 	vldr	s13, [r7, #24]
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	edd3 7a01 	vldr	s15, [r3, #4]
 801b394:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b398:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b39c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3a4:	d503      	bpl.n	801b3ae <nk_widget_text+0xd6>
 801b3a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b3a8:	edd3 7a01 	vldr	s15, [r3, #4]
 801b3ac:	e008      	b.n	801b3c0 <nk_widget_text+0xe8>
 801b3ae:	ed97 7a06 	vldr	s14, [r7, #24]
 801b3b2:	683b      	ldr	r3, [r7, #0]
 801b3b4:	edd3 7a01 	vldr	s15, [r3, #4]
 801b3b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b3bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b3c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    text_width = f->width(f->userdata, f->height, (const char*)string, len);
 801b3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b3c6:	689b      	ldr	r3, [r3, #8]
 801b3c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b3ca:	edd2 7a01 	vldr	s15, [r2, #4]
 801b3ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b3d0:	687a      	ldr	r2, [r7, #4]
 801b3d2:	68b9      	ldr	r1, [r7, #8]
 801b3d4:	eeb0 0a67 	vmov.f32	s0, s15
 801b3d8:	6800      	ldr	r0, [r0, #0]
 801b3da:	4798      	blx	r3
 801b3dc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    text_width += (2.0f * t->padding.x);
 801b3e0:	683b      	ldr	r3, [r7, #0]
 801b3e2:	edd3 7a00 	vldr	s15, [r3]
 801b3e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b3ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801b3ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b3f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* align in x-axis */
    if (a & NK_TEXT_ALIGN_LEFT) {
 801b3f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b3f8:	f003 0301 	and.w	r3, r3, #1
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d025      	beq.n	801b44c <nk_widget_text+0x174>
        label.x = b.x + t->padding.x;
 801b400:	ed97 7a03 	vldr	s14, [r7, #12]
 801b404:	683b      	ldr	r3, [r7, #0]
 801b406:	edd3 7a00 	vldr	s15, [r3]
 801b40a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b40e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MAX(0, b.w - 2 * t->padding.x);
 801b412:	ed97 7a05 	vldr	s14, [r7, #20]
 801b416:	683b      	ldr	r3, [r7, #0]
 801b418:	edd3 7a00 	vldr	s15, [r3]
 801b41c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b420:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b424:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b42c:	dd09      	ble.n	801b442 <nk_widget_text+0x16a>
 801b42e:	ed97 7a05 	vldr	s14, [r7, #20]
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	edd3 7a00 	vldr	s15, [r3]
 801b438:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b43c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b440:	e001      	b.n	801b446 <nk_widget_text+0x16e>
 801b442:	eddf 7a67 	vldr	s15, [pc, #412]	; 801b5e0 <nk_widget_text+0x308>
 801b446:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801b44a:	e0df      	b.n	801b60c <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_CENTERED) {
 801b44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b44e:	f003 0302 	and.w	r3, r3, #2
 801b452:	2b00      	cmp	r3, #0
 801b454:	f000 8086 	beq.w	801b564 <nk_widget_text+0x28c>
        label.w = NK_MAX(1, 2 * t->padding.x + (float)text_width);
 801b458:	683b      	ldr	r3, [r7, #0]
 801b45a:	edd3 7a00 	vldr	s15, [r3]
 801b45e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801b462:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b466:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b46a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b46e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b476:	dd09      	ble.n	801b48c <nk_widget_text+0x1b4>
 801b478:	683b      	ldr	r3, [r7, #0]
 801b47a:	edd3 7a00 	vldr	s15, [r3]
 801b47e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801b482:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b486:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b48a:	e001      	b.n	801b490 <nk_widget_text+0x1b8>
 801b48c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b490:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        label.x = (b.x + t->padding.x + ((b.w - 2 * t->padding.x) - label.w) / 2);
 801b494:	ed97 7a03 	vldr	s14, [r7, #12]
 801b498:	683b      	ldr	r3, [r7, #0]
 801b49a:	edd3 7a00 	vldr	s15, [r3]
 801b49e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b4a2:	edd7 6a05 	vldr	s13, [r7, #20]
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	edd3 7a00 	vldr	s15, [r3]
 801b4ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b4b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801b4b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b4b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801b4bc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801b4c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801b4c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b4c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.x = NK_MAX(b.x + t->padding.x, label.x);
 801b4cc:	ed97 7a03 	vldr	s14, [r7, #12]
 801b4d0:	683b      	ldr	r3, [r7, #0]
 801b4d2:	edd3 7a00 	vldr	s15, [r3]
 801b4d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b4da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b4de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4e6:	d502      	bpl.n	801b4ee <nk_widget_text+0x216>
 801b4e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b4ec:	e006      	b.n	801b4fc <nk_widget_text+0x224>
 801b4ee:	ed97 7a03 	vldr	s14, [r7, #12]
 801b4f2:	683b      	ldr	r3, [r7, #0]
 801b4f4:	edd3 7a00 	vldr	s15, [r3]
 801b4f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b4fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MIN(b.x + b.w, label.x + label.w);
 801b500:	ed97 7a03 	vldr	s14, [r7, #12]
 801b504:	edd7 7a05 	vldr	s15, [r7, #20]
 801b508:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b50c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801b510:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b520:	d506      	bpl.n	801b530 <nk_widget_text+0x258>
 801b522:	ed97 7a03 	vldr	s14, [r7, #12]
 801b526:	edd7 7a05 	vldr	s15, [r7, #20]
 801b52a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b52e:	e005      	b.n	801b53c <nk_widget_text+0x264>
 801b530:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801b534:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b53c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if (label.w >= label.x) label.w -= label.x;
 801b540:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801b544:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b550:	db5c      	blt.n	801b60c <nk_widget_text+0x334>
 801b552:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801b556:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b55a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b55e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801b562:	e053      	b.n	801b60c <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_RIGHT) {
 801b564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b566:	f003 0304 	and.w	r3, r3, #4
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	f000 80d7 	beq.w	801b71e <nk_widget_text+0x446>
        label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));
 801b570:	ed97 7a03 	vldr	s14, [r7, #12]
 801b574:	683b      	ldr	r3, [r7, #0]
 801b576:	edd3 7a00 	vldr	s15, [r3]
 801b57a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b57e:	edd7 6a03 	vldr	s13, [r7, #12]
 801b582:	edd7 7a05 	vldr	s15, [r7, #20]
 801b586:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801b58a:	683b      	ldr	r3, [r7, #0]
 801b58c:	edd3 7a00 	vldr	s15, [r3]
 801b590:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801b594:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b598:	ee76 7a27 	vadd.f32	s15, s12, s15
 801b59c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b5a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5a8:	d51c      	bpl.n	801b5e4 <nk_widget_text+0x30c>
 801b5aa:	ed97 7a03 	vldr	s14, [r7, #12]
 801b5ae:	edd7 7a05 	vldr	s15, [r7, #20]
 801b5b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	edd3 7a00 	vldr	s15, [r3]
 801b5bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801b5c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b5c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b5c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b5cc:	e011      	b.n	801b5f2 <nk_widget_text+0x31a>
 801b5ce:	bf00      	nop
 801b5d0:	080225d8 	.word	0x080225d8
 801b5d4:	08023d50 	.word	0x08023d50
 801b5d8:	080225dc 	.word	0x080225dc
 801b5dc:	080225f8 	.word	0x080225f8
 801b5e0:	00000000 	.word	0x00000000
 801b5e4:	ed97 7a03 	vldr	s14, [r7, #12]
 801b5e8:	683b      	ldr	r3, [r7, #0]
 801b5ea:	edd3 7a00 	vldr	s15, [r3]
 801b5ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b5f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = (float)text_width + 2 * t->padding.x;
 801b5f6:	683b      	ldr	r3, [r7, #0]
 801b5f8:	edd3 7a00 	vldr	s15, [r3]
 801b5fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801b600:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b604:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b608:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    } else return;

    /* align in y-axis */
    if (a & NK_TEXT_ALIGN_MIDDLE) {
 801b60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b60e:	f003 0310 	and.w	r3, r3, #16
 801b612:	2b00      	cmp	r3, #0
 801b614:	d04f      	beq.n	801b6b6 <nk_widget_text+0x3de>
        label.y = b.y + b.h/2.0f - (float)f->height/2.0f;
 801b616:	ed97 7a04 	vldr	s14, [r7, #16]
 801b61a:	edd7 6a06 	vldr	s13, [r7, #24]
 801b61e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801b622:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801b626:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b62c:	edd3 6a01 	vldr	s13, [r3, #4]
 801b630:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801b634:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801b638:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b63c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = NK_MAX(b.h/2.0f, b.h - (b.h/2.0f + f->height/2.0f));
 801b640:	edd7 7a06 	vldr	s15, [r7, #24]
 801b644:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801b648:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b64c:	edd7 6a06 	vldr	s13, [r7, #24]
 801b650:	edd7 7a06 	vldr	s15, [r7, #24]
 801b654:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801b658:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801b65c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b65e:	edd3 5a01 	vldr	s11, [r3, #4]
 801b662:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801b666:	eec5 7a85 	vdiv.f32	s15, s11, s10
 801b66a:	ee76 7a27 	vadd.f32	s15, s12, s15
 801b66e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b67a:	d513      	bpl.n	801b6a4 <nk_widget_text+0x3cc>
 801b67c:	ed97 7a06 	vldr	s14, [r7, #24]
 801b680:	edd7 7a06 	vldr	s15, [r7, #24]
 801b684:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801b688:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801b68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b68e:	ed93 6a01 	vldr	s12, [r3, #4]
 801b692:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801b696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b69e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b6a2:	e005      	b.n	801b6b0 <nk_widget_text+0x3d8>
 801b6a4:	ed97 7a06 	vldr	s14, [r7, #24]
 801b6a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801b6ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801b6b0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801b6b4:	e014      	b.n	801b6e0 <nk_widget_text+0x408>
    } else if (a & NK_TEXT_ALIGN_BOTTOM) {
 801b6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b6b8:	f003 0320 	and.w	r3, r3, #32
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d00f      	beq.n	801b6e0 <nk_widget_text+0x408>
        label.y = b.y + b.h - f->height;
 801b6c0:	ed97 7a04 	vldr	s14, [r7, #16]
 801b6c4:	edd7 7a06 	vldr	s15, [r7, #24]
 801b6c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b6ce:	edd3 7a01 	vldr	s15, [r3, #4]
 801b6d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b6d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = f->height;
 801b6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b6dc:	685b      	ldr	r3, [r3, #4]
 801b6de:	633b      	str	r3, [r7, #48]	; 0x30
    }
    nk_draw_text(o, label, (const char*)string, len, f, t->background, t->text);
 801b6e0:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 801b6e4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 801b6e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801b6ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b6f0:	683b      	ldr	r3, [r7, #0]
 801b6f2:	68db      	ldr	r3, [r3, #12]
 801b6f4:	9301      	str	r3, [sp, #4]
 801b6f6:	683b      	ldr	r3, [r7, #0]
 801b6f8:	689b      	ldr	r3, [r3, #8]
 801b6fa:	9300      	str	r3, [sp, #0]
 801b6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b6fe:	687a      	ldr	r2, [r7, #4]
 801b700:	68b9      	ldr	r1, [r7, #8]
 801b702:	eeb0 0a46 	vmov.f32	s0, s12
 801b706:	eef0 0a66 	vmov.f32	s1, s13
 801b70a:	eeb0 1a47 	vmov.f32	s2, s14
 801b70e:	eef0 1a67 	vmov.f32	s3, s15
 801b712:	69f8      	ldr	r0, [r7, #28]
 801b714:	f7f7 fa7a 	bl	8012c0c <nk_draw_text>
 801b718:	e002      	b.n	801b720 <nk_widget_text+0x448>
    if (!o || !t) return;
 801b71a:	bf00      	nop
 801b71c:	e000      	b.n	801b720 <nk_widget_text+0x448>
    } else return;
 801b71e:	bf00      	nop
}
 801b720:	3738      	adds	r7, #56	; 0x38
 801b722:	46bd      	mov	sp, r7
 801b724:	bd80      	pop	{r7, pc}
 801b726:	bf00      	nop

0801b728 <nk_text_colored>:
    }
}
NK_API void
nk_text_colored(struct nk_context *ctx, const char *str, int len,
    nk_flags alignment, struct nk_color color)
{
 801b728:	b580      	push	{r7, lr}
 801b72a:	b092      	sub	sp, #72	; 0x48
 801b72c:	af02      	add	r7, sp, #8
 801b72e:	60f8      	str	r0, [r7, #12]
 801b730:	60b9      	str	r1, [r7, #8]
 801b732:	607a      	str	r2, [r7, #4]
 801b734:	603b      	str	r3, [r7, #0]

    struct nk_vec2 item_padding;
    struct nk_rect bounds;
    struct nk_text text;

    NK_ASSERT(ctx);
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d105      	bne.n	801b748 <nk_text_colored+0x20>
 801b73c:	4b3e      	ldr	r3, [pc, #248]	; (801b838 <nk_text_colored+0x110>)
 801b73e:	4a3f      	ldr	r2, [pc, #252]	; (801b83c <nk_text_colored+0x114>)
 801b740:	2168      	movs	r1, #104	; 0x68
 801b742:	483f      	ldr	r0, [pc, #252]	; (801b840 <nk_text_colored+0x118>)
 801b744:	f002 fc7e 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b74e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b752:	2b00      	cmp	r3, #0
 801b754:	d105      	bne.n	801b762 <nk_text_colored+0x3a>
 801b756:	4b3b      	ldr	r3, [pc, #236]	; (801b844 <nk_text_colored+0x11c>)
 801b758:	4a38      	ldr	r2, [pc, #224]	; (801b83c <nk_text_colored+0x114>)
 801b75a:	2169      	movs	r1, #105	; 0x69
 801b75c:	4838      	ldr	r0, [pc, #224]	; (801b840 <nk_text_colored+0x118>)
 801b75e:	f002 fc71 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b768:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b770:	2b00      	cmp	r3, #0
 801b772:	d105      	bne.n	801b780 <nk_text_colored+0x58>
 801b774:	4b34      	ldr	r3, [pc, #208]	; (801b848 <nk_text_colored+0x120>)
 801b776:	4a31      	ldr	r2, [pc, #196]	; (801b83c <nk_text_colored+0x114>)
 801b778:	216a      	movs	r1, #106	; 0x6a
 801b77a:	4831      	ldr	r0, [pc, #196]	; (801b840 <nk_text_colored+0x118>)
 801b77c:	f002 fc62 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d053      	beq.n	801b82e <nk_text_colored+0x106>
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b78c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b790:	2b00      	cmp	r3, #0
 801b792:	d04c      	beq.n	801b82e <nk_text_colored+0x106>
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b79a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d043      	beq.n	801b82e <nk_text_colored+0x106>

    win = ctx->current;
 801b7a6:	68fb      	ldr	r3, [r7, #12]
 801b7a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b7ac:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    style = &ctx->style;
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801b7b8:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_panel_alloc_space(&bounds, ctx);
 801b7ba:	f107 0320 	add.w	r3, r7, #32
 801b7be:	68f9      	ldr	r1, [r7, #12]
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	f7f8 fe71 	bl	80144a8 <nk_panel_alloc_space>
    item_padding = style->text.padding;
 801b7c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b7c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b7cc:	3230      	adds	r2, #48	; 0x30
 801b7ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b7d2:	e883 0003 	stmia.w	r3, {r0, r1}

    text.padding.x = item_padding.x;
 801b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7d8:	613b      	str	r3, [r7, #16]
    text.padding.y = item_padding.y;
 801b7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7dc:	617b      	str	r3, [r7, #20]
    text.background = style->window.background;
 801b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b7e4:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801b7e8:	61bb      	str	r3, [r7, #24]
    text.text = color;
 801b7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b7ec:	61fb      	str	r3, [r7, #28]
    nk_widget_text(&win->buffer, bounds, str, len, &text, alignment, style->font);
 801b7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7f0:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	f107 0210 	add.w	r2, r7, #16
 801b7fc:	ed97 6a08 	vldr	s12, [r7, #32]
 801b800:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801b804:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801b808:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b80c:	9301      	str	r3, [sp, #4]
 801b80e:	683b      	ldr	r3, [r7, #0]
 801b810:	9300      	str	r3, [sp, #0]
 801b812:	4613      	mov	r3, r2
 801b814:	687a      	ldr	r2, [r7, #4]
 801b816:	68b9      	ldr	r1, [r7, #8]
 801b818:	eeb0 0a46 	vmov.f32	s0, s12
 801b81c:	eef0 0a66 	vmov.f32	s1, s13
 801b820:	eeb0 1a47 	vmov.f32	s2, s14
 801b824:	eef0 1a67 	vmov.f32	s3, s15
 801b828:	f7ff fd56 	bl	801b2d8 <nk_widget_text>
 801b82c:	e000      	b.n	801b830 <nk_text_colored+0x108>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801b82e:	bf00      	nop
}
 801b830:	3740      	adds	r7, #64	; 0x40
 801b832:	46bd      	mov	sp, r7
 801b834:	bd80      	pop	{r7, pc}
 801b836:	bf00      	nop
 801b838:	080225fc 	.word	0x080225fc
 801b83c:	08023d60 	.word	0x08023d60
 801b840:	080225dc 	.word	0x080225dc
 801b844:	08022600 	.word	0x08022600
 801b848:	08022610 	.word	0x08022610

0801b84c <nk_text>:
    nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, hex);
}
#endif
NK_API void
nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)
{
 801b84c:	b580      	push	{r7, lr}
 801b84e:	b086      	sub	sp, #24
 801b850:	af02      	add	r7, sp, #8
 801b852:	60f8      	str	r0, [r7, #12]
 801b854:	60b9      	str	r1, [r7, #8]
 801b856:	607a      	str	r2, [r7, #4]
 801b858:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d106      	bne.n	801b86e <nk_text+0x22>
 801b860:	4b0c      	ldr	r3, [pc, #48]	; (801b894 <nk_text+0x48>)
 801b862:	4a0d      	ldr	r2, [pc, #52]	; (801b898 <nk_text+0x4c>)
 801b864:	f44f 7182 	mov.w	r1, #260	; 0x104
 801b868:	480c      	ldr	r0, [pc, #48]	; (801b89c <nk_text+0x50>)
 801b86a:	f002 fbeb 	bl	801e044 <__assert_func>
    if (!ctx) return;
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d00a      	beq.n	801b88a <nk_text+0x3e>
    nk_text_colored(ctx, str, len, alignment, ctx->style.text.color);
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801b87a:	9300      	str	r3, [sp, #0]
 801b87c:	683b      	ldr	r3, [r7, #0]
 801b87e:	687a      	ldr	r2, [r7, #4]
 801b880:	68b9      	ldr	r1, [r7, #8]
 801b882:	68f8      	ldr	r0, [r7, #12]
 801b884:	f7ff ff50 	bl	801b728 <nk_text_colored>
 801b888:	e000      	b.n	801b88c <nk_text+0x40>
    if (!ctx) return;
 801b88a:	bf00      	nop
}
 801b88c:	3710      	adds	r7, #16
 801b88e:	46bd      	mov	sp, r7
 801b890:	bd80      	pop	{r7, pc}
 801b892:	bf00      	nop
 801b894:	080225fc 	.word	0x080225fc
 801b898:	08023d70 	.word	0x08023d70
 801b89c:	080225dc 	.word	0x080225dc

0801b8a0 <nk_label>:
    if (!ctx) return;
    nk_text_wrap_colored(ctx, str, len, ctx->style.text.color);
}
NK_API void
nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)
{
 801b8a0:	b580      	push	{r7, lr}
 801b8a2:	b084      	sub	sp, #16
 801b8a4:	af00      	add	r7, sp, #0
 801b8a6:	60f8      	str	r0, [r7, #12]
 801b8a8:	60b9      	str	r1, [r7, #8]
 801b8aa:	607a      	str	r2, [r7, #4]
    nk_text(ctx, str, nk_strlen(str), alignment);
 801b8ac:	68b8      	ldr	r0, [r7, #8]
 801b8ae:	f000 feef 	bl	801c690 <nk_strlen>
 801b8b2:	4602      	mov	r2, r0
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	68b9      	ldr	r1, [r7, #8]
 801b8b8:	68f8      	ldr	r0, [r7, #12]
 801b8ba:	f7ff ffc7 	bl	801b84c <nk_text>
}
 801b8be:	bf00      	nop
 801b8c0:	3710      	adds	r7, #16
 801b8c2:	46bd      	mov	sp, r7
 801b8c4:	bd80      	pop	{r7, pc}
	...

0801b8c8 <nk_tree_state_base>:
 *
 * ===============================================================*/
NK_INTERN int
nk_tree_state_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states *state)
{
 801b8c8:	b580      	push	{r7, lr}
 801b8ca:	b0aa      	sub	sp, #168	; 0xa8
 801b8cc:	af04      	add	r7, sp, #16
 801b8ce:	60f8      	str	r0, [r7, #12]
 801b8d0:	607a      	str	r2, [r7, #4]
 801b8d2:	603b      	str	r3, [r7, #0]
 801b8d4:	460b      	mov	r3, r1
 801b8d6:	72fb      	strb	r3, [r7, #11]
    const struct nk_style_button *button;
    enum nk_symbol_type symbol;
    float row_height;

    struct nk_vec2 item_spacing;
    struct nk_rect header = {0,0,0,0};
 801b8d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b8dc:	2200      	movs	r2, #0
 801b8de:	601a      	str	r2, [r3, #0]
 801b8e0:	605a      	str	r2, [r3, #4]
 801b8e2:	609a      	str	r2, [r3, #8]
 801b8e4:	60da      	str	r2, [r3, #12]
    struct nk_rect sym = {0,0,0,0};
 801b8e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	601a      	str	r2, [r3, #0]
 801b8ee:	605a      	str	r2, [r3, #4]
 801b8f0:	609a      	str	r2, [r3, #8]
 801b8f2:	60da      	str	r2, [r3, #12]
    struct nk_text text;

    nk_flags ws = 0;
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	627b      	str	r3, [r7, #36]	; 0x24
    enum nk_widget_layout_states widget_state;

    NK_ASSERT(ctx);
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d105      	bne.n	801b90a <nk_tree_state_base+0x42>
 801b8fe:	4bcf      	ldr	r3, [pc, #828]	; (801bc3c <nk_tree_state_base+0x374>)
 801b900:	4acf      	ldr	r2, [pc, #828]	; (801bc40 <nk_tree_state_base+0x378>)
 801b902:	211e      	movs	r1, #30
 801b904:	48cf      	ldr	r0, [pc, #828]	; (801bc44 <nk_tree_state_base+0x37c>)
 801b906:	f002 fb9d 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b910:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b914:	2b00      	cmp	r3, #0
 801b916:	d105      	bne.n	801b924 <nk_tree_state_base+0x5c>
 801b918:	4bcb      	ldr	r3, [pc, #812]	; (801bc48 <nk_tree_state_base+0x380>)
 801b91a:	4ac9      	ldr	r2, [pc, #804]	; (801bc40 <nk_tree_state_base+0x378>)
 801b91c:	211f      	movs	r1, #31
 801b91e:	48c9      	ldr	r0, [pc, #804]	; (801bc44 <nk_tree_state_base+0x37c>)
 801b920:	f002 fb90 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b924:	68fb      	ldr	r3, [r7, #12]
 801b926:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b92a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b932:	2b00      	cmp	r3, #0
 801b934:	d105      	bne.n	801b942 <nk_tree_state_base+0x7a>
 801b936:	4bc5      	ldr	r3, [pc, #788]	; (801bc4c <nk_tree_state_base+0x384>)
 801b938:	4ac1      	ldr	r2, [pc, #772]	; (801bc40 <nk_tree_state_base+0x378>)
 801b93a:	2120      	movs	r1, #32
 801b93c:	48c1      	ldr	r0, [pc, #772]	; (801bc44 <nk_tree_state_base+0x37c>)
 801b93e:	f002 fb81 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d00f      	beq.n	801b968 <nk_tree_state_base+0xa0>
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b94e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b952:	2b00      	cmp	r3, #0
 801b954:	d008      	beq.n	801b968 <nk_tree_state_base+0xa0>
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b95c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b964:	2b00      	cmp	r3, #0
 801b966:	d101      	bne.n	801b96c <nk_tree_state_base+0xa4>
        return 0;
 801b968:	2300      	movs	r3, #0
 801b96a:	e2f2      	b.n	801bf52 <nk_tree_state_base+0x68a>

    /* cache some data */
    win = ctx->current;
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b972:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    layout = win->layout;
 801b97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b982:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    out = &win->buffer;
 801b986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b98a:	3364      	adds	r3, #100	; 0x64
 801b98c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    style = &ctx->style;
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801b996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    item_spacing = style->window.spacing;
 801b99a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b9a2:	461a      	mov	r2, r3
 801b9a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b9a8:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 801b9ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b9b0:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate header bounds and draw background */
    row_height = 4 + style->font->height + 2 * style->tab.padding.y;
 801b9b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	edd3 7a01 	vldr	s15, [r3, #4]
 801b9be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801b9c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b9c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b9ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b9ce:	f203 5374 	addw	r3, r3, #1396	; 0x574
 801b9d2:	edd3 7a00 	vldr	s15, [r3]
 801b9d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b9da:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b9de:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    nk_layout_set_min_row_height(ctx, row_height);
 801b9e2:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801b9e6:	68f8      	ldr	r0, [r7, #12]
 801b9e8:	f7f7 fde4 	bl	80135b4 <nk_layout_set_min_row_height>
    nk_layout_row_dynamic(ctx, row_height, 1);
 801b9ec:	2101      	movs	r1, #1
 801b9ee:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801b9f2:	68f8      	ldr	r0, [r7, #12]
 801b9f4:	f7f8 f888 	bl	8013b08 <nk_layout_row_dynamic>
    nk_layout_reset_min_row_height(ctx);
 801b9f8:	68f8      	ldr	r0, [r7, #12]
 801b9fa:	f7f7 fe35 	bl	8013668 <nk_layout_reset_min_row_height>

    widget_state = nk_widget(&header, ctx);
 801b9fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ba02:	68f9      	ldr	r1, [r7, #12]
 801ba04:	4618      	mov	r0, r3
 801ba06:	f001 f835 	bl	801ca74 <nk_widget>
 801ba0a:	4603      	mov	r3, r0
 801ba0c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    if (type == NK_TREE_TAB) {
 801ba10:	7afb      	ldrb	r3, [r7, #11]
 801ba12:	2b01      	cmp	r3, #1
 801ba14:	f040 80af 	bne.w	801bb76 <nk_tree_state_base+0x2ae>
        const struct nk_style_item *background = &style->tab.background;
 801ba18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ba1c:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 801ba20:	331c      	adds	r3, #28
 801ba22:	677b      	str	r3, [r7, #116]	; 0x74

        switch(background->type) {
 801ba24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba26:	781b      	ldrb	r3, [r3, #0]
 801ba28:	2b02      	cmp	r3, #2
 801ba2a:	d021      	beq.n	801ba70 <nk_tree_state_base+0x1a8>
 801ba2c:	2b02      	cmp	r3, #2
 801ba2e:	f300 80a9 	bgt.w	801bb84 <nk_tree_state_base+0x2bc>
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d036      	beq.n	801baa4 <nk_tree_state_base+0x1dc>
 801ba36:	2b01      	cmp	r3, #1
 801ba38:	f040 80a4 	bne.w	801bb84 <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, header, &background->data.image, nk_white);
 801ba3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba3e:	3304      	adds	r3, #4
 801ba40:	4a83      	ldr	r2, [pc, #524]	; (801bc50 <nk_tree_state_base+0x388>)
 801ba42:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801ba46:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801ba4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801ba4e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801ba52:	6812      	ldr	r2, [r2, #0]
 801ba54:	4619      	mov	r1, r3
 801ba56:	eeb0 0a46 	vmov.f32	s0, s12
 801ba5a:	eef0 0a66 	vmov.f32	s1, s13
 801ba5e:	eeb0 1a47 	vmov.f32	s2, s14
 801ba62:	eef0 1a67 	vmov.f32	s3, s15
 801ba66:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801ba6a:	f7f6 fbb3 	bl	80121d4 <nk_draw_image>
                break;
 801ba6e:	e089      	b.n	801bb84 <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, header, &background->data.slice, nk_white);
 801ba70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba72:	3304      	adds	r3, #4
 801ba74:	4a76      	ldr	r2, [pc, #472]	; (801bc50 <nk_tree_state_base+0x388>)
 801ba76:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801ba7a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801ba7e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801ba82:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801ba86:	6812      	ldr	r2, [r2, #0]
 801ba88:	4619      	mov	r1, r3
 801ba8a:	eeb0 0a46 	vmov.f32	s0, s12
 801ba8e:	eef0 0a66 	vmov.f32	s1, s13
 801ba92:	eeb0 1a47 	vmov.f32	s2, s14
 801ba96:	eef0 1a67 	vmov.f32	s3, s15
 801ba9a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801ba9e:	f7f6 fc8b 	bl	80123b8 <nk_draw_nine_slice>
                break;
 801baa2:	e06f      	b.n	801bb84 <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, header, 0, style->tab.border_color);
 801baa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801baa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801baac:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801bab0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801bab4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801bab8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801babc:	f8d3 12f8 	ldr.w	r1, [r3, #760]	; 0x2f8
 801bac0:	ed9f 2a64 	vldr	s4, [pc, #400]	; 801bc54 <nk_tree_state_base+0x38c>
 801bac4:	eeb0 0a46 	vmov.f32	s0, s12
 801bac8:	eef0 0a66 	vmov.f32	s1, s13
 801bacc:	eeb0 1a47 	vmov.f32	s2, s14
 801bad0:	eef0 1a67 	vmov.f32	s3, s15
 801bad4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801bad8:	f7f6 f822 	bl	8011b20 <nk_fill_rect>
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801badc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bae4:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801bae8:	edd3 5a00 	vldr	s11, [r3]
 801baec:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801baf0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801baf4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801baf8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801bafc:	eeb0 2a65 	vmov.f32	s4, s11
 801bb00:	eeb0 0a46 	vmov.f32	s0, s12
 801bb04:	eef0 0a66 	vmov.f32	s1, s13
 801bb08:	eeb0 1a47 	vmov.f32	s2, s14
 801bb0c:	eef0 1a67 	vmov.f32	s3, s15
 801bb10:	f7f8 fd94 	bl	801463c <nk_shrink_rect>
 801bb14:	eeb0 6a40 	vmov.f32	s12, s0
 801bb18:	eef0 6a60 	vmov.f32	s13, s1
 801bb1c:	eeb0 7a41 	vmov.f32	s14, s2
 801bb20:	eef0 7a61 	vmov.f32	s15, s3
 801bb24:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 801bb28:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 801bb2c:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 801bb30:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
                    style->tab.rounding, background->data.color);
 801bb34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bb38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bb3c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801bb40:	edd3 5a00 	vldr	s11, [r3]
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801bb44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bb46:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 801bb4a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801bb4e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 801bb52:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801bb56:	6859      	ldr	r1, [r3, #4]
 801bb58:	eeb0 2a65 	vmov.f32	s4, s11
 801bb5c:	eeb0 0a46 	vmov.f32	s0, s12
 801bb60:	eef0 0a66 	vmov.f32	s1, s13
 801bb64:	eeb0 1a47 	vmov.f32	s2, s14
 801bb68:	eef0 1a67 	vmov.f32	s3, s15
 801bb6c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801bb70:	f7f5 ffd6 	bl	8011b20 <nk_fill_rect>
                break;
 801bb74:	e006      	b.n	801bb84 <nk_tree_state_base+0x2bc>
        }
    } else text.background = style->window.background;
 801bb76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bb7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bb7e:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801bb82:	633b      	str	r3, [r7, #48]	; 0x30

    /* update node state */
    in = (!(layout->flags & NK_WINDOW_ROM)) ? &ctx->input: 0;
 801bb84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bb88:	685b      	ldr	r3, [r3, #4]
 801bb8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d101      	bne.n	801bb96 <nk_tree_state_base+0x2ce>
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	e000      	b.n	801bb98 <nk_tree_state_base+0x2d0>
 801bb96:	2300      	movs	r3, #0
 801bb98:	673b      	str	r3, [r7, #112]	; 0x70
    in = (in && widget_state == NK_WIDGET_VALID) ? &ctx->input : 0;
 801bb9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d005      	beq.n	801bbac <nk_tree_state_base+0x2e4>
 801bba0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801bba4:	2b01      	cmp	r3, #1
 801bba6:	d101      	bne.n	801bbac <nk_tree_state_base+0x2e4>
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	e000      	b.n	801bbae <nk_tree_state_base+0x2e6>
 801bbac:	2300      	movs	r3, #0
 801bbae:	673b      	str	r3, [r7, #112]	; 0x70
    if (nk_button_behavior(&ws, header, in, NK_BUTTON_DEFAULT))
 801bbb0:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801bbb4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801bbb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801bbbc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801bbc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801bbc8:	eeb0 0a46 	vmov.f32	s0, s12
 801bbcc:	eef0 0a66 	vmov.f32	s1, s13
 801bbd0:	eeb0 1a47 	vmov.f32	s2, s14
 801bbd4:	eef0 1a67 	vmov.f32	s3, s15
 801bbd8:	4618      	mov	r0, r3
 801bbda:	f7f3 fa7b 	bl	800f0d4 <nk_button_behavior>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d00b      	beq.n	801bbfc <nk_tree_state_base+0x334>
        *state = (*state == NK_MAXIMIZED) ? NK_MINIMIZED : NK_MAXIMIZED;
 801bbe4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bbe8:	781b      	ldrb	r3, [r3, #0]
 801bbea:	2b01      	cmp	r3, #1
 801bbec:	bf14      	ite	ne
 801bbee:	2301      	movne	r3, #1
 801bbf0:	2300      	moveq	r3, #0
 801bbf2:	b2db      	uxtb	r3, r3
 801bbf4:	461a      	mov	r2, r3
 801bbf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bbfa:	701a      	strb	r2, [r3, #0]

    /* select correct button style */
    if (*state == NK_MAXIMIZED) {
 801bbfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bc00:	781b      	ldrb	r3, [r3, #0]
 801bc02:	2b01      	cmp	r3, #1
 801bc04:	d128      	bne.n	801bc58 <nk_tree_state_base+0x390>
        symbol = style->tab.sym_maximize;
 801bc06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bc0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bc0e:	f893 3561 	ldrb.w	r3, [r3, #1377]	; 0x561
 801bc12:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 801bc16:	7afb      	ldrb	r3, [r7, #11]
 801bc18:	2b01      	cmp	r3, #1
 801bc1a:	d106      	bne.n	801bc2a <nk_tree_state_base+0x362>
            button = &style->tab.tab_maximize_button;
 801bc1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bc20:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 801bc24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801bc28:	e030      	b.n	801bc8c <nk_tree_state_base+0x3c4>
        else button = &style->tab.node_maximize_button;
 801bc2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bc2e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 801bc32:	3310      	adds	r3, #16
 801bc34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801bc38:	e028      	b.n	801bc8c <nk_tree_state_base+0x3c4>
 801bc3a:	bf00      	nop
 801bc3c:	08022694 	.word	0x08022694
 801bc40:	08023d7c 	.word	0x08023d7c
 801bc44:	08022698 	.word	0x08022698
 801bc48:	080226b4 	.word	0x080226b4
 801bc4c:	080226c4 	.word	0x080226c4
 801bc50:	08023d78 	.word	0x08023d78
 801bc54:	00000000 	.word	0x00000000
    } else {
        symbol = style->tab.sym_minimize;
 801bc58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bc5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bc60:	f893 3560 	ldrb.w	r3, [r3, #1376]	; 0x560
 801bc64:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 801bc68:	7afb      	ldrb	r3, [r7, #11]
 801bc6a:	2b01      	cmp	r3, #1
 801bc6c:	d107      	bne.n	801bc7e <nk_tree_state_base+0x3b6>
            button = &style->tab.tab_minimize_button;
 801bc6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bc72:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801bc76:	3318      	adds	r3, #24
 801bc78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801bc7c:	e006      	b.n	801bc8c <nk_tree_state_base+0x3c4>
        else button = &style->tab.node_minimize_button;
 801bc7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bc82:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 801bc86:	3308      	adds	r3, #8
 801bc88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    {/* draw triangle button */
    sym.w = sym.h = style->font->height;
 801bc8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	685b      	ldr	r3, [r3, #4]
 801bc94:	647b      	str	r3, [r7, #68]	; 0x44
 801bc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bc98:	643b      	str	r3, [r7, #64]	; 0x40
    sym.y = header.y + style->tab.padding.y;
 801bc9a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801bc9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bca6:	f203 5374 	addw	r3, r3, #1396	; 0x574
 801bcaa:	edd3 7a00 	vldr	s15, [r3]
 801bcae:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bcb2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sym.x = header.x + style->tab.padding.x;
 801bcb6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801bcba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bcbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bcc2:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 801bcc6:	edd3 7a00 	vldr	s15, [r3]
 801bcca:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bcce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 801bcd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bcd6:	f103 0164 	add.w	r1, r3, #100	; 0x64
        button, 0, style->font);
 801bcda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bcde:	681b      	ldr	r3, [r3, #0]
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 801bce0:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 801bce4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801bce8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801bcec:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801bcf0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801bcf4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801bcf8:	9302      	str	r3, [sp, #8]
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	9301      	str	r3, [sp, #4]
 801bcfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801bd02:	9300      	str	r3, [sp, #0]
 801bd04:	2300      	movs	r3, #0
 801bd06:	eeb0 0a46 	vmov.f32	s0, s12
 801bd0a:	eef0 0a66 	vmov.f32	s1, s13
 801bd0e:	eeb0 1a47 	vmov.f32	s2, s14
 801bd12:	eef0 1a67 	vmov.f32	s3, s15
 801bd16:	f7f3 fd6f 	bl	800f7f8 <nk_do_button_symbol>

    if (img) {
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d039      	beq.n	801bd94 <nk_tree_state_base+0x4cc>
        /* draw optional image icon */
        sym.x = sym.x + sym.w + 4 * item_spacing.x;
 801bd20:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801bd24:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801bd28:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bd2c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801bd30:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801bd34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bd38:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bd3c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_draw_image(&win->buffer, sym, img, nk_white);
 801bd40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bd44:	3364      	adds	r3, #100	; 0x64
 801bd46:	4a85      	ldr	r2, [pc, #532]	; (801bf5c <nk_tree_state_base+0x694>)
 801bd48:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801bd4c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801bd50:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801bd54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801bd58:	6812      	ldr	r2, [r2, #0]
 801bd5a:	6879      	ldr	r1, [r7, #4]
 801bd5c:	eeb0 0a46 	vmov.f32	s0, s12
 801bd60:	eef0 0a66 	vmov.f32	s1, s13
 801bd64:	eeb0 1a47 	vmov.f32	s2, s14
 801bd68:	eef0 1a67 	vmov.f32	s3, s15
 801bd6c:	4618      	mov	r0, r3
 801bd6e:	f7f6 fa31 	bl	80121d4 <nk_draw_image>
        sym.w = style->font->height + style->tab.spacing.x;}
 801bd72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	ed93 7a01 	vldr	s14, [r3, #4]
 801bd7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bd80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bd84:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801bd88:	edd3 7a00 	vldr	s15, [r3]
 801bd8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bd90:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    }

    {/* draw label */
    struct nk_rect label;
    header.w = NK_MAX(header.w, sym.w + item_spacing.x);
 801bd94:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801bd98:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801bd9c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801bda0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bda4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdac:	d506      	bpl.n	801bdbc <nk_tree_state_base+0x4f4>
 801bdae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801bdb2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801bdb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bdba:	e001      	b.n	801bdc0 <nk_tree_state_base+0x4f8>
 801bdbc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801bdc0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    label.x = sym.x + sym.w + item_spacing.x;
 801bdc4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801bdc8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801bdcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bdd0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801bdd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bdd8:	edc7 7a05 	vstr	s15, [r7, #20]
    label.y = sym.y;
 801bddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdde:	61bb      	str	r3, [r7, #24]
    label.w = header.w - (sym.w + item_spacing.y + style->tab.indent);
 801bde0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801bde4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801bde8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801bdec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801bdf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bdf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bdf8:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801bdfc:	edd3 7a00 	vldr	s15, [r3]
 801be00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801be04:	ee77 7a67 	vsub.f32	s15, s14, s15
 801be08:	edc7 7a07 	vstr	s15, [r7, #28]
    label.h = style->font->height;
 801be0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	685b      	ldr	r3, [r3, #4]
 801be14:	623b      	str	r3, [r7, #32]
    text.text = style->tab.text;
 801be16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801be1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801be1e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 801be22:	637b      	str	r3, [r7, #52]	; 0x34
    text.padding = nk_vec2(0,0);
 801be24:	eddf 0a4e 	vldr	s1, [pc, #312]	; 801bf60 <nk_tree_state_base+0x698>
 801be28:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801bf60 <nk_tree_state_base+0x698>
 801be2c:	f7f8 fc86 	bl	801473c <nk_vec2>
 801be30:	eeb0 7a40 	vmov.f32	s14, s0
 801be34:	eef0 7a60 	vmov.f32	s15, s1
 801be38:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 801be3c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 801be40:	6838      	ldr	r0, [r7, #0]
 801be42:	f000 fc25 	bl	801c690 <nk_strlen>
 801be46:	4601      	mov	r1, r0
        NK_TEXT_LEFT, style->font);}
 801be48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801be4c:	681b      	ldr	r3, [r3, #0]
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 801be4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801be52:	ed97 6a05 	vldr	s12, [r7, #20]
 801be56:	edd7 6a06 	vldr	s13, [r7, #24]
 801be5a:	ed97 7a07 	vldr	s14, [r7, #28]
 801be5e:	edd7 7a08 	vldr	s15, [r7, #32]
 801be62:	9301      	str	r3, [sp, #4]
 801be64:	2311      	movs	r3, #17
 801be66:	9300      	str	r3, [sp, #0]
 801be68:	4613      	mov	r3, r2
 801be6a:	460a      	mov	r2, r1
 801be6c:	6839      	ldr	r1, [r7, #0]
 801be6e:	eeb0 0a46 	vmov.f32	s0, s12
 801be72:	eef0 0a66 	vmov.f32	s1, s13
 801be76:	eeb0 1a47 	vmov.f32	s2, s14
 801be7a:	eef0 1a67 	vmov.f32	s3, s15
 801be7e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801be82:	f7ff fa29 	bl	801b2d8 <nk_widget_text>

    /* increase x-axis cursor widget position pointer */
    if (*state == NK_MAXIMIZED) {
 801be86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801be8a:	781b      	ldrb	r3, [r3, #0]
 801be8c:	2b01      	cmp	r3, #1
 801be8e:	d15f      	bne.n	801bf50 <nk_tree_state_base+0x688>
        layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;
 801be90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801be94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801be98:	699b      	ldr	r3, [r3, #24]
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	ee07 3a90 	vmov	s15, r3
 801bea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801beac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801beb0:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801beb4:	edd3 7a00 	vldr	s15, [r3]
 801beb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bec0:	edc3 7a08 	vstr	s15, [r3, #32]
        layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);
 801bec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bec8:	ed93 7a04 	vldr	s14, [r3, #16]
 801becc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bed4:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801bed8:	edd3 7a00 	vldr	s15, [r3]
 801bedc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bee4:	d507      	bpl.n	801bef6 <nk_tree_state_base+0x62e>
 801bee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801beea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801beee:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	e002      	b.n	801befc <nk_tree_state_base+0x634>
 801bef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801befa:	691b      	ldr	r3, [r3, #16]
 801befc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801bf00:	6113      	str	r3, [r2, #16]
        layout->bounds.w -= (style->tab.indent + style->window.padding.x);
 801bf02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bf06:	ed93 7a04 	vldr	s14, [r3, #16]
 801bf0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bf0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf12:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801bf16:	edd3 6a00 	vldr	s13, [r3]
 801bf1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bf1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf22:	f603 03ec 	addw	r3, r3, #2284	; 0x8ec
 801bf26:	edd3 7a00 	vldr	s15, [r3]
 801bf2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bf2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bf32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bf36:	edc3 7a04 	vstr	s15, [r3, #16]
        layout->row.tree_depth++;
 801bf3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bf3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bf42:	1c5a      	adds	r2, r3, #1
 801bf44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bf48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        return nk_true;
 801bf4c:	2301      	movs	r3, #1
 801bf4e:	e000      	b.n	801bf52 <nk_tree_state_base+0x68a>
    } else return nk_false;
 801bf50:	2300      	movs	r3, #0
}
 801bf52:	4618      	mov	r0, r3
 801bf54:	3798      	adds	r7, #152	; 0x98
 801bf56:	46bd      	mov	sp, r7
 801bf58:	bd80      	pop	{r7, pc}
 801bf5a:	bf00      	nop
 801bf5c:	08023d78 	.word	0x08023d78
 801bf60:	00000000 	.word	0x00000000

0801bf64 <nk_tree_base>:
NK_INTERN int
nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b08a      	sub	sp, #40	; 0x28
 801bf68:	af02      	add	r7, sp, #8
 801bf6a:	60f8      	str	r0, [r7, #12]
 801bf6c:	607a      	str	r2, [r7, #4]
 801bf6e:	603b      	str	r3, [r7, #0]
 801bf70:	460b      	mov	r3, r1
 801bf72:	72fb      	strb	r3, [r7, #11]
    struct nk_window *win = ctx->current;
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bf7a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801bf7e:	617b      	str	r3, [r7, #20]
    int title_len = 0;
 801bf80:	2300      	movs	r3, #0
 801bf82:	613b      	str	r3, [r7, #16]
    nk_hash tree_hash = 0;
 801bf84:	2300      	movs	r3, #0
 801bf86:	61fb      	str	r3, [r7, #28]
    nk_uint *state = 0;
 801bf88:	2300      	movs	r3, #0
 801bf8a:	61bb      	str	r3, [r7, #24]

    /* retrieve tree state from internal widget state tables */
    if (!hash) {
 801bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d10b      	bne.n	801bfaa <nk_tree_base+0x46>
        title_len = (int)nk_strlen(title);
 801bf92:	6838      	ldr	r0, [r7, #0]
 801bf94:	f000 fb7c 	bl	801c690 <nk_strlen>
 801bf98:	6138      	str	r0, [r7, #16]
        tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);
 801bf9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf9c:	461a      	mov	r2, r3
 801bf9e:	6939      	ldr	r1, [r7, #16]
 801bfa0:	6838      	ldr	r0, [r7, #0]
 801bfa2:	f000 fbf5 	bl	801c790 <nk_murmur_hash>
 801bfa6:	61f8      	str	r0, [r7, #28]
 801bfa8:	e006      	b.n	801bfb8 <nk_tree_base+0x54>
    } else tree_hash = nk_murmur_hash(hash, len, (nk_hash)line);
 801bfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfac:	461a      	mov	r2, r3
 801bfae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bfb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bfb2:	f000 fbed 	bl	801c790 <nk_murmur_hash>
 801bfb6:	61f8      	str	r0, [r7, #28]
    state = nk_find_value(win, tree_hash);
 801bfb8:	69f9      	ldr	r1, [r7, #28]
 801bfba:	6978      	ldr	r0, [r7, #20]
 801bfbc:	f7ff f950 	bl	801b260 <nk_find_value>
 801bfc0:	61b8      	str	r0, [r7, #24]
    if (!state) {
 801bfc2:	69bb      	ldr	r3, [r7, #24]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d10a      	bne.n	801bfde <nk_tree_base+0x7a>
        state = nk_add_value(ctx, win, tree_hash, 0);
 801bfc8:	2300      	movs	r3, #0
 801bfca:	69fa      	ldr	r2, [r7, #28]
 801bfcc:	6979      	ldr	r1, [r7, #20]
 801bfce:	68f8      	ldr	r0, [r7, #12]
 801bfd0:	f7ff f8cc 	bl	801b16c <nk_add_value>
 801bfd4:	61b8      	str	r0, [r7, #24]
        *state = initial_state;
 801bfd6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801bfda:	69bb      	ldr	r3, [r7, #24]
 801bfdc:	601a      	str	r2, [r3, #0]
    }
    return nk_tree_state_base(ctx, type, img, title, (enum nk_collapse_states*)state);
 801bfde:	7af9      	ldrb	r1, [r7, #11]
 801bfe0:	69bb      	ldr	r3, [r7, #24]
 801bfe2:	9300      	str	r3, [sp, #0]
 801bfe4:	683b      	ldr	r3, [r7, #0]
 801bfe6:	687a      	ldr	r2, [r7, #4]
 801bfe8:	68f8      	ldr	r0, [r7, #12]
 801bfea:	f7ff fc6d 	bl	801b8c8 <nk_tree_state_base>
 801bfee:	4603      	mov	r3, r0
}
 801bff0:	4618      	mov	r0, r3
 801bff2:	3720      	adds	r7, #32
 801bff4:	46bd      	mov	sp, r7
 801bff6:	bd80      	pop	{r7, pc}

0801bff8 <nk_tree_state_pop>:
{
    return nk_tree_state_base(ctx, type, &img, title, state);
}
NK_API void
nk_tree_state_pop(struct nk_context *ctx)
{
 801bff8:	b580      	push	{r7, lr}
 801bffa:	b084      	sub	sp, #16
 801bffc:	af00      	add	r7, sp, #0
 801bffe:	6078      	str	r0, [r7, #4]
    struct nk_window *win = 0;
 801c000:	2300      	movs	r3, #0
 801c002:	60fb      	str	r3, [r7, #12]
    struct nk_panel *layout = 0;
 801c004:	2300      	movs	r3, #0
 801c006:	60bb      	str	r3, [r7, #8]

    NK_ASSERT(ctx);
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d105      	bne.n	801c01a <nk_tree_state_pop+0x22>
 801c00e:	4b43      	ldr	r3, [pc, #268]	; (801c11c <nk_tree_state_pop+0x124>)
 801c010:	4a43      	ldr	r2, [pc, #268]	; (801c120 <nk_tree_state_pop+0x128>)
 801c012:	21a2      	movs	r1, #162	; 0xa2
 801c014:	4843      	ldr	r0, [pc, #268]	; (801c124 <nk_tree_state_pop+0x12c>)
 801c016:	f002 f815 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c020:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c024:	2b00      	cmp	r3, #0
 801c026:	d105      	bne.n	801c034 <nk_tree_state_pop+0x3c>
 801c028:	4b3f      	ldr	r3, [pc, #252]	; (801c128 <nk_tree_state_pop+0x130>)
 801c02a:	4a3d      	ldr	r2, [pc, #244]	; (801c120 <nk_tree_state_pop+0x128>)
 801c02c:	21a3      	movs	r1, #163	; 0xa3
 801c02e:	483d      	ldr	r0, [pc, #244]	; (801c124 <nk_tree_state_pop+0x12c>)
 801c030:	f002 f808 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c03a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c042:	2b00      	cmp	r3, #0
 801c044:	d105      	bne.n	801c052 <nk_tree_state_pop+0x5a>
 801c046:	4b39      	ldr	r3, [pc, #228]	; (801c12c <nk_tree_state_pop+0x134>)
 801c048:	4a35      	ldr	r2, [pc, #212]	; (801c120 <nk_tree_state_pop+0x128>)
 801c04a:	21a4      	movs	r1, #164	; 0xa4
 801c04c:	4835      	ldr	r0, [pc, #212]	; (801c124 <nk_tree_state_pop+0x12c>)
 801c04e:	f001 fff9 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d05c      	beq.n	801c112 <nk_tree_state_pop+0x11a>
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c05e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c062:	2b00      	cmp	r3, #0
 801c064:	d055      	beq.n	801c112 <nk_tree_state_pop+0x11a>
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c06c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c074:	2b00      	cmp	r3, #0
 801c076:	d04c      	beq.n	801c112 <nk_tree_state_pop+0x11a>
        return;

    win = ctx->current;
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c07e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c082:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c08a:	60bb      	str	r3, [r7, #8]
    layout->at_x -= ctx->style.tab.indent + (float)*layout->offset_x;
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	ed93 7a08 	vldr	s14, [r3, #32]
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c098:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 801c09c:	edd3 6a00 	vldr	s13, [r3]
 801c0a0:	68bb      	ldr	r3, [r7, #8]
 801c0a2:	699b      	ldr	r3, [r3, #24]
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	ee07 3a90 	vmov	s15, r3
 801c0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c0b6:	68bb      	ldr	r3, [r7, #8]
 801c0b8:	edc3 7a08 	vstr	s15, [r3, #32]
    layout->bounds.w += ctx->style.tab.indent + ctx->style.window.padding.x;
 801c0bc:	68bb      	ldr	r3, [r7, #8]
 801c0be:	ed93 7a04 	vldr	s14, [r3, #16]
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c0c8:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 801c0cc:	edd3 6a00 	vldr	s13, [r3]
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c0d6:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801c0da:	edd3 7a00 	vldr	s15, [r3]
 801c0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c0e6:	68bb      	ldr	r3, [r7, #8]
 801c0e8:	edc3 7a04 	vstr	s15, [r3, #16]
    NK_ASSERT(layout->row.tree_depth);
 801c0ec:	68bb      	ldr	r3, [r7, #8]
 801c0ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d105      	bne.n	801c102 <nk_tree_state_pop+0x10a>
 801c0f6:	4b0e      	ldr	r3, [pc, #56]	; (801c130 <nk_tree_state_pop+0x138>)
 801c0f8:	4a09      	ldr	r2, [pc, #36]	; (801c120 <nk_tree_state_pop+0x128>)
 801c0fa:	21ac      	movs	r1, #172	; 0xac
 801c0fc:	4809      	ldr	r0, [pc, #36]	; (801c124 <nk_tree_state_pop+0x12c>)
 801c0fe:	f001 ffa1 	bl	801e044 <__assert_func>
    layout->row.tree_depth--;
 801c102:	68bb      	ldr	r3, [r7, #8]
 801c104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c108:	1e5a      	subs	r2, r3, #1
 801c10a:	68bb      	ldr	r3, [r7, #8]
 801c10c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 801c110:	e000      	b.n	801c114 <nk_tree_state_pop+0x11c>
        return;
 801c112:	bf00      	nop
}
 801c114:	3710      	adds	r7, #16
 801c116:	46bd      	mov	sp, r7
 801c118:	bd80      	pop	{r7, pc}
 801c11a:	bf00      	nop
 801c11c:	08022694 	.word	0x08022694
 801c120:	08023d90 	.word	0x08023d90
 801c124:	08022698 	.word	0x08022698
 801c128:	080226b4 	.word	0x080226b4
 801c12c:	080226c4 	.word	0x080226c4
 801c130:	080226dc 	.word	0x080226dc

0801c134 <nk_tree_push_hashed>:
NK_API nk_bool
nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,
    const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b088      	sub	sp, #32
 801c138:	af04      	add	r7, sp, #16
 801c13a:	60f8      	str	r0, [r7, #12]
 801c13c:	607a      	str	r2, [r7, #4]
 801c13e:	461a      	mov	r2, r3
 801c140:	460b      	mov	r3, r1
 801c142:	72fb      	strb	r3, [r7, #11]
 801c144:	4613      	mov	r3, r2
 801c146:	72bb      	strb	r3, [r7, #10]
    return nk_tree_base(ctx, type, 0, title, initial_state, hash, len, line);
 801c148:	7af9      	ldrb	r1, [r7, #11]
 801c14a:	6a3b      	ldr	r3, [r7, #32]
 801c14c:	9303      	str	r3, [sp, #12]
 801c14e:	69fb      	ldr	r3, [r7, #28]
 801c150:	9302      	str	r3, [sp, #8]
 801c152:	69bb      	ldr	r3, [r7, #24]
 801c154:	9301      	str	r3, [sp, #4]
 801c156:	7abb      	ldrb	r3, [r7, #10]
 801c158:	9300      	str	r3, [sp, #0]
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	2200      	movs	r2, #0
 801c15e:	68f8      	ldr	r0, [r7, #12]
 801c160:	f7ff ff00 	bl	801bf64 <nk_tree_base>
 801c164:	4603      	mov	r3, r0
}
 801c166:	4618      	mov	r0, r3
 801c168:	3710      	adds	r7, #16
 801c16a:	46bd      	mov	sp, r7
 801c16c:	bd80      	pop	{r7, pc}

0801c16e <nk_tree_pop>:
{
    return nk_tree_base(ctx, type, &img, title, initial_state, hash, len, seed);
}
NK_API void
nk_tree_pop(struct nk_context *ctx)
{
 801c16e:	b580      	push	{r7, lr}
 801c170:	b082      	sub	sp, #8
 801c172:	af00      	add	r7, sp, #0
 801c174:	6078      	str	r0, [r7, #4]
    nk_tree_state_pop(ctx);
 801c176:	6878      	ldr	r0, [r7, #4]
 801c178:	f7ff ff3e 	bl	801bff8 <nk_tree_state_pop>
}
 801c17c:	bf00      	nop
 801c17e:	3708      	adds	r7, #8
 801c180:	46bd      	mov	sp, r7
 801c182:	bd80      	pop	{r7, pc}

0801c184 <nk_utf_validate>:
NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};
NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};

NK_INTERN int
nk_utf_validate(nk_rune *u, int i)
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b082      	sub	sp, #8
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
 801c18c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(u);
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d105      	bne.n	801c1a0 <nk_utf_validate+0x1c>
 801c194:	4b1e      	ldr	r3, [pc, #120]	; (801c210 <nk_utf_validate+0x8c>)
 801c196:	4a1f      	ldr	r2, [pc, #124]	; (801c214 <nk_utf_validate+0x90>)
 801c198:	2111      	movs	r1, #17
 801c19a:	481f      	ldr	r0, [pc, #124]	; (801c218 <nk_utf_validate+0x94>)
 801c19c:	f001 ff52 	bl	801e044 <__assert_func>
    if (!u) return 0;
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d101      	bne.n	801c1aa <nk_utf_validate+0x26>
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	e02d      	b.n	801c206 <nk_utf_validate+0x82>
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 801c1aa:	4a1c      	ldr	r2, [pc, #112]	; (801c21c <nk_utf_validate+0x98>)
 801c1ac:	683b      	ldr	r3, [r7, #0]
 801c1ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	429a      	cmp	r2, r3
 801c1b8:	d812      	bhi.n	801c1e0 <nk_utf_validate+0x5c>
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	681a      	ldr	r2, [r3, #0]
 801c1be:	4918      	ldr	r1, [pc, #96]	; (801c220 <nk_utf_validate+0x9c>)
 801c1c0:	683b      	ldr	r3, [r7, #0]
 801c1c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801c1c6:	429a      	cmp	r2, r3
 801c1c8:	d20a      	bcs.n	801c1e0 <nk_utf_validate+0x5c>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	681b      	ldr	r3, [r3, #0]
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 801c1ce:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801c1d2:	d309      	bcc.n	801c1e8 <nk_utf_validate+0x64>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	f64d 72fe 	movw	r2, #57342	; 0xdffe
 801c1dc:	4293      	cmp	r3, r2
 801c1de:	d803      	bhi.n	801c1e8 <nk_utf_validate+0x64>
            *u = NK_UTF_INVALID;
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801c1e6:	601a      	str	r2, [r3, #0]
    for (i = 1; *u > nk_utfmax[i]; ++i);
 801c1e8:	2301      	movs	r3, #1
 801c1ea:	603b      	str	r3, [r7, #0]
 801c1ec:	e002      	b.n	801c1f4 <nk_utf_validate+0x70>
 801c1ee:	683b      	ldr	r3, [r7, #0]
 801c1f0:	3301      	adds	r3, #1
 801c1f2:	603b      	str	r3, [r7, #0]
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	681a      	ldr	r2, [r3, #0]
 801c1f8:	4909      	ldr	r1, [pc, #36]	; (801c220 <nk_utf_validate+0x9c>)
 801c1fa:	683b      	ldr	r3, [r7, #0]
 801c1fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801c200:	429a      	cmp	r2, r3
 801c202:	d8f4      	bhi.n	801c1ee <nk_utf_validate+0x6a>
    return i;
 801c204:	683b      	ldr	r3, [r7, #0]
}
 801c206:	4618      	mov	r0, r3
 801c208:	3708      	adds	r7, #8
 801c20a:	46bd      	mov	sp, r7
 801c20c:	bd80      	pop	{r7, pc}
 801c20e:	bf00      	nop
 801c210:	080226f4 	.word	0x080226f4
 801c214:	08023ddc 	.word	0x08023ddc
 801c218:	080226f8 	.word	0x080226f8
 801c21c:	08023db4 	.word	0x08023db4
 801c220:	08023dc8 	.word	0x08023dc8

0801c224 <nk_utf_decode_byte>:
NK_INTERN nk_rune
nk_utf_decode_byte(char c, int *i)
{
 801c224:	b580      	push	{r7, lr}
 801c226:	b082      	sub	sp, #8
 801c228:	af00      	add	r7, sp, #0
 801c22a:	4603      	mov	r3, r0
 801c22c:	6039      	str	r1, [r7, #0]
 801c22e:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(i);
 801c230:	683b      	ldr	r3, [r7, #0]
 801c232:	2b00      	cmp	r3, #0
 801c234:	d105      	bne.n	801c242 <nk_utf_decode_byte+0x1e>
 801c236:	4b1b      	ldr	r3, [pc, #108]	; (801c2a4 <nk_utf_decode_byte+0x80>)
 801c238:	4a1b      	ldr	r2, [pc, #108]	; (801c2a8 <nk_utf_decode_byte+0x84>)
 801c23a:	211c      	movs	r1, #28
 801c23c:	481b      	ldr	r0, [pc, #108]	; (801c2ac <nk_utf_decode_byte+0x88>)
 801c23e:	f001 ff01 	bl	801e044 <__assert_func>
    if (!i) return 0;
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	2b00      	cmp	r3, #0
 801c246:	d101      	bne.n	801c24c <nk_utf_decode_byte+0x28>
 801c248:	2300      	movs	r3, #0
 801c24a:	e027      	b.n	801c29c <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	2200      	movs	r2, #0
 801c250:	601a      	str	r2, [r3, #0]
 801c252:	e01e      	b.n	801c292 <nk_utf_decode_byte+0x6e>
        if (((nk_byte)c & nk_utfmask[*i]) == nk_utfbyte[*i])
 801c254:	683b      	ldr	r3, [r7, #0]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	4a15      	ldr	r2, [pc, #84]	; (801c2b0 <nk_utf_decode_byte+0x8c>)
 801c25a:	5cd2      	ldrb	r2, [r2, r3]
 801c25c:	79fb      	ldrb	r3, [r7, #7]
 801c25e:	4013      	ands	r3, r2
 801c260:	b2da      	uxtb	r2, r3
 801c262:	683b      	ldr	r3, [r7, #0]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	4913      	ldr	r1, [pc, #76]	; (801c2b4 <nk_utf_decode_byte+0x90>)
 801c268:	5ccb      	ldrb	r3, [r1, r3]
 801c26a:	429a      	cmp	r2, r3
 801c26c:	d10c      	bne.n	801c288 <nk_utf_decode_byte+0x64>
            return (nk_byte)(c & ~nk_utfmask[*i]);
 801c26e:	683b      	ldr	r3, [r7, #0]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	4a0f      	ldr	r2, [pc, #60]	; (801c2b0 <nk_utf_decode_byte+0x8c>)
 801c274:	5cd3      	ldrb	r3, [r2, r3]
 801c276:	b25b      	sxtb	r3, r3
 801c278:	43db      	mvns	r3, r3
 801c27a:	b25a      	sxtb	r2, r3
 801c27c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c280:	4013      	ands	r3, r2
 801c282:	b25b      	sxtb	r3, r3
 801c284:	b2db      	uxtb	r3, r3
 801c286:	e009      	b.n	801c29c <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 801c288:	683b      	ldr	r3, [r7, #0]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	1c5a      	adds	r2, r3, #1
 801c28e:	683b      	ldr	r3, [r7, #0]
 801c290:	601a      	str	r2, [r3, #0]
 801c292:	683b      	ldr	r3, [r7, #0]
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	2b04      	cmp	r3, #4
 801c298:	dddc      	ble.n	801c254 <nk_utf_decode_byte+0x30>
    }
    return 0;
 801c29a:	2300      	movs	r3, #0
}
 801c29c:	4618      	mov	r0, r3
 801c29e:	3708      	adds	r7, #8
 801c2a0:	46bd      	mov	sp, r7
 801c2a2:	bd80      	pop	{r7, pc}
 801c2a4:	08022714 	.word	0x08022714
 801c2a8:	08023dec 	.word	0x08023dec
 801c2ac:	080226f8 	.word	0x080226f8
 801c2b0:	08023dac 	.word	0x08023dac
 801c2b4:	08023da4 	.word	0x08023da4

0801c2b8 <nk_utf_decode>:
NK_API int
nk_utf_decode(const char *c, nk_rune *u, int clen)
{
 801c2b8:	b590      	push	{r4, r7, lr}
 801c2ba:	b08b      	sub	sp, #44	; 0x2c
 801c2bc:	af00      	add	r7, sp, #0
 801c2be:	60f8      	str	r0, [r7, #12]
 801c2c0:	60b9      	str	r1, [r7, #8]
 801c2c2:	607a      	str	r2, [r7, #4]
    int i, j, len, type=0;
 801c2c4:	2300      	movs	r3, #0
 801c2c6:	617b      	str	r3, [r7, #20]
    nk_rune udecoded;

    NK_ASSERT(c);
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d105      	bne.n	801c2da <nk_utf_decode+0x22>
 801c2ce:	4b35      	ldr	r3, [pc, #212]	; (801c3a4 <nk_utf_decode+0xec>)
 801c2d0:	4a35      	ldr	r2, [pc, #212]	; (801c3a8 <nk_utf_decode+0xf0>)
 801c2d2:	212a      	movs	r1, #42	; 0x2a
 801c2d4:	4835      	ldr	r0, [pc, #212]	; (801c3ac <nk_utf_decode+0xf4>)
 801c2d6:	f001 feb5 	bl	801e044 <__assert_func>
    NK_ASSERT(u);
 801c2da:	68bb      	ldr	r3, [r7, #8]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d105      	bne.n	801c2ec <nk_utf_decode+0x34>
 801c2e0:	4b33      	ldr	r3, [pc, #204]	; (801c3b0 <nk_utf_decode+0xf8>)
 801c2e2:	4a31      	ldr	r2, [pc, #196]	; (801c3a8 <nk_utf_decode+0xf0>)
 801c2e4:	212b      	movs	r1, #43	; 0x2b
 801c2e6:	4831      	ldr	r0, [pc, #196]	; (801c3ac <nk_utf_decode+0xf4>)
 801c2e8:	f001 feac 	bl	801e044 <__assert_func>

    if (!c || !u) return 0;
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d002      	beq.n	801c2f8 <nk_utf_decode+0x40>
 801c2f2:	68bb      	ldr	r3, [r7, #8]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d101      	bne.n	801c2fc <nk_utf_decode+0x44>
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	e04f      	b.n	801c39c <nk_utf_decode+0xe4>
    if (!clen) return 0;
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d101      	bne.n	801c306 <nk_utf_decode+0x4e>
 801c302:	2300      	movs	r3, #0
 801c304:	e04a      	b.n	801c39c <nk_utf_decode+0xe4>
    *u = NK_UTF_INVALID;
 801c306:	68bb      	ldr	r3, [r7, #8]
 801c308:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801c30c:	601a      	str	r2, [r3, #0]

    udecoded = nk_utf_decode_byte(c[0], &len);
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	781b      	ldrb	r3, [r3, #0]
 801c312:	f107 0218 	add.w	r2, r7, #24
 801c316:	4611      	mov	r1, r2
 801c318:	4618      	mov	r0, r3
 801c31a:	f7ff ff83 	bl	801c224 <nk_utf_decode_byte>
 801c31e:	61f8      	str	r0, [r7, #28]
    if (!NK_BETWEEN(len, 1, NK_UTF_SIZE))
 801c320:	69bb      	ldr	r3, [r7, #24]
 801c322:	2b00      	cmp	r3, #0
 801c324:	dd02      	ble.n	801c32c <nk_utf_decode+0x74>
 801c326:	69bb      	ldr	r3, [r7, #24]
 801c328:	2b03      	cmp	r3, #3
 801c32a:	dd01      	ble.n	801c330 <nk_utf_decode+0x78>
        return 1;
 801c32c:	2301      	movs	r3, #1
 801c32e:	e035      	b.n	801c39c <nk_utf_decode+0xe4>

    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 801c330:	2301      	movs	r3, #1
 801c332:	627b      	str	r3, [r7, #36]	; 0x24
 801c334:	2301      	movs	r3, #1
 801c336:	623b      	str	r3, [r7, #32]
 801c338:	e019      	b.n	801c36e <nk_utf_decode+0xb6>
        udecoded = (udecoded << 6) | nk_utf_decode_byte(c[i], &type);
 801c33a:	69fb      	ldr	r3, [r7, #28]
 801c33c:	019c      	lsls	r4, r3, #6
 801c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c340:	68fa      	ldr	r2, [r7, #12]
 801c342:	4413      	add	r3, r2
 801c344:	781b      	ldrb	r3, [r3, #0]
 801c346:	f107 0214 	add.w	r2, r7, #20
 801c34a:	4611      	mov	r1, r2
 801c34c:	4618      	mov	r0, r3
 801c34e:	f7ff ff69 	bl	801c224 <nk_utf_decode_byte>
 801c352:	4603      	mov	r3, r0
 801c354:	4323      	orrs	r3, r4
 801c356:	61fb      	str	r3, [r7, #28]
        if (type != 0)
 801c358:	697b      	ldr	r3, [r7, #20]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d001      	beq.n	801c362 <nk_utf_decode+0xaa>
            return j;
 801c35e:	6a3b      	ldr	r3, [r7, #32]
 801c360:	e01c      	b.n	801c39c <nk_utf_decode+0xe4>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 801c362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c364:	3301      	adds	r3, #1
 801c366:	627b      	str	r3, [r7, #36]	; 0x24
 801c368:	6a3b      	ldr	r3, [r7, #32]
 801c36a:	3301      	adds	r3, #1
 801c36c:	623b      	str	r3, [r7, #32]
 801c36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	429a      	cmp	r2, r3
 801c374:	da03      	bge.n	801c37e <nk_utf_decode+0xc6>
 801c376:	69bb      	ldr	r3, [r7, #24]
 801c378:	6a3a      	ldr	r2, [r7, #32]
 801c37a:	429a      	cmp	r2, r3
 801c37c:	dbdd      	blt.n	801c33a <nk_utf_decode+0x82>
    }
    if (j < len)
 801c37e:	69bb      	ldr	r3, [r7, #24]
 801c380:	6a3a      	ldr	r2, [r7, #32]
 801c382:	429a      	cmp	r2, r3
 801c384:	da01      	bge.n	801c38a <nk_utf_decode+0xd2>
        return 0;
 801c386:	2300      	movs	r3, #0
 801c388:	e008      	b.n	801c39c <nk_utf_decode+0xe4>
    *u = udecoded;
 801c38a:	68bb      	ldr	r3, [r7, #8]
 801c38c:	69fa      	ldr	r2, [r7, #28]
 801c38e:	601a      	str	r2, [r3, #0]
    nk_utf_validate(u, len);
 801c390:	69bb      	ldr	r3, [r7, #24]
 801c392:	4619      	mov	r1, r3
 801c394:	68b8      	ldr	r0, [r7, #8]
 801c396:	f7ff fef5 	bl	801c184 <nk_utf_validate>
    return len;
 801c39a:	69bb      	ldr	r3, [r7, #24]
}
 801c39c:	4618      	mov	r0, r3
 801c39e:	372c      	adds	r7, #44	; 0x2c
 801c3a0:	46bd      	mov	sp, r7
 801c3a2:	bd90      	pop	{r4, r7, pc}
 801c3a4:	08022718 	.word	0x08022718
 801c3a8:	08023e00 	.word	0x08023e00
 801c3ac:	080226f8 	.word	0x080226f8
 801c3b0:	080226f4 	.word	0x080226f4

0801c3b4 <nk_memcopy>:

//#ifndef NK_MEMCPY
//#define NK_MEMCPY nk_memcopy
NK_LIB void*
nk_memcopy(void *dst0, const void *src0, nk_size length)
{
 801c3b4:	b480      	push	{r7}
 801c3b6:	b089      	sub	sp, #36	; 0x24
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	60f8      	str	r0, [r7, #12]
 801c3bc:	60b9      	str	r1, [r7, #8]
 801c3be:	607a      	str	r2, [r7, #4]
    nk_ptr t;
    char *dst = (char*)dst0;
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	61bb      	str	r3, [r7, #24]
    const char *src = (const char*)src0;
 801c3c4:	68bb      	ldr	r3, [r7, #8]
 801c3c6:	617b      	str	r3, [r7, #20]
    if (length == 0 || dst == src)
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	f000 80c7 	beq.w	801c55e <nk_memcopy+0x1aa>
 801c3d0:	69ba      	ldr	r2, [r7, #24]
 801c3d2:	697b      	ldr	r3, [r7, #20]
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	f000 80c2 	beq.w	801c55e <nk_memcopy+0x1aa>
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize-1)
    #define NK_TLOOP(s) if (t) NK_TLOOP1(s)
    #define NK_TLOOP1(s) do { s; } while (--t)

    if (dst < src) {
 801c3da:	69ba      	ldr	r2, [r7, #24]
 801c3dc:	697b      	ldr	r3, [r7, #20]
 801c3de:	429a      	cmp	r2, r3
 801c3e0:	d259      	bcs.n	801c496 <nk_memcopy+0xe2>
        t = (nk_ptr)src; /* only need low bits */
 801c3e2:	697b      	ldr	r3, [r7, #20]
 801c3e4:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 801c3e6:	69ba      	ldr	r2, [r7, #24]
 801c3e8:	69fb      	ldr	r3, [r7, #28]
 801c3ea:	4313      	orrs	r3, r2
 801c3ec:	f003 0303 	and.w	r3, r3, #3
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d024      	beq.n	801c43e <nk_memcopy+0x8a>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length < nk_wsize)
 801c3f4:	69ba      	ldr	r2, [r7, #24]
 801c3f6:	69fb      	ldr	r3, [r7, #28]
 801c3f8:	4053      	eors	r3, r2
 801c3fa:	f003 0303 	and.w	r3, r3, #3
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d102      	bne.n	801c408 <nk_memcopy+0x54>
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	2b03      	cmp	r3, #3
 801c406:	d802      	bhi.n	801c40e <nk_memcopy+0x5a>
                t = length;
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	61fb      	str	r3, [r7, #28]
 801c40c:	e005      	b.n	801c41a <nk_memcopy+0x66>
            else
                t = nk_wsize - (t & nk_wmask);
 801c40e:	69fb      	ldr	r3, [r7, #28]
 801c410:	f003 0303 	and.w	r3, r3, #3
 801c414:	f1c3 0304 	rsb	r3, r3, #4
 801c418:	61fb      	str	r3, [r7, #28]
            length -= t;
 801c41a:	687a      	ldr	r2, [r7, #4]
 801c41c:	69fb      	ldr	r3, [r7, #28]
 801c41e:	1ad3      	subs	r3, r2, r3
 801c420:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*dst++ = *src++);
 801c422:	697a      	ldr	r2, [r7, #20]
 801c424:	1c53      	adds	r3, r2, #1
 801c426:	617b      	str	r3, [r7, #20]
 801c428:	69bb      	ldr	r3, [r7, #24]
 801c42a:	1c59      	adds	r1, r3, #1
 801c42c:	61b9      	str	r1, [r7, #24]
 801c42e:	7812      	ldrb	r2, [r2, #0]
 801c430:	701a      	strb	r2, [r3, #0]
 801c432:	69fb      	ldr	r3, [r7, #28]
 801c434:	3b01      	subs	r3, #1
 801c436:	61fb      	str	r3, [r7, #28]
 801c438:	69fb      	ldr	r3, [r7, #28]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d1f1      	bne.n	801c422 <nk_memcopy+0x6e>
        }
        t = length / nk_wsize;
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	089b      	lsrs	r3, r3, #2
 801c442:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
 801c444:	69fb      	ldr	r3, [r7, #28]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d00f      	beq.n	801c46a <nk_memcopy+0xb6>
 801c44a:	697b      	ldr	r3, [r7, #20]
 801c44c:	681a      	ldr	r2, [r3, #0]
 801c44e:	69bb      	ldr	r3, [r7, #24]
 801c450:	601a      	str	r2, [r3, #0]
 801c452:	697b      	ldr	r3, [r7, #20]
 801c454:	3304      	adds	r3, #4
 801c456:	617b      	str	r3, [r7, #20]
 801c458:	69bb      	ldr	r3, [r7, #24]
 801c45a:	3304      	adds	r3, #4
 801c45c:	61bb      	str	r3, [r7, #24]
 801c45e:	69fb      	ldr	r3, [r7, #28]
 801c460:	3b01      	subs	r3, #1
 801c462:	61fb      	str	r3, [r7, #28]
 801c464:	69fb      	ldr	r3, [r7, #28]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d1ef      	bne.n	801c44a <nk_memcopy+0x96>
            src += nk_wsize; dst += nk_wsize);
        t = length & nk_wmask;
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	f003 0303 	and.w	r3, r3, #3
 801c470:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*dst++ = *src++);
 801c472:	69fb      	ldr	r3, [r7, #28]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d075      	beq.n	801c564 <nk_memcopy+0x1b0>
 801c478:	697a      	ldr	r2, [r7, #20]
 801c47a:	1c53      	adds	r3, r2, #1
 801c47c:	617b      	str	r3, [r7, #20]
 801c47e:	69bb      	ldr	r3, [r7, #24]
 801c480:	1c59      	adds	r1, r3, #1
 801c482:	61b9      	str	r1, [r7, #24]
 801c484:	7812      	ldrb	r2, [r2, #0]
 801c486:	701a      	strb	r2, [r3, #0]
 801c488:	69fb      	ldr	r3, [r7, #28]
 801c48a:	3b01      	subs	r3, #1
 801c48c:	61fb      	str	r3, [r7, #28]
 801c48e:	69fb      	ldr	r3, [r7, #28]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d1f1      	bne.n	801c478 <nk_memcopy+0xc4>
 801c494:	e066      	b.n	801c564 <nk_memcopy+0x1b0>
    } else {
        src += length;
 801c496:	697a      	ldr	r2, [r7, #20]
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	4413      	add	r3, r2
 801c49c:	617b      	str	r3, [r7, #20]
        dst += length;
 801c49e:	69ba      	ldr	r2, [r7, #24]
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	4413      	add	r3, r2
 801c4a4:	61bb      	str	r3, [r7, #24]
        t = (nk_ptr)src;
 801c4a6:	697b      	ldr	r3, [r7, #20]
 801c4a8:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 801c4aa:	69ba      	ldr	r2, [r7, #24]
 801c4ac:	69fb      	ldr	r3, [r7, #28]
 801c4ae:	4313      	orrs	r3, r2
 801c4b0:	f003 0303 	and.w	r3, r3, #3
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d024      	beq.n	801c502 <nk_memcopy+0x14e>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length <= nk_wsize)
 801c4b8:	69ba      	ldr	r2, [r7, #24]
 801c4ba:	69fb      	ldr	r3, [r7, #28]
 801c4bc:	4053      	eors	r3, r2
 801c4be:	f003 0303 	and.w	r3, r3, #3
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d102      	bne.n	801c4cc <nk_memcopy+0x118>
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	2b04      	cmp	r3, #4
 801c4ca:	d802      	bhi.n	801c4d2 <nk_memcopy+0x11e>
                t = length;
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	61fb      	str	r3, [r7, #28]
 801c4d0:	e003      	b.n	801c4da <nk_memcopy+0x126>
            else
                t &= nk_wmask;
 801c4d2:	69fb      	ldr	r3, [r7, #28]
 801c4d4:	f003 0303 	and.w	r3, r3, #3
 801c4d8:	61fb      	str	r3, [r7, #28]
            length -= t;
 801c4da:	687a      	ldr	r2, [r7, #4]
 801c4dc:	69fb      	ldr	r3, [r7, #28]
 801c4de:	1ad3      	subs	r3, r2, r3
 801c4e0:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*--dst = *--src);
 801c4e2:	697b      	ldr	r3, [r7, #20]
 801c4e4:	3b01      	subs	r3, #1
 801c4e6:	617b      	str	r3, [r7, #20]
 801c4e8:	69bb      	ldr	r3, [r7, #24]
 801c4ea:	3b01      	subs	r3, #1
 801c4ec:	61bb      	str	r3, [r7, #24]
 801c4ee:	697b      	ldr	r3, [r7, #20]
 801c4f0:	781a      	ldrb	r2, [r3, #0]
 801c4f2:	69bb      	ldr	r3, [r7, #24]
 801c4f4:	701a      	strb	r2, [r3, #0]
 801c4f6:	69fb      	ldr	r3, [r7, #28]
 801c4f8:	3b01      	subs	r3, #1
 801c4fa:	61fb      	str	r3, [r7, #28]
 801c4fc:	69fb      	ldr	r3, [r7, #28]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d1ef      	bne.n	801c4e2 <nk_memcopy+0x12e>
        }
        t = length / nk_wsize;
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	089b      	lsrs	r3, r3, #2
 801c506:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
 801c508:	69fb      	ldr	r3, [r7, #28]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d00f      	beq.n	801c52e <nk_memcopy+0x17a>
 801c50e:	697b      	ldr	r3, [r7, #20]
 801c510:	3b04      	subs	r3, #4
 801c512:	617b      	str	r3, [r7, #20]
 801c514:	69bb      	ldr	r3, [r7, #24]
 801c516:	3b04      	subs	r3, #4
 801c518:	61bb      	str	r3, [r7, #24]
 801c51a:	697b      	ldr	r3, [r7, #20]
 801c51c:	681a      	ldr	r2, [r3, #0]
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	601a      	str	r2, [r3, #0]
 801c522:	69fb      	ldr	r3, [r7, #28]
 801c524:	3b01      	subs	r3, #1
 801c526:	61fb      	str	r3, [r7, #28]
 801c528:	69fb      	ldr	r3, [r7, #28]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d1ef      	bne.n	801c50e <nk_memcopy+0x15a>
            *(nk_word*)(void*)dst = *(const nk_word*)(const void*)src);
        t = length & nk_wmask;
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	f003 0303 	and.w	r3, r3, #3
 801c534:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*--dst = *--src);
 801c536:	69fb      	ldr	r3, [r7, #28]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d012      	beq.n	801c562 <nk_memcopy+0x1ae>
 801c53c:	697b      	ldr	r3, [r7, #20]
 801c53e:	3b01      	subs	r3, #1
 801c540:	617b      	str	r3, [r7, #20]
 801c542:	69bb      	ldr	r3, [r7, #24]
 801c544:	3b01      	subs	r3, #1
 801c546:	61bb      	str	r3, [r7, #24]
 801c548:	697b      	ldr	r3, [r7, #20]
 801c54a:	781a      	ldrb	r2, [r3, #0]
 801c54c:	69bb      	ldr	r3, [r7, #24]
 801c54e:	701a      	strb	r2, [r3, #0]
 801c550:	69fb      	ldr	r3, [r7, #28]
 801c552:	3b01      	subs	r3, #1
 801c554:	61fb      	str	r3, [r7, #28]
 801c556:	69fb      	ldr	r3, [r7, #28]
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d1ef      	bne.n	801c53c <nk_memcopy+0x188>
    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
    #undef NK_TLOOP
    #undef NK_TLOOP1
done:
 801c55c:	e001      	b.n	801c562 <nk_memcopy+0x1ae>
        goto done;
 801c55e:	bf00      	nop
 801c560:	e000      	b.n	801c564 <nk_memcopy+0x1b0>
done:
 801c562:	bf00      	nop
    return (dst0);
 801c564:	68fb      	ldr	r3, [r7, #12]
}
 801c566:	4618      	mov	r0, r3
 801c568:	3724      	adds	r7, #36	; 0x24
 801c56a:	46bd      	mov	sp, r7
 801c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c570:	4770      	bx	lr

0801c572 <nk_memset>:
//#endif
//#ifndef NK_MEMSET
//#define NK_MEMSET nk_memset
NK_LIB void
nk_memset(void *ptr, int c0, nk_size size)
{
 801c572:	b480      	push	{r7}
 801c574:	b089      	sub	sp, #36	; 0x24
 801c576:	af00      	add	r7, sp, #0
 801c578:	60f8      	str	r0, [r7, #12]
 801c57a:	60b9      	str	r1, [r7, #8]
 801c57c:	607a      	str	r2, [r7, #4]
    #define nk_word unsigned
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize - 1)
    nk_byte *dst = (nk_byte*)ptr;
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	61fb      	str	r3, [r7, #28]
    unsigned c = 0;
 801c582:	2300      	movs	r3, #0
 801c584:	61bb      	str	r3, [r7, #24]
    nk_size t = 0;
 801c586:	2300      	movs	r3, #0
 801c588:	617b      	str	r3, [r7, #20]

    if ((c = (nk_byte)c0) != 0) {
 801c58a:	68bb      	ldr	r3, [r7, #8]
 801c58c:	b2db      	uxtb	r3, r3
 801c58e:	61bb      	str	r3, [r7, #24]
 801c590:	69bb      	ldr	r3, [r7, #24]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d009      	beq.n	801c5aa <nk_memset+0x38>
        c = (c << 8) | c; /* at least 16-bits  */
 801c596:	69bb      	ldr	r3, [r7, #24]
 801c598:	021b      	lsls	r3, r3, #8
 801c59a:	69ba      	ldr	r2, [r7, #24]
 801c59c:	4313      	orrs	r3, r2
 801c59e:	61bb      	str	r3, [r7, #24]
        if (sizeof(unsigned int) > 2)
            c = (c << 16) | c; /* at least 32-bits*/
 801c5a0:	69bb      	ldr	r3, [r7, #24]
 801c5a2:	041b      	lsls	r3, r3, #16
 801c5a4:	69ba      	ldr	r2, [r7, #24]
 801c5a6:	4313      	orrs	r3, r2
 801c5a8:	61bb      	str	r3, [r7, #24]
    }

    /* too small of a word count */
    dst = (nk_byte*)ptr;
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	61fb      	str	r3, [r7, #28]
    if (size < 3 * nk_wsize) {
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2b0b      	cmp	r3, #11
 801c5b2:	d80c      	bhi.n	801c5ce <nk_memset+0x5c>
        while (size--) *dst++ = (nk_byte)c0;
 801c5b4:	e005      	b.n	801c5c2 <nk_memset+0x50>
 801c5b6:	69fb      	ldr	r3, [r7, #28]
 801c5b8:	1c5a      	adds	r2, r3, #1
 801c5ba:	61fa      	str	r2, [r7, #28]
 801c5bc:	68ba      	ldr	r2, [r7, #8]
 801c5be:	b2d2      	uxtb	r2, r2
 801c5c0:	701a      	strb	r2, [r3, #0]
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	1e5a      	subs	r2, r3, #1
 801c5c6:	607a      	str	r2, [r7, #4]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d1f4      	bne.n	801c5b6 <nk_memset+0x44>
        return;
 801c5cc:	e03c      	b.n	801c648 <nk_memset+0xd6>
    }

    /* align destination */
    if ((t = NK_PTR_TO_UINT(dst) & nk_wmask) != 0) {
 801c5ce:	69fb      	ldr	r3, [r7, #28]
 801c5d0:	f003 0303 	and.w	r3, r3, #3
 801c5d4:	617b      	str	r3, [r7, #20]
 801c5d6:	697b      	ldr	r3, [r7, #20]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d013      	beq.n	801c604 <nk_memset+0x92>
        t = nk_wsize -t;
 801c5dc:	697b      	ldr	r3, [r7, #20]
 801c5de:	f1c3 0304 	rsb	r3, r3, #4
 801c5e2:	617b      	str	r3, [r7, #20]
        size -= t;
 801c5e4:	687a      	ldr	r2, [r7, #4]
 801c5e6:	697b      	ldr	r3, [r7, #20]
 801c5e8:	1ad3      	subs	r3, r2, r3
 801c5ea:	607b      	str	r3, [r7, #4]
        do {
            *dst++ = (nk_byte)c0;
 801c5ec:	69fb      	ldr	r3, [r7, #28]
 801c5ee:	1c5a      	adds	r2, r3, #1
 801c5f0:	61fa      	str	r2, [r7, #28]
 801c5f2:	68ba      	ldr	r2, [r7, #8]
 801c5f4:	b2d2      	uxtb	r2, r2
 801c5f6:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 801c5f8:	697b      	ldr	r3, [r7, #20]
 801c5fa:	3b01      	subs	r3, #1
 801c5fc:	617b      	str	r3, [r7, #20]
 801c5fe:	697b      	ldr	r3, [r7, #20]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d1f3      	bne.n	801c5ec <nk_memset+0x7a>
    }

    /* fill word */
    t = size / nk_wsize;
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	089b      	lsrs	r3, r3, #2
 801c608:	617b      	str	r3, [r7, #20]
    do {
        *(nk_word*)((void*)dst) = c;
 801c60a:	69fb      	ldr	r3, [r7, #28]
 801c60c:	69ba      	ldr	r2, [r7, #24]
 801c60e:	601a      	str	r2, [r3, #0]
        dst += nk_wsize;
 801c610:	69fb      	ldr	r3, [r7, #28]
 801c612:	3304      	adds	r3, #4
 801c614:	61fb      	str	r3, [r7, #28]
    } while (--t != 0);
 801c616:	697b      	ldr	r3, [r7, #20]
 801c618:	3b01      	subs	r3, #1
 801c61a:	617b      	str	r3, [r7, #20]
 801c61c:	697b      	ldr	r3, [r7, #20]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d1f3      	bne.n	801c60a <nk_memset+0x98>

    /* fill trailing bytes */
    t = (size & nk_wmask);
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	f003 0303 	and.w	r3, r3, #3
 801c628:	617b      	str	r3, [r7, #20]
    if (t != 0) {
 801c62a:	697b      	ldr	r3, [r7, #20]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d00b      	beq.n	801c648 <nk_memset+0xd6>
        do {
            *dst++ = (nk_byte)c0;
 801c630:	69fb      	ldr	r3, [r7, #28]
 801c632:	1c5a      	adds	r2, r3, #1
 801c634:	61fa      	str	r2, [r7, #28]
 801c636:	68ba      	ldr	r2, [r7, #8]
 801c638:	b2d2      	uxtb	r2, r2
 801c63a:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 801c63c:	697b      	ldr	r3, [r7, #20]
 801c63e:	3b01      	subs	r3, #1
 801c640:	617b      	str	r3, [r7, #20]
 801c642:	697b      	ldr	r3, [r7, #20]
 801c644:	2b00      	cmp	r3, #0
 801c646:	d1f3      	bne.n	801c630 <nk_memset+0xbe>
    }

    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
}
 801c648:	3724      	adds	r7, #36	; 0x24
 801c64a:	46bd      	mov	sp, r7
 801c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c650:	4770      	bx	lr
	...

0801c654 <nk_zero>:
//#endif
NK_LIB void
nk_zero(void *ptr, nk_size size)
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b082      	sub	sp, #8
 801c658:	af00      	add	r7, sp, #0
 801c65a:	6078      	str	r0, [r7, #4]
 801c65c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ptr);
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d105      	bne.n	801c670 <nk_zero+0x1c>
 801c664:	4b07      	ldr	r3, [pc, #28]	; (801c684 <nk_zero+0x30>)
 801c666:	4a08      	ldr	r2, [pc, #32]	; (801c688 <nk_zero+0x34>)
 801c668:	2184      	movs	r1, #132	; 0x84
 801c66a:	4808      	ldr	r0, [pc, #32]	; (801c68c <nk_zero+0x38>)
 801c66c:	f001 fcea 	bl	801e044 <__assert_func>
    NK_MEMSET(ptr, 0, size);
 801c670:	683a      	ldr	r2, [r7, #0]
 801c672:	2100      	movs	r1, #0
 801c674:	6878      	ldr	r0, [r7, #4]
 801c676:	f7ff ff7c 	bl	801c572 <nk_memset>
}
 801c67a:	bf00      	nop
 801c67c:	3708      	adds	r7, #8
 801c67e:	46bd      	mov	sp, r7
 801c680:	bd80      	pop	{r7, pc}
 801c682:	bf00      	nop
 801c684:	08022734 	.word	0x08022734
 801c688:	08023e10 	.word	0x08023e10
 801c68c:	08022738 	.word	0x08022738

0801c690 <nk_strlen>:
NK_API int
nk_strlen(const char *str)
{
 801c690:	b580      	push	{r7, lr}
 801c692:	b084      	sub	sp, #16
 801c694:	af00      	add	r7, sp, #0
 801c696:	6078      	str	r0, [r7, #4]
    int siz = 0;
 801c698:	2300      	movs	r3, #0
 801c69a:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(str);
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d108      	bne.n	801c6b4 <nk_strlen+0x24>
 801c6a2:	4b0b      	ldr	r3, [pc, #44]	; (801c6d0 <nk_strlen+0x40>)
 801c6a4:	4a0b      	ldr	r2, [pc, #44]	; (801c6d4 <nk_strlen+0x44>)
 801c6a6:	218b      	movs	r1, #139	; 0x8b
 801c6a8:	480b      	ldr	r0, [pc, #44]	; (801c6d8 <nk_strlen+0x48>)
 801c6aa:	f001 fccb 	bl	801e044 <__assert_func>
    while (str && *str++ != '\0') siz++;
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	3301      	adds	r3, #1
 801c6b2:	60fb      	str	r3, [r7, #12]
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d005      	beq.n	801c6c6 <nk_strlen+0x36>
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	1c5a      	adds	r2, r3, #1
 801c6be:	607a      	str	r2, [r7, #4]
 801c6c0:	781b      	ldrb	r3, [r3, #0]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d1f3      	bne.n	801c6ae <nk_strlen+0x1e>
    return siz;
 801c6c6:	68fb      	ldr	r3, [r7, #12]
}
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	3710      	adds	r7, #16
 801c6cc:	46bd      	mov	sp, r7
 801c6ce:	bd80      	pop	{r7, pc}
 801c6d0:	08022754 	.word	0x08022754
 801c6d4:	08023e18 	.word	0x08023e18
 801c6d8:	08022738 	.word	0x08022738

0801c6dc <nk_stricmpn>:
    } while (c1);
    return 0;
}
NK_API int
nk_stricmpn(const char *s1, const char *s2, int n)
{
 801c6dc:	b580      	push	{r7, lr}
 801c6de:	b088      	sub	sp, #32
 801c6e0:	af00      	add	r7, sp, #0
 801c6e2:	60f8      	str	r0, [r7, #12]
 801c6e4:	60b9      	str	r1, [r7, #8]
 801c6e6:	607a      	str	r2, [r7, #4]
    int c1,c2,d;
    NK_ASSERT(n >= 0);
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	da06      	bge.n	801c6fc <nk_stricmpn+0x20>
 801c6ee:	4b25      	ldr	r3, [pc, #148]	; (801c784 <nk_stricmpn+0xa8>)
 801c6f0:	4a25      	ldr	r2, [pc, #148]	; (801c788 <nk_stricmpn+0xac>)
 801c6f2:	f240 1103 	movw	r1, #259	; 0x103
 801c6f6:	4825      	ldr	r0, [pc, #148]	; (801c78c <nk_stricmpn+0xb0>)
 801c6f8:	f001 fca4 	bl	801e044 <__assert_func>
    do {
        c1 = *s1++;
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	1c5a      	adds	r2, r3, #1
 801c700:	60fa      	str	r2, [r7, #12]
 801c702:	781b      	ldrb	r3, [r3, #0]
 801c704:	61bb      	str	r3, [r7, #24]
        c2 = *s2++;
 801c706:	68bb      	ldr	r3, [r7, #8]
 801c708:	1c5a      	adds	r2, r3, #1
 801c70a:	60ba      	str	r2, [r7, #8]
 801c70c:	781b      	ldrb	r3, [r3, #0]
 801c70e:	617b      	str	r3, [r7, #20]
        if (!n--) return 0;
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	1e5a      	subs	r2, r3, #1
 801c714:	607a      	str	r2, [r7, #4]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d101      	bne.n	801c71e <nk_stricmpn+0x42>
 801c71a:	2300      	movs	r3, #0
 801c71c:	e02e      	b.n	801c77c <nk_stricmpn+0xa0>

        d = c1 - c2;
 801c71e:	69ba      	ldr	r2, [r7, #24]
 801c720:	697b      	ldr	r3, [r7, #20]
 801c722:	1ad3      	subs	r3, r2, r3
 801c724:	61fb      	str	r3, [r7, #28]
        while (d) {
 801c726:	bf00      	nop
 801c728:	69fb      	ldr	r3, [r7, #28]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d022      	beq.n	801c774 <nk_stricmpn+0x98>
            if (c1 <= 'Z' && c1 >= 'A') {
 801c72e:	69bb      	ldr	r3, [r7, #24]
 801c730:	2b5a      	cmp	r3, #90	; 0x5a
 801c732:	dc08      	bgt.n	801c746 <nk_stricmpn+0x6a>
 801c734:	69bb      	ldr	r3, [r7, #24]
 801c736:	2b40      	cmp	r3, #64	; 0x40
 801c738:	dd05      	ble.n	801c746 <nk_stricmpn+0x6a>
                d += ('a' - 'A');
 801c73a:	69fb      	ldr	r3, [r7, #28]
 801c73c:	3320      	adds	r3, #32
 801c73e:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 801c740:	69fb      	ldr	r3, [r7, #28]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d013      	beq.n	801c76e <nk_stricmpn+0x92>
            }
            if (c2 <= 'Z' && c2 >= 'A') {
 801c746:	697b      	ldr	r3, [r7, #20]
 801c748:	2b5a      	cmp	r3, #90	; 0x5a
 801c74a:	dc08      	bgt.n	801c75e <nk_stricmpn+0x82>
 801c74c:	697b      	ldr	r3, [r7, #20]
 801c74e:	2b40      	cmp	r3, #64	; 0x40
 801c750:	dd05      	ble.n	801c75e <nk_stricmpn+0x82>
                d -= ('a' - 'A');
 801c752:	69fb      	ldr	r3, [r7, #28]
 801c754:	3b20      	subs	r3, #32
 801c756:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 801c758:	69fb      	ldr	r3, [r7, #28]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d009      	beq.n	801c772 <nk_stricmpn+0x96>
            }
            return ((d >= 0) << 1) - 1;
 801c75e:	69fb      	ldr	r3, [r7, #28]
 801c760:	2b00      	cmp	r3, #0
 801c762:	db01      	blt.n	801c768 <nk_stricmpn+0x8c>
 801c764:	2301      	movs	r3, #1
 801c766:	e009      	b.n	801c77c <nk_stricmpn+0xa0>
 801c768:	f04f 33ff 	mov.w	r3, #4294967295
 801c76c:	e006      	b.n	801c77c <nk_stricmpn+0xa0>
                if (!d) break;
 801c76e:	bf00      	nop
 801c770:	e000      	b.n	801c774 <nk_stricmpn+0x98>
                if (!d) break;
 801c772:	bf00      	nop
        }
    } while (c1);
 801c774:	69bb      	ldr	r3, [r7, #24]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d1c0      	bne.n	801c6fc <nk_stricmpn+0x20>
    return 0;
 801c77a:	2300      	movs	r3, #0
}
 801c77c:	4618      	mov	r0, r3
 801c77e:	3720      	adds	r7, #32
 801c780:	46bd      	mov	sp, r7
 801c782:	bd80      	pop	{r7, pc}
 801c784:	08022758 	.word	0x08022758
 801c788:	08023e24 	.word	0x08023e24
 801c78c:	08022738 	.word	0x08022738

0801c790 <nk_murmur_hash>:
    return result;
}
#endif
NK_API nk_hash
nk_murmur_hash(const void * key, int len, nk_hash seed)
{
 801c790:	b480      	push	{r7}
 801c792:	b091      	sub	sp, #68	; 0x44
 801c794:	af00      	add	r7, sp, #0
 801c796:	60f8      	str	r0, [r7, #12]
 801c798:	60b9      	str	r1, [r7, #8]
 801c79a:	607a      	str	r2, [r7, #4]
    /* 32-Bit MurmurHash3: https://code.google.com/p/smhasher/wiki/MurmurHash3*/
    #define NK_ROTL(x,r) ((x) << (r) | ((x) >> (32 - r)))

    nk_uint h1 = seed;
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_uint k1;
    const nk_byte *data = (const nk_byte*)key;
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	633b      	str	r3, [r7, #48]	; 0x30
    const nk_byte *keyptr = data;
 801c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c7a6:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_byte *k1ptr;
    const int bsize = sizeof(k1);
 801c7a8:	2304      	movs	r3, #4
 801c7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int nblocks = len/4;
 801c7ac:	68bb      	ldr	r3, [r7, #8]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	da00      	bge.n	801c7b4 <nk_murmur_hash+0x24>
 801c7b2:	3303      	adds	r3, #3
 801c7b4:	109b      	asrs	r3, r3, #2
 801c7b6:	62bb      	str	r3, [r7, #40]	; 0x28

    const nk_uint c1 = 0xcc9e2d51;
 801c7b8:	4b57      	ldr	r3, [pc, #348]	; (801c918 <nk_murmur_hash+0x188>)
 801c7ba:	627b      	str	r3, [r7, #36]	; 0x24
    const nk_uint c2 = 0x1b873593;
 801c7bc:	4b57      	ldr	r3, [pc, #348]	; (801c91c <nk_murmur_hash+0x18c>)
 801c7be:	623b      	str	r3, [r7, #32]
    const nk_byte *tail;
    int i;

    /* body */
    if (!key) return 0;
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d101      	bne.n	801c7ca <nk_murmur_hash+0x3a>
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	e09f      	b.n	801c90a <nk_murmur_hash+0x17a>
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 801c7ca:	2300      	movs	r3, #0
 801c7cc:	637b      	str	r3, [r7, #52]	; 0x34
 801c7ce:	e03c      	b.n	801c84a <nk_murmur_hash+0xba>
        k1ptr = (nk_byte*)&k1;
 801c7d0:	f107 0314 	add.w	r3, r7, #20
 801c7d4:	61bb      	str	r3, [r7, #24]
        k1ptr[0] = keyptr[0];
 801c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7d8:	781a      	ldrb	r2, [r3, #0]
 801c7da:	69bb      	ldr	r3, [r7, #24]
 801c7dc:	701a      	strb	r2, [r3, #0]
        k1ptr[1] = keyptr[1];
 801c7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7e0:	1c5a      	adds	r2, r3, #1
 801c7e2:	69bb      	ldr	r3, [r7, #24]
 801c7e4:	3301      	adds	r3, #1
 801c7e6:	7812      	ldrb	r2, [r2, #0]
 801c7e8:	701a      	strb	r2, [r3, #0]
        k1ptr[2] = keyptr[2];
 801c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7ec:	1c9a      	adds	r2, r3, #2
 801c7ee:	69bb      	ldr	r3, [r7, #24]
 801c7f0:	3302      	adds	r3, #2
 801c7f2:	7812      	ldrb	r2, [r2, #0]
 801c7f4:	701a      	strb	r2, [r3, #0]
        k1ptr[3] = keyptr[3];
 801c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7f8:	1cda      	adds	r2, r3, #3
 801c7fa:	69bb      	ldr	r3, [r7, #24]
 801c7fc:	3303      	adds	r3, #3
 801c7fe:	7812      	ldrb	r2, [r2, #0]
 801c800:	701a      	strb	r2, [r3, #0]

        k1 *= c1;
 801c802:	697b      	ldr	r3, [r7, #20]
 801c804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c806:	fb02 f303 	mul.w	r3, r2, r3
 801c80a:	617b      	str	r3, [r7, #20]
        k1 = NK_ROTL(k1,15);
 801c80c:	697b      	ldr	r3, [r7, #20]
 801c80e:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c812:	617b      	str	r3, [r7, #20]
        k1 *= c2;
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	6a3a      	ldr	r2, [r7, #32]
 801c818:	fb02 f303 	mul.w	r3, r2, r3
 801c81c:	617b      	str	r3, [r7, #20]

        h1 ^= k1;
 801c81e:	697b      	ldr	r3, [r7, #20]
 801c820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c822:	4053      	eors	r3, r2
 801c824:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = NK_ROTL(h1,13);
 801c826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c828:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = h1*5+0xe6546b64;
 801c82e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c830:	4613      	mov	r3, r2
 801c832:	009b      	lsls	r3, r3, #2
 801c834:	441a      	add	r2, r3
 801c836:	4b3a      	ldr	r3, [pc, #232]	; (801c920 <nk_murmur_hash+0x190>)
 801c838:	4413      	add	r3, r2
 801c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 801c83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c83e:	3301      	adds	r3, #1
 801c840:	637b      	str	r3, [r7, #52]	; 0x34
 801c842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c846:	4413      	add	r3, r2
 801c848:	63bb      	str	r3, [r7, #56]	; 0x38
 801c84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c84e:	429a      	cmp	r2, r3
 801c850:	dbbe      	blt.n	801c7d0 <nk_murmur_hash+0x40>
    }

    /* tail */
    tail = (const nk_byte*)(data + nblocks*4);
 801c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c854:	009b      	lsls	r3, r3, #2
 801c856:	461a      	mov	r2, r3
 801c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c85a:	4413      	add	r3, r2
 801c85c:	61fb      	str	r3, [r7, #28]
    k1 = 0;
 801c85e:	2300      	movs	r3, #0
 801c860:	617b      	str	r3, [r7, #20]
    switch (len & 3) {
 801c862:	68bb      	ldr	r3, [r7, #8]
 801c864:	f003 0303 	and.w	r3, r3, #3
 801c868:	2b03      	cmp	r3, #3
 801c86a:	d006      	beq.n	801c87a <nk_murmur_hash+0xea>
 801c86c:	2b03      	cmp	r3, #3
 801c86e:	dc2d      	bgt.n	801c8cc <nk_murmur_hash+0x13c>
 801c870:	2b01      	cmp	r3, #1
 801c872:	d012      	beq.n	801c89a <nk_murmur_hash+0x10a>
 801c874:	2b02      	cmp	r3, #2
 801c876:	d008      	beq.n	801c88a <nk_murmur_hash+0xfa>
            k1 *= c1;
            k1 = NK_ROTL(k1,15);
            k1 *= c2;
            h1 ^= k1;
            break;
        default: break;
 801c878:	e028      	b.n	801c8cc <nk_murmur_hash+0x13c>
        case 3: k1 ^= (nk_uint)(tail[2] << 16); /* fallthrough */
 801c87a:	69fb      	ldr	r3, [r7, #28]
 801c87c:	3302      	adds	r3, #2
 801c87e:	781b      	ldrb	r3, [r3, #0]
 801c880:	041b      	lsls	r3, r3, #16
 801c882:	461a      	mov	r2, r3
 801c884:	697b      	ldr	r3, [r7, #20]
 801c886:	4053      	eors	r3, r2
 801c888:	617b      	str	r3, [r7, #20]
        case 2: k1 ^= (nk_uint)(tail[1] << 8u); /* fallthrough */
 801c88a:	69fb      	ldr	r3, [r7, #28]
 801c88c:	3301      	adds	r3, #1
 801c88e:	781b      	ldrb	r3, [r3, #0]
 801c890:	021b      	lsls	r3, r3, #8
 801c892:	461a      	mov	r2, r3
 801c894:	697b      	ldr	r3, [r7, #20]
 801c896:	4053      	eors	r3, r2
 801c898:	617b      	str	r3, [r7, #20]
        case 1: k1 ^= tail[0];
 801c89a:	69fb      	ldr	r3, [r7, #28]
 801c89c:	781b      	ldrb	r3, [r3, #0]
 801c89e:	461a      	mov	r2, r3
 801c8a0:	697b      	ldr	r3, [r7, #20]
 801c8a2:	4053      	eors	r3, r2
 801c8a4:	617b      	str	r3, [r7, #20]
            k1 *= c1;
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c8aa:	fb02 f303 	mul.w	r3, r2, r3
 801c8ae:	617b      	str	r3, [r7, #20]
            k1 = NK_ROTL(k1,15);
 801c8b0:	697b      	ldr	r3, [r7, #20]
 801c8b2:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c8b6:	617b      	str	r3, [r7, #20]
            k1 *= c2;
 801c8b8:	697b      	ldr	r3, [r7, #20]
 801c8ba:	6a3a      	ldr	r2, [r7, #32]
 801c8bc:	fb02 f303 	mul.w	r3, r2, r3
 801c8c0:	617b      	str	r3, [r7, #20]
            h1 ^= k1;
 801c8c2:	697b      	ldr	r3, [r7, #20]
 801c8c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8c6:	4053      	eors	r3, r2
 801c8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 801c8ca:	e000      	b.n	801c8ce <nk_murmur_hash+0x13e>
        default: break;
 801c8cc:	bf00      	nop
    }

    /* finalization */
    h1 ^= (nk_uint)len;
 801c8ce:	68bb      	ldr	r3, [r7, #8]
 801c8d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8d2:	4053      	eors	r3, r2
 801c8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* fmix32 */
    h1 ^= h1 >> 16;
 801c8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8d8:	0c1b      	lsrs	r3, r3, #16
 801c8da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8dc:	4053      	eors	r3, r2
 801c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0x85ebca6b;
 801c8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8e2:	4a10      	ldr	r2, [pc, #64]	; (801c924 <nk_murmur_hash+0x194>)
 801c8e4:	fb02 f303 	mul.w	r3, r2, r3
 801c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 13;
 801c8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8ec:	0b5b      	lsrs	r3, r3, #13
 801c8ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8f0:	4053      	eors	r3, r2
 801c8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0xc2b2ae35;
 801c8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8f6:	4a0c      	ldr	r2, [pc, #48]	; (801c928 <nk_murmur_hash+0x198>)
 801c8f8:	fb02 f303 	mul.w	r3, r2, r3
 801c8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 16;
 801c8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c900:	0c1b      	lsrs	r3, r3, #16
 801c902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c904:	4053      	eors	r3, r2
 801c906:	63fb      	str	r3, [r7, #60]	; 0x3c

    #undef NK_ROTL
    return h1;
 801c908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801c90a:	4618      	mov	r0, r3
 801c90c:	3744      	adds	r7, #68	; 0x44
 801c90e:	46bd      	mov	sp, r7
 801c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c914:	4770      	bx	lr
 801c916:	bf00      	nop
 801c918:	cc9e2d51 	.word	0xcc9e2d51
 801c91c:	1b873593 	.word	0x1b873593
 801c920:	e6546b64 	.word	0xe6546b64
 801c924:	85ebca6b 	.word	0x85ebca6b
 801c928:	c2b2ae35 	.word	0xc2b2ae35

0801c92c <nk_text_clamp>:
#endif
NK_LIB int
nk_text_clamp(const struct nk_user_font *font, const char *text,
    int text_len, float space, int *glyphs, float *text_width,
    nk_rune *sep_list, int sep_count)
{
 801c92c:	b580      	push	{r7, lr}
 801c92e:	b092      	sub	sp, #72	; 0x48
 801c930:	af00      	add	r7, sp, #0
 801c932:	6178      	str	r0, [r7, #20]
 801c934:	6139      	str	r1, [r7, #16]
 801c936:	60fa      	str	r2, [r7, #12]
 801c938:	ed87 0a02 	vstr	s0, [r7, #8]
 801c93c:	607b      	str	r3, [r7, #4]
    int i = 0;
 801c93e:	2300      	movs	r3, #0
 801c940:	647b      	str	r3, [r7, #68]	; 0x44
    int glyph_len = 0;
 801c942:	2300      	movs	r3, #0
 801c944:	643b      	str	r3, [r7, #64]	; 0x40
    float last_width = 0;
 801c946:	f04f 0300 	mov.w	r3, #0
 801c94a:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_rune unicode = 0;
 801c94c:	2300      	movs	r3, #0
 801c94e:	61fb      	str	r3, [r7, #28]
    float width = 0;
 801c950:	f04f 0300 	mov.w	r3, #0
 801c954:	63bb      	str	r3, [r7, #56]	; 0x38
    int len = 0;
 801c956:	2300      	movs	r3, #0
 801c958:	637b      	str	r3, [r7, #52]	; 0x34
    int g = 0;
 801c95a:	2300      	movs	r3, #0
 801c95c:	633b      	str	r3, [r7, #48]	; 0x30
    float s;

    int sep_len = 0;
 801c95e:	2300      	movs	r3, #0
 801c960:	62fb      	str	r3, [r7, #44]	; 0x2c
    int sep_g = 0;
 801c962:	2300      	movs	r3, #0
 801c964:	62bb      	str	r3, [r7, #40]	; 0x28
    float sep_width = 0;
 801c966:	f04f 0300 	mov.w	r3, #0
 801c96a:	627b      	str	r3, [r7, #36]	; 0x24
    sep_count = NK_MAX(sep_count,0);
 801c96c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c96e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c972:	65bb      	str	r3, [r7, #88]	; 0x58

    glyph_len = nk_utf_decode(text, &unicode, text_len);
 801c974:	f107 031c 	add.w	r3, r7, #28
 801c978:	68fa      	ldr	r2, [r7, #12]
 801c97a:	4619      	mov	r1, r3
 801c97c:	6938      	ldr	r0, [r7, #16]
 801c97e:	f7ff fc9b 	bl	801c2b8 <nk_utf_decode>
 801c982:	6438      	str	r0, [r7, #64]	; 0x40
    while (glyph_len && (width < space) && (len < text_len)) {
 801c984:	e04a      	b.n	801ca1c <nk_text_clamp+0xf0>
        len += glyph_len;
 801c986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c98a:	4413      	add	r3, r2
 801c98c:	637b      	str	r3, [r7, #52]	; 0x34
        s = font->width(font->userdata, font->height, text, len);
 801c98e:	697b      	ldr	r3, [r7, #20]
 801c990:	689b      	ldr	r3, [r3, #8]
 801c992:	697a      	ldr	r2, [r7, #20]
 801c994:	edd2 7a01 	vldr	s15, [r2, #4]
 801c998:	6978      	ldr	r0, [r7, #20]
 801c99a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c99c:	6939      	ldr	r1, [r7, #16]
 801c99e:	eeb0 0a67 	vmov.f32	s0, s15
 801c9a2:	6800      	ldr	r0, [r0, #0]
 801c9a4:	4798      	blx	r3
 801c9a6:	ed87 0a08 	vstr	s0, [r7, #32]
        for (i = 0; i < sep_count; ++i) {
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	647b      	str	r3, [r7, #68]	; 0x44
 801c9ae:	e015      	b.n	801c9dc <nk_text_clamp+0xb0>
            if (unicode != sep_list[i]) continue;
 801c9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c9b2:	009b      	lsls	r3, r3, #2
 801c9b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c9b6:	4413      	add	r3, r2
 801c9b8:	681a      	ldr	r2, [r3, #0]
 801c9ba:	69fb      	ldr	r3, [r7, #28]
 801c9bc:	429a      	cmp	r2, r3
 801c9be:	d109      	bne.n	801c9d4 <nk_text_clamp+0xa8>
            sep_width = last_width = width;
 801c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9c6:	627b      	str	r3, [r7, #36]	; 0x24
            sep_g = g+1;
 801c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9ca:	3301      	adds	r3, #1
 801c9cc:	62bb      	str	r3, [r7, #40]	; 0x28
            sep_len = len;
 801c9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801c9d2:	e007      	b.n	801c9e4 <nk_text_clamp+0xb8>
            if (unicode != sep_list[i]) continue;
 801c9d4:	bf00      	nop
        for (i = 0; i < sep_count; ++i) {
 801c9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c9d8:	3301      	adds	r3, #1
 801c9da:	647b      	str	r3, [r7, #68]	; 0x44
 801c9dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c9de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c9e0:	429a      	cmp	r2, r3
 801c9e2:	dbe5      	blt.n	801c9b0 <nk_text_clamp+0x84>
        }
        if (i == sep_count){
 801c9e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c9e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c9e8:	429a      	cmp	r2, r3
 801c9ea:	d106      	bne.n	801c9fa <nk_text_clamp+0xce>
            last_width = sep_width = width;
 801c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9ee:	627b      	str	r3, [r7, #36]	; 0x24
 801c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
            sep_g = g+1;
 801c9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9f6:	3301      	adds	r3, #1
 801c9f8:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        width = s;
 801c9fa:	6a3b      	ldr	r3, [r7, #32]
 801c9fc:	63bb      	str	r3, [r7, #56]	; 0x38
        glyph_len = nk_utf_decode(&text[len], &unicode, text_len - len);
 801c9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca00:	693a      	ldr	r2, [r7, #16]
 801ca02:	18d0      	adds	r0, r2, r3
 801ca04:	68fa      	ldr	r2, [r7, #12]
 801ca06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca08:	1ad2      	subs	r2, r2, r3
 801ca0a:	f107 031c 	add.w	r3, r7, #28
 801ca0e:	4619      	mov	r1, r3
 801ca10:	f7ff fc52 	bl	801c2b8 <nk_utf_decode>
 801ca14:	6438      	str	r0, [r7, #64]	; 0x40
        g++;
 801ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca18:	3301      	adds	r3, #1
 801ca1a:	633b      	str	r3, [r7, #48]	; 0x30
    while (glyph_len && (width < space) && (len < text_len)) {
 801ca1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d00c      	beq.n	801ca3c <nk_text_clamp+0x110>
 801ca22:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801ca26:	edd7 7a02 	vldr	s15, [r7, #8]
 801ca2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ca2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca32:	d503      	bpl.n	801ca3c <nk_text_clamp+0x110>
 801ca34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	429a      	cmp	r2, r3
 801ca3a:	dba4      	blt.n	801c986 <nk_text_clamp+0x5a>
    }
    if (len >= text_len) {
 801ca3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	429a      	cmp	r2, r3
 801ca42:	db07      	blt.n	801ca54 <nk_text_clamp+0x128>
        *glyphs = g;
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca48:	601a      	str	r2, [r3, #0]
        *text_width = last_width;
 801ca4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ca4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ca4e:	601a      	str	r2, [r3, #0]
        return len;
 801ca50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca52:	e00b      	b.n	801ca6c <nk_text_clamp+0x140>
    } else {
        *glyphs = sep_g;
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca58:	601a      	str	r2, [r3, #0]
        *text_width = sep_width;
 801ca5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ca5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca5e:	601a      	str	r2, [r3, #0]
        return (!sep_len) ? len: sep_len;
 801ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d101      	bne.n	801ca6a <nk_text_clamp+0x13e>
 801ca66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca68:	e000      	b.n	801ca6c <nk_text_clamp+0x140>
 801ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
}
 801ca6c:	4618      	mov	r0, r3
 801ca6e:	3748      	adds	r7, #72	; 0x48
 801ca70:	46bd      	mov	sp, r7
 801ca72:	bd80      	pop	{r7, pc}

0801ca74 <nk_widget>:
        return 0;
    return nk_input_has_mouse_click_down_in_rect(&ctx->input, btn, bounds, down);
}
NK_API enum nk_widget_layout_states
nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)
{
 801ca74:	b590      	push	{r4, r7, lr}
 801ca76:	b08f      	sub	sp, #60	; 0x3c
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	6078      	str	r0, [r7, #4]
 801ca7c:	6039      	str	r1, [r7, #0]
    struct nk_rect c, v;
    struct nk_window *win;
    struct nk_panel *layout;
    const struct nk_input *in;

    NK_ASSERT(ctx);
 801ca7e:	683b      	ldr	r3, [r7, #0]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d105      	bne.n	801ca90 <nk_widget+0x1c>
 801ca84:	4b9d      	ldr	r3, [pc, #628]	; (801ccfc <nk_widget+0x288>)
 801ca86:	4a9e      	ldr	r2, [pc, #632]	; (801cd00 <nk_widget+0x28c>)
 801ca88:	218e      	movs	r1, #142	; 0x8e
 801ca8a:	489e      	ldr	r0, [pc, #632]	; (801cd04 <nk_widget+0x290>)
 801ca8c:	f001 fada 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 801ca90:	683b      	ldr	r3, [r7, #0]
 801ca92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca96:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d105      	bne.n	801caaa <nk_widget+0x36>
 801ca9e:	4b9a      	ldr	r3, [pc, #616]	; (801cd08 <nk_widget+0x294>)
 801caa0:	4a97      	ldr	r2, [pc, #604]	; (801cd00 <nk_widget+0x28c>)
 801caa2:	218f      	movs	r1, #143	; 0x8f
 801caa4:	4897      	ldr	r0, [pc, #604]	; (801cd04 <nk_widget+0x290>)
 801caa6:	f001 facd 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801caaa:	683b      	ldr	r3, [r7, #0]
 801caac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cab0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801cab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d105      	bne.n	801cac8 <nk_widget+0x54>
 801cabc:	4b93      	ldr	r3, [pc, #588]	; (801cd0c <nk_widget+0x298>)
 801cabe:	4a90      	ldr	r2, [pc, #576]	; (801cd00 <nk_widget+0x28c>)
 801cac0:	2190      	movs	r1, #144	; 0x90
 801cac2:	4890      	ldr	r0, [pc, #576]	; (801cd04 <nk_widget+0x290>)
 801cac4:	f001 fabe 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801cac8:	683b      	ldr	r3, [r7, #0]
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d00f      	beq.n	801caee <nk_widget+0x7a>
 801cace:	683b      	ldr	r3, [r7, #0]
 801cad0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cad4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d008      	beq.n	801caee <nk_widget+0x7a>
 801cadc:	683b      	ldr	r3, [r7, #0]
 801cade:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cae2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801cae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801caea:	2b00      	cmp	r3, #0
 801caec:	d101      	bne.n	801caf2 <nk_widget+0x7e>
        return NK_WIDGET_INVALID;
 801caee:	2300      	movs	r3, #0
 801caf0:	e167      	b.n	801cdc2 <nk_widget+0x34e>

    /* allocate space and check if the widget needs to be updated and drawn */
    nk_panel_alloc_space(bounds, ctx);
 801caf2:	6839      	ldr	r1, [r7, #0]
 801caf4:	6878      	ldr	r0, [r7, #4]
 801caf6:	f7f7 fcd7 	bl	80144a8 <nk_panel_alloc_space>
    win = ctx->current;
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cb00:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801cb04:	637b      	str	r3, [r7, #52]	; 0x34
    layout = win->layout;
 801cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cb0c:	633b      	str	r3, [r7, #48]	; 0x30
    in = &ctx->input;
 801cb0e:	683b      	ldr	r3, [r7, #0]
 801cb10:	62fb      	str	r3, [r7, #44]	; 0x2c
    c = layout->clip;
 801cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb14:	f107 041c 	add.w	r4, r7, #28
 801cb18:	333c      	adds	r3, #60	; 0x3c
 801cb1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cb1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 801cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb22:	685b      	ldr	r3, [r3, #4]
 801cb24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d005      	beq.n	801cb38 <nk_widget+0xc4>
 801cb2c:	4b78      	ldr	r3, [pc, #480]	; (801cd10 <nk_widget+0x29c>)
 801cb2e:	4a74      	ldr	r2, [pc, #464]	; (801cd00 <nk_widget+0x28c>)
 801cb30:	21a0      	movs	r1, #160	; 0xa0
 801cb32:	4874      	ldr	r0, [pc, #464]	; (801cd04 <nk_widget+0x290>)
 801cb34:	f001 fa86 	bl	801e044 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 801cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb3a:	685b      	ldr	r3, [r3, #4]
 801cb3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d005      	beq.n	801cb50 <nk_widget+0xdc>
 801cb44:	4b73      	ldr	r3, [pc, #460]	; (801cd14 <nk_widget+0x2a0>)
 801cb46:	4a6e      	ldr	r2, [pc, #440]	; (801cd00 <nk_widget+0x28c>)
 801cb48:	21a1      	movs	r1, #161	; 0xa1
 801cb4a:	486e      	ldr	r0, [pc, #440]	; (801cd04 <nk_widget+0x290>)
 801cb4c:	f001 fa7a 	bl	801e044 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 801cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb52:	685b      	ldr	r3, [r3, #4]
 801cb54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d005      	beq.n	801cb68 <nk_widget+0xf4>
 801cb5c:	4b6e      	ldr	r3, [pc, #440]	; (801cd18 <nk_widget+0x2a4>)
 801cb5e:	4a68      	ldr	r2, [pc, #416]	; (801cd00 <nk_widget+0x28c>)
 801cb60:	21a2      	movs	r1, #162	; 0xa2
 801cb62:	4868      	ldr	r0, [pc, #416]	; (801cd04 <nk_widget+0x290>)
 801cb64:	f001 fa6e 	bl	801e044 <__assert_func>

    /* need to convert to int here to remove floating point errors */
    bounds->x = (float)((int)bounds->x);
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	edd3 7a00 	vldr	s15, [r3]
 801cb6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	edc3 7a00 	vstr	s15, [r3]
    bounds->y = (float)((int)bounds->y);
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	edd3 7a01 	vldr	s15, [r3, #4]
 801cb82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->w = (float)((int)bounds->w);
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	edd3 7a02 	vldr	s15, [r3, #8]
 801cb96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	edc3 7a02 	vstr	s15, [r3, #8]
    bounds->h = (float)((int)bounds->h);
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	edd3 7a03 	vldr	s15, [r3, #12]
 801cbaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cbae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	edc3 7a03 	vstr	s15, [r3, #12]

    c.x = (float)((int)c.x);
 801cbb8:	edd7 7a07 	vldr	s15, [r7, #28]
 801cbbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cbc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbc4:	edc7 7a07 	vstr	s15, [r7, #28]
    c.y = (float)((int)c.y);
 801cbc8:	edd7 7a08 	vldr	s15, [r7, #32]
 801cbcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cbd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbd4:	edc7 7a08 	vstr	s15, [r7, #32]
    c.w = (float)((int)c.w);
 801cbd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801cbdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cbe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbe4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    c.h = (float)((int)c.h);
 801cbe8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801cbec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cbf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbf4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    nk_unify(&v, &c, bounds->x, bounds->y, bounds->x + bounds->w, bounds->y + bounds->h);
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	edd3 6a00 	vldr	s13, [r3]
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	ed93 6a01 	vldr	s12, [r3, #4]
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	ed93 7a00 	vldr	s14, [r3]
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	edd3 7a02 	vldr	s15, [r3, #8]
 801cc10:	ee77 5a27 	vadd.f32	s11, s14, s15
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	ed93 7a01 	vldr	s14, [r3, #4]
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	edd3 7a03 	vldr	s15, [r3, #12]
 801cc20:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cc24:	f107 021c 	add.w	r2, r7, #28
 801cc28:	f107 030c 	add.w	r3, r7, #12
 801cc2c:	eef0 1a67 	vmov.f32	s3, s15
 801cc30:	eeb0 1a65 	vmov.f32	s2, s11
 801cc34:	eef0 0a46 	vmov.f32	s1, s12
 801cc38:	eeb0 0a66 	vmov.f32	s0, s13
 801cc3c:	4611      	mov	r1, r2
 801cc3e:	4618      	mov	r0, r3
 801cc40:	f7f7 fd9e 	bl	8014780 <nk_unify>
    if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds->x, bounds->y, bounds->w, bounds->h))
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	ed93 7a00 	vldr	s14, [r3]
 801cc4a:	edd7 6a07 	vldr	s13, [r7, #28]
 801cc4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801cc52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cc56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc5e:	bf4c      	ite	mi
 801cc60:	2301      	movmi	r3, #1
 801cc62:	2300      	movpl	r3, #0
 801cc64:	b2db      	uxtb	r3, r3
 801cc66:	f083 0301 	eor.w	r3, r3, #1
 801cc6a:	b2db      	uxtb	r3, r3
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d143      	bne.n	801ccf8 <nk_widget+0x284>
 801cc70:	ed97 7a07 	vldr	s14, [r7, #28]
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	edd3 6a00 	vldr	s13, [r3]
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	edd3 7a02 	vldr	s15, [r3, #8]
 801cc80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cc84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc8c:	bf4c      	ite	mi
 801cc8e:	2301      	movmi	r3, #1
 801cc90:	2300      	movpl	r3, #0
 801cc92:	b2db      	uxtb	r3, r3
 801cc94:	f083 0301 	eor.w	r3, r3, #1
 801cc98:	b2db      	uxtb	r3, r3
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d12c      	bne.n	801ccf8 <nk_widget+0x284>
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	ed93 7a01 	vldr	s14, [r3, #4]
 801cca4:	edd7 6a08 	vldr	s13, [r7, #32]
 801cca8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801ccac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ccb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ccb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccb8:	bf4c      	ite	mi
 801ccba:	2301      	movmi	r3, #1
 801ccbc:	2300      	movpl	r3, #0
 801ccbe:	b2db      	uxtb	r3, r3
 801ccc0:	f083 0301 	eor.w	r3, r3, #1
 801ccc4:	b2db      	uxtb	r3, r3
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d116      	bne.n	801ccf8 <nk_widget+0x284>
 801ccca:	ed97 7a08 	vldr	s14, [r7, #32]
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	edd3 6a01 	vldr	s13, [r3, #4]
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	edd3 7a03 	vldr	s15, [r3, #12]
 801ccda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ccde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cce6:	bf4c      	ite	mi
 801cce8:	2301      	movmi	r3, #1
 801ccea:	2300      	movpl	r3, #0
 801ccec:	b2db      	uxtb	r3, r3
 801ccee:	f083 0301 	eor.w	r3, r3, #1
 801ccf2:	b2db      	uxtb	r3, r3
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d011      	beq.n	801cd1c <nk_widget+0x2a8>
        return NK_WIDGET_INVALID;
 801ccf8:	2300      	movs	r3, #0
 801ccfa:	e062      	b.n	801cdc2 <nk_widget+0x34e>
 801ccfc:	0802284c 	.word	0x0802284c
 801cd00:	08023e30 	.word	0x08023e30
 801cd04:	08022850 	.word	0x08022850
 801cd08:	0802286c 	.word	0x0802286c
 801cd0c:	0802287c 	.word	0x0802287c
 801cd10:	08022894 	.word	0x08022894
 801cd14:	080228bc 	.word	0x080228bc
 801cd18:	080228e0 	.word	0x080228e0
    if (!NK_INBOX(in->mouse.pos.x, in->mouse.pos.y, v.x, v.y, v.w, v.h))
 801cd1c:	ed97 7a03 	vldr	s14, [r7, #12]
 801cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd22:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801cd26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd2e:	bf94      	ite	ls
 801cd30:	2301      	movls	r3, #1
 801cd32:	2300      	movhi	r3, #0
 801cd34:	b2db      	uxtb	r3, r3
 801cd36:	f083 0301 	eor.w	r3, r3, #1
 801cd3a:	b2db      	uxtb	r3, r3
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d13d      	bne.n	801cdbc <nk_widget+0x348>
 801cd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd42:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801cd46:	edd7 6a03 	vldr	s13, [r7, #12]
 801cd4a:	edd7 7a05 	vldr	s15, [r7, #20]
 801cd4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cd52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd5a:	bf4c      	ite	mi
 801cd5c:	2301      	movmi	r3, #1
 801cd5e:	2300      	movpl	r3, #0
 801cd60:	b2db      	uxtb	r3, r3
 801cd62:	f083 0301 	eor.w	r3, r3, #1
 801cd66:	b2db      	uxtb	r3, r3
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d127      	bne.n	801cdbc <nk_widget+0x348>
 801cd6c:	ed97 7a04 	vldr	s14, [r7, #16]
 801cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd72:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801cd76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd7e:	bf94      	ite	ls
 801cd80:	2301      	movls	r3, #1
 801cd82:	2300      	movhi	r3, #0
 801cd84:	b2db      	uxtb	r3, r3
 801cd86:	f083 0301 	eor.w	r3, r3, #1
 801cd8a:	b2db      	uxtb	r3, r3
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d115      	bne.n	801cdbc <nk_widget+0x348>
 801cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd92:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801cd96:	edd7 6a04 	vldr	s13, [r7, #16]
 801cd9a:	edd7 7a06 	vldr	s15, [r7, #24]
 801cd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cda2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdaa:	bf4c      	ite	mi
 801cdac:	2301      	movmi	r3, #1
 801cdae:	2300      	movpl	r3, #0
 801cdb0:	b2db      	uxtb	r3, r3
 801cdb2:	f083 0301 	eor.w	r3, r3, #1
 801cdb6:	b2db      	uxtb	r3, r3
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d001      	beq.n	801cdc0 <nk_widget+0x34c>
        return NK_WIDGET_ROM;
 801cdbc:	2302      	movs	r3, #2
 801cdbe:	e000      	b.n	801cdc2 <nk_widget+0x34e>
    return NK_WIDGET_VALID;
 801cdc0:	2301      	movs	r3, #1
}
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	373c      	adds	r7, #60	; 0x3c
 801cdc6:	46bd      	mov	sp, r7
 801cdc8:	bd90      	pop	{r4, r7, pc}
 801cdca:	bf00      	nop

0801cdcc <nk_widget_fitting>:
NK_API enum nk_widget_layout_states
nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,
    struct nk_vec2 item_padding)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b086      	sub	sp, #24
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	60f8      	str	r0, [r7, #12]
 801cdd4:	60b9      	str	r1, [r7, #8]
 801cdd6:	eeb0 7a40 	vmov.f32	s14, s0
 801cdda:	eef0 7a60 	vmov.f32	s15, s1
 801cdde:	ed87 7a00 	vstr	s14, [r7]
 801cde2:	edc7 7a01 	vstr	s15, [r7, #4]
    /* update the bounds to stand without padding  */
    enum nk_widget_layout_states state;
    NK_UNUSED(item_padding);

    NK_ASSERT(ctx);
 801cde6:	68bb      	ldr	r3, [r7, #8]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d105      	bne.n	801cdf8 <nk_widget_fitting+0x2c>
 801cdec:	4b20      	ldr	r3, [pc, #128]	; (801ce70 <nk_widget_fitting+0xa4>)
 801cdee:	4a21      	ldr	r2, [pc, #132]	; (801ce74 <nk_widget_fitting+0xa8>)
 801cdf0:	21be      	movs	r1, #190	; 0xbe
 801cdf2:	4821      	ldr	r0, [pc, #132]	; (801ce78 <nk_widget_fitting+0xac>)
 801cdf4:	f001 f926 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 801cdf8:	68bb      	ldr	r3, [r7, #8]
 801cdfa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cdfe:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d105      	bne.n	801ce12 <nk_widget_fitting+0x46>
 801ce06:	4b1d      	ldr	r3, [pc, #116]	; (801ce7c <nk_widget_fitting+0xb0>)
 801ce08:	4a1a      	ldr	r2, [pc, #104]	; (801ce74 <nk_widget_fitting+0xa8>)
 801ce0a:	21bf      	movs	r1, #191	; 0xbf
 801ce0c:	481a      	ldr	r0, [pc, #104]	; (801ce78 <nk_widget_fitting+0xac>)
 801ce0e:	f001 f919 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801ce12:	68bb      	ldr	r3, [r7, #8]
 801ce14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ce18:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ce1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d105      	bne.n	801ce30 <nk_widget_fitting+0x64>
 801ce24:	4b16      	ldr	r3, [pc, #88]	; (801ce80 <nk_widget_fitting+0xb4>)
 801ce26:	4a13      	ldr	r2, [pc, #76]	; (801ce74 <nk_widget_fitting+0xa8>)
 801ce28:	21c0      	movs	r1, #192	; 0xc0
 801ce2a:	4813      	ldr	r0, [pc, #76]	; (801ce78 <nk_widget_fitting+0xac>)
 801ce2c:	f001 f90a 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801ce30:	68bb      	ldr	r3, [r7, #8]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d00f      	beq.n	801ce56 <nk_widget_fitting+0x8a>
 801ce36:	68bb      	ldr	r3, [r7, #8]
 801ce38:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ce3c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d008      	beq.n	801ce56 <nk_widget_fitting+0x8a>
 801ce44:	68bb      	ldr	r3, [r7, #8]
 801ce46:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ce4a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ce4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d101      	bne.n	801ce5a <nk_widget_fitting+0x8e>
        return NK_WIDGET_INVALID;
 801ce56:	2300      	movs	r3, #0
 801ce58:	e006      	b.n	801ce68 <nk_widget_fitting+0x9c>

    state = nk_widget(bounds, ctx);
 801ce5a:	68b9      	ldr	r1, [r7, #8]
 801ce5c:	68f8      	ldr	r0, [r7, #12]
 801ce5e:	f7ff fe09 	bl	801ca74 <nk_widget>
 801ce62:	4603      	mov	r3, r0
 801ce64:	75fb      	strb	r3, [r7, #23]
    return state;
 801ce66:	7dfb      	ldrb	r3, [r7, #23]
}
 801ce68:	4618      	mov	r0, r3
 801ce6a:	3718      	adds	r7, #24
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bd80      	pop	{r7, pc}
 801ce70:	0802284c 	.word	0x0802284c
 801ce74:	08023e3c 	.word	0x08023e3c
 801ce78:	08022850 	.word	0x08022850
 801ce7c:	0802286c 	.word	0x0802286c
 801ce80:	0802287c 	.word	0x0802287c

0801ce84 <nk_create_window>:
 *                              WINDOW
 *
 * ===============================================================*/
NK_LIB void*
nk_create_window(struct nk_context *ctx)
{
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b084      	sub	sp, #16
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801ce8c:	6878      	ldr	r0, [r7, #4]
 801ce8e:	f7f7 fee9 	bl	8014c64 <nk_create_page_element>
 801ce92:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d101      	bne.n	801ce9e <nk_create_window+0x1a>
 801ce9a:	2300      	movs	r3, #0
 801ce9c:	e007      	b.n	801ceae <nk_create_window+0x2a>
    elem->data.win.seq = ctx->seq;
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cea4:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	601a      	str	r2, [r3, #0]
    return &elem->data.win;
 801ceac:	68fb      	ldr	r3, [r7, #12]
}
 801ceae:	4618      	mov	r0, r3
 801ceb0:	3710      	adds	r7, #16
 801ceb2:	46bd      	mov	sp, r7
 801ceb4:	bd80      	pop	{r7, pc}

0801ceb6 <nk_free_window>:
NK_LIB void
nk_free_window(struct nk_context *ctx, struct nk_window *win)
{
 801ceb6:	b580      	push	{r7, lr}
 801ceb8:	b086      	sub	sp, #24
 801ceba:	af00      	add	r7, sp, #0
 801cebc:	6078      	str	r0, [r7, #4]
 801cebe:	6039      	str	r1, [r7, #0]
    /* unlink windows from list */
    struct nk_table *it = win->tables;
 801cec0:	683b      	ldr	r3, [r7, #0]
 801cec2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801cec6:	617b      	str	r3, [r7, #20]
    if (win->popup.win) {
 801cec8:	683b      	ldr	r3, [r7, #0]
 801ceca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d00a      	beq.n	801cee8 <nk_free_window+0x32>
        nk_free_window(ctx, win->popup.win);
 801ced2:	683b      	ldr	r3, [r7, #0]
 801ced4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801ced8:	4619      	mov	r1, r3
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f7ff ffeb 	bl	801ceb6 <nk_free_window>
        win->popup.win = 0;
 801cee0:	683b      	ldr	r3, [r7, #0]
 801cee2:	2200      	movs	r2, #0
 801cee4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    }
    win->next = 0;
 801cee8:	683b      	ldr	r3, [r7, #0]
 801ceea:	2200      	movs	r2, #0
 801ceec:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 801cef0:	683b      	ldr	r3, [r7, #0]
 801cef2:	2200      	movs	r2, #0
 801cef4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    while (it) {
 801cef8:	e017      	b.n	801cf2a <nk_free_window+0x74>
        /*free window state tables */
        struct nk_table *n = it->next;
 801cefa:	697b      	ldr	r3, [r7, #20]
 801cefc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801cf00:	60bb      	str	r3, [r7, #8]
        nk_remove_table(win, it);
 801cf02:	6979      	ldr	r1, [r7, #20]
 801cf04:	6838      	ldr	r0, [r7, #0]
 801cf06:	f7fe f8f8 	bl	801b0fa <nk_remove_table>
        nk_free_table(ctx, it);
 801cf0a:	6979      	ldr	r1, [r7, #20]
 801cf0c:	6878      	ldr	r0, [r7, #4]
 801cf0e:	f7fe f8a2 	bl	801b056 <nk_free_table>
        if (it == win->tables)
 801cf12:	683b      	ldr	r3, [r7, #0]
 801cf14:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801cf18:	697a      	ldr	r2, [r7, #20]
 801cf1a:	429a      	cmp	r2, r3
 801cf1c:	d103      	bne.n	801cf26 <nk_free_window+0x70>
            win->tables = n;
 801cf1e:	683b      	ldr	r3, [r7, #0]
 801cf20:	68ba      	ldr	r2, [r7, #8]
 801cf22:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        it = n;
 801cf26:	68bb      	ldr	r3, [r7, #8]
 801cf28:	617b      	str	r3, [r7, #20]
    while (it) {
 801cf2a:	697b      	ldr	r3, [r7, #20]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d1e4      	bne.n	801cefa <nk_free_window+0x44>
    }

    /* link windows into freelist */
    {union nk_page_data *pd = NK_CONTAINER_OF(win, union nk_page_data, win);
 801cf30:	683b      	ldr	r3, [r7, #0]
 801cf32:	613b      	str	r3, [r7, #16]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801cf34:	693b      	ldr	r3, [r7, #16]
 801cf36:	60fb      	str	r3, [r7, #12]
    nk_free_page_element(ctx, pe);}
 801cf38:	68f9      	ldr	r1, [r7, #12]
 801cf3a:	6878      	ldr	r0, [r7, #4]
 801cf3c:	f7f7 ff29 	bl	8014d92 <nk_free_page_element>
}
 801cf40:	bf00      	nop
 801cf42:	3718      	adds	r7, #24
 801cf44:	46bd      	mov	sp, r7
 801cf46:	bd80      	pop	{r7, pc}

0801cf48 <nk_find_window>:
NK_LIB struct nk_window*
nk_find_window(struct nk_context *ctx, nk_hash hash, const char *name)
{
 801cf48:	b580      	push	{r7, lr}
 801cf4a:	b086      	sub	sp, #24
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	60f8      	str	r0, [r7, #12]
 801cf50:	60b9      	str	r1, [r7, #8]
 801cf52:	607a      	str	r2, [r7, #4]
    struct nk_window *iter;
    iter = ctx->begin;
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cf5a:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801cf5e:	617b      	str	r3, [r7, #20]
    while (iter) {
 801cf60:	e026      	b.n	801cfb0 <nk_find_window+0x68>
        NK_ASSERT(iter != iter->next);
 801cf62:	697b      	ldr	r3, [r7, #20]
 801cf64:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801cf68:	697a      	ldr	r2, [r7, #20]
 801cf6a:	429a      	cmp	r2, r3
 801cf6c:	d105      	bne.n	801cf7a <nk_find_window+0x32>
 801cf6e:	4b14      	ldr	r3, [pc, #80]	; (801cfc0 <nk_find_window+0x78>)
 801cf70:	4a14      	ldr	r2, [pc, #80]	; (801cfc4 <nk_find_window+0x7c>)
 801cf72:	2133      	movs	r1, #51	; 0x33
 801cf74:	4814      	ldr	r0, [pc, #80]	; (801cfc8 <nk_find_window+0x80>)
 801cf76:	f001 f865 	bl	801e044 <__assert_func>
        if (iter->name == hash) {
 801cf7a:	697b      	ldr	r3, [r7, #20]
 801cf7c:	685b      	ldr	r3, [r3, #4]
 801cf7e:	68ba      	ldr	r2, [r7, #8]
 801cf80:	429a      	cmp	r2, r3
 801cf82:	d111      	bne.n	801cfa8 <nk_find_window+0x60>
            int max_len = nk_strlen(iter->name_string);
 801cf84:	697b      	ldr	r3, [r7, #20]
 801cf86:	3308      	adds	r3, #8
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7ff fb81 	bl	801c690 <nk_strlen>
 801cf8e:	6138      	str	r0, [r7, #16]
            if (!nk_stricmpn(iter->name_string, name, max_len))
 801cf90:	697b      	ldr	r3, [r7, #20]
 801cf92:	3308      	adds	r3, #8
 801cf94:	693a      	ldr	r2, [r7, #16]
 801cf96:	6879      	ldr	r1, [r7, #4]
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f7ff fb9f 	bl	801c6dc <nk_stricmpn>
 801cf9e:	4603      	mov	r3, r0
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d101      	bne.n	801cfa8 <nk_find_window+0x60>
                return iter;
 801cfa4:	697b      	ldr	r3, [r7, #20]
 801cfa6:	e007      	b.n	801cfb8 <nk_find_window+0x70>
        }
        iter = iter->next;
 801cfa8:	697b      	ldr	r3, [r7, #20]
 801cfaa:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801cfae:	617b      	str	r3, [r7, #20]
    while (iter) {
 801cfb0:	697b      	ldr	r3, [r7, #20]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d1d5      	bne.n	801cf62 <nk_find_window+0x1a>
    }
    return 0;
 801cfb6:	2300      	movs	r3, #0
}
 801cfb8:	4618      	mov	r0, r3
 801cfba:	3718      	adds	r7, #24
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	bd80      	pop	{r7, pc}
 801cfc0:	08022904 	.word	0x08022904
 801cfc4:	08023e50 	.word	0x08023e50
 801cfc8:	08022918 	.word	0x08022918

0801cfcc <nk_insert_window>:
NK_LIB void
nk_insert_window(struct nk_context *ctx, struct nk_window *win,
    enum nk_window_insert_location loc)
{
 801cfcc:	b580      	push	{r7, lr}
 801cfce:	b086      	sub	sp, #24
 801cfd0:	af00      	add	r7, sp, #0
 801cfd2:	60f8      	str	r0, [r7, #12]
 801cfd4:	60b9      	str	r1, [r7, #8]
 801cfd6:	4613      	mov	r3, r2
 801cfd8:	71fb      	strb	r3, [r7, #7]
    const struct nk_window *iter;
    NK_ASSERT(ctx);
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d105      	bne.n	801cfec <nk_insert_window+0x20>
 801cfe0:	4b6f      	ldr	r3, [pc, #444]	; (801d1a0 <nk_insert_window+0x1d4>)
 801cfe2:	4a70      	ldr	r2, [pc, #448]	; (801d1a4 <nk_insert_window+0x1d8>)
 801cfe4:	2142      	movs	r1, #66	; 0x42
 801cfe6:	4870      	ldr	r0, [pc, #448]	; (801d1a8 <nk_insert_window+0x1dc>)
 801cfe8:	f001 f82c 	bl	801e044 <__assert_func>
    NK_ASSERT(win);
 801cfec:	68bb      	ldr	r3, [r7, #8]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d105      	bne.n	801cffe <nk_insert_window+0x32>
 801cff2:	4b6e      	ldr	r3, [pc, #440]	; (801d1ac <nk_insert_window+0x1e0>)
 801cff4:	4a6b      	ldr	r2, [pc, #428]	; (801d1a4 <nk_insert_window+0x1d8>)
 801cff6:	2143      	movs	r1, #67	; 0x43
 801cff8:	486b      	ldr	r0, [pc, #428]	; (801d1a8 <nk_insert_window+0x1dc>)
 801cffa:	f001 f823 	bl	801e044 <__assert_func>
    if (!win || !ctx) return;
 801cffe:	68bb      	ldr	r3, [r7, #8]
 801d000:	2b00      	cmp	r3, #0
 801d002:	f000 80c6 	beq.w	801d192 <nk_insert_window+0x1c6>
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	f000 80c2 	beq.w	801d192 <nk_insert_window+0x1c6>

    iter = ctx->begin;
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d014:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d018:	617b      	str	r3, [r7, #20]
    while (iter) {
 801d01a:	e01e      	b.n	801d05a <nk_insert_window+0x8e>
        NK_ASSERT(iter != iter->next);
 801d01c:	697b      	ldr	r3, [r7, #20]
 801d01e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d022:	697a      	ldr	r2, [r7, #20]
 801d024:	429a      	cmp	r2, r3
 801d026:	d105      	bne.n	801d034 <nk_insert_window+0x68>
 801d028:	4b61      	ldr	r3, [pc, #388]	; (801d1b0 <nk_insert_window+0x1e4>)
 801d02a:	4a5e      	ldr	r2, [pc, #376]	; (801d1a4 <nk_insert_window+0x1d8>)
 801d02c:	2148      	movs	r1, #72	; 0x48
 801d02e:	485e      	ldr	r0, [pc, #376]	; (801d1a8 <nk_insert_window+0x1dc>)
 801d030:	f001 f808 	bl	801e044 <__assert_func>
        NK_ASSERT(iter != win);
 801d034:	697a      	ldr	r2, [r7, #20]
 801d036:	68bb      	ldr	r3, [r7, #8]
 801d038:	429a      	cmp	r2, r3
 801d03a:	d105      	bne.n	801d048 <nk_insert_window+0x7c>
 801d03c:	4b5d      	ldr	r3, [pc, #372]	; (801d1b4 <nk_insert_window+0x1e8>)
 801d03e:	4a59      	ldr	r2, [pc, #356]	; (801d1a4 <nk_insert_window+0x1d8>)
 801d040:	2149      	movs	r1, #73	; 0x49
 801d042:	4859      	ldr	r0, [pc, #356]	; (801d1a8 <nk_insert_window+0x1dc>)
 801d044:	f000 fffe 	bl	801e044 <__assert_func>
        if (iter == win) return;
 801d048:	697a      	ldr	r2, [r7, #20]
 801d04a:	68bb      	ldr	r3, [r7, #8]
 801d04c:	429a      	cmp	r2, r3
 801d04e:	f000 80a2 	beq.w	801d196 <nk_insert_window+0x1ca>
        iter = iter->next;
 801d052:	697b      	ldr	r3, [r7, #20]
 801d054:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d058:	617b      	str	r3, [r7, #20]
    while (iter) {
 801d05a:	697b      	ldr	r3, [r7, #20]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d1dd      	bne.n	801d01c <nk_insert_window+0x50>
    }

    if (!ctx->begin) {
 801d060:	68fb      	ldr	r3, [r7, #12]
 801d062:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d066:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d11d      	bne.n	801d0aa <nk_insert_window+0xde>
        win->next = 0;
 801d06e:	68bb      	ldr	r3, [r7, #8]
 801d070:	2200      	movs	r2, #0
 801d072:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 801d076:	68bb      	ldr	r3, [r7, #8]
 801d078:	2200      	movs	r2, #0
 801d07a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 801d07e:	68fb      	ldr	r3, [r7, #12]
 801d080:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d084:	461a      	mov	r2, r3
 801d086:	68bb      	ldr	r3, [r7, #8]
 801d088:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->end = win;
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d092:	461a      	mov	r2, r3
 801d094:	68bb      	ldr	r3, [r7, #8]
 801d096:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->count = 1;
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d0a0:	461a      	mov	r2, r3
 801d0a2:	2301      	movs	r3, #1
 801d0a4:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
        return;
 801d0a8:	e076      	b.n	801d198 <nk_insert_window+0x1cc>
    }
    if (loc == NK_INSERT_BACK) {
 801d0aa:	79fb      	ldrb	r3, [r7, #7]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d13b      	bne.n	801d128 <nk_insert_window+0x15c>
        struct nk_window *end;
        end = ctx->end;
 801d0b0:	68fb      	ldr	r3, [r7, #12]
 801d0b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d0b6:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d0ba:	613b      	str	r3, [r7, #16]
        end->flags |= NK_WINDOW_ROM;
 801d0bc:	693b      	ldr	r3, [r7, #16]
 801d0be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d0c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801d0c4:	693b      	ldr	r3, [r7, #16]
 801d0c6:	649a      	str	r2, [r3, #72]	; 0x48
        end->next = win;
 801d0c8:	693b      	ldr	r3, [r7, #16]
 801d0ca:	68ba      	ldr	r2, [r7, #8]
 801d0cc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = ctx->end;
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d0d6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
 801d0da:	68bb      	ldr	r3, [r7, #8]
 801d0dc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = 0;
 801d0e0:	68bb      	ldr	r3, [r7, #8]
 801d0e2:	2200      	movs	r2, #0
 801d0e4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ctx->end = win;
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d0ee:	461a      	mov	r2, r3
 801d0f0:	68bb      	ldr	r3, [r7, #8]
 801d0f2:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->active = ctx->end;
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d0fc:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d100:	68fa      	ldr	r2, [r7, #12]
 801d102:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801d106:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d110:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d114:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d11c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d120:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d124:	649a      	str	r2, [r3, #72]	; 0x48
 801d126:	e028      	b.n	801d17a <nk_insert_window+0x1ae>
    } else {
        /*ctx->end->flags |= NK_WINDOW_ROM;*/
        ctx->begin->prev = win;
 801d128:	68fb      	ldr	r3, [r7, #12]
 801d12a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d12e:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d132:	68ba      	ldr	r2, [r7, #8]
 801d134:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = ctx->begin;
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d13e:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
 801d142:	68bb      	ldr	r3, [r7, #8]
 801d144:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 801d148:	68bb      	ldr	r3, [r7, #8]
 801d14a:	2200      	movs	r2, #0
 801d14c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d156:	461a      	mov	r2, r3
 801d158:	68bb      	ldr	r3, [r7, #8]
 801d15a:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d164:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d168:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d170:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d174:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d178:	649a      	str	r2, [r3, #72]	; 0x48
    }
    ctx->count++;
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d180:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801d184:	3301      	adds	r3, #1
 801d186:	68fa      	ldr	r2, [r7, #12]
 801d188:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801d18c:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
 801d190:	e002      	b.n	801d198 <nk_insert_window+0x1cc>
    if (!win || !ctx) return;
 801d192:	bf00      	nop
 801d194:	e000      	b.n	801d198 <nk_insert_window+0x1cc>
        if (iter == win) return;
 801d196:	bf00      	nop
}
 801d198:	3718      	adds	r7, #24
 801d19a:	46bd      	mov	sp, r7
 801d19c:	bd80      	pop	{r7, pc}
 801d19e:	bf00      	nop
 801d1a0:	08022934 	.word	0x08022934
 801d1a4:	08023e60 	.word	0x08023e60
 801d1a8:	08022918 	.word	0x08022918
 801d1ac:	08022938 	.word	0x08022938
 801d1b0:	08022904 	.word	0x08022904
 801d1b4:	0802293c 	.word	0x0802293c

0801d1b8 <nk_remove_window>:
NK_LIB void
nk_remove_window(struct nk_context *ctx, struct nk_window *win)
{
 801d1b8:	b480      	push	{r7}
 801d1ba:	b083      	sub	sp, #12
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
 801d1c0:	6039      	str	r1, [r7, #0]
    if (win == ctx->begin || win == ctx->end) {
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d1c8:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d1cc:	683a      	ldr	r2, [r7, #0]
 801d1ce:	429a      	cmp	r2, r3
 801d1d0:	d007      	beq.n	801d1e2 <nk_remove_window+0x2a>
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d1d8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d1dc:	683a      	ldr	r2, [r7, #0]
 801d1de:	429a      	cmp	r2, r3
 801d1e0:	d136      	bne.n	801d250 <nk_remove_window+0x98>
        if (win == ctx->begin) {
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d1e8:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d1ec:	683a      	ldr	r2, [r7, #0]
 801d1ee:	429a      	cmp	r2, r3
 801d1f0:	d112      	bne.n	801d218 <nk_remove_window+0x60>
            ctx->begin = win->next;
 801d1f2:	683b      	ldr	r3, [r7, #0]
 801d1f4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d1f8:	687a      	ldr	r2, [r7, #4]
 801d1fa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801d1fe:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (win->next)
 801d202:	683b      	ldr	r3, [r7, #0]
 801d204:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d005      	beq.n	801d218 <nk_remove_window+0x60>
                win->next->prev = 0;
 801d20c:	683b      	ldr	r3, [r7, #0]
 801d20e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d212:	2200      	movs	r2, #0
 801d214:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        }
        if (win == ctx->end) {
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d21e:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d222:	683a      	ldr	r2, [r7, #0]
 801d224:	429a      	cmp	r2, r3
 801d226:	d12e      	bne.n	801d286 <nk_remove_window+0xce>
            ctx->end = win->prev;
 801d228:	683b      	ldr	r3, [r7, #0]
 801d22a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801d22e:	687a      	ldr	r2, [r7, #4]
 801d230:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801d234:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (win->prev)
 801d238:	683b      	ldr	r3, [r7, #0]
 801d23a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d021      	beq.n	801d286 <nk_remove_window+0xce>
                win->prev->next = 0;
 801d242:	683b      	ldr	r3, [r7, #0]
 801d244:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801d248:	2200      	movs	r2, #0
 801d24a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        if (win == ctx->end) {
 801d24e:	e01a      	b.n	801d286 <nk_remove_window+0xce>
        }
    } else {
        if (win->next)
 801d250:	683b      	ldr	r3, [r7, #0]
 801d252:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d256:	2b00      	cmp	r3, #0
 801d258:	d007      	beq.n	801d26a <nk_remove_window+0xb2>
            win->next->prev = win->prev;
 801d25a:	683b      	ldr	r3, [r7, #0]
 801d25c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d260:	683a      	ldr	r2, [r7, #0]
 801d262:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
 801d266:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if (win->prev)
 801d26a:	683b      	ldr	r3, [r7, #0]
 801d26c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801d270:	2b00      	cmp	r3, #0
 801d272:	d009      	beq.n	801d288 <nk_remove_window+0xd0>
            win->prev->next = win->next;
 801d274:	683b      	ldr	r3, [r7, #0]
 801d276:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801d27a:	683a      	ldr	r2, [r7, #0]
 801d27c:	f8d2 2178 	ldr.w	r2, [r2, #376]	; 0x178
 801d280:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 801d284:	e000      	b.n	801d288 <nk_remove_window+0xd0>
        if (win == ctx->end) {
 801d286:	bf00      	nop
    }
    if (win == ctx->active || !ctx->active) {
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d28e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801d292:	683a      	ldr	r2, [r7, #0]
 801d294:	429a      	cmp	r2, r3
 801d296:	d006      	beq.n	801d2a6 <nk_remove_window+0xee>
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d29e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d11e      	bne.n	801d2e4 <nk_remove_window+0x12c>
        ctx->active = ctx->end;
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d2ac:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d2b0:	687a      	ldr	r2, [r7, #4]
 801d2b2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801d2b6:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        if (ctx->end)
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d2c0:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d00d      	beq.n	801d2e4 <nk_remove_window+0x12c>
            ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d2ce:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d2d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d2da:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d2de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d2e2:	649a      	str	r2, [r3, #72]	; 0x48
    }
    win->next = 0;
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 801d2ec:	683b      	ldr	r3, [r7, #0]
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    ctx->count--;
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d2fa:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801d2fe:	3b01      	subs	r3, #1
 801d300:	687a      	ldr	r2, [r7, #4]
 801d302:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801d306:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
}
 801d30a:	bf00      	nop
 801d30c:	370c      	adds	r7, #12
 801d30e:	46bd      	mov	sp, r7
 801d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d314:	4770      	bx	lr

0801d316 <nk_begin>:
NK_API nk_bool
nk_begin(struct nk_context *ctx, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 801d316:	b580      	push	{r7, lr}
 801d318:	b088      	sub	sp, #32
 801d31a:	af00      	add	r7, sp, #0
 801d31c:	61f8      	str	r0, [r7, #28]
 801d31e:	61b9      	str	r1, [r7, #24]
 801d320:	eeb0 6a40 	vmov.f32	s12, s0
 801d324:	eef0 6a60 	vmov.f32	s13, s1
 801d328:	eeb0 7a41 	vmov.f32	s14, s2
 801d32c:	eef0 7a61 	vmov.f32	s15, s3
 801d330:	607a      	str	r2, [r7, #4]
 801d332:	ed87 6a02 	vstr	s12, [r7, #8]
 801d336:	edc7 6a03 	vstr	s13, [r7, #12]
 801d33a:	ed87 7a04 	vstr	s14, [r7, #16]
 801d33e:	edc7 7a05 	vstr	s15, [r7, #20]
    return nk_begin_titled(ctx, title, title, bounds, flags);
 801d342:	ed97 6a02 	vldr	s12, [r7, #8]
 801d346:	edd7 6a03 	vldr	s13, [r7, #12]
 801d34a:	ed97 7a04 	vldr	s14, [r7, #16]
 801d34e:	edd7 7a05 	vldr	s15, [r7, #20]
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	eeb0 0a46 	vmov.f32	s0, s12
 801d358:	eef0 0a66 	vmov.f32	s1, s13
 801d35c:	eeb0 1a47 	vmov.f32	s2, s14
 801d360:	eef0 1a67 	vmov.f32	s3, s15
 801d364:	69ba      	ldr	r2, [r7, #24]
 801d366:	69b9      	ldr	r1, [r7, #24]
 801d368:	69f8      	ldr	r0, [r7, #28]
 801d36a:	f000 f805 	bl	801d378 <nk_begin_titled>
 801d36e:	4603      	mov	r3, r0
}
 801d370:	4618      	mov	r0, r3
 801d372:	3720      	adds	r7, #32
 801d374:	46bd      	mov	sp, r7
 801d376:	bd80      	pop	{r7, pc}

0801d378 <nk_begin_titled>:
NK_API nk_bool
nk_begin_titled(struct nk_context *ctx, const char *name, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 801d378:	b590      	push	{r4, r7, lr}
 801d37a:	b09f      	sub	sp, #124	; 0x7c
 801d37c:	af00      	add	r7, sp, #0
 801d37e:	61f8      	str	r0, [r7, #28]
 801d380:	61b9      	str	r1, [r7, #24]
 801d382:	617a      	str	r2, [r7, #20]
 801d384:	eeb0 6a40 	vmov.f32	s12, s0
 801d388:	eef0 6a60 	vmov.f32	s13, s1
 801d38c:	eeb0 7a41 	vmov.f32	s14, s2
 801d390:	eef0 7a61 	vmov.f32	s15, s3
 801d394:	603b      	str	r3, [r7, #0]
 801d396:	ed87 6a01 	vstr	s12, [r7, #4]
 801d39a:	edc7 6a02 	vstr	s13, [r7, #8]
 801d39e:	ed87 7a03 	vstr	s14, [r7, #12]
 801d3a2:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *win;
    struct nk_style *style;
    nk_hash name_hash;
    int name_len;
    int ret = 0;
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	66fb      	str	r3, [r7, #108]	; 0x6c

    NK_ASSERT(ctx);
 801d3aa:	69fb      	ldr	r3, [r7, #28]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d105      	bne.n	801d3bc <nk_begin_titled+0x44>
 801d3b0:	4b8f      	ldr	r3, [pc, #572]	; (801d5f0 <nk_begin_titled+0x278>)
 801d3b2:	4a90      	ldr	r2, [pc, #576]	; (801d5f4 <nk_begin_titled+0x27c>)
 801d3b4:	2197      	movs	r1, #151	; 0x97
 801d3b6:	4890      	ldr	r0, [pc, #576]	; (801d5f8 <nk_begin_titled+0x280>)
 801d3b8:	f000 fe44 	bl	801e044 <__assert_func>
    NK_ASSERT(name);
 801d3bc:	69bb      	ldr	r3, [r7, #24]
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d105      	bne.n	801d3ce <nk_begin_titled+0x56>
 801d3c2:	4b8e      	ldr	r3, [pc, #568]	; (801d5fc <nk_begin_titled+0x284>)
 801d3c4:	4a8b      	ldr	r2, [pc, #556]	; (801d5f4 <nk_begin_titled+0x27c>)
 801d3c6:	2198      	movs	r1, #152	; 0x98
 801d3c8:	488b      	ldr	r0, [pc, #556]	; (801d5f8 <nk_begin_titled+0x280>)
 801d3ca:	f000 fe3b 	bl	801e044 <__assert_func>
    NK_ASSERT(title);
 801d3ce:	697b      	ldr	r3, [r7, #20]
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d105      	bne.n	801d3e0 <nk_begin_titled+0x68>
 801d3d4:	4b8a      	ldr	r3, [pc, #552]	; (801d600 <nk_begin_titled+0x288>)
 801d3d6:	4a87      	ldr	r2, [pc, #540]	; (801d5f4 <nk_begin_titled+0x27c>)
 801d3d8:	2199      	movs	r1, #153	; 0x99
 801d3da:	4887      	ldr	r0, [pc, #540]	; (801d5f8 <nk_begin_titled+0x280>)
 801d3dc:	f000 fe32 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");
 801d3e0:	69fb      	ldr	r3, [r7, #28]
 801d3e2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d005      	beq.n	801d3f6 <nk_begin_titled+0x7e>
 801d3ea:	69fb      	ldr	r3, [r7, #28]
 801d3ec:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801d3f0:	689b      	ldr	r3, [r3, #8]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d105      	bne.n	801d402 <nk_begin_titled+0x8a>
 801d3f6:	4b83      	ldr	r3, [pc, #524]	; (801d604 <nk_begin_titled+0x28c>)
 801d3f8:	4a7e      	ldr	r2, [pc, #504]	; (801d5f4 <nk_begin_titled+0x27c>)
 801d3fa:	219a      	movs	r1, #154	; 0x9a
 801d3fc:	487e      	ldr	r0, [pc, #504]	; (801d5f8 <nk_begin_titled+0x280>)
 801d3fe:	f000 fe21 	bl	801e044 <__assert_func>
    NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");
 801d402:	69fb      	ldr	r3, [r7, #28]
 801d404:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d408:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d005      	beq.n	801d41c <nk_begin_titled+0xa4>
 801d410:	4b7d      	ldr	r3, [pc, #500]	; (801d608 <nk_begin_titled+0x290>)
 801d412:	4a78      	ldr	r2, [pc, #480]	; (801d5f4 <nk_begin_titled+0x27c>)
 801d414:	219b      	movs	r1, #155	; 0x9b
 801d416:	4878      	ldr	r0, [pc, #480]	; (801d5f8 <nk_begin_titled+0x280>)
 801d418:	f000 fe14 	bl	801e044 <__assert_func>
    if (!ctx || ctx->current || !title || !name)
 801d41c:	69fb      	ldr	r3, [r7, #28]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d00c      	beq.n	801d43c <nk_begin_titled+0xc4>
 801d422:	69fb      	ldr	r3, [r7, #28]
 801d424:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d428:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d105      	bne.n	801d43c <nk_begin_titled+0xc4>
 801d430:	697b      	ldr	r3, [r7, #20]
 801d432:	2b00      	cmp	r3, #0
 801d434:	d002      	beq.n	801d43c <nk_begin_titled+0xc4>
 801d436:	69bb      	ldr	r3, [r7, #24]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d101      	bne.n	801d440 <nk_begin_titled+0xc8>
        return 0;
 801d43c:	2300      	movs	r3, #0
 801d43e:	e3d7      	b.n	801dbf0 <nk_begin_titled+0x878>

    /* find or create window */
    style = &ctx->style;
 801d440:	69fb      	ldr	r3, [r7, #28]
 801d442:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801d446:	66bb      	str	r3, [r7, #104]	; 0x68
    name_len = (int)nk_strlen(name);
 801d448:	69b8      	ldr	r0, [r7, #24]
 801d44a:	f7ff f921 	bl	801c690 <nk_strlen>
 801d44e:	6678      	str	r0, [r7, #100]	; 0x64
    name_hash = nk_murmur_hash(name, (int)name_len, NK_WINDOW_TITLE);
 801d450:	2240      	movs	r2, #64	; 0x40
 801d452:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d454:	69b8      	ldr	r0, [r7, #24]
 801d456:	f7ff f99b 	bl	801c790 <nk_murmur_hash>
 801d45a:	6638      	str	r0, [r7, #96]	; 0x60
    win = nk_find_window(ctx, name_hash, name);
 801d45c:	69ba      	ldr	r2, [r7, #24]
 801d45e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d460:	69f8      	ldr	r0, [r7, #28]
 801d462:	f7ff fd71 	bl	801cf48 <nk_find_window>
 801d466:	6778      	str	r0, [r7, #116]	; 0x74
    if (!win) {
 801d468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d160      	bne.n	801d530 <nk_begin_titled+0x1b8>
        /* create new window */
        nk_size name_length = (nk_size)name_len;
 801d46e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d470:	65fb      	str	r3, [r7, #92]	; 0x5c
        win = (struct nk_window*)nk_create_window(ctx);
 801d472:	69f8      	ldr	r0, [r7, #28]
 801d474:	f7ff fd06 	bl	801ce84 <nk_create_window>
 801d478:	6778      	str	r0, [r7, #116]	; 0x74
        NK_ASSERT(win);
 801d47a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d105      	bne.n	801d48c <nk_begin_titled+0x114>
 801d480:	4b62      	ldr	r3, [pc, #392]	; (801d60c <nk_begin_titled+0x294>)
 801d482:	4a5c      	ldr	r2, [pc, #368]	; (801d5f4 <nk_begin_titled+0x27c>)
 801d484:	21a8      	movs	r1, #168	; 0xa8
 801d486:	485c      	ldr	r0, [pc, #368]	; (801d5f8 <nk_begin_titled+0x280>)
 801d488:	f000 fddc 	bl	801e044 <__assert_func>
        if (!win) return 0;
 801d48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d101      	bne.n	801d496 <nk_begin_titled+0x11e>
 801d492:	2300      	movs	r3, #0
 801d494:	e3ac      	b.n	801dbf0 <nk_begin_titled+0x878>

        if (flags & NK_WINDOW_BACKGROUND)
 801d496:	683b      	ldr	r3, [r7, #0]
 801d498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d005      	beq.n	801d4ac <nk_begin_titled+0x134>
            nk_insert_window(ctx, win, NK_INSERT_FRONT);
 801d4a0:	2201      	movs	r2, #1
 801d4a2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d4a4:	69f8      	ldr	r0, [r7, #28]
 801d4a6:	f7ff fd91 	bl	801cfcc <nk_insert_window>
 801d4aa:	e004      	b.n	801d4b6 <nk_begin_titled+0x13e>
        else nk_insert_window(ctx, win, NK_INSERT_BACK);
 801d4ac:	2200      	movs	r2, #0
 801d4ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d4b0:	69f8      	ldr	r0, [r7, #28]
 801d4b2:	f7ff fd8b 	bl	801cfcc <nk_insert_window>
        nk_command_buffer_init(&win->buffer, &ctx->memory, NK_CLIPPING_ON);
 801d4b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4b8:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801d4bc:	69fb      	ldr	r3, [r7, #28]
 801d4be:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 801d4c2:	330c      	adds	r3, #12
 801d4c4:	2201      	movs	r2, #1
 801d4c6:	4619      	mov	r1, r3
 801d4c8:	f7f4 f8d8 	bl	801167c <nk_command_buffer_init>

        win->flags = flags;
 801d4cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4ce:	683a      	ldr	r2, [r7, #0]
 801d4d0:	649a      	str	r2, [r3, #72]	; 0x48
        win->bounds = bounds;
 801d4d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4d4:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801d4d8:	1d3b      	adds	r3, r7, #4
 801d4da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d4dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        win->name = name_hash;
 801d4e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d4e4:	605a      	str	r2, [r3, #4]
        name_length = NK_MIN(name_length, NK_WINDOW_MAX_NAME-1);
 801d4e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d4e8:	2b3f      	cmp	r3, #63	; 0x3f
 801d4ea:	bf28      	it	cs
 801d4ec:	233f      	movcs	r3, #63	; 0x3f
 801d4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
        NK_MEMCPY(win->name_string, name, name_length);
 801d4f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4f2:	3308      	adds	r3, #8
 801d4f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d4f6:	69b9      	ldr	r1, [r7, #24]
 801d4f8:	4618      	mov	r0, r3
 801d4fa:	f7fe ff5b 	bl	801c3b4 <nk_memcopy>
        win->name_string[name_length] = 0;
 801d4fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d502:	4413      	add	r3, r2
 801d504:	3308      	adds	r3, #8
 801d506:	2200      	movs	r2, #0
 801d508:	701a      	strb	r2, [r3, #0]
        win->popup.win = 0;
 801d50a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d50c:	2200      	movs	r2, #0
 801d50e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        if (!ctx->active)
 801d512:	69fb      	ldr	r3, [r7, #28]
 801d514:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d518:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d153      	bne.n	801d5c8 <nk_begin_titled+0x250>
            ctx->active = win;
 801d520:	69fb      	ldr	r3, [r7, #28]
 801d522:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d526:	461a      	mov	r2, r3
 801d528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d52a:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
 801d52e:	e04b      	b.n	801d5c8 <nk_begin_titled+0x250>
    } else {
        /* update window */
        win->flags &= ~(nk_flags)(NK_WINDOW_PRIVATE-1);
 801d530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d534:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801d538:	f023 0307 	bic.w	r3, r3, #7
 801d53c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d53e:	6493      	str	r3, [r2, #72]	; 0x48
        win->flags |= flags;
 801d540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d542:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801d544:	683b      	ldr	r3, [r7, #0]
 801d546:	431a      	orrs	r2, r3
 801d548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d54a:	649a      	str	r2, [r3, #72]	; 0x48
        if (!(win->flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)))
 801d54c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d54e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d550:	f003 0306 	and.w	r3, r3, #6
 801d554:	2b00      	cmp	r3, #0
 801d556:	d106      	bne.n	801d566 <nk_begin_titled+0x1ee>
            win->bounds = bounds;
 801d558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d55a:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801d55e:	1d3b      	adds	r3, r7, #4
 801d560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         * I.) Have more than one window with the same name or
         * II.) You forgot to actually draw the window.
         *      More specific you did not call `nk_clear` (nk_clear will be
         *      automatically called for you if you are using one of the
         *      provided demo backends). */
        NK_ASSERT(win->seq != ctx->seq);
 801d566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d568:	681a      	ldr	r2, [r3, #0]
 801d56a:	69fb      	ldr	r3, [r7, #28]
 801d56c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d570:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 801d574:	429a      	cmp	r2, r3
 801d576:	d105      	bne.n	801d584 <nk_begin_titled+0x20c>
 801d578:	4b25      	ldr	r3, [pc, #148]	; (801d610 <nk_begin_titled+0x298>)
 801d57a:	4a1e      	ldr	r2, [pc, #120]	; (801d5f4 <nk_begin_titled+0x27c>)
 801d57c:	21c6      	movs	r1, #198	; 0xc6
 801d57e:	481e      	ldr	r0, [pc, #120]	; (801d5f8 <nk_begin_titled+0x280>)
 801d580:	f000 fd60 	bl	801e044 <__assert_func>
        win->seq = ctx->seq;
 801d584:	69fb      	ldr	r3, [r7, #28]
 801d586:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d58a:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 801d58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d590:	601a      	str	r2, [r3, #0]
        if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN)) {
 801d592:	69fb      	ldr	r3, [r7, #28]
 801d594:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d598:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d113      	bne.n	801d5c8 <nk_begin_titled+0x250>
 801d5a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d5a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d10d      	bne.n	801d5c8 <nk_begin_titled+0x250>
            ctx->active = win;
 801d5ac:	69fb      	ldr	r3, [r7, #28]
 801d5ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d5b2:	461a      	mov	r2, r3
 801d5b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5b6:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = win;
 801d5ba:	69fb      	ldr	r3, [r7, #28]
 801d5bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d5c0:	461a      	mov	r2, r3
 801d5c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5c4:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        }
    }
    if (win->flags & NK_WINDOW_HIDDEN) {
 801d5c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d5cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d01f      	beq.n	801d614 <nk_begin_titled+0x29c>
        ctx->current = win;
 801d5d4:	69fb      	ldr	r3, [r7, #28]
 801d5d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d5da:	461a      	mov	r2, r3
 801d5dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5de:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        win->layout = 0;
 801d5e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5e4:	2200      	movs	r2, #0
 801d5e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	e300      	b.n	801dbf0 <nk_begin_titled+0x878>
 801d5ee:	bf00      	nop
 801d5f0:	08022934 	.word	0x08022934
 801d5f4:	08023e74 	.word	0x08023e74
 801d5f8:	08022918 	.word	0x08022918
 801d5fc:	08022948 	.word	0x08022948
 801d600:	08022950 	.word	0x08022950
 801d604:	08022958 	.word	0x08022958
 801d608:	080229b4 	.word	0x080229b4
 801d60c:	08022938 	.word	0x08022938
 801d610:	080229f4 	.word	0x080229f4
    } else nk_start(ctx, win);
 801d614:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d616:	69f8      	ldr	r0, [r7, #28]
 801d618:	f7f3 fb46 	bl	8010ca8 <nk_start>

    /* window overlapping */
    if (!(win->flags & NK_WINDOW_HIDDEN) && !(win->flags & NK_WINDOW_NO_INPUT))
 801d61c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d624:	2b00      	cmp	r3, #0
 801d626:	f040 82c2 	bne.w	801dbae <nk_begin_titled+0x836>
 801d62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d62c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d62e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d632:	2b00      	cmp	r3, #0
 801d634:	f040 82bb 	bne.w	801dbae <nk_begin_titled+0x836>
    {
        int inpanel, ishovered;
        struct nk_window *iter = win;
 801d638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d63a:	673b      	str	r3, [r7, #112]	; 0x70
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 801d63c:	69fb      	ldr	r3, [r7, #28]
 801d63e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801d642:	ed93 7a01 	vldr	s14, [r3, #4]
 801d646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d64c:	f603 0344 	addw	r3, r3, #2116	; 0x844
 801d650:	edd3 7a00 	vldr	s15, [r3]
 801d654:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801d658:	ee37 7a27 	vadd.f32	s14, s14, s15
            (2.0f * style->window.header.label_padding.y);
 801d65c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d662:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 801d666:	edd3 7a00 	vldr	s15, [r3]
 801d66a:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 801d66e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d672:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        struct nk_rect win_bounds = (!(win->flags & NK_WINDOW_MINIMIZED))?
 801d676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d67a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d107      	bne.n	801d692 <nk_begin_titled+0x31a>
 801d682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d684:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801d688:	334c      	adds	r3, #76	; 0x4c
 801d68a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d68c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d690:	e022      	b.n	801d6d8 <nk_begin_titled+0x360>
            win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);
 801d692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d694:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801d698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d69a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801d69e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d6a0:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801d6a4:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801d6a8:	eeb0 1a66 	vmov.f32	s2, s13
 801d6ac:	eef0 0a47 	vmov.f32	s1, s14
 801d6b0:	eeb0 0a67 	vmov.f32	s0, s15
 801d6b4:	f7f6 ff90 	bl	80145d8 <nk_rect>
 801d6b8:	eeb0 6a40 	vmov.f32	s12, s0
 801d6bc:	eef0 6a60 	vmov.f32	s13, s1
 801d6c0:	eeb0 7a41 	vmov.f32	s14, s2
 801d6c4:	eef0 7a61 	vmov.f32	s15, s3
 801d6c8:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 801d6cc:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 801d6d0:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 801d6d4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        /* activate window if hovered and no other window is overlapping this window */
        inpanel = nk_input_has_mouse_click_down_in_rect(&ctx->input, NK_BUTTON_LEFT, win_bounds, nk_true);
 801d6d8:	69fb      	ldr	r3, [r7, #28]
 801d6da:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801d6de:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d6e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801d6e6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d6ea:	2201      	movs	r2, #1
 801d6ec:	eeb0 0a46 	vmov.f32	s0, s12
 801d6f0:	eef0 0a66 	vmov.f32	s1, s13
 801d6f4:	eeb0 1a47 	vmov.f32	s2, s14
 801d6f8:	eef0 1a67 	vmov.f32	s3, s15
 801d6fc:	2100      	movs	r1, #0
 801d6fe:	4618      	mov	r0, r3
 801d700:	f7f5 fe08 	bl	8013314 <nk_input_has_mouse_click_down_in_rect>
 801d704:	6578      	str	r0, [r7, #84]	; 0x54
        inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;
 801d706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d006      	beq.n	801d71a <nk_begin_titled+0x3a2>
 801d70c:	69fb      	ldr	r3, [r7, #28]
 801d70e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801d712:	2b00      	cmp	r3, #0
 801d714:	d001      	beq.n	801d71a <nk_begin_titled+0x3a2>
 801d716:	2301      	movs	r3, #1
 801d718:	e000      	b.n	801d71c <nk_begin_titled+0x3a4>
 801d71a:	2300      	movs	r3, #0
 801d71c:	657b      	str	r3, [r7, #84]	; 0x54
        ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);
 801d71e:	69fb      	ldr	r3, [r7, #28]
 801d720:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801d724:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d728:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801d72c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d730:	eeb0 0a46 	vmov.f32	s0, s12
 801d734:	eef0 0a66 	vmov.f32	s1, s13
 801d738:	eeb0 1a47 	vmov.f32	s2, s14
 801d73c:	eef0 1a67 	vmov.f32	s3, s15
 801d740:	4618      	mov	r0, r3
 801d742:	f7f5 fe2e 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 801d746:	6538      	str	r0, [r7, #80]	; 0x50
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 801d748:	69fb      	ldr	r3, [r7, #28]
 801d74a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d74e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801d752:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d754:	429a      	cmp	r2, r3
 801d756:	f000 80de 	beq.w	801d916 <nk_begin_titled+0x59e>
 801d75a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	f000 80da 	beq.w	801d916 <nk_begin_titled+0x59e>
 801d762:	69fb      	ldr	r3, [r7, #28]
 801d764:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801d768:	2b00      	cmp	r3, #0
 801d76a:	f040 80d4 	bne.w	801d916 <nk_begin_titled+0x59e>
            iter = win->next;
 801d76e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d770:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d774:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801d776:	e0c6      	b.n	801d906 <nk_begin_titled+0x58e>
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801d778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d77c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d780:	2b00      	cmp	r3, #0
 801d782:	d107      	bne.n	801d794 <nk_begin_titled+0x41c>
 801d784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d786:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801d78a:	334c      	adds	r3, #76	; 0x4c
 801d78c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d78e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d792:	e022      	b.n	801d7da <nk_begin_titled+0x462>
                    iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801d794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d796:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801d79a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d79c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801d7a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d7a2:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801d7a6:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801d7aa:	eeb0 1a66 	vmov.f32	s2, s13
 801d7ae:	eef0 0a47 	vmov.f32	s1, s14
 801d7b2:	eeb0 0a67 	vmov.f32	s0, s15
 801d7b6:	f7f6 ff0f 	bl	80145d8 <nk_rect>
 801d7ba:	eeb0 6a40 	vmov.f32	s12, s0
 801d7be:	eef0 6a60 	vmov.f32	s13, s1
 801d7c2:	eeb0 7a41 	vmov.f32	s14, s2
 801d7c6:	eef0 7a61 	vmov.f32	s15, s3
 801d7ca:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 801d7ce:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 801d7d2:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 801d7d6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                if (NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801d7da:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801d7de:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801d7e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801d7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d7ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7f2:	d52c      	bpl.n	801d84e <nk_begin_titled+0x4d6>
 801d7f4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801d7f8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 801d7fc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801d800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d80c:	d51f      	bpl.n	801d84e <nk_begin_titled+0x4d6>
 801d80e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801d812:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d816:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d81e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d826:	d512      	bpl.n	801d84e <nk_begin_titled+0x4d6>
 801d828:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801d82c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801d830:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801d834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d840:	d505      	bpl.n	801d84e <nk_begin_titled+0x4d6>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    (!(iter->flags & NK_WINDOW_HIDDEN)))
 801d842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d060      	beq.n	801d910 <nk_begin_titled+0x598>
                    break;

                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801d84e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d850:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d854:	2b00      	cmp	r3, #0
 801d856:	d052      	beq.n	801d8fe <nk_begin_titled+0x586>
 801d858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d85a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d04d      	beq.n	801d8fe <nk_begin_titled+0x586>
 801d862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d147      	bne.n	801d8fe <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801d86e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d870:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d874:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801d878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d87a:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801d87e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801d882:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801d886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d88e:	d536      	bpl.n	801d8fe <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801d890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d892:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801d896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d898:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d89c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801d8a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d8a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801d8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d8ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8b6:	d522      	bpl.n	801d8fe <nk_begin_titled+0x586>
 801d8b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8ba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d8be:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801d8c2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d8c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d8ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d8ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8d6:	d512      	bpl.n	801d8fe <nk_begin_titled+0x586>
 801d8d8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801d8dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d8e2:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801d8e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d8ec:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801d8f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d8f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8fc:	d40a      	bmi.n	801d914 <nk_begin_titled+0x59c>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 801d8fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d900:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d904:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801d906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d908:	2b00      	cmp	r3, #0
 801d90a:	f47f af35 	bne.w	801d778 <nk_begin_titled+0x400>
 801d90e:	e002      	b.n	801d916 <nk_begin_titled+0x59e>
                    break;
 801d910:	bf00      	nop
 801d912:	e000      	b.n	801d916 <nk_begin_titled+0x59e>
                    break;
 801d914:	bf00      	nop
            }
        }

        /* activate window if clicked */
        if (iter && inpanel && (win != ctx->end)) {
 801d916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d918:	2b00      	cmp	r3, #0
 801d91a:	f000 80db 	beq.w	801dad4 <nk_begin_titled+0x75c>
 801d91e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d920:	2b00      	cmp	r3, #0
 801d922:	f000 80d7 	beq.w	801dad4 <nk_begin_titled+0x75c>
 801d926:	69fb      	ldr	r3, [r7, #28]
 801d928:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d92c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d930:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d932:	429a      	cmp	r2, r3
 801d934:	f000 80ce 	beq.w	801dad4 <nk_begin_titled+0x75c>
            iter = win->next;
 801d938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d93a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d93e:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801d940:	e0c0      	b.n	801dac4 <nk_begin_titled+0x74c>
                /* try to find a panel with higher priority in the same position */
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801d942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d107      	bne.n	801d95e <nk_begin_titled+0x5e6>
 801d94e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d950:	f107 0420 	add.w	r4, r7, #32
 801d954:	334c      	adds	r3, #76	; 0x4c
 801d956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d95c:	e022      	b.n	801d9a4 <nk_begin_titled+0x62c>
                iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801d95e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d960:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801d964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d966:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801d96a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d96c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801d970:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801d974:	eeb0 1a66 	vmov.f32	s2, s13
 801d978:	eef0 0a47 	vmov.f32	s1, s14
 801d97c:	eeb0 0a67 	vmov.f32	s0, s15
 801d980:	f7f6 fe2a 	bl	80145d8 <nk_rect>
 801d984:	eeb0 6a40 	vmov.f32	s12, s0
 801d988:	eef0 6a60 	vmov.f32	s13, s1
 801d98c:	eeb0 7a41 	vmov.f32	s14, s2
 801d990:	eef0 7a61 	vmov.f32	s15, s3
 801d994:	ed87 6a08 	vstr	s12, [r7, #32]
 801d998:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 801d99c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 801d9a0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                if (NK_INBOX(ctx->input.mouse.pos.x, ctx->input.mouse.pos.y,
 801d9a4:	ed97 7a08 	vldr	s14, [r7, #32]
 801d9a8:	69fb      	ldr	r3, [r7, #28]
 801d9aa:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801d9ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9b6:	d82b      	bhi.n	801da10 <nk_begin_titled+0x698>
 801d9b8:	69fb      	ldr	r3, [r7, #28]
 801d9ba:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801d9be:	edd7 6a08 	vldr	s13, [r7, #32]
 801d9c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801d9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d9ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9d2:	d51d      	bpl.n	801da10 <nk_begin_titled+0x698>
 801d9d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801d9d8:	69fb      	ldr	r3, [r7, #28]
 801d9da:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801d9de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9e6:	d813      	bhi.n	801da10 <nk_begin_titled+0x698>
 801d9e8:	69fb      	ldr	r3, [r7, #28]
 801d9ea:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801d9ee:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801d9f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801d9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d9fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da02:	d505      	bpl.n	801da10 <nk_begin_titled+0x698>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    !(iter->flags & NK_WINDOW_HIDDEN))
 801da04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d05e      	beq.n	801dace <nk_begin_titled+0x756>
                    break;
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801da10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801da16:	2b00      	cmp	r3, #0
 801da18:	d050      	beq.n	801dabc <nk_begin_titled+0x744>
 801da1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da1c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801da20:	2b00      	cmp	r3, #0
 801da22:	d04b      	beq.n	801dabc <nk_begin_titled+0x744>
 801da24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d145      	bne.n	801dabc <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801da30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da32:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801da36:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801da3a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801da3e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801da42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801da46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801da4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da4e:	d535      	bpl.n	801dabc <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801da50:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801da54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da56:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801da5a:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801da5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da60:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801da64:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801da68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801da6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801da70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da74:	d522      	bpl.n	801dabc <nk_begin_titled+0x744>
 801da76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da78:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801da7c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801da80:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801da84:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801da88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801da8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801da90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da94:	d512      	bpl.n	801dabc <nk_begin_titled+0x744>
 801da96:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801da9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da9c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801daa0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801daa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801daa6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801daaa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801daae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801dab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daba:	d40a      	bmi.n	801dad2 <nk_begin_titled+0x75a>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 801dabc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dabe:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801dac2:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801dac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	f47f af3b 	bne.w	801d942 <nk_begin_titled+0x5ca>
 801dacc:	e002      	b.n	801dad4 <nk_begin_titled+0x75c>
                    break;
 801dace:	bf00      	nop
 801dad0:	e000      	b.n	801dad4 <nk_begin_titled+0x75c>
                    break;
 801dad2:	bf00      	nop
            }
        }
        if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {
 801dad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d02e      	beq.n	801db38 <nk_begin_titled+0x7c0>
 801dada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d128      	bne.n	801db38 <nk_begin_titled+0x7c0>
 801dae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801daea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d022      	beq.n	801db38 <nk_begin_titled+0x7c0>
            win->flags |= (nk_flags)NK_WINDOW_ROM;
 801daf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801daf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801daf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801dafa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dafc:	649a      	str	r2, [r3, #72]	; 0x48
            iter->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801dafe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801db06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db08:	649a      	str	r2, [r3, #72]	; 0x48
            ctx->active = iter;
 801db0a:	69fb      	ldr	r3, [r7, #28]
 801db0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801db10:	461a      	mov	r2, r3
 801db12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db14:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 801db18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801db20:	2b00      	cmp	r3, #0
 801db22:	d144      	bne.n	801dbae <nk_begin_titled+0x836>
                /* current window is active in that position so transfer to top
                 * at the highest priority in stack */
                nk_remove_window(ctx, iter);
 801db24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801db26:	69f8      	ldr	r0, [r7, #28]
 801db28:	f7ff fb46 	bl	801d1b8 <nk_remove_window>
                nk_insert_window(ctx, iter, NK_INSERT_BACK);
 801db2c:	2200      	movs	r2, #0
 801db2e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801db30:	69f8      	ldr	r0, [r7, #28]
 801db32:	f7ff fa4b 	bl	801cfcc <nk_insert_window>
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 801db36:	e03a      	b.n	801dbae <nk_begin_titled+0x836>
            }
        } else {
            if (!iter && ctx->end != win) {
 801db38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d123      	bne.n	801db86 <nk_begin_titled+0x80e>
 801db3e:	69fb      	ldr	r3, [r7, #28]
 801db40:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801db44:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801db48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801db4a:	429a      	cmp	r2, r3
 801db4c:	d01b      	beq.n	801db86 <nk_begin_titled+0x80e>
                if (!(win->flags & NK_WINDOW_BACKGROUND)) {
 801db4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801db56:	2b00      	cmp	r3, #0
 801db58:	d108      	bne.n	801db6c <nk_begin_titled+0x7f4>
                    /* current window is active in that position so transfer to top
                     * at the highest priority in stack */
                    nk_remove_window(ctx, win);
 801db5a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801db5c:	69f8      	ldr	r0, [r7, #28]
 801db5e:	f7ff fb2b 	bl	801d1b8 <nk_remove_window>
                    nk_insert_window(ctx, win, NK_INSERT_BACK);
 801db62:	2200      	movs	r2, #0
 801db64:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801db66:	69f8      	ldr	r0, [r7, #28]
 801db68:	f7ff fa30 	bl	801cfcc <nk_insert_window>
                }
                win->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801db6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801db74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db76:	649a      	str	r2, [r3, #72]	; 0x48
                ctx->active = win;
 801db78:	69fb      	ldr	r3, [r7, #28]
 801db7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801db7e:	461a      	mov	r2, r3
 801db80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db82:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            }
            if (ctx->end != win && !(win->flags & NK_WINDOW_BACKGROUND))
 801db86:	69fb      	ldr	r3, [r7, #28]
 801db88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801db8c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801db90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801db92:	429a      	cmp	r2, r3
 801db94:	d00b      	beq.n	801dbae <nk_begin_titled+0x836>
 801db96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d105      	bne.n	801dbae <nk_begin_titled+0x836>
                win->flags |= NK_WINDOW_ROM;
 801dba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dba6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801dbaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbac:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    win->layout = (struct nk_panel*)nk_create_panel(ctx);
 801dbae:	69f8      	ldr	r0, [r7, #28]
 801dbb0:	f7f7 f928 	bl	8014e04 <nk_create_panel>
 801dbb4:	4602      	mov	r2, r0
 801dbb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    ctx->current = win;
 801dbbc:	69fb      	ldr	r3, [r7, #28]
 801dbbe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dbc2:	461a      	mov	r2, r3
 801dbc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbc6:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);
 801dbca:	2201      	movs	r2, #1
 801dbcc:	6979      	ldr	r1, [r7, #20]
 801dbce:	69f8      	ldr	r0, [r7, #28]
 801dbd0:	f7f7 fb86 	bl	80152e0 <nk_panel_begin>
 801dbd4:	66f8      	str	r0, [r7, #108]	; 0x6c
    win->layout->offset_x = &win->scrollbar.x;
 801dbd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dbdc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801dbde:	325c      	adds	r2, #92	; 0x5c
 801dbe0:	619a      	str	r2, [r3, #24]
    win->layout->offset_y = &win->scrollbar.y;
 801dbe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dbe8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801dbea:	3260      	adds	r2, #96	; 0x60
 801dbec:	61da      	str	r2, [r3, #28]
    return ret;
 801dbee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 801dbf0:	4618      	mov	r0, r3
 801dbf2:	377c      	adds	r7, #124	; 0x7c
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	bd90      	pop	{r4, r7, pc}

0801dbf8 <nk_end>:
NK_API void
nk_end(struct nk_context *ctx)
{
 801dbf8:	b580      	push	{r7, lr}
 801dbfa:	b084      	sub	sp, #16
 801dbfc:	af00      	add	r7, sp, #0
 801dbfe:	6078      	str	r0, [r7, #4]
    struct nk_panel *layout;
    NK_ASSERT(ctx);
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d106      	bne.n	801dc14 <nk_end+0x1c>
 801dc06:	4b2d      	ldr	r3, [pc, #180]	; (801dcbc <nk_end+0xc4>)
 801dc08:	4a2d      	ldr	r2, [pc, #180]	; (801dcc0 <nk_end+0xc8>)
 801dc0a:	f240 112b 	movw	r1, #299	; 0x12b
 801dc0e:	482d      	ldr	r0, [pc, #180]	; (801dcc4 <nk_end+0xcc>)
 801dc10:	f000 fa18 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dc1a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d106      	bne.n	801dc30 <nk_end+0x38>
 801dc22:	4b29      	ldr	r3, [pc, #164]	; (801dcc8 <nk_end+0xd0>)
 801dc24:	4a26      	ldr	r2, [pc, #152]	; (801dcc0 <nk_end+0xc8>)
 801dc26:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801dc2a:	4826      	ldr	r0, [pc, #152]	; (801dcc4 <nk_end+0xcc>)
 801dc2c:	f000 fa0a 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current)
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d03d      	beq.n	801dcb2 <nk_end+0xba>
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dc3c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d036      	beq.n	801dcb2 <nk_end+0xba>
        return;

    layout = ctx->current->layout;
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dc4a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dc4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dc52:	60fb      	str	r3, [r7, #12]
    if (!layout || (layout->type == NK_PANEL_WINDOW && (ctx->current->flags & NK_WINDOW_HIDDEN))) {
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d00d      	beq.n	801dc76 <nk_end+0x7e>
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	781b      	ldrb	r3, [r3, #0]
 801dc5e:	2b01      	cmp	r3, #1
 801dc60:	d111      	bne.n	801dc86 <nk_end+0x8e>
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dc68:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dc6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dc6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d007      	beq.n	801dc86 <nk_end+0x8e>
        ctx->current = 0;
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dc7c:	461a      	mov	r2, r3
 801dc7e:	2300      	movs	r3, #0
 801dc80:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        return;
 801dc84:	e016      	b.n	801dcb4 <nk_end+0xbc>
    }
    nk_panel_end(ctx);
 801dc86:	6878      	ldr	r0, [r7, #4]
 801dc88:	f7f8 fa6c 	bl	8016164 <nk_panel_end>
    nk_free_panel(ctx, ctx->current->layout);
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dc92:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dc96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dc9a:	4619      	mov	r1, r3
 801dc9c:	6878      	ldr	r0, [r7, #4]
 801dc9e:	f7f7 f8c8 	bl	8014e32 <nk_free_panel>
    ctx->current = 0;
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dca8:	461a      	mov	r2, r3
 801dcaa:	2300      	movs	r3, #0
 801dcac:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
 801dcb0:	e000      	b.n	801dcb4 <nk_end+0xbc>
        return;
 801dcb2:	bf00      	nop
}
 801dcb4:	3710      	adds	r7, #16
 801dcb6:	46bd      	mov	sp, r7
 801dcb8:	bd80      	pop	{r7, pc}
 801dcba:	bf00      	nop
 801dcbc:	08022934 	.word	0x08022934
 801dcc0:	08023e84 	.word	0x08023e84
 801dcc4:	08022918 	.word	0x08022918
 801dcc8:	08022a0c 	.word	0x08022a0c

0801dccc <nk_window_is_hovered>:
    if (!ctx || !ctx->current) return 0;
    return ctx->current == ctx->active;
}
NK_API nk_bool
nk_window_is_hovered(struct nk_context *ctx)
{
 801dccc:	b590      	push	{r4, r7, lr}
 801dcce:	b087      	sub	sp, #28
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d106      	bne.n	801dce8 <nk_window_is_hovered+0x1c>
 801dcda:	4b31      	ldr	r3, [pc, #196]	; (801dda0 <nk_window_is_hovered+0xd4>)
 801dcdc:	4a31      	ldr	r2, [pc, #196]	; (801dda4 <nk_window_is_hovered+0xd8>)
 801dcde:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801dce2:	4831      	ldr	r0, [pc, #196]	; (801dda8 <nk_window_is_hovered+0xdc>)
 801dce4:	f000 f9ae 	bl	801e044 <__assert_func>
    NK_ASSERT(ctx->current);
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dcee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d106      	bne.n	801dd04 <nk_window_is_hovered+0x38>
 801dcf6:	4b2d      	ldr	r3, [pc, #180]	; (801ddac <nk_window_is_hovered+0xe0>)
 801dcf8:	4a2a      	ldr	r2, [pc, #168]	; (801dda4 <nk_window_is_hovered+0xd8>)
 801dcfa:	f240 11b1 	movw	r1, #433	; 0x1b1
 801dcfe:	482a      	ldr	r0, [pc, #168]	; (801dda8 <nk_window_is_hovered+0xdc>)
 801dd00:	f000 f9a0 	bl	801e044 <__assert_func>
    if (!ctx || !ctx->current || (ctx->current->flags & NK_WINDOW_HIDDEN))
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	2b00      	cmp	r3, #0
 801dd08:	d010      	beq.n	801dd2c <nk_window_is_hovered+0x60>
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dd10:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d009      	beq.n	801dd2c <nk_window_is_hovered+0x60>
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dd1e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dd22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dd24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d001      	beq.n	801dd30 <nk_window_is_hovered+0x64>
        return 0;
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	e032      	b.n	801dd96 <nk_window_is_hovered+0xca>
    else {
        struct nk_rect actual_bounds = ctx->current->bounds;
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dd36:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dd3a:	f107 0408 	add.w	r4, r7, #8
 801dd3e:	334c      	adds	r3, #76	; 0x4c
 801dd40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801dd42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (ctx->begin->flags & NK_WINDOW_MINIMIZED) {
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dd4c:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801dd50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dd52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d008      	beq.n	801dd6c <nk_window_is_hovered+0xa0>
            actual_bounds.h = ctx->current->layout->header_height;
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801dd60:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801dd64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd6a:	617b      	str	r3, [r7, #20]
        }
        return nk_input_is_mouse_hovering_rect(&ctx->input, actual_bounds);
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	ed97 6a02 	vldr	s12, [r7, #8]
 801dd72:	edd7 6a03 	vldr	s13, [r7, #12]
 801dd76:	ed97 7a04 	vldr	s14, [r7, #16]
 801dd7a:	edd7 7a05 	vldr	s15, [r7, #20]
 801dd7e:	eeb0 0a46 	vmov.f32	s0, s12
 801dd82:	eef0 0a66 	vmov.f32	s1, s13
 801dd86:	eeb0 1a47 	vmov.f32	s2, s14
 801dd8a:	eef0 1a67 	vmov.f32	s3, s15
 801dd8e:	4618      	mov	r0, r3
 801dd90:	f7f5 fb07 	bl	80133a2 <nk_input_is_mouse_hovering_rect>
 801dd94:	4603      	mov	r3, r0
    }
}
 801dd96:	4618      	mov	r0, r3
 801dd98:	371c      	adds	r7, #28
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	bd90      	pop	{r4, r7, pc}
 801dd9e:	bf00      	nop
 801dda0:	08022934 	.word	0x08022934
 801dda4:	08023e8c 	.word	0x08023e8c
 801dda8:	08022918 	.word	0x08022918
 801ddac:	08022a50 	.word	0x08022a50

0801ddb0 <nk_window_is_collapsed>:
    int any_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
    return any_hovered || any_active;
}
NK_API nk_bool
nk_window_is_collapsed(struct nk_context *ctx, const char *name)
{
 801ddb0:	b580      	push	{r7, lr}
 801ddb2:	b086      	sub	sp, #24
 801ddb4:	af00      	add	r7, sp, #0
 801ddb6:	6078      	str	r0, [r7, #4]
 801ddb8:	6039      	str	r1, [r7, #0]
    int title_len;
    nk_hash title_hash;
    struct nk_window *win;
    NK_ASSERT(ctx);
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d106      	bne.n	801ddce <nk_window_is_collapsed+0x1e>
 801ddc0:	4b14      	ldr	r3, [pc, #80]	; (801de14 <nk_window_is_collapsed+0x64>)
 801ddc2:	4a15      	ldr	r2, [pc, #84]	; (801de18 <nk_window_is_collapsed+0x68>)
 801ddc4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 801ddc8:	4814      	ldr	r0, [pc, #80]	; (801de1c <nk_window_is_collapsed+0x6c>)
 801ddca:	f000 f93b 	bl	801e044 <__assert_func>
    if (!ctx) return 0;
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	d101      	bne.n	801ddd8 <nk_window_is_collapsed+0x28>
 801ddd4:	2300      	movs	r3, #0
 801ddd6:	e018      	b.n	801de0a <nk_window_is_collapsed+0x5a>

    title_len = (int)nk_strlen(name);
 801ddd8:	6838      	ldr	r0, [r7, #0]
 801ddda:	f7fe fc59 	bl	801c690 <nk_strlen>
 801ddde:	6178      	str	r0, [r7, #20]
    title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);
 801dde0:	2240      	movs	r2, #64	; 0x40
 801dde2:	6979      	ldr	r1, [r7, #20]
 801dde4:	6838      	ldr	r0, [r7, #0]
 801dde6:	f7fe fcd3 	bl	801c790 <nk_murmur_hash>
 801ddea:	6138      	str	r0, [r7, #16]
    win = nk_find_window(ctx, title_hash, name);
 801ddec:	683a      	ldr	r2, [r7, #0]
 801ddee:	6939      	ldr	r1, [r7, #16]
 801ddf0:	6878      	ldr	r0, [r7, #4]
 801ddf2:	f7ff f8a9 	bl	801cf48 <nk_find_window>
 801ddf6:	60f8      	str	r0, [r7, #12]
    if (!win) return 0;
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d101      	bne.n	801de02 <nk_window_is_collapsed+0x52>
 801ddfe:	2300      	movs	r3, #0
 801de00:	e003      	b.n	801de0a <nk_window_is_collapsed+0x5a>
    return win->flags & NK_WINDOW_MINIMIZED;
 801de02:	68fb      	ldr	r3, [r7, #12]
 801de04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801de06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
}
 801de0a:	4618      	mov	r0, r3
 801de0c:	3718      	adds	r7, #24
 801de0e:	46bd      	mov	sp, r7
 801de10:	bd80      	pop	{r7, pc}
 801de12:	bf00      	nop
 801de14:	08022934 	.word	0x08022934
 801de18:	08023ea4 	.word	0x08023ea4
 801de1c:	08022918 	.word	0x08022918

0801de20 <tsc2046_init>:
#include <stdint.h>
#include "tsc2046.h"


void tsc2046_init(tTsc2046* tsc, SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin, float ax, float bx, float ay, float by, int avg )
{
 801de20:	b580      	push	{r7, lr}
 801de22:	b088      	sub	sp, #32
 801de24:	af00      	add	r7, sp, #0
 801de26:	61f8      	str	r0, [r7, #28]
 801de28:	61b9      	str	r1, [r7, #24]
 801de2a:	617a      	str	r2, [r7, #20]
 801de2c:	ed87 0a03 	vstr	s0, [r7, #12]
 801de30:	edc7 0a02 	vstr	s1, [r7, #8]
 801de34:	ed87 1a01 	vstr	s2, [r7, #4]
 801de38:	edc7 1a00 	vstr	s3, [r7]
 801de3c:	827b      	strh	r3, [r7, #18]
	tsc->spi = spi;
 801de3e:	69fb      	ldr	r3, [r7, #28]
 801de40:	69ba      	ldr	r2, [r7, #24]
 801de42:	601a      	str	r2, [r3, #0]
	tsc->cs_port = cs_port;
 801de44:	69fb      	ldr	r3, [r7, #28]
 801de46:	697a      	ldr	r2, [r7, #20]
 801de48:	605a      	str	r2, [r3, #4]
	tsc->cs_pin = cs_pin;
 801de4a:	69fb      	ldr	r3, [r7, #28]
 801de4c:	8a7a      	ldrh	r2, [r7, #18]
 801de4e:	811a      	strh	r2, [r3, #8]
	tsc->ax = ax;
 801de50:	69fb      	ldr	r3, [r7, #28]
 801de52:	68fa      	ldr	r2, [r7, #12]
 801de54:	60da      	str	r2, [r3, #12]
	tsc->bx = bx;
 801de56:	69fb      	ldr	r3, [r7, #28]
 801de58:	68ba      	ldr	r2, [r7, #8]
 801de5a:	611a      	str	r2, [r3, #16]
	tsc->ay = ay;
 801de5c:	69fb      	ldr	r3, [r7, #28]
 801de5e:	687a      	ldr	r2, [r7, #4]
 801de60:	615a      	str	r2, [r3, #20]
	tsc->by = by;
 801de62:	69fb      	ldr	r3, [r7, #28]
 801de64:	683a      	ldr	r2, [r7, #0]
 801de66:	619a      	str	r2, [r3, #24]
	tsc->avg = avg;
 801de68:	69fb      	ldr	r3, [r7, #28]
 801de6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de6c:	61da      	str	r2, [r3, #28]
    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 801de6e:	69fb      	ldr	r3, [r7, #28]
 801de70:	6858      	ldr	r0, [r3, #4]
 801de72:	69fb      	ldr	r3, [r7, #28]
 801de74:	891b      	ldrh	r3, [r3, #8]
 801de76:	2201      	movs	r2, #1
 801de78:	4619      	mov	r1, r3
 801de7a:	f7ec fb8b 	bl	800a594 <HAL_GPIO_WritePin>
}
 801de7e:	bf00      	nop
 801de80:	3720      	adds	r7, #32
 801de82:	46bd      	mov	sp, r7
 801de84:	bd80      	pop	{r7, pc}
	...

0801de88 <tsc2046_read_ll>:

void tsc2046_read_ll( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 801de88:	b580      	push	{r7, lr}
 801de8a:	b088      	sub	sp, #32
 801de8c:	af02      	add	r7, sp, #8
 801de8e:	60f8      	str	r0, [r7, #12]
 801de90:	60b9      	str	r1, [r7, #8]
 801de92:	607a      	str	r2, [r7, #4]
	uint8_t buf_tx[3] = {0};
 801de94:	4b2d      	ldr	r3, [pc, #180]	; (801df4c <tsc2046_read_ll+0xc4>)
 801de96:	881b      	ldrh	r3, [r3, #0]
 801de98:	82bb      	strh	r3, [r7, #20]
 801de9a:	2300      	movs	r3, #0
 801de9c:	75bb      	strb	r3, [r7, #22]
	uint8_t buf_rx[3] = {0};
 801de9e:	4b2b      	ldr	r3, [pc, #172]	; (801df4c <tsc2046_read_ll+0xc4>)
 801dea0:	881b      	ldrh	r3, [r3, #0]
 801dea2:	823b      	strh	r3, [r7, #16]
 801dea4:	2300      	movs	r3, #0
 801dea6:	74bb      	strb	r3, [r7, #18]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_RESET);
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	6858      	ldr	r0, [r3, #4]
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	891b      	ldrh	r3, [r3, #8]
 801deb0:	2200      	movs	r2, #0
 801deb2:	4619      	mov	r1, r3
 801deb4:	f7ec fb6e 	bl	800a594 <HAL_GPIO_WritePin>

    buf_tx[0] = TSC2046_CHANNEL_X;
 801deb8:	2390      	movs	r3, #144	; 0x90
 801deba:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801debc:	68fb      	ldr	r3, [r7, #12]
 801debe:	6818      	ldr	r0, [r3, #0]
 801dec0:	f107 0210 	add.w	r2, r7, #16
 801dec4:	f107 0114 	add.w	r1, r7, #20
 801dec8:	f04f 33ff 	mov.w	r3, #4294967295
 801decc:	9300      	str	r3, [sp, #0]
 801dece:	2303      	movs	r3, #3
 801ded0:	f7ee f809 	bl	800bee6 <HAL_SPI_TransmitReceive>
    *x = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 801ded4:	7c7b      	ldrb	r3, [r7, #17]
 801ded6:	011b      	lsls	r3, r3, #4
 801ded8:	b21a      	sxth	r2, r3
 801deda:	7cbb      	ldrb	r3, [r7, #18]
 801dedc:	091b      	lsrs	r3, r3, #4
 801dede:	b2db      	uxtb	r3, r3
 801dee0:	b21b      	sxth	r3, r3
 801dee2:	4313      	orrs	r3, r2
 801dee4:	b21b      	sxth	r3, r3
 801dee6:	b29a      	uxth	r2, r3
 801dee8:	68bb      	ldr	r3, [r7, #8]
 801deea:	801a      	strh	r2, [r3, #0]

    buf_tx[0] = TSC2046_CHANNEL_Y;
 801deec:	23d0      	movs	r3, #208	; 0xd0
 801deee:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	6818      	ldr	r0, [r3, #0]
 801def4:	f107 0210 	add.w	r2, r7, #16
 801def8:	f107 0114 	add.w	r1, r7, #20
 801defc:	f04f 33ff 	mov.w	r3, #4294967295
 801df00:	9300      	str	r3, [sp, #0]
 801df02:	2303      	movs	r3, #3
 801df04:	f7ed ffef 	bl	800bee6 <HAL_SPI_TransmitReceive>
    *y = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 801df08:	7c7b      	ldrb	r3, [r7, #17]
 801df0a:	011b      	lsls	r3, r3, #4
 801df0c:	b21a      	sxth	r2, r3
 801df0e:	7cbb      	ldrb	r3, [r7, #18]
 801df10:	091b      	lsrs	r3, r3, #4
 801df12:	b2db      	uxtb	r3, r3
 801df14:	b21b      	sxth	r3, r3
 801df16:	4313      	orrs	r3, r2
 801df18:	b21b      	sxth	r3, r3
 801df1a:	b29a      	uxth	r2, r3
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	6858      	ldr	r0, [r3, #4]
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	891b      	ldrh	r3, [r3, #8]
 801df28:	2201      	movs	r2, #1
 801df2a:	4619      	mov	r1, r3
 801df2c:	f7ec fb32 	bl	800a594 <HAL_GPIO_WritePin>

    if (*x == 2047) {
 801df30:	68bb      	ldr	r3, [r7, #8]
 801df32:	881b      	ldrh	r3, [r3, #0]
 801df34:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801df38:	4293      	cmp	r3, r2
 801df3a:	d102      	bne.n	801df42 <tsc2046_read_ll+0xba>
        *x = 0;
 801df3c:	68bb      	ldr	r3, [r7, #8]
 801df3e:	2200      	movs	r2, #0
 801df40:	801a      	strh	r2, [r3, #0]
    }
}
 801df42:	bf00      	nop
 801df44:	3718      	adds	r7, #24
 801df46:	46bd      	mov	sp, r7
 801df48:	bd80      	pop	{r7, pc}
 801df4a:	bf00      	nop
 801df4c:	08022b08 	.word	0x08022b08

0801df50 <tsc2046_read>:

void tsc2046_read( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 801df50:	b580      	push	{r7, lr}
 801df52:	b088      	sub	sp, #32
 801df54:	af00      	add	r7, sp, #0
 801df56:	60f8      	str	r0, [r7, #12]
 801df58:	60b9      	str	r1, [r7, #8]
 801df5a:	607a      	str	r2, [r7, #4]
    int32_t x_acc = 0;
 801df5c:	2300      	movs	r3, #0
 801df5e:	61fb      	str	r3, [r7, #28]
    int32_t y_acc = 0;
 801df60:	2300      	movs	r3, #0
 801df62:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < tsc->avg; i++) {
 801df64:	2300      	movs	r3, #0
 801df66:	617b      	str	r3, [r7, #20]
 801df68:	e026      	b.n	801dfb8 <tsc2046_read+0x68>
    	tsc2046_read_ll(tsc, x, y);
 801df6a:	687a      	ldr	r2, [r7, #4]
 801df6c:	68b9      	ldr	r1, [r7, #8]
 801df6e:	68f8      	ldr	r0, [r7, #12]
 801df70:	f7ff ff8a 	bl	801de88 <tsc2046_read_ll>
        if (*x && *y) {
 801df74:	68bb      	ldr	r3, [r7, #8]
 801df76:	881b      	ldrh	r3, [r3, #0]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d016      	beq.n	801dfaa <tsc2046_read+0x5a>
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	881b      	ldrh	r3, [r3, #0]
 801df80:	2b00      	cmp	r3, #0
 801df82:	d012      	beq.n	801dfaa <tsc2046_read+0x5a>
            x_acc += *x;
 801df84:	68bb      	ldr	r3, [r7, #8]
 801df86:	881b      	ldrh	r3, [r3, #0]
 801df88:	461a      	mov	r2, r3
 801df8a:	69fb      	ldr	r3, [r7, #28]
 801df8c:	4413      	add	r3, r2
 801df8e:	61fb      	str	r3, [r7, #28]
            y_acc += *y;
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	881b      	ldrh	r3, [r3, #0]
 801df94:	461a      	mov	r2, r3
 801df96:	69bb      	ldr	r3, [r7, #24]
 801df98:	4413      	add	r3, r2
 801df9a:	61bb      	str	r3, [r7, #24]
        } else {
            *x = 0;
            *y = 0;
            return;
        }
        HAL_Delay(1);
 801df9c:	2001      	movs	r0, #1
 801df9e:	f7e8 fe27 	bl	8006bf0 <HAL_Delay>
    for (int i = 0; i < tsc->avg; i++) {
 801dfa2:	697b      	ldr	r3, [r7, #20]
 801dfa4:	3301      	adds	r3, #1
 801dfa6:	617b      	str	r3, [r7, #20]
 801dfa8:	e006      	b.n	801dfb8 <tsc2046_read+0x68>
            *x = 0;
 801dfaa:	68bb      	ldr	r3, [r7, #8]
 801dfac:	2200      	movs	r2, #0
 801dfae:	801a      	strh	r2, [r3, #0]
            *y = 0;
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	2200      	movs	r2, #0
 801dfb4:	801a      	strh	r2, [r3, #0]
            return;
 801dfb6:	e042      	b.n	801e03e <tsc2046_read+0xee>
    for (int i = 0; i < tsc->avg; i++) {
 801dfb8:	68fb      	ldr	r3, [r7, #12]
 801dfba:	69db      	ldr	r3, [r3, #28]
 801dfbc:	697a      	ldr	r2, [r7, #20]
 801dfbe:	429a      	cmp	r2, r3
 801dfc0:	dbd3      	blt.n	801df6a <tsc2046_read+0x1a>
    }
    *x = x_acc / tsc->avg;
 801dfc2:	68fb      	ldr	r3, [r7, #12]
 801dfc4:	69db      	ldr	r3, [r3, #28]
 801dfc6:	69fa      	ldr	r2, [r7, #28]
 801dfc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfcc:	b29a      	uxth	r2, r3
 801dfce:	68bb      	ldr	r3, [r7, #8]
 801dfd0:	801a      	strh	r2, [r3, #0]
    *y = y_acc / tsc->avg;
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	69db      	ldr	r3, [r3, #28]
 801dfd6:	69ba      	ldr	r2, [r7, #24]
 801dfd8:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfdc:	b29a      	uxth	r2, r3
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	801a      	strh	r2, [r3, #0]
    *x = tsc->ax * *x + tsc->bx;
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	ed93 7a03 	vldr	s14, [r3, #12]
 801dfe8:	68bb      	ldr	r3, [r7, #8]
 801dfea:	881b      	ldrh	r3, [r3, #0]
 801dfec:	ee07 3a90 	vmov	s15, r3
 801dff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	edd3 7a04 	vldr	s15, [r3, #16]
 801dffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e006:	ee17 3a90 	vmov	r3, s15
 801e00a:	b29a      	uxth	r2, r3
 801e00c:	68bb      	ldr	r3, [r7, #8]
 801e00e:	801a      	strh	r2, [r3, #0]
    *y = tsc->ay * *y + tsc->by;
 801e010:	68fb      	ldr	r3, [r7, #12]
 801e012:	ed93 7a05 	vldr	s14, [r3, #20]
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	881b      	ldrh	r3, [r3, #0]
 801e01a:	ee07 3a90 	vmov	s15, r3
 801e01e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e022:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	edd3 7a06 	vldr	s15, [r3, #24]
 801e02c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e034:	ee17 3a90 	vmov	r3, s15
 801e038:	b29a      	uxth	r2, r3
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	801a      	strh	r2, [r3, #0]
}
 801e03e:	3720      	adds	r7, #32
 801e040:	46bd      	mov	sp, r7
 801e042:	bd80      	pop	{r7, pc}

0801e044 <__assert_func>:
 801e044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e046:	4614      	mov	r4, r2
 801e048:	461a      	mov	r2, r3
 801e04a:	4b09      	ldr	r3, [pc, #36]	; (801e070 <__assert_func+0x2c>)
 801e04c:	681b      	ldr	r3, [r3, #0]
 801e04e:	4605      	mov	r5, r0
 801e050:	68d8      	ldr	r0, [r3, #12]
 801e052:	b14c      	cbz	r4, 801e068 <__assert_func+0x24>
 801e054:	4b07      	ldr	r3, [pc, #28]	; (801e074 <__assert_func+0x30>)
 801e056:	9100      	str	r1, [sp, #0]
 801e058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e05c:	4906      	ldr	r1, [pc, #24]	; (801e078 <__assert_func+0x34>)
 801e05e:	462b      	mov	r3, r5
 801e060:	f000 fd06 	bl	801ea70 <fiprintf>
 801e064:	f000 fe24 	bl	801ecb0 <abort>
 801e068:	4b04      	ldr	r3, [pc, #16]	; (801e07c <__assert_func+0x38>)
 801e06a:	461c      	mov	r4, r3
 801e06c:	e7f3      	b.n	801e056 <__assert_func+0x12>
 801e06e:	bf00      	nop
 801e070:	200001e8 	.word	0x200001e8
 801e074:	08023ebb 	.word	0x08023ebb
 801e078:	08023ec8 	.word	0x08023ec8
 801e07c:	08023ef6 	.word	0x08023ef6

0801e080 <__cvt>:
 801e080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e084:	ec55 4b10 	vmov	r4, r5, d0
 801e088:	2d00      	cmp	r5, #0
 801e08a:	460e      	mov	r6, r1
 801e08c:	4619      	mov	r1, r3
 801e08e:	462b      	mov	r3, r5
 801e090:	bfbb      	ittet	lt
 801e092:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e096:	461d      	movlt	r5, r3
 801e098:	2300      	movge	r3, #0
 801e09a:	232d      	movlt	r3, #45	; 0x2d
 801e09c:	700b      	strb	r3, [r1, #0]
 801e09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e0a4:	4691      	mov	r9, r2
 801e0a6:	f023 0820 	bic.w	r8, r3, #32
 801e0aa:	bfbc      	itt	lt
 801e0ac:	4622      	movlt	r2, r4
 801e0ae:	4614      	movlt	r4, r2
 801e0b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e0b4:	d005      	beq.n	801e0c2 <__cvt+0x42>
 801e0b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e0ba:	d100      	bne.n	801e0be <__cvt+0x3e>
 801e0bc:	3601      	adds	r6, #1
 801e0be:	2102      	movs	r1, #2
 801e0c0:	e000      	b.n	801e0c4 <__cvt+0x44>
 801e0c2:	2103      	movs	r1, #3
 801e0c4:	ab03      	add	r3, sp, #12
 801e0c6:	9301      	str	r3, [sp, #4]
 801e0c8:	ab02      	add	r3, sp, #8
 801e0ca:	9300      	str	r3, [sp, #0]
 801e0cc:	ec45 4b10 	vmov	d0, r4, r5
 801e0d0:	4653      	mov	r3, sl
 801e0d2:	4632      	mov	r2, r6
 801e0d4:	f000 fe7c 	bl	801edd0 <_dtoa_r>
 801e0d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e0dc:	4607      	mov	r7, r0
 801e0de:	d102      	bne.n	801e0e6 <__cvt+0x66>
 801e0e0:	f019 0f01 	tst.w	r9, #1
 801e0e4:	d022      	beq.n	801e12c <__cvt+0xac>
 801e0e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e0ea:	eb07 0906 	add.w	r9, r7, r6
 801e0ee:	d110      	bne.n	801e112 <__cvt+0x92>
 801e0f0:	783b      	ldrb	r3, [r7, #0]
 801e0f2:	2b30      	cmp	r3, #48	; 0x30
 801e0f4:	d10a      	bne.n	801e10c <__cvt+0x8c>
 801e0f6:	2200      	movs	r2, #0
 801e0f8:	2300      	movs	r3, #0
 801e0fa:	4620      	mov	r0, r4
 801e0fc:	4629      	mov	r1, r5
 801e0fe:	f7e2 fd0b 	bl	8000b18 <__aeabi_dcmpeq>
 801e102:	b918      	cbnz	r0, 801e10c <__cvt+0x8c>
 801e104:	f1c6 0601 	rsb	r6, r6, #1
 801e108:	f8ca 6000 	str.w	r6, [sl]
 801e10c:	f8da 3000 	ldr.w	r3, [sl]
 801e110:	4499      	add	r9, r3
 801e112:	2200      	movs	r2, #0
 801e114:	2300      	movs	r3, #0
 801e116:	4620      	mov	r0, r4
 801e118:	4629      	mov	r1, r5
 801e11a:	f7e2 fcfd 	bl	8000b18 <__aeabi_dcmpeq>
 801e11e:	b108      	cbz	r0, 801e124 <__cvt+0xa4>
 801e120:	f8cd 900c 	str.w	r9, [sp, #12]
 801e124:	2230      	movs	r2, #48	; 0x30
 801e126:	9b03      	ldr	r3, [sp, #12]
 801e128:	454b      	cmp	r3, r9
 801e12a:	d307      	bcc.n	801e13c <__cvt+0xbc>
 801e12c:	9b03      	ldr	r3, [sp, #12]
 801e12e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e130:	1bdb      	subs	r3, r3, r7
 801e132:	4638      	mov	r0, r7
 801e134:	6013      	str	r3, [r2, #0]
 801e136:	b004      	add	sp, #16
 801e138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e13c:	1c59      	adds	r1, r3, #1
 801e13e:	9103      	str	r1, [sp, #12]
 801e140:	701a      	strb	r2, [r3, #0]
 801e142:	e7f0      	b.n	801e126 <__cvt+0xa6>

0801e144 <__exponent>:
 801e144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e146:	4603      	mov	r3, r0
 801e148:	2900      	cmp	r1, #0
 801e14a:	bfb8      	it	lt
 801e14c:	4249      	neglt	r1, r1
 801e14e:	f803 2b02 	strb.w	r2, [r3], #2
 801e152:	bfb4      	ite	lt
 801e154:	222d      	movlt	r2, #45	; 0x2d
 801e156:	222b      	movge	r2, #43	; 0x2b
 801e158:	2909      	cmp	r1, #9
 801e15a:	7042      	strb	r2, [r0, #1]
 801e15c:	dd2a      	ble.n	801e1b4 <__exponent+0x70>
 801e15e:	f10d 0207 	add.w	r2, sp, #7
 801e162:	4617      	mov	r7, r2
 801e164:	260a      	movs	r6, #10
 801e166:	4694      	mov	ip, r2
 801e168:	fb91 f5f6 	sdiv	r5, r1, r6
 801e16c:	fb06 1415 	mls	r4, r6, r5, r1
 801e170:	3430      	adds	r4, #48	; 0x30
 801e172:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801e176:	460c      	mov	r4, r1
 801e178:	2c63      	cmp	r4, #99	; 0x63
 801e17a:	f102 32ff 	add.w	r2, r2, #4294967295
 801e17e:	4629      	mov	r1, r5
 801e180:	dcf1      	bgt.n	801e166 <__exponent+0x22>
 801e182:	3130      	adds	r1, #48	; 0x30
 801e184:	f1ac 0402 	sub.w	r4, ip, #2
 801e188:	f802 1c01 	strb.w	r1, [r2, #-1]
 801e18c:	1c41      	adds	r1, r0, #1
 801e18e:	4622      	mov	r2, r4
 801e190:	42ba      	cmp	r2, r7
 801e192:	d30a      	bcc.n	801e1aa <__exponent+0x66>
 801e194:	f10d 0209 	add.w	r2, sp, #9
 801e198:	eba2 020c 	sub.w	r2, r2, ip
 801e19c:	42bc      	cmp	r4, r7
 801e19e:	bf88      	it	hi
 801e1a0:	2200      	movhi	r2, #0
 801e1a2:	4413      	add	r3, r2
 801e1a4:	1a18      	subs	r0, r3, r0
 801e1a6:	b003      	add	sp, #12
 801e1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 801e1ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 801e1b2:	e7ed      	b.n	801e190 <__exponent+0x4c>
 801e1b4:	2330      	movs	r3, #48	; 0x30
 801e1b6:	3130      	adds	r1, #48	; 0x30
 801e1b8:	7083      	strb	r3, [r0, #2]
 801e1ba:	70c1      	strb	r1, [r0, #3]
 801e1bc:	1d03      	adds	r3, r0, #4
 801e1be:	e7f1      	b.n	801e1a4 <__exponent+0x60>

0801e1c0 <_printf_float>:
 801e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1c4:	ed2d 8b02 	vpush	{d8}
 801e1c8:	b08d      	sub	sp, #52	; 0x34
 801e1ca:	460c      	mov	r4, r1
 801e1cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e1d0:	4616      	mov	r6, r2
 801e1d2:	461f      	mov	r7, r3
 801e1d4:	4605      	mov	r5, r0
 801e1d6:	f000 fce7 	bl	801eba8 <_localeconv_r>
 801e1da:	f8d0 a000 	ldr.w	sl, [r0]
 801e1de:	4650      	mov	r0, sl
 801e1e0:	f7e2 f86e 	bl	80002c0 <strlen>
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	930a      	str	r3, [sp, #40]	; 0x28
 801e1e8:	6823      	ldr	r3, [r4, #0]
 801e1ea:	9305      	str	r3, [sp, #20]
 801e1ec:	f8d8 3000 	ldr.w	r3, [r8]
 801e1f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e1f4:	3307      	adds	r3, #7
 801e1f6:	f023 0307 	bic.w	r3, r3, #7
 801e1fa:	f103 0208 	add.w	r2, r3, #8
 801e1fe:	f8c8 2000 	str.w	r2, [r8]
 801e202:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e206:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e20a:	9307      	str	r3, [sp, #28]
 801e20c:	f8cd 8018 	str.w	r8, [sp, #24]
 801e210:	ee08 0a10 	vmov	s16, r0
 801e214:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801e218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e21c:	4b9e      	ldr	r3, [pc, #632]	; (801e498 <_printf_float+0x2d8>)
 801e21e:	f04f 32ff 	mov.w	r2, #4294967295
 801e222:	f7e2 fcab 	bl	8000b7c <__aeabi_dcmpun>
 801e226:	bb88      	cbnz	r0, 801e28c <_printf_float+0xcc>
 801e228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e22c:	4b9a      	ldr	r3, [pc, #616]	; (801e498 <_printf_float+0x2d8>)
 801e22e:	f04f 32ff 	mov.w	r2, #4294967295
 801e232:	f7e2 fc85 	bl	8000b40 <__aeabi_dcmple>
 801e236:	bb48      	cbnz	r0, 801e28c <_printf_float+0xcc>
 801e238:	2200      	movs	r2, #0
 801e23a:	2300      	movs	r3, #0
 801e23c:	4640      	mov	r0, r8
 801e23e:	4649      	mov	r1, r9
 801e240:	f7e2 fc74 	bl	8000b2c <__aeabi_dcmplt>
 801e244:	b110      	cbz	r0, 801e24c <_printf_float+0x8c>
 801e246:	232d      	movs	r3, #45	; 0x2d
 801e248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e24c:	4a93      	ldr	r2, [pc, #588]	; (801e49c <_printf_float+0x2dc>)
 801e24e:	4b94      	ldr	r3, [pc, #592]	; (801e4a0 <_printf_float+0x2e0>)
 801e250:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e254:	bf94      	ite	ls
 801e256:	4690      	movls	r8, r2
 801e258:	4698      	movhi	r8, r3
 801e25a:	2303      	movs	r3, #3
 801e25c:	6123      	str	r3, [r4, #16]
 801e25e:	9b05      	ldr	r3, [sp, #20]
 801e260:	f023 0304 	bic.w	r3, r3, #4
 801e264:	6023      	str	r3, [r4, #0]
 801e266:	f04f 0900 	mov.w	r9, #0
 801e26a:	9700      	str	r7, [sp, #0]
 801e26c:	4633      	mov	r3, r6
 801e26e:	aa0b      	add	r2, sp, #44	; 0x2c
 801e270:	4621      	mov	r1, r4
 801e272:	4628      	mov	r0, r5
 801e274:	f000 f9da 	bl	801e62c <_printf_common>
 801e278:	3001      	adds	r0, #1
 801e27a:	f040 8090 	bne.w	801e39e <_printf_float+0x1de>
 801e27e:	f04f 30ff 	mov.w	r0, #4294967295
 801e282:	b00d      	add	sp, #52	; 0x34
 801e284:	ecbd 8b02 	vpop	{d8}
 801e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e28c:	4642      	mov	r2, r8
 801e28e:	464b      	mov	r3, r9
 801e290:	4640      	mov	r0, r8
 801e292:	4649      	mov	r1, r9
 801e294:	f7e2 fc72 	bl	8000b7c <__aeabi_dcmpun>
 801e298:	b140      	cbz	r0, 801e2ac <_printf_float+0xec>
 801e29a:	464b      	mov	r3, r9
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	bfbc      	itt	lt
 801e2a0:	232d      	movlt	r3, #45	; 0x2d
 801e2a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e2a6:	4a7f      	ldr	r2, [pc, #508]	; (801e4a4 <_printf_float+0x2e4>)
 801e2a8:	4b7f      	ldr	r3, [pc, #508]	; (801e4a8 <_printf_float+0x2e8>)
 801e2aa:	e7d1      	b.n	801e250 <_printf_float+0x90>
 801e2ac:	6863      	ldr	r3, [r4, #4]
 801e2ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e2b2:	9206      	str	r2, [sp, #24]
 801e2b4:	1c5a      	adds	r2, r3, #1
 801e2b6:	d13f      	bne.n	801e338 <_printf_float+0x178>
 801e2b8:	2306      	movs	r3, #6
 801e2ba:	6063      	str	r3, [r4, #4]
 801e2bc:	9b05      	ldr	r3, [sp, #20]
 801e2be:	6861      	ldr	r1, [r4, #4]
 801e2c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	9303      	str	r3, [sp, #12]
 801e2c8:	ab0a      	add	r3, sp, #40	; 0x28
 801e2ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e2ce:	ab09      	add	r3, sp, #36	; 0x24
 801e2d0:	ec49 8b10 	vmov	d0, r8, r9
 801e2d4:	9300      	str	r3, [sp, #0]
 801e2d6:	6022      	str	r2, [r4, #0]
 801e2d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e2dc:	4628      	mov	r0, r5
 801e2de:	f7ff fecf 	bl	801e080 <__cvt>
 801e2e2:	9b06      	ldr	r3, [sp, #24]
 801e2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e2e6:	2b47      	cmp	r3, #71	; 0x47
 801e2e8:	4680      	mov	r8, r0
 801e2ea:	d108      	bne.n	801e2fe <_printf_float+0x13e>
 801e2ec:	1cc8      	adds	r0, r1, #3
 801e2ee:	db02      	blt.n	801e2f6 <_printf_float+0x136>
 801e2f0:	6863      	ldr	r3, [r4, #4]
 801e2f2:	4299      	cmp	r1, r3
 801e2f4:	dd41      	ble.n	801e37a <_printf_float+0x1ba>
 801e2f6:	f1ab 0302 	sub.w	r3, fp, #2
 801e2fa:	fa5f fb83 	uxtb.w	fp, r3
 801e2fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e302:	d820      	bhi.n	801e346 <_printf_float+0x186>
 801e304:	3901      	subs	r1, #1
 801e306:	465a      	mov	r2, fp
 801e308:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e30c:	9109      	str	r1, [sp, #36]	; 0x24
 801e30e:	f7ff ff19 	bl	801e144 <__exponent>
 801e312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e314:	1813      	adds	r3, r2, r0
 801e316:	2a01      	cmp	r2, #1
 801e318:	4681      	mov	r9, r0
 801e31a:	6123      	str	r3, [r4, #16]
 801e31c:	dc02      	bgt.n	801e324 <_printf_float+0x164>
 801e31e:	6822      	ldr	r2, [r4, #0]
 801e320:	07d2      	lsls	r2, r2, #31
 801e322:	d501      	bpl.n	801e328 <_printf_float+0x168>
 801e324:	3301      	adds	r3, #1
 801e326:	6123      	str	r3, [r4, #16]
 801e328:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	d09c      	beq.n	801e26a <_printf_float+0xaa>
 801e330:	232d      	movs	r3, #45	; 0x2d
 801e332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e336:	e798      	b.n	801e26a <_printf_float+0xaa>
 801e338:	9a06      	ldr	r2, [sp, #24]
 801e33a:	2a47      	cmp	r2, #71	; 0x47
 801e33c:	d1be      	bne.n	801e2bc <_printf_float+0xfc>
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d1bc      	bne.n	801e2bc <_printf_float+0xfc>
 801e342:	2301      	movs	r3, #1
 801e344:	e7b9      	b.n	801e2ba <_printf_float+0xfa>
 801e346:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e34a:	d118      	bne.n	801e37e <_printf_float+0x1be>
 801e34c:	2900      	cmp	r1, #0
 801e34e:	6863      	ldr	r3, [r4, #4]
 801e350:	dd0b      	ble.n	801e36a <_printf_float+0x1aa>
 801e352:	6121      	str	r1, [r4, #16]
 801e354:	b913      	cbnz	r3, 801e35c <_printf_float+0x19c>
 801e356:	6822      	ldr	r2, [r4, #0]
 801e358:	07d0      	lsls	r0, r2, #31
 801e35a:	d502      	bpl.n	801e362 <_printf_float+0x1a2>
 801e35c:	3301      	adds	r3, #1
 801e35e:	440b      	add	r3, r1
 801e360:	6123      	str	r3, [r4, #16]
 801e362:	65a1      	str	r1, [r4, #88]	; 0x58
 801e364:	f04f 0900 	mov.w	r9, #0
 801e368:	e7de      	b.n	801e328 <_printf_float+0x168>
 801e36a:	b913      	cbnz	r3, 801e372 <_printf_float+0x1b2>
 801e36c:	6822      	ldr	r2, [r4, #0]
 801e36e:	07d2      	lsls	r2, r2, #31
 801e370:	d501      	bpl.n	801e376 <_printf_float+0x1b6>
 801e372:	3302      	adds	r3, #2
 801e374:	e7f4      	b.n	801e360 <_printf_float+0x1a0>
 801e376:	2301      	movs	r3, #1
 801e378:	e7f2      	b.n	801e360 <_printf_float+0x1a0>
 801e37a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e380:	4299      	cmp	r1, r3
 801e382:	db05      	blt.n	801e390 <_printf_float+0x1d0>
 801e384:	6823      	ldr	r3, [r4, #0]
 801e386:	6121      	str	r1, [r4, #16]
 801e388:	07d8      	lsls	r0, r3, #31
 801e38a:	d5ea      	bpl.n	801e362 <_printf_float+0x1a2>
 801e38c:	1c4b      	adds	r3, r1, #1
 801e38e:	e7e7      	b.n	801e360 <_printf_float+0x1a0>
 801e390:	2900      	cmp	r1, #0
 801e392:	bfd4      	ite	le
 801e394:	f1c1 0202 	rsble	r2, r1, #2
 801e398:	2201      	movgt	r2, #1
 801e39a:	4413      	add	r3, r2
 801e39c:	e7e0      	b.n	801e360 <_printf_float+0x1a0>
 801e39e:	6823      	ldr	r3, [r4, #0]
 801e3a0:	055a      	lsls	r2, r3, #21
 801e3a2:	d407      	bmi.n	801e3b4 <_printf_float+0x1f4>
 801e3a4:	6923      	ldr	r3, [r4, #16]
 801e3a6:	4642      	mov	r2, r8
 801e3a8:	4631      	mov	r1, r6
 801e3aa:	4628      	mov	r0, r5
 801e3ac:	47b8      	blx	r7
 801e3ae:	3001      	adds	r0, #1
 801e3b0:	d12c      	bne.n	801e40c <_printf_float+0x24c>
 801e3b2:	e764      	b.n	801e27e <_printf_float+0xbe>
 801e3b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e3b8:	f240 80e0 	bls.w	801e57c <_printf_float+0x3bc>
 801e3bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e3c0:	2200      	movs	r2, #0
 801e3c2:	2300      	movs	r3, #0
 801e3c4:	f7e2 fba8 	bl	8000b18 <__aeabi_dcmpeq>
 801e3c8:	2800      	cmp	r0, #0
 801e3ca:	d034      	beq.n	801e436 <_printf_float+0x276>
 801e3cc:	4a37      	ldr	r2, [pc, #220]	; (801e4ac <_printf_float+0x2ec>)
 801e3ce:	2301      	movs	r3, #1
 801e3d0:	4631      	mov	r1, r6
 801e3d2:	4628      	mov	r0, r5
 801e3d4:	47b8      	blx	r7
 801e3d6:	3001      	adds	r0, #1
 801e3d8:	f43f af51 	beq.w	801e27e <_printf_float+0xbe>
 801e3dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e3e0:	429a      	cmp	r2, r3
 801e3e2:	db02      	blt.n	801e3ea <_printf_float+0x22a>
 801e3e4:	6823      	ldr	r3, [r4, #0]
 801e3e6:	07d8      	lsls	r0, r3, #31
 801e3e8:	d510      	bpl.n	801e40c <_printf_float+0x24c>
 801e3ea:	ee18 3a10 	vmov	r3, s16
 801e3ee:	4652      	mov	r2, sl
 801e3f0:	4631      	mov	r1, r6
 801e3f2:	4628      	mov	r0, r5
 801e3f4:	47b8      	blx	r7
 801e3f6:	3001      	adds	r0, #1
 801e3f8:	f43f af41 	beq.w	801e27e <_printf_float+0xbe>
 801e3fc:	f04f 0800 	mov.w	r8, #0
 801e400:	f104 091a 	add.w	r9, r4, #26
 801e404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e406:	3b01      	subs	r3, #1
 801e408:	4543      	cmp	r3, r8
 801e40a:	dc09      	bgt.n	801e420 <_printf_float+0x260>
 801e40c:	6823      	ldr	r3, [r4, #0]
 801e40e:	079b      	lsls	r3, r3, #30
 801e410:	f100 8107 	bmi.w	801e622 <_printf_float+0x462>
 801e414:	68e0      	ldr	r0, [r4, #12]
 801e416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e418:	4298      	cmp	r0, r3
 801e41a:	bfb8      	it	lt
 801e41c:	4618      	movlt	r0, r3
 801e41e:	e730      	b.n	801e282 <_printf_float+0xc2>
 801e420:	2301      	movs	r3, #1
 801e422:	464a      	mov	r2, r9
 801e424:	4631      	mov	r1, r6
 801e426:	4628      	mov	r0, r5
 801e428:	47b8      	blx	r7
 801e42a:	3001      	adds	r0, #1
 801e42c:	f43f af27 	beq.w	801e27e <_printf_float+0xbe>
 801e430:	f108 0801 	add.w	r8, r8, #1
 801e434:	e7e6      	b.n	801e404 <_printf_float+0x244>
 801e436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e438:	2b00      	cmp	r3, #0
 801e43a:	dc39      	bgt.n	801e4b0 <_printf_float+0x2f0>
 801e43c:	4a1b      	ldr	r2, [pc, #108]	; (801e4ac <_printf_float+0x2ec>)
 801e43e:	2301      	movs	r3, #1
 801e440:	4631      	mov	r1, r6
 801e442:	4628      	mov	r0, r5
 801e444:	47b8      	blx	r7
 801e446:	3001      	adds	r0, #1
 801e448:	f43f af19 	beq.w	801e27e <_printf_float+0xbe>
 801e44c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801e450:	4313      	orrs	r3, r2
 801e452:	d102      	bne.n	801e45a <_printf_float+0x29a>
 801e454:	6823      	ldr	r3, [r4, #0]
 801e456:	07d9      	lsls	r1, r3, #31
 801e458:	d5d8      	bpl.n	801e40c <_printf_float+0x24c>
 801e45a:	ee18 3a10 	vmov	r3, s16
 801e45e:	4652      	mov	r2, sl
 801e460:	4631      	mov	r1, r6
 801e462:	4628      	mov	r0, r5
 801e464:	47b8      	blx	r7
 801e466:	3001      	adds	r0, #1
 801e468:	f43f af09 	beq.w	801e27e <_printf_float+0xbe>
 801e46c:	f04f 0900 	mov.w	r9, #0
 801e470:	f104 0a1a 	add.w	sl, r4, #26
 801e474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e476:	425b      	negs	r3, r3
 801e478:	454b      	cmp	r3, r9
 801e47a:	dc01      	bgt.n	801e480 <_printf_float+0x2c0>
 801e47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e47e:	e792      	b.n	801e3a6 <_printf_float+0x1e6>
 801e480:	2301      	movs	r3, #1
 801e482:	4652      	mov	r2, sl
 801e484:	4631      	mov	r1, r6
 801e486:	4628      	mov	r0, r5
 801e488:	47b8      	blx	r7
 801e48a:	3001      	adds	r0, #1
 801e48c:	f43f aef7 	beq.w	801e27e <_printf_float+0xbe>
 801e490:	f109 0901 	add.w	r9, r9, #1
 801e494:	e7ee      	b.n	801e474 <_printf_float+0x2b4>
 801e496:	bf00      	nop
 801e498:	7fefffff 	.word	0x7fefffff
 801e49c:	08023ef7 	.word	0x08023ef7
 801e4a0:	08023efb 	.word	0x08023efb
 801e4a4:	08023eff 	.word	0x08023eff
 801e4a8:	08023f03 	.word	0x08023f03
 801e4ac:	08023f07 	.word	0x08023f07
 801e4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e4b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	bfa8      	it	ge
 801e4b8:	461a      	movge	r2, r3
 801e4ba:	2a00      	cmp	r2, #0
 801e4bc:	4691      	mov	r9, r2
 801e4be:	dc37      	bgt.n	801e530 <_printf_float+0x370>
 801e4c0:	f04f 0b00 	mov.w	fp, #0
 801e4c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e4c8:	f104 021a 	add.w	r2, r4, #26
 801e4cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e4ce:	9305      	str	r3, [sp, #20]
 801e4d0:	eba3 0309 	sub.w	r3, r3, r9
 801e4d4:	455b      	cmp	r3, fp
 801e4d6:	dc33      	bgt.n	801e540 <_printf_float+0x380>
 801e4d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e4dc:	429a      	cmp	r2, r3
 801e4de:	db3b      	blt.n	801e558 <_printf_float+0x398>
 801e4e0:	6823      	ldr	r3, [r4, #0]
 801e4e2:	07da      	lsls	r2, r3, #31
 801e4e4:	d438      	bmi.n	801e558 <_printf_float+0x398>
 801e4e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801e4ea:	eba2 0903 	sub.w	r9, r2, r3
 801e4ee:	9b05      	ldr	r3, [sp, #20]
 801e4f0:	1ad2      	subs	r2, r2, r3
 801e4f2:	4591      	cmp	r9, r2
 801e4f4:	bfa8      	it	ge
 801e4f6:	4691      	movge	r9, r2
 801e4f8:	f1b9 0f00 	cmp.w	r9, #0
 801e4fc:	dc35      	bgt.n	801e56a <_printf_float+0x3aa>
 801e4fe:	f04f 0800 	mov.w	r8, #0
 801e502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e506:	f104 0a1a 	add.w	sl, r4, #26
 801e50a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e50e:	1a9b      	subs	r3, r3, r2
 801e510:	eba3 0309 	sub.w	r3, r3, r9
 801e514:	4543      	cmp	r3, r8
 801e516:	f77f af79 	ble.w	801e40c <_printf_float+0x24c>
 801e51a:	2301      	movs	r3, #1
 801e51c:	4652      	mov	r2, sl
 801e51e:	4631      	mov	r1, r6
 801e520:	4628      	mov	r0, r5
 801e522:	47b8      	blx	r7
 801e524:	3001      	adds	r0, #1
 801e526:	f43f aeaa 	beq.w	801e27e <_printf_float+0xbe>
 801e52a:	f108 0801 	add.w	r8, r8, #1
 801e52e:	e7ec      	b.n	801e50a <_printf_float+0x34a>
 801e530:	4613      	mov	r3, r2
 801e532:	4631      	mov	r1, r6
 801e534:	4642      	mov	r2, r8
 801e536:	4628      	mov	r0, r5
 801e538:	47b8      	blx	r7
 801e53a:	3001      	adds	r0, #1
 801e53c:	d1c0      	bne.n	801e4c0 <_printf_float+0x300>
 801e53e:	e69e      	b.n	801e27e <_printf_float+0xbe>
 801e540:	2301      	movs	r3, #1
 801e542:	4631      	mov	r1, r6
 801e544:	4628      	mov	r0, r5
 801e546:	9205      	str	r2, [sp, #20]
 801e548:	47b8      	blx	r7
 801e54a:	3001      	adds	r0, #1
 801e54c:	f43f ae97 	beq.w	801e27e <_printf_float+0xbe>
 801e550:	9a05      	ldr	r2, [sp, #20]
 801e552:	f10b 0b01 	add.w	fp, fp, #1
 801e556:	e7b9      	b.n	801e4cc <_printf_float+0x30c>
 801e558:	ee18 3a10 	vmov	r3, s16
 801e55c:	4652      	mov	r2, sl
 801e55e:	4631      	mov	r1, r6
 801e560:	4628      	mov	r0, r5
 801e562:	47b8      	blx	r7
 801e564:	3001      	adds	r0, #1
 801e566:	d1be      	bne.n	801e4e6 <_printf_float+0x326>
 801e568:	e689      	b.n	801e27e <_printf_float+0xbe>
 801e56a:	9a05      	ldr	r2, [sp, #20]
 801e56c:	464b      	mov	r3, r9
 801e56e:	4442      	add	r2, r8
 801e570:	4631      	mov	r1, r6
 801e572:	4628      	mov	r0, r5
 801e574:	47b8      	blx	r7
 801e576:	3001      	adds	r0, #1
 801e578:	d1c1      	bne.n	801e4fe <_printf_float+0x33e>
 801e57a:	e680      	b.n	801e27e <_printf_float+0xbe>
 801e57c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e57e:	2a01      	cmp	r2, #1
 801e580:	dc01      	bgt.n	801e586 <_printf_float+0x3c6>
 801e582:	07db      	lsls	r3, r3, #31
 801e584:	d53a      	bpl.n	801e5fc <_printf_float+0x43c>
 801e586:	2301      	movs	r3, #1
 801e588:	4642      	mov	r2, r8
 801e58a:	4631      	mov	r1, r6
 801e58c:	4628      	mov	r0, r5
 801e58e:	47b8      	blx	r7
 801e590:	3001      	adds	r0, #1
 801e592:	f43f ae74 	beq.w	801e27e <_printf_float+0xbe>
 801e596:	ee18 3a10 	vmov	r3, s16
 801e59a:	4652      	mov	r2, sl
 801e59c:	4631      	mov	r1, r6
 801e59e:	4628      	mov	r0, r5
 801e5a0:	47b8      	blx	r7
 801e5a2:	3001      	adds	r0, #1
 801e5a4:	f43f ae6b 	beq.w	801e27e <_printf_float+0xbe>
 801e5a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	2300      	movs	r3, #0
 801e5b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801e5b4:	f7e2 fab0 	bl	8000b18 <__aeabi_dcmpeq>
 801e5b8:	b9d8      	cbnz	r0, 801e5f2 <_printf_float+0x432>
 801e5ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e5be:	f108 0201 	add.w	r2, r8, #1
 801e5c2:	4631      	mov	r1, r6
 801e5c4:	4628      	mov	r0, r5
 801e5c6:	47b8      	blx	r7
 801e5c8:	3001      	adds	r0, #1
 801e5ca:	d10e      	bne.n	801e5ea <_printf_float+0x42a>
 801e5cc:	e657      	b.n	801e27e <_printf_float+0xbe>
 801e5ce:	2301      	movs	r3, #1
 801e5d0:	4652      	mov	r2, sl
 801e5d2:	4631      	mov	r1, r6
 801e5d4:	4628      	mov	r0, r5
 801e5d6:	47b8      	blx	r7
 801e5d8:	3001      	adds	r0, #1
 801e5da:	f43f ae50 	beq.w	801e27e <_printf_float+0xbe>
 801e5de:	f108 0801 	add.w	r8, r8, #1
 801e5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5e4:	3b01      	subs	r3, #1
 801e5e6:	4543      	cmp	r3, r8
 801e5e8:	dcf1      	bgt.n	801e5ce <_printf_float+0x40e>
 801e5ea:	464b      	mov	r3, r9
 801e5ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e5f0:	e6da      	b.n	801e3a8 <_printf_float+0x1e8>
 801e5f2:	f04f 0800 	mov.w	r8, #0
 801e5f6:	f104 0a1a 	add.w	sl, r4, #26
 801e5fa:	e7f2      	b.n	801e5e2 <_printf_float+0x422>
 801e5fc:	2301      	movs	r3, #1
 801e5fe:	4642      	mov	r2, r8
 801e600:	e7df      	b.n	801e5c2 <_printf_float+0x402>
 801e602:	2301      	movs	r3, #1
 801e604:	464a      	mov	r2, r9
 801e606:	4631      	mov	r1, r6
 801e608:	4628      	mov	r0, r5
 801e60a:	47b8      	blx	r7
 801e60c:	3001      	adds	r0, #1
 801e60e:	f43f ae36 	beq.w	801e27e <_printf_float+0xbe>
 801e612:	f108 0801 	add.w	r8, r8, #1
 801e616:	68e3      	ldr	r3, [r4, #12]
 801e618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e61a:	1a5b      	subs	r3, r3, r1
 801e61c:	4543      	cmp	r3, r8
 801e61e:	dcf0      	bgt.n	801e602 <_printf_float+0x442>
 801e620:	e6f8      	b.n	801e414 <_printf_float+0x254>
 801e622:	f04f 0800 	mov.w	r8, #0
 801e626:	f104 0919 	add.w	r9, r4, #25
 801e62a:	e7f4      	b.n	801e616 <_printf_float+0x456>

0801e62c <_printf_common>:
 801e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e630:	4616      	mov	r6, r2
 801e632:	4699      	mov	r9, r3
 801e634:	688a      	ldr	r2, [r1, #8]
 801e636:	690b      	ldr	r3, [r1, #16]
 801e638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e63c:	4293      	cmp	r3, r2
 801e63e:	bfb8      	it	lt
 801e640:	4613      	movlt	r3, r2
 801e642:	6033      	str	r3, [r6, #0]
 801e644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e648:	4607      	mov	r7, r0
 801e64a:	460c      	mov	r4, r1
 801e64c:	b10a      	cbz	r2, 801e652 <_printf_common+0x26>
 801e64e:	3301      	adds	r3, #1
 801e650:	6033      	str	r3, [r6, #0]
 801e652:	6823      	ldr	r3, [r4, #0]
 801e654:	0699      	lsls	r1, r3, #26
 801e656:	bf42      	ittt	mi
 801e658:	6833      	ldrmi	r3, [r6, #0]
 801e65a:	3302      	addmi	r3, #2
 801e65c:	6033      	strmi	r3, [r6, #0]
 801e65e:	6825      	ldr	r5, [r4, #0]
 801e660:	f015 0506 	ands.w	r5, r5, #6
 801e664:	d106      	bne.n	801e674 <_printf_common+0x48>
 801e666:	f104 0a19 	add.w	sl, r4, #25
 801e66a:	68e3      	ldr	r3, [r4, #12]
 801e66c:	6832      	ldr	r2, [r6, #0]
 801e66e:	1a9b      	subs	r3, r3, r2
 801e670:	42ab      	cmp	r3, r5
 801e672:	dc26      	bgt.n	801e6c2 <_printf_common+0x96>
 801e674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e678:	1e13      	subs	r3, r2, #0
 801e67a:	6822      	ldr	r2, [r4, #0]
 801e67c:	bf18      	it	ne
 801e67e:	2301      	movne	r3, #1
 801e680:	0692      	lsls	r2, r2, #26
 801e682:	d42b      	bmi.n	801e6dc <_printf_common+0xb0>
 801e684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e688:	4649      	mov	r1, r9
 801e68a:	4638      	mov	r0, r7
 801e68c:	47c0      	blx	r8
 801e68e:	3001      	adds	r0, #1
 801e690:	d01e      	beq.n	801e6d0 <_printf_common+0xa4>
 801e692:	6823      	ldr	r3, [r4, #0]
 801e694:	6922      	ldr	r2, [r4, #16]
 801e696:	f003 0306 	and.w	r3, r3, #6
 801e69a:	2b04      	cmp	r3, #4
 801e69c:	bf02      	ittt	eq
 801e69e:	68e5      	ldreq	r5, [r4, #12]
 801e6a0:	6833      	ldreq	r3, [r6, #0]
 801e6a2:	1aed      	subeq	r5, r5, r3
 801e6a4:	68a3      	ldr	r3, [r4, #8]
 801e6a6:	bf0c      	ite	eq
 801e6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e6ac:	2500      	movne	r5, #0
 801e6ae:	4293      	cmp	r3, r2
 801e6b0:	bfc4      	itt	gt
 801e6b2:	1a9b      	subgt	r3, r3, r2
 801e6b4:	18ed      	addgt	r5, r5, r3
 801e6b6:	2600      	movs	r6, #0
 801e6b8:	341a      	adds	r4, #26
 801e6ba:	42b5      	cmp	r5, r6
 801e6bc:	d11a      	bne.n	801e6f4 <_printf_common+0xc8>
 801e6be:	2000      	movs	r0, #0
 801e6c0:	e008      	b.n	801e6d4 <_printf_common+0xa8>
 801e6c2:	2301      	movs	r3, #1
 801e6c4:	4652      	mov	r2, sl
 801e6c6:	4649      	mov	r1, r9
 801e6c8:	4638      	mov	r0, r7
 801e6ca:	47c0      	blx	r8
 801e6cc:	3001      	adds	r0, #1
 801e6ce:	d103      	bne.n	801e6d8 <_printf_common+0xac>
 801e6d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6d8:	3501      	adds	r5, #1
 801e6da:	e7c6      	b.n	801e66a <_printf_common+0x3e>
 801e6dc:	18e1      	adds	r1, r4, r3
 801e6de:	1c5a      	adds	r2, r3, #1
 801e6e0:	2030      	movs	r0, #48	; 0x30
 801e6e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e6e6:	4422      	add	r2, r4
 801e6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e6ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e6f0:	3302      	adds	r3, #2
 801e6f2:	e7c7      	b.n	801e684 <_printf_common+0x58>
 801e6f4:	2301      	movs	r3, #1
 801e6f6:	4622      	mov	r2, r4
 801e6f8:	4649      	mov	r1, r9
 801e6fa:	4638      	mov	r0, r7
 801e6fc:	47c0      	blx	r8
 801e6fe:	3001      	adds	r0, #1
 801e700:	d0e6      	beq.n	801e6d0 <_printf_common+0xa4>
 801e702:	3601      	adds	r6, #1
 801e704:	e7d9      	b.n	801e6ba <_printf_common+0x8e>
	...

0801e708 <_printf_i>:
 801e708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e70c:	7e0f      	ldrb	r7, [r1, #24]
 801e70e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e710:	2f78      	cmp	r7, #120	; 0x78
 801e712:	4691      	mov	r9, r2
 801e714:	4680      	mov	r8, r0
 801e716:	460c      	mov	r4, r1
 801e718:	469a      	mov	sl, r3
 801e71a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e71e:	d807      	bhi.n	801e730 <_printf_i+0x28>
 801e720:	2f62      	cmp	r7, #98	; 0x62
 801e722:	d80a      	bhi.n	801e73a <_printf_i+0x32>
 801e724:	2f00      	cmp	r7, #0
 801e726:	f000 80d4 	beq.w	801e8d2 <_printf_i+0x1ca>
 801e72a:	2f58      	cmp	r7, #88	; 0x58
 801e72c:	f000 80c0 	beq.w	801e8b0 <_printf_i+0x1a8>
 801e730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e738:	e03a      	b.n	801e7b0 <_printf_i+0xa8>
 801e73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e73e:	2b15      	cmp	r3, #21
 801e740:	d8f6      	bhi.n	801e730 <_printf_i+0x28>
 801e742:	a101      	add	r1, pc, #4	; (adr r1, 801e748 <_printf_i+0x40>)
 801e744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e748:	0801e7a1 	.word	0x0801e7a1
 801e74c:	0801e7b5 	.word	0x0801e7b5
 801e750:	0801e731 	.word	0x0801e731
 801e754:	0801e731 	.word	0x0801e731
 801e758:	0801e731 	.word	0x0801e731
 801e75c:	0801e731 	.word	0x0801e731
 801e760:	0801e7b5 	.word	0x0801e7b5
 801e764:	0801e731 	.word	0x0801e731
 801e768:	0801e731 	.word	0x0801e731
 801e76c:	0801e731 	.word	0x0801e731
 801e770:	0801e731 	.word	0x0801e731
 801e774:	0801e8b9 	.word	0x0801e8b9
 801e778:	0801e7e1 	.word	0x0801e7e1
 801e77c:	0801e873 	.word	0x0801e873
 801e780:	0801e731 	.word	0x0801e731
 801e784:	0801e731 	.word	0x0801e731
 801e788:	0801e8db 	.word	0x0801e8db
 801e78c:	0801e731 	.word	0x0801e731
 801e790:	0801e7e1 	.word	0x0801e7e1
 801e794:	0801e731 	.word	0x0801e731
 801e798:	0801e731 	.word	0x0801e731
 801e79c:	0801e87b 	.word	0x0801e87b
 801e7a0:	682b      	ldr	r3, [r5, #0]
 801e7a2:	1d1a      	adds	r2, r3, #4
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	602a      	str	r2, [r5, #0]
 801e7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e7b0:	2301      	movs	r3, #1
 801e7b2:	e09f      	b.n	801e8f4 <_printf_i+0x1ec>
 801e7b4:	6820      	ldr	r0, [r4, #0]
 801e7b6:	682b      	ldr	r3, [r5, #0]
 801e7b8:	0607      	lsls	r7, r0, #24
 801e7ba:	f103 0104 	add.w	r1, r3, #4
 801e7be:	6029      	str	r1, [r5, #0]
 801e7c0:	d501      	bpl.n	801e7c6 <_printf_i+0xbe>
 801e7c2:	681e      	ldr	r6, [r3, #0]
 801e7c4:	e003      	b.n	801e7ce <_printf_i+0xc6>
 801e7c6:	0646      	lsls	r6, r0, #25
 801e7c8:	d5fb      	bpl.n	801e7c2 <_printf_i+0xba>
 801e7ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e7ce:	2e00      	cmp	r6, #0
 801e7d0:	da03      	bge.n	801e7da <_printf_i+0xd2>
 801e7d2:	232d      	movs	r3, #45	; 0x2d
 801e7d4:	4276      	negs	r6, r6
 801e7d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e7da:	485a      	ldr	r0, [pc, #360]	; (801e944 <_printf_i+0x23c>)
 801e7dc:	230a      	movs	r3, #10
 801e7de:	e012      	b.n	801e806 <_printf_i+0xfe>
 801e7e0:	682b      	ldr	r3, [r5, #0]
 801e7e2:	6820      	ldr	r0, [r4, #0]
 801e7e4:	1d19      	adds	r1, r3, #4
 801e7e6:	6029      	str	r1, [r5, #0]
 801e7e8:	0605      	lsls	r5, r0, #24
 801e7ea:	d501      	bpl.n	801e7f0 <_printf_i+0xe8>
 801e7ec:	681e      	ldr	r6, [r3, #0]
 801e7ee:	e002      	b.n	801e7f6 <_printf_i+0xee>
 801e7f0:	0641      	lsls	r1, r0, #25
 801e7f2:	d5fb      	bpl.n	801e7ec <_printf_i+0xe4>
 801e7f4:	881e      	ldrh	r6, [r3, #0]
 801e7f6:	4853      	ldr	r0, [pc, #332]	; (801e944 <_printf_i+0x23c>)
 801e7f8:	2f6f      	cmp	r7, #111	; 0x6f
 801e7fa:	bf0c      	ite	eq
 801e7fc:	2308      	moveq	r3, #8
 801e7fe:	230a      	movne	r3, #10
 801e800:	2100      	movs	r1, #0
 801e802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e806:	6865      	ldr	r5, [r4, #4]
 801e808:	60a5      	str	r5, [r4, #8]
 801e80a:	2d00      	cmp	r5, #0
 801e80c:	bfa2      	ittt	ge
 801e80e:	6821      	ldrge	r1, [r4, #0]
 801e810:	f021 0104 	bicge.w	r1, r1, #4
 801e814:	6021      	strge	r1, [r4, #0]
 801e816:	b90e      	cbnz	r6, 801e81c <_printf_i+0x114>
 801e818:	2d00      	cmp	r5, #0
 801e81a:	d04b      	beq.n	801e8b4 <_printf_i+0x1ac>
 801e81c:	4615      	mov	r5, r2
 801e81e:	fbb6 f1f3 	udiv	r1, r6, r3
 801e822:	fb03 6711 	mls	r7, r3, r1, r6
 801e826:	5dc7      	ldrb	r7, [r0, r7]
 801e828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e82c:	4637      	mov	r7, r6
 801e82e:	42bb      	cmp	r3, r7
 801e830:	460e      	mov	r6, r1
 801e832:	d9f4      	bls.n	801e81e <_printf_i+0x116>
 801e834:	2b08      	cmp	r3, #8
 801e836:	d10b      	bne.n	801e850 <_printf_i+0x148>
 801e838:	6823      	ldr	r3, [r4, #0]
 801e83a:	07de      	lsls	r6, r3, #31
 801e83c:	d508      	bpl.n	801e850 <_printf_i+0x148>
 801e83e:	6923      	ldr	r3, [r4, #16]
 801e840:	6861      	ldr	r1, [r4, #4]
 801e842:	4299      	cmp	r1, r3
 801e844:	bfde      	ittt	le
 801e846:	2330      	movle	r3, #48	; 0x30
 801e848:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e84c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e850:	1b52      	subs	r2, r2, r5
 801e852:	6122      	str	r2, [r4, #16]
 801e854:	f8cd a000 	str.w	sl, [sp]
 801e858:	464b      	mov	r3, r9
 801e85a:	aa03      	add	r2, sp, #12
 801e85c:	4621      	mov	r1, r4
 801e85e:	4640      	mov	r0, r8
 801e860:	f7ff fee4 	bl	801e62c <_printf_common>
 801e864:	3001      	adds	r0, #1
 801e866:	d14a      	bne.n	801e8fe <_printf_i+0x1f6>
 801e868:	f04f 30ff 	mov.w	r0, #4294967295
 801e86c:	b004      	add	sp, #16
 801e86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e872:	6823      	ldr	r3, [r4, #0]
 801e874:	f043 0320 	orr.w	r3, r3, #32
 801e878:	6023      	str	r3, [r4, #0]
 801e87a:	4833      	ldr	r0, [pc, #204]	; (801e948 <_printf_i+0x240>)
 801e87c:	2778      	movs	r7, #120	; 0x78
 801e87e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e882:	6823      	ldr	r3, [r4, #0]
 801e884:	6829      	ldr	r1, [r5, #0]
 801e886:	061f      	lsls	r7, r3, #24
 801e888:	f851 6b04 	ldr.w	r6, [r1], #4
 801e88c:	d402      	bmi.n	801e894 <_printf_i+0x18c>
 801e88e:	065f      	lsls	r7, r3, #25
 801e890:	bf48      	it	mi
 801e892:	b2b6      	uxthmi	r6, r6
 801e894:	07df      	lsls	r7, r3, #31
 801e896:	bf48      	it	mi
 801e898:	f043 0320 	orrmi.w	r3, r3, #32
 801e89c:	6029      	str	r1, [r5, #0]
 801e89e:	bf48      	it	mi
 801e8a0:	6023      	strmi	r3, [r4, #0]
 801e8a2:	b91e      	cbnz	r6, 801e8ac <_printf_i+0x1a4>
 801e8a4:	6823      	ldr	r3, [r4, #0]
 801e8a6:	f023 0320 	bic.w	r3, r3, #32
 801e8aa:	6023      	str	r3, [r4, #0]
 801e8ac:	2310      	movs	r3, #16
 801e8ae:	e7a7      	b.n	801e800 <_printf_i+0xf8>
 801e8b0:	4824      	ldr	r0, [pc, #144]	; (801e944 <_printf_i+0x23c>)
 801e8b2:	e7e4      	b.n	801e87e <_printf_i+0x176>
 801e8b4:	4615      	mov	r5, r2
 801e8b6:	e7bd      	b.n	801e834 <_printf_i+0x12c>
 801e8b8:	682b      	ldr	r3, [r5, #0]
 801e8ba:	6826      	ldr	r6, [r4, #0]
 801e8bc:	6961      	ldr	r1, [r4, #20]
 801e8be:	1d18      	adds	r0, r3, #4
 801e8c0:	6028      	str	r0, [r5, #0]
 801e8c2:	0635      	lsls	r5, r6, #24
 801e8c4:	681b      	ldr	r3, [r3, #0]
 801e8c6:	d501      	bpl.n	801e8cc <_printf_i+0x1c4>
 801e8c8:	6019      	str	r1, [r3, #0]
 801e8ca:	e002      	b.n	801e8d2 <_printf_i+0x1ca>
 801e8cc:	0670      	lsls	r0, r6, #25
 801e8ce:	d5fb      	bpl.n	801e8c8 <_printf_i+0x1c0>
 801e8d0:	8019      	strh	r1, [r3, #0]
 801e8d2:	2300      	movs	r3, #0
 801e8d4:	6123      	str	r3, [r4, #16]
 801e8d6:	4615      	mov	r5, r2
 801e8d8:	e7bc      	b.n	801e854 <_printf_i+0x14c>
 801e8da:	682b      	ldr	r3, [r5, #0]
 801e8dc:	1d1a      	adds	r2, r3, #4
 801e8de:	602a      	str	r2, [r5, #0]
 801e8e0:	681d      	ldr	r5, [r3, #0]
 801e8e2:	6862      	ldr	r2, [r4, #4]
 801e8e4:	2100      	movs	r1, #0
 801e8e6:	4628      	mov	r0, r5
 801e8e8:	f7e1 fc9a 	bl	8000220 <memchr>
 801e8ec:	b108      	cbz	r0, 801e8f2 <_printf_i+0x1ea>
 801e8ee:	1b40      	subs	r0, r0, r5
 801e8f0:	6060      	str	r0, [r4, #4]
 801e8f2:	6863      	ldr	r3, [r4, #4]
 801e8f4:	6123      	str	r3, [r4, #16]
 801e8f6:	2300      	movs	r3, #0
 801e8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e8fc:	e7aa      	b.n	801e854 <_printf_i+0x14c>
 801e8fe:	6923      	ldr	r3, [r4, #16]
 801e900:	462a      	mov	r2, r5
 801e902:	4649      	mov	r1, r9
 801e904:	4640      	mov	r0, r8
 801e906:	47d0      	blx	sl
 801e908:	3001      	adds	r0, #1
 801e90a:	d0ad      	beq.n	801e868 <_printf_i+0x160>
 801e90c:	6823      	ldr	r3, [r4, #0]
 801e90e:	079b      	lsls	r3, r3, #30
 801e910:	d413      	bmi.n	801e93a <_printf_i+0x232>
 801e912:	68e0      	ldr	r0, [r4, #12]
 801e914:	9b03      	ldr	r3, [sp, #12]
 801e916:	4298      	cmp	r0, r3
 801e918:	bfb8      	it	lt
 801e91a:	4618      	movlt	r0, r3
 801e91c:	e7a6      	b.n	801e86c <_printf_i+0x164>
 801e91e:	2301      	movs	r3, #1
 801e920:	4632      	mov	r2, r6
 801e922:	4649      	mov	r1, r9
 801e924:	4640      	mov	r0, r8
 801e926:	47d0      	blx	sl
 801e928:	3001      	adds	r0, #1
 801e92a:	d09d      	beq.n	801e868 <_printf_i+0x160>
 801e92c:	3501      	adds	r5, #1
 801e92e:	68e3      	ldr	r3, [r4, #12]
 801e930:	9903      	ldr	r1, [sp, #12]
 801e932:	1a5b      	subs	r3, r3, r1
 801e934:	42ab      	cmp	r3, r5
 801e936:	dcf2      	bgt.n	801e91e <_printf_i+0x216>
 801e938:	e7eb      	b.n	801e912 <_printf_i+0x20a>
 801e93a:	2500      	movs	r5, #0
 801e93c:	f104 0619 	add.w	r6, r4, #25
 801e940:	e7f5      	b.n	801e92e <_printf_i+0x226>
 801e942:	bf00      	nop
 801e944:	08023f09 	.word	0x08023f09
 801e948:	08023f1a 	.word	0x08023f1a

0801e94c <std>:
 801e94c:	2300      	movs	r3, #0
 801e94e:	b510      	push	{r4, lr}
 801e950:	4604      	mov	r4, r0
 801e952:	e9c0 3300 	strd	r3, r3, [r0]
 801e956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e95a:	6083      	str	r3, [r0, #8]
 801e95c:	8181      	strh	r1, [r0, #12]
 801e95e:	6643      	str	r3, [r0, #100]	; 0x64
 801e960:	81c2      	strh	r2, [r0, #14]
 801e962:	6183      	str	r3, [r0, #24]
 801e964:	4619      	mov	r1, r3
 801e966:	2208      	movs	r2, #8
 801e968:	305c      	adds	r0, #92	; 0x5c
 801e96a:	f000 f914 	bl	801eb96 <memset>
 801e96e:	4b05      	ldr	r3, [pc, #20]	; (801e984 <std+0x38>)
 801e970:	6263      	str	r3, [r4, #36]	; 0x24
 801e972:	4b05      	ldr	r3, [pc, #20]	; (801e988 <std+0x3c>)
 801e974:	62a3      	str	r3, [r4, #40]	; 0x28
 801e976:	4b05      	ldr	r3, [pc, #20]	; (801e98c <std+0x40>)
 801e978:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e97a:	4b05      	ldr	r3, [pc, #20]	; (801e990 <std+0x44>)
 801e97c:	6224      	str	r4, [r4, #32]
 801e97e:	6323      	str	r3, [r4, #48]	; 0x30
 801e980:	bd10      	pop	{r4, pc}
 801e982:	bf00      	nop
 801e984:	0801eb11 	.word	0x0801eb11
 801e988:	0801eb33 	.word	0x0801eb33
 801e98c:	0801eb6b 	.word	0x0801eb6b
 801e990:	0801eb8f 	.word	0x0801eb8f

0801e994 <stdio_exit_handler>:
 801e994:	4a02      	ldr	r2, [pc, #8]	; (801e9a0 <stdio_exit_handler+0xc>)
 801e996:	4903      	ldr	r1, [pc, #12]	; (801e9a4 <stdio_exit_handler+0x10>)
 801e998:	4803      	ldr	r0, [pc, #12]	; (801e9a8 <stdio_exit_handler+0x14>)
 801e99a:	f000 b87b 	b.w	801ea94 <_fwalk_sglue>
 801e99e:	bf00      	nop
 801e9a0:	20000190 	.word	0x20000190
 801e9a4:	080208f1 	.word	0x080208f1
 801e9a8:	2000019c 	.word	0x2000019c

0801e9ac <cleanup_stdio>:
 801e9ac:	6841      	ldr	r1, [r0, #4]
 801e9ae:	4b0c      	ldr	r3, [pc, #48]	; (801e9e0 <cleanup_stdio+0x34>)
 801e9b0:	4299      	cmp	r1, r3
 801e9b2:	b510      	push	{r4, lr}
 801e9b4:	4604      	mov	r4, r0
 801e9b6:	d001      	beq.n	801e9bc <cleanup_stdio+0x10>
 801e9b8:	f001 ff9a 	bl	80208f0 <_fflush_r>
 801e9bc:	68a1      	ldr	r1, [r4, #8]
 801e9be:	4b09      	ldr	r3, [pc, #36]	; (801e9e4 <cleanup_stdio+0x38>)
 801e9c0:	4299      	cmp	r1, r3
 801e9c2:	d002      	beq.n	801e9ca <cleanup_stdio+0x1e>
 801e9c4:	4620      	mov	r0, r4
 801e9c6:	f001 ff93 	bl	80208f0 <_fflush_r>
 801e9ca:	68e1      	ldr	r1, [r4, #12]
 801e9cc:	4b06      	ldr	r3, [pc, #24]	; (801e9e8 <cleanup_stdio+0x3c>)
 801e9ce:	4299      	cmp	r1, r3
 801e9d0:	d004      	beq.n	801e9dc <cleanup_stdio+0x30>
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9d8:	f001 bf8a 	b.w	80208f0 <_fflush_r>
 801e9dc:	bd10      	pop	{r4, pc}
 801e9de:	bf00      	nop
 801e9e0:	20016948 	.word	0x20016948
 801e9e4:	200169b0 	.word	0x200169b0
 801e9e8:	20016a18 	.word	0x20016a18

0801e9ec <global_stdio_init.part.0>:
 801e9ec:	b510      	push	{r4, lr}
 801e9ee:	4b0b      	ldr	r3, [pc, #44]	; (801ea1c <global_stdio_init.part.0+0x30>)
 801e9f0:	4c0b      	ldr	r4, [pc, #44]	; (801ea20 <global_stdio_init.part.0+0x34>)
 801e9f2:	4a0c      	ldr	r2, [pc, #48]	; (801ea24 <global_stdio_init.part.0+0x38>)
 801e9f4:	601a      	str	r2, [r3, #0]
 801e9f6:	4620      	mov	r0, r4
 801e9f8:	2200      	movs	r2, #0
 801e9fa:	2104      	movs	r1, #4
 801e9fc:	f7ff ffa6 	bl	801e94c <std>
 801ea00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ea04:	2201      	movs	r2, #1
 801ea06:	2109      	movs	r1, #9
 801ea08:	f7ff ffa0 	bl	801e94c <std>
 801ea0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801ea10:	2202      	movs	r2, #2
 801ea12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea16:	2112      	movs	r1, #18
 801ea18:	f7ff bf98 	b.w	801e94c <std>
 801ea1c:	20016a80 	.word	0x20016a80
 801ea20:	20016948 	.word	0x20016948
 801ea24:	0801e995 	.word	0x0801e995

0801ea28 <__sfp_lock_acquire>:
 801ea28:	4801      	ldr	r0, [pc, #4]	; (801ea30 <__sfp_lock_acquire+0x8>)
 801ea2a:	f000 b931 	b.w	801ec90 <__retarget_lock_acquire_recursive>
 801ea2e:	bf00      	nop
 801ea30:	20016a89 	.word	0x20016a89

0801ea34 <__sfp_lock_release>:
 801ea34:	4801      	ldr	r0, [pc, #4]	; (801ea3c <__sfp_lock_release+0x8>)
 801ea36:	f000 b92c 	b.w	801ec92 <__retarget_lock_release_recursive>
 801ea3a:	bf00      	nop
 801ea3c:	20016a89 	.word	0x20016a89

0801ea40 <__sinit>:
 801ea40:	b510      	push	{r4, lr}
 801ea42:	4604      	mov	r4, r0
 801ea44:	f7ff fff0 	bl	801ea28 <__sfp_lock_acquire>
 801ea48:	6a23      	ldr	r3, [r4, #32]
 801ea4a:	b11b      	cbz	r3, 801ea54 <__sinit+0x14>
 801ea4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea50:	f7ff bff0 	b.w	801ea34 <__sfp_lock_release>
 801ea54:	4b04      	ldr	r3, [pc, #16]	; (801ea68 <__sinit+0x28>)
 801ea56:	6223      	str	r3, [r4, #32]
 801ea58:	4b04      	ldr	r3, [pc, #16]	; (801ea6c <__sinit+0x2c>)
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d1f5      	bne.n	801ea4c <__sinit+0xc>
 801ea60:	f7ff ffc4 	bl	801e9ec <global_stdio_init.part.0>
 801ea64:	e7f2      	b.n	801ea4c <__sinit+0xc>
 801ea66:	bf00      	nop
 801ea68:	0801e9ad 	.word	0x0801e9ad
 801ea6c:	20016a80 	.word	0x20016a80

0801ea70 <fiprintf>:
 801ea70:	b40e      	push	{r1, r2, r3}
 801ea72:	b503      	push	{r0, r1, lr}
 801ea74:	4601      	mov	r1, r0
 801ea76:	ab03      	add	r3, sp, #12
 801ea78:	4805      	ldr	r0, [pc, #20]	; (801ea90 <fiprintf+0x20>)
 801ea7a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea7e:	6800      	ldr	r0, [r0, #0]
 801ea80:	9301      	str	r3, [sp, #4]
 801ea82:	f001 fd95 	bl	80205b0 <_vfiprintf_r>
 801ea86:	b002      	add	sp, #8
 801ea88:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea8c:	b003      	add	sp, #12
 801ea8e:	4770      	bx	lr
 801ea90:	200001e8 	.word	0x200001e8

0801ea94 <_fwalk_sglue>:
 801ea94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea98:	4607      	mov	r7, r0
 801ea9a:	4688      	mov	r8, r1
 801ea9c:	4614      	mov	r4, r2
 801ea9e:	2600      	movs	r6, #0
 801eaa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801eaa4:	f1b9 0901 	subs.w	r9, r9, #1
 801eaa8:	d505      	bpl.n	801eab6 <_fwalk_sglue+0x22>
 801eaaa:	6824      	ldr	r4, [r4, #0]
 801eaac:	2c00      	cmp	r4, #0
 801eaae:	d1f7      	bne.n	801eaa0 <_fwalk_sglue+0xc>
 801eab0:	4630      	mov	r0, r6
 801eab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eab6:	89ab      	ldrh	r3, [r5, #12]
 801eab8:	2b01      	cmp	r3, #1
 801eaba:	d907      	bls.n	801eacc <_fwalk_sglue+0x38>
 801eabc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801eac0:	3301      	adds	r3, #1
 801eac2:	d003      	beq.n	801eacc <_fwalk_sglue+0x38>
 801eac4:	4629      	mov	r1, r5
 801eac6:	4638      	mov	r0, r7
 801eac8:	47c0      	blx	r8
 801eaca:	4306      	orrs	r6, r0
 801eacc:	3568      	adds	r5, #104	; 0x68
 801eace:	e7e9      	b.n	801eaa4 <_fwalk_sglue+0x10>

0801ead0 <siprintf>:
 801ead0:	b40e      	push	{r1, r2, r3}
 801ead2:	b500      	push	{lr}
 801ead4:	b09c      	sub	sp, #112	; 0x70
 801ead6:	ab1d      	add	r3, sp, #116	; 0x74
 801ead8:	9002      	str	r0, [sp, #8]
 801eada:	9006      	str	r0, [sp, #24]
 801eadc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801eae0:	4809      	ldr	r0, [pc, #36]	; (801eb08 <siprintf+0x38>)
 801eae2:	9107      	str	r1, [sp, #28]
 801eae4:	9104      	str	r1, [sp, #16]
 801eae6:	4909      	ldr	r1, [pc, #36]	; (801eb0c <siprintf+0x3c>)
 801eae8:	f853 2b04 	ldr.w	r2, [r3], #4
 801eaec:	9105      	str	r1, [sp, #20]
 801eaee:	6800      	ldr	r0, [r0, #0]
 801eaf0:	9301      	str	r3, [sp, #4]
 801eaf2:	a902      	add	r1, sp, #8
 801eaf4:	f001 fc34 	bl	8020360 <_svfiprintf_r>
 801eaf8:	9b02      	ldr	r3, [sp, #8]
 801eafa:	2200      	movs	r2, #0
 801eafc:	701a      	strb	r2, [r3, #0]
 801eafe:	b01c      	add	sp, #112	; 0x70
 801eb00:	f85d eb04 	ldr.w	lr, [sp], #4
 801eb04:	b003      	add	sp, #12
 801eb06:	4770      	bx	lr
 801eb08:	200001e8 	.word	0x200001e8
 801eb0c:	ffff0208 	.word	0xffff0208

0801eb10 <__sread>:
 801eb10:	b510      	push	{r4, lr}
 801eb12:	460c      	mov	r4, r1
 801eb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb18:	f000 f86c 	bl	801ebf4 <_read_r>
 801eb1c:	2800      	cmp	r0, #0
 801eb1e:	bfab      	itete	ge
 801eb20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801eb22:	89a3      	ldrhlt	r3, [r4, #12]
 801eb24:	181b      	addge	r3, r3, r0
 801eb26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801eb2a:	bfac      	ite	ge
 801eb2c:	6563      	strge	r3, [r4, #84]	; 0x54
 801eb2e:	81a3      	strhlt	r3, [r4, #12]
 801eb30:	bd10      	pop	{r4, pc}

0801eb32 <__swrite>:
 801eb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb36:	461f      	mov	r7, r3
 801eb38:	898b      	ldrh	r3, [r1, #12]
 801eb3a:	05db      	lsls	r3, r3, #23
 801eb3c:	4605      	mov	r5, r0
 801eb3e:	460c      	mov	r4, r1
 801eb40:	4616      	mov	r6, r2
 801eb42:	d505      	bpl.n	801eb50 <__swrite+0x1e>
 801eb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb48:	2302      	movs	r3, #2
 801eb4a:	2200      	movs	r2, #0
 801eb4c:	f000 f840 	bl	801ebd0 <_lseek_r>
 801eb50:	89a3      	ldrh	r3, [r4, #12]
 801eb52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eb56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801eb5a:	81a3      	strh	r3, [r4, #12]
 801eb5c:	4632      	mov	r2, r6
 801eb5e:	463b      	mov	r3, r7
 801eb60:	4628      	mov	r0, r5
 801eb62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eb66:	f000 b857 	b.w	801ec18 <_write_r>

0801eb6a <__sseek>:
 801eb6a:	b510      	push	{r4, lr}
 801eb6c:	460c      	mov	r4, r1
 801eb6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb72:	f000 f82d 	bl	801ebd0 <_lseek_r>
 801eb76:	1c43      	adds	r3, r0, #1
 801eb78:	89a3      	ldrh	r3, [r4, #12]
 801eb7a:	bf15      	itete	ne
 801eb7c:	6560      	strne	r0, [r4, #84]	; 0x54
 801eb7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801eb82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801eb86:	81a3      	strheq	r3, [r4, #12]
 801eb88:	bf18      	it	ne
 801eb8a:	81a3      	strhne	r3, [r4, #12]
 801eb8c:	bd10      	pop	{r4, pc}

0801eb8e <__sclose>:
 801eb8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb92:	f000 b80d 	b.w	801ebb0 <_close_r>

0801eb96 <memset>:
 801eb96:	4402      	add	r2, r0
 801eb98:	4603      	mov	r3, r0
 801eb9a:	4293      	cmp	r3, r2
 801eb9c:	d100      	bne.n	801eba0 <memset+0xa>
 801eb9e:	4770      	bx	lr
 801eba0:	f803 1b01 	strb.w	r1, [r3], #1
 801eba4:	e7f9      	b.n	801eb9a <memset+0x4>
	...

0801eba8 <_localeconv_r>:
 801eba8:	4800      	ldr	r0, [pc, #0]	; (801ebac <_localeconv_r+0x4>)
 801ebaa:	4770      	bx	lr
 801ebac:	200002dc 	.word	0x200002dc

0801ebb0 <_close_r>:
 801ebb0:	b538      	push	{r3, r4, r5, lr}
 801ebb2:	4d06      	ldr	r5, [pc, #24]	; (801ebcc <_close_r+0x1c>)
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	4604      	mov	r4, r0
 801ebb8:	4608      	mov	r0, r1
 801ebba:	602b      	str	r3, [r5, #0]
 801ebbc:	f7e7 fda1 	bl	8006702 <_close>
 801ebc0:	1c43      	adds	r3, r0, #1
 801ebc2:	d102      	bne.n	801ebca <_close_r+0x1a>
 801ebc4:	682b      	ldr	r3, [r5, #0]
 801ebc6:	b103      	cbz	r3, 801ebca <_close_r+0x1a>
 801ebc8:	6023      	str	r3, [r4, #0]
 801ebca:	bd38      	pop	{r3, r4, r5, pc}
 801ebcc:	20016a84 	.word	0x20016a84

0801ebd0 <_lseek_r>:
 801ebd0:	b538      	push	{r3, r4, r5, lr}
 801ebd2:	4d07      	ldr	r5, [pc, #28]	; (801ebf0 <_lseek_r+0x20>)
 801ebd4:	4604      	mov	r4, r0
 801ebd6:	4608      	mov	r0, r1
 801ebd8:	4611      	mov	r1, r2
 801ebda:	2200      	movs	r2, #0
 801ebdc:	602a      	str	r2, [r5, #0]
 801ebde:	461a      	mov	r2, r3
 801ebe0:	f7e7 fdb6 	bl	8006750 <_lseek>
 801ebe4:	1c43      	adds	r3, r0, #1
 801ebe6:	d102      	bne.n	801ebee <_lseek_r+0x1e>
 801ebe8:	682b      	ldr	r3, [r5, #0]
 801ebea:	b103      	cbz	r3, 801ebee <_lseek_r+0x1e>
 801ebec:	6023      	str	r3, [r4, #0]
 801ebee:	bd38      	pop	{r3, r4, r5, pc}
 801ebf0:	20016a84 	.word	0x20016a84

0801ebf4 <_read_r>:
 801ebf4:	b538      	push	{r3, r4, r5, lr}
 801ebf6:	4d07      	ldr	r5, [pc, #28]	; (801ec14 <_read_r+0x20>)
 801ebf8:	4604      	mov	r4, r0
 801ebfa:	4608      	mov	r0, r1
 801ebfc:	4611      	mov	r1, r2
 801ebfe:	2200      	movs	r2, #0
 801ec00:	602a      	str	r2, [r5, #0]
 801ec02:	461a      	mov	r2, r3
 801ec04:	f7e7 fd60 	bl	80066c8 <_read>
 801ec08:	1c43      	adds	r3, r0, #1
 801ec0a:	d102      	bne.n	801ec12 <_read_r+0x1e>
 801ec0c:	682b      	ldr	r3, [r5, #0]
 801ec0e:	b103      	cbz	r3, 801ec12 <_read_r+0x1e>
 801ec10:	6023      	str	r3, [r4, #0]
 801ec12:	bd38      	pop	{r3, r4, r5, pc}
 801ec14:	20016a84 	.word	0x20016a84

0801ec18 <_write_r>:
 801ec18:	b538      	push	{r3, r4, r5, lr}
 801ec1a:	4d07      	ldr	r5, [pc, #28]	; (801ec38 <_write_r+0x20>)
 801ec1c:	4604      	mov	r4, r0
 801ec1e:	4608      	mov	r0, r1
 801ec20:	4611      	mov	r1, r2
 801ec22:	2200      	movs	r2, #0
 801ec24:	602a      	str	r2, [r5, #0]
 801ec26:	461a      	mov	r2, r3
 801ec28:	f7e2 fee7 	bl	80019fa <_write>
 801ec2c:	1c43      	adds	r3, r0, #1
 801ec2e:	d102      	bne.n	801ec36 <_write_r+0x1e>
 801ec30:	682b      	ldr	r3, [r5, #0]
 801ec32:	b103      	cbz	r3, 801ec36 <_write_r+0x1e>
 801ec34:	6023      	str	r3, [r4, #0]
 801ec36:	bd38      	pop	{r3, r4, r5, pc}
 801ec38:	20016a84 	.word	0x20016a84

0801ec3c <__errno>:
 801ec3c:	4b01      	ldr	r3, [pc, #4]	; (801ec44 <__errno+0x8>)
 801ec3e:	6818      	ldr	r0, [r3, #0]
 801ec40:	4770      	bx	lr
 801ec42:	bf00      	nop
 801ec44:	200001e8 	.word	0x200001e8

0801ec48 <__libc_init_array>:
 801ec48:	b570      	push	{r4, r5, r6, lr}
 801ec4a:	4d0d      	ldr	r5, [pc, #52]	; (801ec80 <__libc_init_array+0x38>)
 801ec4c:	4c0d      	ldr	r4, [pc, #52]	; (801ec84 <__libc_init_array+0x3c>)
 801ec4e:	1b64      	subs	r4, r4, r5
 801ec50:	10a4      	asrs	r4, r4, #2
 801ec52:	2600      	movs	r6, #0
 801ec54:	42a6      	cmp	r6, r4
 801ec56:	d109      	bne.n	801ec6c <__libc_init_array+0x24>
 801ec58:	4d0b      	ldr	r5, [pc, #44]	; (801ec88 <__libc_init_array+0x40>)
 801ec5a:	4c0c      	ldr	r4, [pc, #48]	; (801ec8c <__libc_init_array+0x44>)
 801ec5c:	f002 fd9e 	bl	802179c <_init>
 801ec60:	1b64      	subs	r4, r4, r5
 801ec62:	10a4      	asrs	r4, r4, #2
 801ec64:	2600      	movs	r6, #0
 801ec66:	42a6      	cmp	r6, r4
 801ec68:	d105      	bne.n	801ec76 <__libc_init_array+0x2e>
 801ec6a:	bd70      	pop	{r4, r5, r6, pc}
 801ec6c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec70:	4798      	blx	r3
 801ec72:	3601      	adds	r6, #1
 801ec74:	e7ee      	b.n	801ec54 <__libc_init_array+0xc>
 801ec76:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec7a:	4798      	blx	r3
 801ec7c:	3601      	adds	r6, #1
 801ec7e:	e7f2      	b.n	801ec66 <__libc_init_array+0x1e>
 801ec80:	08024600 	.word	0x08024600
 801ec84:	08024600 	.word	0x08024600
 801ec88:	08024600 	.word	0x08024600
 801ec8c:	08024604 	.word	0x08024604

0801ec90 <__retarget_lock_acquire_recursive>:
 801ec90:	4770      	bx	lr

0801ec92 <__retarget_lock_release_recursive>:
 801ec92:	4770      	bx	lr

0801ec94 <memcpy>:
 801ec94:	440a      	add	r2, r1
 801ec96:	4291      	cmp	r1, r2
 801ec98:	f100 33ff 	add.w	r3, r0, #4294967295
 801ec9c:	d100      	bne.n	801eca0 <memcpy+0xc>
 801ec9e:	4770      	bx	lr
 801eca0:	b510      	push	{r4, lr}
 801eca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ecaa:	4291      	cmp	r1, r2
 801ecac:	d1f9      	bne.n	801eca2 <memcpy+0xe>
 801ecae:	bd10      	pop	{r4, pc}

0801ecb0 <abort>:
 801ecb0:	b508      	push	{r3, lr}
 801ecb2:	2006      	movs	r0, #6
 801ecb4:	f001 ff1c 	bl	8020af0 <raise>
 801ecb8:	2001      	movs	r0, #1
 801ecba:	f7e7 fcfb 	bl	80066b4 <_exit>

0801ecbe <quorem>:
 801ecbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecc2:	6903      	ldr	r3, [r0, #16]
 801ecc4:	690c      	ldr	r4, [r1, #16]
 801ecc6:	42a3      	cmp	r3, r4
 801ecc8:	4607      	mov	r7, r0
 801ecca:	db7e      	blt.n	801edca <quorem+0x10c>
 801eccc:	3c01      	subs	r4, #1
 801ecce:	f101 0814 	add.w	r8, r1, #20
 801ecd2:	f100 0514 	add.w	r5, r0, #20
 801ecd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ecda:	9301      	str	r3, [sp, #4]
 801ecdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ece0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ece4:	3301      	adds	r3, #1
 801ece6:	429a      	cmp	r2, r3
 801ece8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ecec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ecf0:	fbb2 f6f3 	udiv	r6, r2, r3
 801ecf4:	d331      	bcc.n	801ed5a <quorem+0x9c>
 801ecf6:	f04f 0e00 	mov.w	lr, #0
 801ecfa:	4640      	mov	r0, r8
 801ecfc:	46ac      	mov	ip, r5
 801ecfe:	46f2      	mov	sl, lr
 801ed00:	f850 2b04 	ldr.w	r2, [r0], #4
 801ed04:	b293      	uxth	r3, r2
 801ed06:	fb06 e303 	mla	r3, r6, r3, lr
 801ed0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ed0e:	0c1a      	lsrs	r2, r3, #16
 801ed10:	b29b      	uxth	r3, r3
 801ed12:	ebaa 0303 	sub.w	r3, sl, r3
 801ed16:	f8dc a000 	ldr.w	sl, [ip]
 801ed1a:	fa13 f38a 	uxtah	r3, r3, sl
 801ed1e:	fb06 220e 	mla	r2, r6, lr, r2
 801ed22:	9300      	str	r3, [sp, #0]
 801ed24:	9b00      	ldr	r3, [sp, #0]
 801ed26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ed2a:	b292      	uxth	r2, r2
 801ed2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801ed30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ed34:	f8bd 3000 	ldrh.w	r3, [sp]
 801ed38:	4581      	cmp	r9, r0
 801ed3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed3e:	f84c 3b04 	str.w	r3, [ip], #4
 801ed42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ed46:	d2db      	bcs.n	801ed00 <quorem+0x42>
 801ed48:	f855 300b 	ldr.w	r3, [r5, fp]
 801ed4c:	b92b      	cbnz	r3, 801ed5a <quorem+0x9c>
 801ed4e:	9b01      	ldr	r3, [sp, #4]
 801ed50:	3b04      	subs	r3, #4
 801ed52:	429d      	cmp	r5, r3
 801ed54:	461a      	mov	r2, r3
 801ed56:	d32c      	bcc.n	801edb2 <quorem+0xf4>
 801ed58:	613c      	str	r4, [r7, #16]
 801ed5a:	4638      	mov	r0, r7
 801ed5c:	f001 f9a6 	bl	80200ac <__mcmp>
 801ed60:	2800      	cmp	r0, #0
 801ed62:	db22      	blt.n	801edaa <quorem+0xec>
 801ed64:	3601      	adds	r6, #1
 801ed66:	4629      	mov	r1, r5
 801ed68:	2000      	movs	r0, #0
 801ed6a:	f858 2b04 	ldr.w	r2, [r8], #4
 801ed6e:	f8d1 c000 	ldr.w	ip, [r1]
 801ed72:	b293      	uxth	r3, r2
 801ed74:	1ac3      	subs	r3, r0, r3
 801ed76:	0c12      	lsrs	r2, r2, #16
 801ed78:	fa13 f38c 	uxtah	r3, r3, ip
 801ed7c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801ed80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ed84:	b29b      	uxth	r3, r3
 801ed86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed8a:	45c1      	cmp	r9, r8
 801ed8c:	f841 3b04 	str.w	r3, [r1], #4
 801ed90:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ed94:	d2e9      	bcs.n	801ed6a <quorem+0xac>
 801ed96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ed9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ed9e:	b922      	cbnz	r2, 801edaa <quorem+0xec>
 801eda0:	3b04      	subs	r3, #4
 801eda2:	429d      	cmp	r5, r3
 801eda4:	461a      	mov	r2, r3
 801eda6:	d30a      	bcc.n	801edbe <quorem+0x100>
 801eda8:	613c      	str	r4, [r7, #16]
 801edaa:	4630      	mov	r0, r6
 801edac:	b003      	add	sp, #12
 801edae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edb2:	6812      	ldr	r2, [r2, #0]
 801edb4:	3b04      	subs	r3, #4
 801edb6:	2a00      	cmp	r2, #0
 801edb8:	d1ce      	bne.n	801ed58 <quorem+0x9a>
 801edba:	3c01      	subs	r4, #1
 801edbc:	e7c9      	b.n	801ed52 <quorem+0x94>
 801edbe:	6812      	ldr	r2, [r2, #0]
 801edc0:	3b04      	subs	r3, #4
 801edc2:	2a00      	cmp	r2, #0
 801edc4:	d1f0      	bne.n	801eda8 <quorem+0xea>
 801edc6:	3c01      	subs	r4, #1
 801edc8:	e7eb      	b.n	801eda2 <quorem+0xe4>
 801edca:	2000      	movs	r0, #0
 801edcc:	e7ee      	b.n	801edac <quorem+0xee>
	...

0801edd0 <_dtoa_r>:
 801edd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edd4:	ed2d 8b04 	vpush	{d8-d9}
 801edd8:	69c5      	ldr	r5, [r0, #28]
 801edda:	b093      	sub	sp, #76	; 0x4c
 801eddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ede0:	ec57 6b10 	vmov	r6, r7, d0
 801ede4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ede8:	9107      	str	r1, [sp, #28]
 801edea:	4604      	mov	r4, r0
 801edec:	920a      	str	r2, [sp, #40]	; 0x28
 801edee:	930d      	str	r3, [sp, #52]	; 0x34
 801edf0:	b975      	cbnz	r5, 801ee10 <_dtoa_r+0x40>
 801edf2:	2010      	movs	r0, #16
 801edf4:	f000 fe2a 	bl	801fa4c <malloc>
 801edf8:	4602      	mov	r2, r0
 801edfa:	61e0      	str	r0, [r4, #28]
 801edfc:	b920      	cbnz	r0, 801ee08 <_dtoa_r+0x38>
 801edfe:	4bae      	ldr	r3, [pc, #696]	; (801f0b8 <_dtoa_r+0x2e8>)
 801ee00:	21ef      	movs	r1, #239	; 0xef
 801ee02:	48ae      	ldr	r0, [pc, #696]	; (801f0bc <_dtoa_r+0x2ec>)
 801ee04:	f7ff f91e 	bl	801e044 <__assert_func>
 801ee08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ee0c:	6005      	str	r5, [r0, #0]
 801ee0e:	60c5      	str	r5, [r0, #12]
 801ee10:	69e3      	ldr	r3, [r4, #28]
 801ee12:	6819      	ldr	r1, [r3, #0]
 801ee14:	b151      	cbz	r1, 801ee2c <_dtoa_r+0x5c>
 801ee16:	685a      	ldr	r2, [r3, #4]
 801ee18:	604a      	str	r2, [r1, #4]
 801ee1a:	2301      	movs	r3, #1
 801ee1c:	4093      	lsls	r3, r2
 801ee1e:	608b      	str	r3, [r1, #8]
 801ee20:	4620      	mov	r0, r4
 801ee22:	f000 ff07 	bl	801fc34 <_Bfree>
 801ee26:	69e3      	ldr	r3, [r4, #28]
 801ee28:	2200      	movs	r2, #0
 801ee2a:	601a      	str	r2, [r3, #0]
 801ee2c:	1e3b      	subs	r3, r7, #0
 801ee2e:	bfbb      	ittet	lt
 801ee30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ee34:	9303      	strlt	r3, [sp, #12]
 801ee36:	2300      	movge	r3, #0
 801ee38:	2201      	movlt	r2, #1
 801ee3a:	bfac      	ite	ge
 801ee3c:	f8c8 3000 	strge.w	r3, [r8]
 801ee40:	f8c8 2000 	strlt.w	r2, [r8]
 801ee44:	4b9e      	ldr	r3, [pc, #632]	; (801f0c0 <_dtoa_r+0x2f0>)
 801ee46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801ee4a:	ea33 0308 	bics.w	r3, r3, r8
 801ee4e:	d11b      	bne.n	801ee88 <_dtoa_r+0xb8>
 801ee50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ee52:	f242 730f 	movw	r3, #9999	; 0x270f
 801ee56:	6013      	str	r3, [r2, #0]
 801ee58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801ee5c:	4333      	orrs	r3, r6
 801ee5e:	f000 8593 	beq.w	801f988 <_dtoa_r+0xbb8>
 801ee62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ee64:	b963      	cbnz	r3, 801ee80 <_dtoa_r+0xb0>
 801ee66:	4b97      	ldr	r3, [pc, #604]	; (801f0c4 <_dtoa_r+0x2f4>)
 801ee68:	e027      	b.n	801eeba <_dtoa_r+0xea>
 801ee6a:	4b97      	ldr	r3, [pc, #604]	; (801f0c8 <_dtoa_r+0x2f8>)
 801ee6c:	9300      	str	r3, [sp, #0]
 801ee6e:	3308      	adds	r3, #8
 801ee70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ee72:	6013      	str	r3, [r2, #0]
 801ee74:	9800      	ldr	r0, [sp, #0]
 801ee76:	b013      	add	sp, #76	; 0x4c
 801ee78:	ecbd 8b04 	vpop	{d8-d9}
 801ee7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee80:	4b90      	ldr	r3, [pc, #576]	; (801f0c4 <_dtoa_r+0x2f4>)
 801ee82:	9300      	str	r3, [sp, #0]
 801ee84:	3303      	adds	r3, #3
 801ee86:	e7f3      	b.n	801ee70 <_dtoa_r+0xa0>
 801ee88:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee8c:	2200      	movs	r2, #0
 801ee8e:	ec51 0b17 	vmov	r0, r1, d7
 801ee92:	eeb0 8a47 	vmov.f32	s16, s14
 801ee96:	eef0 8a67 	vmov.f32	s17, s15
 801ee9a:	2300      	movs	r3, #0
 801ee9c:	f7e1 fe3c 	bl	8000b18 <__aeabi_dcmpeq>
 801eea0:	4681      	mov	r9, r0
 801eea2:	b160      	cbz	r0, 801eebe <_dtoa_r+0xee>
 801eea4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eea6:	2301      	movs	r3, #1
 801eea8:	6013      	str	r3, [r2, #0]
 801eeaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	f000 8568 	beq.w	801f982 <_dtoa_r+0xbb2>
 801eeb2:	4b86      	ldr	r3, [pc, #536]	; (801f0cc <_dtoa_r+0x2fc>)
 801eeb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801eeb6:	6013      	str	r3, [r2, #0]
 801eeb8:	3b01      	subs	r3, #1
 801eeba:	9300      	str	r3, [sp, #0]
 801eebc:	e7da      	b.n	801ee74 <_dtoa_r+0xa4>
 801eebe:	aa10      	add	r2, sp, #64	; 0x40
 801eec0:	a911      	add	r1, sp, #68	; 0x44
 801eec2:	4620      	mov	r0, r4
 801eec4:	eeb0 0a48 	vmov.f32	s0, s16
 801eec8:	eef0 0a68 	vmov.f32	s1, s17
 801eecc:	f001 f994 	bl	80201f8 <__d2b>
 801eed0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801eed4:	4682      	mov	sl, r0
 801eed6:	2d00      	cmp	r5, #0
 801eed8:	d07f      	beq.n	801efda <_dtoa_r+0x20a>
 801eeda:	ee18 3a90 	vmov	r3, s17
 801eede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eee2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801eee6:	ec51 0b18 	vmov	r0, r1, d8
 801eeea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801eeee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801eef2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801eef6:	4619      	mov	r1, r3
 801eef8:	2200      	movs	r2, #0
 801eefa:	4b75      	ldr	r3, [pc, #468]	; (801f0d0 <_dtoa_r+0x300>)
 801eefc:	f7e1 f9ec 	bl	80002d8 <__aeabi_dsub>
 801ef00:	a367      	add	r3, pc, #412	; (adr r3, 801f0a0 <_dtoa_r+0x2d0>)
 801ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef06:	f7e1 fb9f 	bl	8000648 <__aeabi_dmul>
 801ef0a:	a367      	add	r3, pc, #412	; (adr r3, 801f0a8 <_dtoa_r+0x2d8>)
 801ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef10:	f7e1 f9e4 	bl	80002dc <__adddf3>
 801ef14:	4606      	mov	r6, r0
 801ef16:	4628      	mov	r0, r5
 801ef18:	460f      	mov	r7, r1
 801ef1a:	f7e1 fb2b 	bl	8000574 <__aeabi_i2d>
 801ef1e:	a364      	add	r3, pc, #400	; (adr r3, 801f0b0 <_dtoa_r+0x2e0>)
 801ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef24:	f7e1 fb90 	bl	8000648 <__aeabi_dmul>
 801ef28:	4602      	mov	r2, r0
 801ef2a:	460b      	mov	r3, r1
 801ef2c:	4630      	mov	r0, r6
 801ef2e:	4639      	mov	r1, r7
 801ef30:	f7e1 f9d4 	bl	80002dc <__adddf3>
 801ef34:	4606      	mov	r6, r0
 801ef36:	460f      	mov	r7, r1
 801ef38:	f7e1 fe36 	bl	8000ba8 <__aeabi_d2iz>
 801ef3c:	2200      	movs	r2, #0
 801ef3e:	4683      	mov	fp, r0
 801ef40:	2300      	movs	r3, #0
 801ef42:	4630      	mov	r0, r6
 801ef44:	4639      	mov	r1, r7
 801ef46:	f7e1 fdf1 	bl	8000b2c <__aeabi_dcmplt>
 801ef4a:	b148      	cbz	r0, 801ef60 <_dtoa_r+0x190>
 801ef4c:	4658      	mov	r0, fp
 801ef4e:	f7e1 fb11 	bl	8000574 <__aeabi_i2d>
 801ef52:	4632      	mov	r2, r6
 801ef54:	463b      	mov	r3, r7
 801ef56:	f7e1 fddf 	bl	8000b18 <__aeabi_dcmpeq>
 801ef5a:	b908      	cbnz	r0, 801ef60 <_dtoa_r+0x190>
 801ef5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ef60:	f1bb 0f16 	cmp.w	fp, #22
 801ef64:	d857      	bhi.n	801f016 <_dtoa_r+0x246>
 801ef66:	4b5b      	ldr	r3, [pc, #364]	; (801f0d4 <_dtoa_r+0x304>)
 801ef68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef70:	ec51 0b18 	vmov	r0, r1, d8
 801ef74:	f7e1 fdda 	bl	8000b2c <__aeabi_dcmplt>
 801ef78:	2800      	cmp	r0, #0
 801ef7a:	d04e      	beq.n	801f01a <_dtoa_r+0x24a>
 801ef7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ef80:	2300      	movs	r3, #0
 801ef82:	930c      	str	r3, [sp, #48]	; 0x30
 801ef84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef86:	1b5b      	subs	r3, r3, r5
 801ef88:	1e5a      	subs	r2, r3, #1
 801ef8a:	bf45      	ittet	mi
 801ef8c:	f1c3 0301 	rsbmi	r3, r3, #1
 801ef90:	9305      	strmi	r3, [sp, #20]
 801ef92:	2300      	movpl	r3, #0
 801ef94:	2300      	movmi	r3, #0
 801ef96:	9206      	str	r2, [sp, #24]
 801ef98:	bf54      	ite	pl
 801ef9a:	9305      	strpl	r3, [sp, #20]
 801ef9c:	9306      	strmi	r3, [sp, #24]
 801ef9e:	f1bb 0f00 	cmp.w	fp, #0
 801efa2:	db3c      	blt.n	801f01e <_dtoa_r+0x24e>
 801efa4:	9b06      	ldr	r3, [sp, #24]
 801efa6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801efaa:	445b      	add	r3, fp
 801efac:	9306      	str	r3, [sp, #24]
 801efae:	2300      	movs	r3, #0
 801efb0:	9308      	str	r3, [sp, #32]
 801efb2:	9b07      	ldr	r3, [sp, #28]
 801efb4:	2b09      	cmp	r3, #9
 801efb6:	d868      	bhi.n	801f08a <_dtoa_r+0x2ba>
 801efb8:	2b05      	cmp	r3, #5
 801efba:	bfc4      	itt	gt
 801efbc:	3b04      	subgt	r3, #4
 801efbe:	9307      	strgt	r3, [sp, #28]
 801efc0:	9b07      	ldr	r3, [sp, #28]
 801efc2:	f1a3 0302 	sub.w	r3, r3, #2
 801efc6:	bfcc      	ite	gt
 801efc8:	2500      	movgt	r5, #0
 801efca:	2501      	movle	r5, #1
 801efcc:	2b03      	cmp	r3, #3
 801efce:	f200 8085 	bhi.w	801f0dc <_dtoa_r+0x30c>
 801efd2:	e8df f003 	tbb	[pc, r3]
 801efd6:	3b2e      	.short	0x3b2e
 801efd8:	5839      	.short	0x5839
 801efda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801efde:	441d      	add	r5, r3
 801efe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801efe4:	2b20      	cmp	r3, #32
 801efe6:	bfc1      	itttt	gt
 801efe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801efec:	fa08 f803 	lslgt.w	r8, r8, r3
 801eff0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801eff4:	fa26 f303 	lsrgt.w	r3, r6, r3
 801eff8:	bfd6      	itet	le
 801effa:	f1c3 0320 	rsble	r3, r3, #32
 801effe:	ea48 0003 	orrgt.w	r0, r8, r3
 801f002:	fa06 f003 	lslle.w	r0, r6, r3
 801f006:	f7e1 faa5 	bl	8000554 <__aeabi_ui2d>
 801f00a:	2201      	movs	r2, #1
 801f00c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801f010:	3d01      	subs	r5, #1
 801f012:	920e      	str	r2, [sp, #56]	; 0x38
 801f014:	e76f      	b.n	801eef6 <_dtoa_r+0x126>
 801f016:	2301      	movs	r3, #1
 801f018:	e7b3      	b.n	801ef82 <_dtoa_r+0x1b2>
 801f01a:	900c      	str	r0, [sp, #48]	; 0x30
 801f01c:	e7b2      	b.n	801ef84 <_dtoa_r+0x1b4>
 801f01e:	9b05      	ldr	r3, [sp, #20]
 801f020:	eba3 030b 	sub.w	r3, r3, fp
 801f024:	9305      	str	r3, [sp, #20]
 801f026:	f1cb 0300 	rsb	r3, fp, #0
 801f02a:	9308      	str	r3, [sp, #32]
 801f02c:	2300      	movs	r3, #0
 801f02e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f030:	e7bf      	b.n	801efb2 <_dtoa_r+0x1e2>
 801f032:	2300      	movs	r3, #0
 801f034:	9309      	str	r3, [sp, #36]	; 0x24
 801f036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f038:	2b00      	cmp	r3, #0
 801f03a:	dc52      	bgt.n	801f0e2 <_dtoa_r+0x312>
 801f03c:	2301      	movs	r3, #1
 801f03e:	9301      	str	r3, [sp, #4]
 801f040:	9304      	str	r3, [sp, #16]
 801f042:	461a      	mov	r2, r3
 801f044:	920a      	str	r2, [sp, #40]	; 0x28
 801f046:	e00b      	b.n	801f060 <_dtoa_r+0x290>
 801f048:	2301      	movs	r3, #1
 801f04a:	e7f3      	b.n	801f034 <_dtoa_r+0x264>
 801f04c:	2300      	movs	r3, #0
 801f04e:	9309      	str	r3, [sp, #36]	; 0x24
 801f050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f052:	445b      	add	r3, fp
 801f054:	9301      	str	r3, [sp, #4]
 801f056:	3301      	adds	r3, #1
 801f058:	2b01      	cmp	r3, #1
 801f05a:	9304      	str	r3, [sp, #16]
 801f05c:	bfb8      	it	lt
 801f05e:	2301      	movlt	r3, #1
 801f060:	69e0      	ldr	r0, [r4, #28]
 801f062:	2100      	movs	r1, #0
 801f064:	2204      	movs	r2, #4
 801f066:	f102 0614 	add.w	r6, r2, #20
 801f06a:	429e      	cmp	r6, r3
 801f06c:	d93d      	bls.n	801f0ea <_dtoa_r+0x31a>
 801f06e:	6041      	str	r1, [r0, #4]
 801f070:	4620      	mov	r0, r4
 801f072:	f000 fd9f 	bl	801fbb4 <_Balloc>
 801f076:	9000      	str	r0, [sp, #0]
 801f078:	2800      	cmp	r0, #0
 801f07a:	d139      	bne.n	801f0f0 <_dtoa_r+0x320>
 801f07c:	4b16      	ldr	r3, [pc, #88]	; (801f0d8 <_dtoa_r+0x308>)
 801f07e:	4602      	mov	r2, r0
 801f080:	f240 11af 	movw	r1, #431	; 0x1af
 801f084:	e6bd      	b.n	801ee02 <_dtoa_r+0x32>
 801f086:	2301      	movs	r3, #1
 801f088:	e7e1      	b.n	801f04e <_dtoa_r+0x27e>
 801f08a:	2501      	movs	r5, #1
 801f08c:	2300      	movs	r3, #0
 801f08e:	9307      	str	r3, [sp, #28]
 801f090:	9509      	str	r5, [sp, #36]	; 0x24
 801f092:	f04f 33ff 	mov.w	r3, #4294967295
 801f096:	9301      	str	r3, [sp, #4]
 801f098:	9304      	str	r3, [sp, #16]
 801f09a:	2200      	movs	r2, #0
 801f09c:	2312      	movs	r3, #18
 801f09e:	e7d1      	b.n	801f044 <_dtoa_r+0x274>
 801f0a0:	636f4361 	.word	0x636f4361
 801f0a4:	3fd287a7 	.word	0x3fd287a7
 801f0a8:	8b60c8b3 	.word	0x8b60c8b3
 801f0ac:	3fc68a28 	.word	0x3fc68a28
 801f0b0:	509f79fb 	.word	0x509f79fb
 801f0b4:	3fd34413 	.word	0x3fd34413
 801f0b8:	08023f38 	.word	0x08023f38
 801f0bc:	08023f4f 	.word	0x08023f4f
 801f0c0:	7ff00000 	.word	0x7ff00000
 801f0c4:	08023f34 	.word	0x08023f34
 801f0c8:	08023f2b 	.word	0x08023f2b
 801f0cc:	08023f08 	.word	0x08023f08
 801f0d0:	3ff80000 	.word	0x3ff80000
 801f0d4:	08024040 	.word	0x08024040
 801f0d8:	08023fa7 	.word	0x08023fa7
 801f0dc:	2301      	movs	r3, #1
 801f0de:	9309      	str	r3, [sp, #36]	; 0x24
 801f0e0:	e7d7      	b.n	801f092 <_dtoa_r+0x2c2>
 801f0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0e4:	9301      	str	r3, [sp, #4]
 801f0e6:	9304      	str	r3, [sp, #16]
 801f0e8:	e7ba      	b.n	801f060 <_dtoa_r+0x290>
 801f0ea:	3101      	adds	r1, #1
 801f0ec:	0052      	lsls	r2, r2, #1
 801f0ee:	e7ba      	b.n	801f066 <_dtoa_r+0x296>
 801f0f0:	69e3      	ldr	r3, [r4, #28]
 801f0f2:	9a00      	ldr	r2, [sp, #0]
 801f0f4:	601a      	str	r2, [r3, #0]
 801f0f6:	9b04      	ldr	r3, [sp, #16]
 801f0f8:	2b0e      	cmp	r3, #14
 801f0fa:	f200 80a8 	bhi.w	801f24e <_dtoa_r+0x47e>
 801f0fe:	2d00      	cmp	r5, #0
 801f100:	f000 80a5 	beq.w	801f24e <_dtoa_r+0x47e>
 801f104:	f1bb 0f00 	cmp.w	fp, #0
 801f108:	dd38      	ble.n	801f17c <_dtoa_r+0x3ac>
 801f10a:	4bc0      	ldr	r3, [pc, #768]	; (801f40c <_dtoa_r+0x63c>)
 801f10c:	f00b 020f 	and.w	r2, fp, #15
 801f110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f114:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801f118:	e9d3 6700 	ldrd	r6, r7, [r3]
 801f11c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801f120:	d019      	beq.n	801f156 <_dtoa_r+0x386>
 801f122:	4bbb      	ldr	r3, [pc, #748]	; (801f410 <_dtoa_r+0x640>)
 801f124:	ec51 0b18 	vmov	r0, r1, d8
 801f128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f12c:	f7e1 fbb6 	bl	800089c <__aeabi_ddiv>
 801f130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f134:	f008 080f 	and.w	r8, r8, #15
 801f138:	2503      	movs	r5, #3
 801f13a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801f410 <_dtoa_r+0x640>
 801f13e:	f1b8 0f00 	cmp.w	r8, #0
 801f142:	d10a      	bne.n	801f15a <_dtoa_r+0x38a>
 801f144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f148:	4632      	mov	r2, r6
 801f14a:	463b      	mov	r3, r7
 801f14c:	f7e1 fba6 	bl	800089c <__aeabi_ddiv>
 801f150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f154:	e02b      	b.n	801f1ae <_dtoa_r+0x3de>
 801f156:	2502      	movs	r5, #2
 801f158:	e7ef      	b.n	801f13a <_dtoa_r+0x36a>
 801f15a:	f018 0f01 	tst.w	r8, #1
 801f15e:	d008      	beq.n	801f172 <_dtoa_r+0x3a2>
 801f160:	4630      	mov	r0, r6
 801f162:	4639      	mov	r1, r7
 801f164:	e9d9 2300 	ldrd	r2, r3, [r9]
 801f168:	f7e1 fa6e 	bl	8000648 <__aeabi_dmul>
 801f16c:	3501      	adds	r5, #1
 801f16e:	4606      	mov	r6, r0
 801f170:	460f      	mov	r7, r1
 801f172:	ea4f 0868 	mov.w	r8, r8, asr #1
 801f176:	f109 0908 	add.w	r9, r9, #8
 801f17a:	e7e0      	b.n	801f13e <_dtoa_r+0x36e>
 801f17c:	f000 809f 	beq.w	801f2be <_dtoa_r+0x4ee>
 801f180:	f1cb 0600 	rsb	r6, fp, #0
 801f184:	4ba1      	ldr	r3, [pc, #644]	; (801f40c <_dtoa_r+0x63c>)
 801f186:	4fa2      	ldr	r7, [pc, #648]	; (801f410 <_dtoa_r+0x640>)
 801f188:	f006 020f 	and.w	r2, r6, #15
 801f18c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f194:	ec51 0b18 	vmov	r0, r1, d8
 801f198:	f7e1 fa56 	bl	8000648 <__aeabi_dmul>
 801f19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1a0:	1136      	asrs	r6, r6, #4
 801f1a2:	2300      	movs	r3, #0
 801f1a4:	2502      	movs	r5, #2
 801f1a6:	2e00      	cmp	r6, #0
 801f1a8:	d17e      	bne.n	801f2a8 <_dtoa_r+0x4d8>
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d1d0      	bne.n	801f150 <_dtoa_r+0x380>
 801f1ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f1b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	f000 8084 	beq.w	801f2c2 <_dtoa_r+0x4f2>
 801f1ba:	4b96      	ldr	r3, [pc, #600]	; (801f414 <_dtoa_r+0x644>)
 801f1bc:	2200      	movs	r2, #0
 801f1be:	4640      	mov	r0, r8
 801f1c0:	4649      	mov	r1, r9
 801f1c2:	f7e1 fcb3 	bl	8000b2c <__aeabi_dcmplt>
 801f1c6:	2800      	cmp	r0, #0
 801f1c8:	d07b      	beq.n	801f2c2 <_dtoa_r+0x4f2>
 801f1ca:	9b04      	ldr	r3, [sp, #16]
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d078      	beq.n	801f2c2 <_dtoa_r+0x4f2>
 801f1d0:	9b01      	ldr	r3, [sp, #4]
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	dd39      	ble.n	801f24a <_dtoa_r+0x47a>
 801f1d6:	4b90      	ldr	r3, [pc, #576]	; (801f418 <_dtoa_r+0x648>)
 801f1d8:	2200      	movs	r2, #0
 801f1da:	4640      	mov	r0, r8
 801f1dc:	4649      	mov	r1, r9
 801f1de:	f7e1 fa33 	bl	8000648 <__aeabi_dmul>
 801f1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1e6:	9e01      	ldr	r6, [sp, #4]
 801f1e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 801f1ec:	3501      	adds	r5, #1
 801f1ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801f1f2:	4628      	mov	r0, r5
 801f1f4:	f7e1 f9be 	bl	8000574 <__aeabi_i2d>
 801f1f8:	4642      	mov	r2, r8
 801f1fa:	464b      	mov	r3, r9
 801f1fc:	f7e1 fa24 	bl	8000648 <__aeabi_dmul>
 801f200:	4b86      	ldr	r3, [pc, #536]	; (801f41c <_dtoa_r+0x64c>)
 801f202:	2200      	movs	r2, #0
 801f204:	f7e1 f86a 	bl	80002dc <__adddf3>
 801f208:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f210:	9303      	str	r3, [sp, #12]
 801f212:	2e00      	cmp	r6, #0
 801f214:	d158      	bne.n	801f2c8 <_dtoa_r+0x4f8>
 801f216:	4b82      	ldr	r3, [pc, #520]	; (801f420 <_dtoa_r+0x650>)
 801f218:	2200      	movs	r2, #0
 801f21a:	4640      	mov	r0, r8
 801f21c:	4649      	mov	r1, r9
 801f21e:	f7e1 f85b 	bl	80002d8 <__aeabi_dsub>
 801f222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f226:	4680      	mov	r8, r0
 801f228:	4689      	mov	r9, r1
 801f22a:	f7e1 fc9d 	bl	8000b68 <__aeabi_dcmpgt>
 801f22e:	2800      	cmp	r0, #0
 801f230:	f040 8296 	bne.w	801f760 <_dtoa_r+0x990>
 801f234:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f238:	4640      	mov	r0, r8
 801f23a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f23e:	4649      	mov	r1, r9
 801f240:	f7e1 fc74 	bl	8000b2c <__aeabi_dcmplt>
 801f244:	2800      	cmp	r0, #0
 801f246:	f040 8289 	bne.w	801f75c <_dtoa_r+0x98c>
 801f24a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801f24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f250:	2b00      	cmp	r3, #0
 801f252:	f2c0 814e 	blt.w	801f4f2 <_dtoa_r+0x722>
 801f256:	f1bb 0f0e 	cmp.w	fp, #14
 801f25a:	f300 814a 	bgt.w	801f4f2 <_dtoa_r+0x722>
 801f25e:	4b6b      	ldr	r3, [pc, #428]	; (801f40c <_dtoa_r+0x63c>)
 801f260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f264:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	f280 80dc 	bge.w	801f428 <_dtoa_r+0x658>
 801f270:	9b04      	ldr	r3, [sp, #16]
 801f272:	2b00      	cmp	r3, #0
 801f274:	f300 80d8 	bgt.w	801f428 <_dtoa_r+0x658>
 801f278:	f040 826f 	bne.w	801f75a <_dtoa_r+0x98a>
 801f27c:	4b68      	ldr	r3, [pc, #416]	; (801f420 <_dtoa_r+0x650>)
 801f27e:	2200      	movs	r2, #0
 801f280:	4640      	mov	r0, r8
 801f282:	4649      	mov	r1, r9
 801f284:	f7e1 f9e0 	bl	8000648 <__aeabi_dmul>
 801f288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f28c:	f7e1 fc62 	bl	8000b54 <__aeabi_dcmpge>
 801f290:	9e04      	ldr	r6, [sp, #16]
 801f292:	4637      	mov	r7, r6
 801f294:	2800      	cmp	r0, #0
 801f296:	f040 8245 	bne.w	801f724 <_dtoa_r+0x954>
 801f29a:	9d00      	ldr	r5, [sp, #0]
 801f29c:	2331      	movs	r3, #49	; 0x31
 801f29e:	f805 3b01 	strb.w	r3, [r5], #1
 801f2a2:	f10b 0b01 	add.w	fp, fp, #1
 801f2a6:	e241      	b.n	801f72c <_dtoa_r+0x95c>
 801f2a8:	07f2      	lsls	r2, r6, #31
 801f2aa:	d505      	bpl.n	801f2b8 <_dtoa_r+0x4e8>
 801f2ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f2b0:	f7e1 f9ca 	bl	8000648 <__aeabi_dmul>
 801f2b4:	3501      	adds	r5, #1
 801f2b6:	2301      	movs	r3, #1
 801f2b8:	1076      	asrs	r6, r6, #1
 801f2ba:	3708      	adds	r7, #8
 801f2bc:	e773      	b.n	801f1a6 <_dtoa_r+0x3d6>
 801f2be:	2502      	movs	r5, #2
 801f2c0:	e775      	b.n	801f1ae <_dtoa_r+0x3de>
 801f2c2:	9e04      	ldr	r6, [sp, #16]
 801f2c4:	465f      	mov	r7, fp
 801f2c6:	e792      	b.n	801f1ee <_dtoa_r+0x41e>
 801f2c8:	9900      	ldr	r1, [sp, #0]
 801f2ca:	4b50      	ldr	r3, [pc, #320]	; (801f40c <_dtoa_r+0x63c>)
 801f2cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f2d0:	4431      	add	r1, r6
 801f2d2:	9102      	str	r1, [sp, #8]
 801f2d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f2d6:	eeb0 9a47 	vmov.f32	s18, s14
 801f2da:	eef0 9a67 	vmov.f32	s19, s15
 801f2de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801f2e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f2e6:	2900      	cmp	r1, #0
 801f2e8:	d044      	beq.n	801f374 <_dtoa_r+0x5a4>
 801f2ea:	494e      	ldr	r1, [pc, #312]	; (801f424 <_dtoa_r+0x654>)
 801f2ec:	2000      	movs	r0, #0
 801f2ee:	f7e1 fad5 	bl	800089c <__aeabi_ddiv>
 801f2f2:	ec53 2b19 	vmov	r2, r3, d9
 801f2f6:	f7e0 ffef 	bl	80002d8 <__aeabi_dsub>
 801f2fa:	9d00      	ldr	r5, [sp, #0]
 801f2fc:	ec41 0b19 	vmov	d9, r0, r1
 801f300:	4649      	mov	r1, r9
 801f302:	4640      	mov	r0, r8
 801f304:	f7e1 fc50 	bl	8000ba8 <__aeabi_d2iz>
 801f308:	4606      	mov	r6, r0
 801f30a:	f7e1 f933 	bl	8000574 <__aeabi_i2d>
 801f30e:	4602      	mov	r2, r0
 801f310:	460b      	mov	r3, r1
 801f312:	4640      	mov	r0, r8
 801f314:	4649      	mov	r1, r9
 801f316:	f7e0 ffdf 	bl	80002d8 <__aeabi_dsub>
 801f31a:	3630      	adds	r6, #48	; 0x30
 801f31c:	f805 6b01 	strb.w	r6, [r5], #1
 801f320:	ec53 2b19 	vmov	r2, r3, d9
 801f324:	4680      	mov	r8, r0
 801f326:	4689      	mov	r9, r1
 801f328:	f7e1 fc00 	bl	8000b2c <__aeabi_dcmplt>
 801f32c:	2800      	cmp	r0, #0
 801f32e:	d164      	bne.n	801f3fa <_dtoa_r+0x62a>
 801f330:	4642      	mov	r2, r8
 801f332:	464b      	mov	r3, r9
 801f334:	4937      	ldr	r1, [pc, #220]	; (801f414 <_dtoa_r+0x644>)
 801f336:	2000      	movs	r0, #0
 801f338:	f7e0 ffce 	bl	80002d8 <__aeabi_dsub>
 801f33c:	ec53 2b19 	vmov	r2, r3, d9
 801f340:	f7e1 fbf4 	bl	8000b2c <__aeabi_dcmplt>
 801f344:	2800      	cmp	r0, #0
 801f346:	f040 80b6 	bne.w	801f4b6 <_dtoa_r+0x6e6>
 801f34a:	9b02      	ldr	r3, [sp, #8]
 801f34c:	429d      	cmp	r5, r3
 801f34e:	f43f af7c 	beq.w	801f24a <_dtoa_r+0x47a>
 801f352:	4b31      	ldr	r3, [pc, #196]	; (801f418 <_dtoa_r+0x648>)
 801f354:	ec51 0b19 	vmov	r0, r1, d9
 801f358:	2200      	movs	r2, #0
 801f35a:	f7e1 f975 	bl	8000648 <__aeabi_dmul>
 801f35e:	4b2e      	ldr	r3, [pc, #184]	; (801f418 <_dtoa_r+0x648>)
 801f360:	ec41 0b19 	vmov	d9, r0, r1
 801f364:	2200      	movs	r2, #0
 801f366:	4640      	mov	r0, r8
 801f368:	4649      	mov	r1, r9
 801f36a:	f7e1 f96d 	bl	8000648 <__aeabi_dmul>
 801f36e:	4680      	mov	r8, r0
 801f370:	4689      	mov	r9, r1
 801f372:	e7c5      	b.n	801f300 <_dtoa_r+0x530>
 801f374:	ec51 0b17 	vmov	r0, r1, d7
 801f378:	f7e1 f966 	bl	8000648 <__aeabi_dmul>
 801f37c:	9b02      	ldr	r3, [sp, #8]
 801f37e:	9d00      	ldr	r5, [sp, #0]
 801f380:	930f      	str	r3, [sp, #60]	; 0x3c
 801f382:	ec41 0b19 	vmov	d9, r0, r1
 801f386:	4649      	mov	r1, r9
 801f388:	4640      	mov	r0, r8
 801f38a:	f7e1 fc0d 	bl	8000ba8 <__aeabi_d2iz>
 801f38e:	4606      	mov	r6, r0
 801f390:	f7e1 f8f0 	bl	8000574 <__aeabi_i2d>
 801f394:	3630      	adds	r6, #48	; 0x30
 801f396:	4602      	mov	r2, r0
 801f398:	460b      	mov	r3, r1
 801f39a:	4640      	mov	r0, r8
 801f39c:	4649      	mov	r1, r9
 801f39e:	f7e0 ff9b 	bl	80002d8 <__aeabi_dsub>
 801f3a2:	f805 6b01 	strb.w	r6, [r5], #1
 801f3a6:	9b02      	ldr	r3, [sp, #8]
 801f3a8:	429d      	cmp	r5, r3
 801f3aa:	4680      	mov	r8, r0
 801f3ac:	4689      	mov	r9, r1
 801f3ae:	f04f 0200 	mov.w	r2, #0
 801f3b2:	d124      	bne.n	801f3fe <_dtoa_r+0x62e>
 801f3b4:	4b1b      	ldr	r3, [pc, #108]	; (801f424 <_dtoa_r+0x654>)
 801f3b6:	ec51 0b19 	vmov	r0, r1, d9
 801f3ba:	f7e0 ff8f 	bl	80002dc <__adddf3>
 801f3be:	4602      	mov	r2, r0
 801f3c0:	460b      	mov	r3, r1
 801f3c2:	4640      	mov	r0, r8
 801f3c4:	4649      	mov	r1, r9
 801f3c6:	f7e1 fbcf 	bl	8000b68 <__aeabi_dcmpgt>
 801f3ca:	2800      	cmp	r0, #0
 801f3cc:	d173      	bne.n	801f4b6 <_dtoa_r+0x6e6>
 801f3ce:	ec53 2b19 	vmov	r2, r3, d9
 801f3d2:	4914      	ldr	r1, [pc, #80]	; (801f424 <_dtoa_r+0x654>)
 801f3d4:	2000      	movs	r0, #0
 801f3d6:	f7e0 ff7f 	bl	80002d8 <__aeabi_dsub>
 801f3da:	4602      	mov	r2, r0
 801f3dc:	460b      	mov	r3, r1
 801f3de:	4640      	mov	r0, r8
 801f3e0:	4649      	mov	r1, r9
 801f3e2:	f7e1 fba3 	bl	8000b2c <__aeabi_dcmplt>
 801f3e6:	2800      	cmp	r0, #0
 801f3e8:	f43f af2f 	beq.w	801f24a <_dtoa_r+0x47a>
 801f3ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801f3ee:	1e6b      	subs	r3, r5, #1
 801f3f0:	930f      	str	r3, [sp, #60]	; 0x3c
 801f3f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f3f6:	2b30      	cmp	r3, #48	; 0x30
 801f3f8:	d0f8      	beq.n	801f3ec <_dtoa_r+0x61c>
 801f3fa:	46bb      	mov	fp, r7
 801f3fc:	e04a      	b.n	801f494 <_dtoa_r+0x6c4>
 801f3fe:	4b06      	ldr	r3, [pc, #24]	; (801f418 <_dtoa_r+0x648>)
 801f400:	f7e1 f922 	bl	8000648 <__aeabi_dmul>
 801f404:	4680      	mov	r8, r0
 801f406:	4689      	mov	r9, r1
 801f408:	e7bd      	b.n	801f386 <_dtoa_r+0x5b6>
 801f40a:	bf00      	nop
 801f40c:	08024040 	.word	0x08024040
 801f410:	08024018 	.word	0x08024018
 801f414:	3ff00000 	.word	0x3ff00000
 801f418:	40240000 	.word	0x40240000
 801f41c:	401c0000 	.word	0x401c0000
 801f420:	40140000 	.word	0x40140000
 801f424:	3fe00000 	.word	0x3fe00000
 801f428:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f42c:	9d00      	ldr	r5, [sp, #0]
 801f42e:	4642      	mov	r2, r8
 801f430:	464b      	mov	r3, r9
 801f432:	4630      	mov	r0, r6
 801f434:	4639      	mov	r1, r7
 801f436:	f7e1 fa31 	bl	800089c <__aeabi_ddiv>
 801f43a:	f7e1 fbb5 	bl	8000ba8 <__aeabi_d2iz>
 801f43e:	9001      	str	r0, [sp, #4]
 801f440:	f7e1 f898 	bl	8000574 <__aeabi_i2d>
 801f444:	4642      	mov	r2, r8
 801f446:	464b      	mov	r3, r9
 801f448:	f7e1 f8fe 	bl	8000648 <__aeabi_dmul>
 801f44c:	4602      	mov	r2, r0
 801f44e:	460b      	mov	r3, r1
 801f450:	4630      	mov	r0, r6
 801f452:	4639      	mov	r1, r7
 801f454:	f7e0 ff40 	bl	80002d8 <__aeabi_dsub>
 801f458:	9e01      	ldr	r6, [sp, #4]
 801f45a:	9f04      	ldr	r7, [sp, #16]
 801f45c:	3630      	adds	r6, #48	; 0x30
 801f45e:	f805 6b01 	strb.w	r6, [r5], #1
 801f462:	9e00      	ldr	r6, [sp, #0]
 801f464:	1bae      	subs	r6, r5, r6
 801f466:	42b7      	cmp	r7, r6
 801f468:	4602      	mov	r2, r0
 801f46a:	460b      	mov	r3, r1
 801f46c:	d134      	bne.n	801f4d8 <_dtoa_r+0x708>
 801f46e:	f7e0 ff35 	bl	80002dc <__adddf3>
 801f472:	4642      	mov	r2, r8
 801f474:	464b      	mov	r3, r9
 801f476:	4606      	mov	r6, r0
 801f478:	460f      	mov	r7, r1
 801f47a:	f7e1 fb75 	bl	8000b68 <__aeabi_dcmpgt>
 801f47e:	b9c8      	cbnz	r0, 801f4b4 <_dtoa_r+0x6e4>
 801f480:	4642      	mov	r2, r8
 801f482:	464b      	mov	r3, r9
 801f484:	4630      	mov	r0, r6
 801f486:	4639      	mov	r1, r7
 801f488:	f7e1 fb46 	bl	8000b18 <__aeabi_dcmpeq>
 801f48c:	b110      	cbz	r0, 801f494 <_dtoa_r+0x6c4>
 801f48e:	9b01      	ldr	r3, [sp, #4]
 801f490:	07db      	lsls	r3, r3, #31
 801f492:	d40f      	bmi.n	801f4b4 <_dtoa_r+0x6e4>
 801f494:	4651      	mov	r1, sl
 801f496:	4620      	mov	r0, r4
 801f498:	f000 fbcc 	bl	801fc34 <_Bfree>
 801f49c:	2300      	movs	r3, #0
 801f49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f4a0:	702b      	strb	r3, [r5, #0]
 801f4a2:	f10b 0301 	add.w	r3, fp, #1
 801f4a6:	6013      	str	r3, [r2, #0]
 801f4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f4aa:	2b00      	cmp	r3, #0
 801f4ac:	f43f ace2 	beq.w	801ee74 <_dtoa_r+0xa4>
 801f4b0:	601d      	str	r5, [r3, #0]
 801f4b2:	e4df      	b.n	801ee74 <_dtoa_r+0xa4>
 801f4b4:	465f      	mov	r7, fp
 801f4b6:	462b      	mov	r3, r5
 801f4b8:	461d      	mov	r5, r3
 801f4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f4be:	2a39      	cmp	r2, #57	; 0x39
 801f4c0:	d106      	bne.n	801f4d0 <_dtoa_r+0x700>
 801f4c2:	9a00      	ldr	r2, [sp, #0]
 801f4c4:	429a      	cmp	r2, r3
 801f4c6:	d1f7      	bne.n	801f4b8 <_dtoa_r+0x6e8>
 801f4c8:	9900      	ldr	r1, [sp, #0]
 801f4ca:	2230      	movs	r2, #48	; 0x30
 801f4cc:	3701      	adds	r7, #1
 801f4ce:	700a      	strb	r2, [r1, #0]
 801f4d0:	781a      	ldrb	r2, [r3, #0]
 801f4d2:	3201      	adds	r2, #1
 801f4d4:	701a      	strb	r2, [r3, #0]
 801f4d6:	e790      	b.n	801f3fa <_dtoa_r+0x62a>
 801f4d8:	4ba3      	ldr	r3, [pc, #652]	; (801f768 <_dtoa_r+0x998>)
 801f4da:	2200      	movs	r2, #0
 801f4dc:	f7e1 f8b4 	bl	8000648 <__aeabi_dmul>
 801f4e0:	2200      	movs	r2, #0
 801f4e2:	2300      	movs	r3, #0
 801f4e4:	4606      	mov	r6, r0
 801f4e6:	460f      	mov	r7, r1
 801f4e8:	f7e1 fb16 	bl	8000b18 <__aeabi_dcmpeq>
 801f4ec:	2800      	cmp	r0, #0
 801f4ee:	d09e      	beq.n	801f42e <_dtoa_r+0x65e>
 801f4f0:	e7d0      	b.n	801f494 <_dtoa_r+0x6c4>
 801f4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f4f4:	2a00      	cmp	r2, #0
 801f4f6:	f000 80ca 	beq.w	801f68e <_dtoa_r+0x8be>
 801f4fa:	9a07      	ldr	r2, [sp, #28]
 801f4fc:	2a01      	cmp	r2, #1
 801f4fe:	f300 80ad 	bgt.w	801f65c <_dtoa_r+0x88c>
 801f502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f504:	2a00      	cmp	r2, #0
 801f506:	f000 80a5 	beq.w	801f654 <_dtoa_r+0x884>
 801f50a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f50e:	9e08      	ldr	r6, [sp, #32]
 801f510:	9d05      	ldr	r5, [sp, #20]
 801f512:	9a05      	ldr	r2, [sp, #20]
 801f514:	441a      	add	r2, r3
 801f516:	9205      	str	r2, [sp, #20]
 801f518:	9a06      	ldr	r2, [sp, #24]
 801f51a:	2101      	movs	r1, #1
 801f51c:	441a      	add	r2, r3
 801f51e:	4620      	mov	r0, r4
 801f520:	9206      	str	r2, [sp, #24]
 801f522:	f000 fc3d 	bl	801fda0 <__i2b>
 801f526:	4607      	mov	r7, r0
 801f528:	b165      	cbz	r5, 801f544 <_dtoa_r+0x774>
 801f52a:	9b06      	ldr	r3, [sp, #24]
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	dd09      	ble.n	801f544 <_dtoa_r+0x774>
 801f530:	42ab      	cmp	r3, r5
 801f532:	9a05      	ldr	r2, [sp, #20]
 801f534:	bfa8      	it	ge
 801f536:	462b      	movge	r3, r5
 801f538:	1ad2      	subs	r2, r2, r3
 801f53a:	9205      	str	r2, [sp, #20]
 801f53c:	9a06      	ldr	r2, [sp, #24]
 801f53e:	1aed      	subs	r5, r5, r3
 801f540:	1ad3      	subs	r3, r2, r3
 801f542:	9306      	str	r3, [sp, #24]
 801f544:	9b08      	ldr	r3, [sp, #32]
 801f546:	b1f3      	cbz	r3, 801f586 <_dtoa_r+0x7b6>
 801f548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	f000 80a3 	beq.w	801f696 <_dtoa_r+0x8c6>
 801f550:	2e00      	cmp	r6, #0
 801f552:	dd10      	ble.n	801f576 <_dtoa_r+0x7a6>
 801f554:	4639      	mov	r1, r7
 801f556:	4632      	mov	r2, r6
 801f558:	4620      	mov	r0, r4
 801f55a:	f000 fce1 	bl	801ff20 <__pow5mult>
 801f55e:	4652      	mov	r2, sl
 801f560:	4601      	mov	r1, r0
 801f562:	4607      	mov	r7, r0
 801f564:	4620      	mov	r0, r4
 801f566:	f000 fc31 	bl	801fdcc <__multiply>
 801f56a:	4651      	mov	r1, sl
 801f56c:	4680      	mov	r8, r0
 801f56e:	4620      	mov	r0, r4
 801f570:	f000 fb60 	bl	801fc34 <_Bfree>
 801f574:	46c2      	mov	sl, r8
 801f576:	9b08      	ldr	r3, [sp, #32]
 801f578:	1b9a      	subs	r2, r3, r6
 801f57a:	d004      	beq.n	801f586 <_dtoa_r+0x7b6>
 801f57c:	4651      	mov	r1, sl
 801f57e:	4620      	mov	r0, r4
 801f580:	f000 fcce 	bl	801ff20 <__pow5mult>
 801f584:	4682      	mov	sl, r0
 801f586:	2101      	movs	r1, #1
 801f588:	4620      	mov	r0, r4
 801f58a:	f000 fc09 	bl	801fda0 <__i2b>
 801f58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f590:	2b00      	cmp	r3, #0
 801f592:	4606      	mov	r6, r0
 801f594:	f340 8081 	ble.w	801f69a <_dtoa_r+0x8ca>
 801f598:	461a      	mov	r2, r3
 801f59a:	4601      	mov	r1, r0
 801f59c:	4620      	mov	r0, r4
 801f59e:	f000 fcbf 	bl	801ff20 <__pow5mult>
 801f5a2:	9b07      	ldr	r3, [sp, #28]
 801f5a4:	2b01      	cmp	r3, #1
 801f5a6:	4606      	mov	r6, r0
 801f5a8:	dd7a      	ble.n	801f6a0 <_dtoa_r+0x8d0>
 801f5aa:	f04f 0800 	mov.w	r8, #0
 801f5ae:	6933      	ldr	r3, [r6, #16]
 801f5b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f5b4:	6918      	ldr	r0, [r3, #16]
 801f5b6:	f000 fba5 	bl	801fd04 <__hi0bits>
 801f5ba:	f1c0 0020 	rsb	r0, r0, #32
 801f5be:	9b06      	ldr	r3, [sp, #24]
 801f5c0:	4418      	add	r0, r3
 801f5c2:	f010 001f 	ands.w	r0, r0, #31
 801f5c6:	f000 8094 	beq.w	801f6f2 <_dtoa_r+0x922>
 801f5ca:	f1c0 0320 	rsb	r3, r0, #32
 801f5ce:	2b04      	cmp	r3, #4
 801f5d0:	f340 8085 	ble.w	801f6de <_dtoa_r+0x90e>
 801f5d4:	9b05      	ldr	r3, [sp, #20]
 801f5d6:	f1c0 001c 	rsb	r0, r0, #28
 801f5da:	4403      	add	r3, r0
 801f5dc:	9305      	str	r3, [sp, #20]
 801f5de:	9b06      	ldr	r3, [sp, #24]
 801f5e0:	4403      	add	r3, r0
 801f5e2:	4405      	add	r5, r0
 801f5e4:	9306      	str	r3, [sp, #24]
 801f5e6:	9b05      	ldr	r3, [sp, #20]
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	dd05      	ble.n	801f5f8 <_dtoa_r+0x828>
 801f5ec:	4651      	mov	r1, sl
 801f5ee:	461a      	mov	r2, r3
 801f5f0:	4620      	mov	r0, r4
 801f5f2:	f000 fcef 	bl	801ffd4 <__lshift>
 801f5f6:	4682      	mov	sl, r0
 801f5f8:	9b06      	ldr	r3, [sp, #24]
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	dd05      	ble.n	801f60a <_dtoa_r+0x83a>
 801f5fe:	4631      	mov	r1, r6
 801f600:	461a      	mov	r2, r3
 801f602:	4620      	mov	r0, r4
 801f604:	f000 fce6 	bl	801ffd4 <__lshift>
 801f608:	4606      	mov	r6, r0
 801f60a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	d072      	beq.n	801f6f6 <_dtoa_r+0x926>
 801f610:	4631      	mov	r1, r6
 801f612:	4650      	mov	r0, sl
 801f614:	f000 fd4a 	bl	80200ac <__mcmp>
 801f618:	2800      	cmp	r0, #0
 801f61a:	da6c      	bge.n	801f6f6 <_dtoa_r+0x926>
 801f61c:	2300      	movs	r3, #0
 801f61e:	4651      	mov	r1, sl
 801f620:	220a      	movs	r2, #10
 801f622:	4620      	mov	r0, r4
 801f624:	f000 fb28 	bl	801fc78 <__multadd>
 801f628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f62a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f62e:	4682      	mov	sl, r0
 801f630:	2b00      	cmp	r3, #0
 801f632:	f000 81b0 	beq.w	801f996 <_dtoa_r+0xbc6>
 801f636:	2300      	movs	r3, #0
 801f638:	4639      	mov	r1, r7
 801f63a:	220a      	movs	r2, #10
 801f63c:	4620      	mov	r0, r4
 801f63e:	f000 fb1b 	bl	801fc78 <__multadd>
 801f642:	9b01      	ldr	r3, [sp, #4]
 801f644:	2b00      	cmp	r3, #0
 801f646:	4607      	mov	r7, r0
 801f648:	f300 8096 	bgt.w	801f778 <_dtoa_r+0x9a8>
 801f64c:	9b07      	ldr	r3, [sp, #28]
 801f64e:	2b02      	cmp	r3, #2
 801f650:	dc59      	bgt.n	801f706 <_dtoa_r+0x936>
 801f652:	e091      	b.n	801f778 <_dtoa_r+0x9a8>
 801f654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f65a:	e758      	b.n	801f50e <_dtoa_r+0x73e>
 801f65c:	9b04      	ldr	r3, [sp, #16]
 801f65e:	1e5e      	subs	r6, r3, #1
 801f660:	9b08      	ldr	r3, [sp, #32]
 801f662:	42b3      	cmp	r3, r6
 801f664:	bfbf      	itttt	lt
 801f666:	9b08      	ldrlt	r3, [sp, #32]
 801f668:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801f66a:	9608      	strlt	r6, [sp, #32]
 801f66c:	1af3      	sublt	r3, r6, r3
 801f66e:	bfb4      	ite	lt
 801f670:	18d2      	addlt	r2, r2, r3
 801f672:	1b9e      	subge	r6, r3, r6
 801f674:	9b04      	ldr	r3, [sp, #16]
 801f676:	bfbc      	itt	lt
 801f678:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801f67a:	2600      	movlt	r6, #0
 801f67c:	2b00      	cmp	r3, #0
 801f67e:	bfb7      	itett	lt
 801f680:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801f684:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801f688:	1a9d      	sublt	r5, r3, r2
 801f68a:	2300      	movlt	r3, #0
 801f68c:	e741      	b.n	801f512 <_dtoa_r+0x742>
 801f68e:	9e08      	ldr	r6, [sp, #32]
 801f690:	9d05      	ldr	r5, [sp, #20]
 801f692:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f694:	e748      	b.n	801f528 <_dtoa_r+0x758>
 801f696:	9a08      	ldr	r2, [sp, #32]
 801f698:	e770      	b.n	801f57c <_dtoa_r+0x7ac>
 801f69a:	9b07      	ldr	r3, [sp, #28]
 801f69c:	2b01      	cmp	r3, #1
 801f69e:	dc19      	bgt.n	801f6d4 <_dtoa_r+0x904>
 801f6a0:	9b02      	ldr	r3, [sp, #8]
 801f6a2:	b9bb      	cbnz	r3, 801f6d4 <_dtoa_r+0x904>
 801f6a4:	9b03      	ldr	r3, [sp, #12]
 801f6a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f6aa:	b99b      	cbnz	r3, 801f6d4 <_dtoa_r+0x904>
 801f6ac:	9b03      	ldr	r3, [sp, #12]
 801f6ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f6b2:	0d1b      	lsrs	r3, r3, #20
 801f6b4:	051b      	lsls	r3, r3, #20
 801f6b6:	b183      	cbz	r3, 801f6da <_dtoa_r+0x90a>
 801f6b8:	9b05      	ldr	r3, [sp, #20]
 801f6ba:	3301      	adds	r3, #1
 801f6bc:	9305      	str	r3, [sp, #20]
 801f6be:	9b06      	ldr	r3, [sp, #24]
 801f6c0:	3301      	adds	r3, #1
 801f6c2:	9306      	str	r3, [sp, #24]
 801f6c4:	f04f 0801 	mov.w	r8, #1
 801f6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	f47f af6f 	bne.w	801f5ae <_dtoa_r+0x7de>
 801f6d0:	2001      	movs	r0, #1
 801f6d2:	e774      	b.n	801f5be <_dtoa_r+0x7ee>
 801f6d4:	f04f 0800 	mov.w	r8, #0
 801f6d8:	e7f6      	b.n	801f6c8 <_dtoa_r+0x8f8>
 801f6da:	4698      	mov	r8, r3
 801f6dc:	e7f4      	b.n	801f6c8 <_dtoa_r+0x8f8>
 801f6de:	d082      	beq.n	801f5e6 <_dtoa_r+0x816>
 801f6e0:	9a05      	ldr	r2, [sp, #20]
 801f6e2:	331c      	adds	r3, #28
 801f6e4:	441a      	add	r2, r3
 801f6e6:	9205      	str	r2, [sp, #20]
 801f6e8:	9a06      	ldr	r2, [sp, #24]
 801f6ea:	441a      	add	r2, r3
 801f6ec:	441d      	add	r5, r3
 801f6ee:	9206      	str	r2, [sp, #24]
 801f6f0:	e779      	b.n	801f5e6 <_dtoa_r+0x816>
 801f6f2:	4603      	mov	r3, r0
 801f6f4:	e7f4      	b.n	801f6e0 <_dtoa_r+0x910>
 801f6f6:	9b04      	ldr	r3, [sp, #16]
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	dc37      	bgt.n	801f76c <_dtoa_r+0x99c>
 801f6fc:	9b07      	ldr	r3, [sp, #28]
 801f6fe:	2b02      	cmp	r3, #2
 801f700:	dd34      	ble.n	801f76c <_dtoa_r+0x99c>
 801f702:	9b04      	ldr	r3, [sp, #16]
 801f704:	9301      	str	r3, [sp, #4]
 801f706:	9b01      	ldr	r3, [sp, #4]
 801f708:	b963      	cbnz	r3, 801f724 <_dtoa_r+0x954>
 801f70a:	4631      	mov	r1, r6
 801f70c:	2205      	movs	r2, #5
 801f70e:	4620      	mov	r0, r4
 801f710:	f000 fab2 	bl	801fc78 <__multadd>
 801f714:	4601      	mov	r1, r0
 801f716:	4606      	mov	r6, r0
 801f718:	4650      	mov	r0, sl
 801f71a:	f000 fcc7 	bl	80200ac <__mcmp>
 801f71e:	2800      	cmp	r0, #0
 801f720:	f73f adbb 	bgt.w	801f29a <_dtoa_r+0x4ca>
 801f724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f726:	9d00      	ldr	r5, [sp, #0]
 801f728:	ea6f 0b03 	mvn.w	fp, r3
 801f72c:	f04f 0800 	mov.w	r8, #0
 801f730:	4631      	mov	r1, r6
 801f732:	4620      	mov	r0, r4
 801f734:	f000 fa7e 	bl	801fc34 <_Bfree>
 801f738:	2f00      	cmp	r7, #0
 801f73a:	f43f aeab 	beq.w	801f494 <_dtoa_r+0x6c4>
 801f73e:	f1b8 0f00 	cmp.w	r8, #0
 801f742:	d005      	beq.n	801f750 <_dtoa_r+0x980>
 801f744:	45b8      	cmp	r8, r7
 801f746:	d003      	beq.n	801f750 <_dtoa_r+0x980>
 801f748:	4641      	mov	r1, r8
 801f74a:	4620      	mov	r0, r4
 801f74c:	f000 fa72 	bl	801fc34 <_Bfree>
 801f750:	4639      	mov	r1, r7
 801f752:	4620      	mov	r0, r4
 801f754:	f000 fa6e 	bl	801fc34 <_Bfree>
 801f758:	e69c      	b.n	801f494 <_dtoa_r+0x6c4>
 801f75a:	2600      	movs	r6, #0
 801f75c:	4637      	mov	r7, r6
 801f75e:	e7e1      	b.n	801f724 <_dtoa_r+0x954>
 801f760:	46bb      	mov	fp, r7
 801f762:	4637      	mov	r7, r6
 801f764:	e599      	b.n	801f29a <_dtoa_r+0x4ca>
 801f766:	bf00      	nop
 801f768:	40240000 	.word	0x40240000
 801f76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f76e:	2b00      	cmp	r3, #0
 801f770:	f000 80c8 	beq.w	801f904 <_dtoa_r+0xb34>
 801f774:	9b04      	ldr	r3, [sp, #16]
 801f776:	9301      	str	r3, [sp, #4]
 801f778:	2d00      	cmp	r5, #0
 801f77a:	dd05      	ble.n	801f788 <_dtoa_r+0x9b8>
 801f77c:	4639      	mov	r1, r7
 801f77e:	462a      	mov	r2, r5
 801f780:	4620      	mov	r0, r4
 801f782:	f000 fc27 	bl	801ffd4 <__lshift>
 801f786:	4607      	mov	r7, r0
 801f788:	f1b8 0f00 	cmp.w	r8, #0
 801f78c:	d05b      	beq.n	801f846 <_dtoa_r+0xa76>
 801f78e:	6879      	ldr	r1, [r7, #4]
 801f790:	4620      	mov	r0, r4
 801f792:	f000 fa0f 	bl	801fbb4 <_Balloc>
 801f796:	4605      	mov	r5, r0
 801f798:	b928      	cbnz	r0, 801f7a6 <_dtoa_r+0x9d6>
 801f79a:	4b83      	ldr	r3, [pc, #524]	; (801f9a8 <_dtoa_r+0xbd8>)
 801f79c:	4602      	mov	r2, r0
 801f79e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801f7a2:	f7ff bb2e 	b.w	801ee02 <_dtoa_r+0x32>
 801f7a6:	693a      	ldr	r2, [r7, #16]
 801f7a8:	3202      	adds	r2, #2
 801f7aa:	0092      	lsls	r2, r2, #2
 801f7ac:	f107 010c 	add.w	r1, r7, #12
 801f7b0:	300c      	adds	r0, #12
 801f7b2:	f7ff fa6f 	bl	801ec94 <memcpy>
 801f7b6:	2201      	movs	r2, #1
 801f7b8:	4629      	mov	r1, r5
 801f7ba:	4620      	mov	r0, r4
 801f7bc:	f000 fc0a 	bl	801ffd4 <__lshift>
 801f7c0:	9b00      	ldr	r3, [sp, #0]
 801f7c2:	3301      	adds	r3, #1
 801f7c4:	9304      	str	r3, [sp, #16]
 801f7c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f7ca:	4413      	add	r3, r2
 801f7cc:	9308      	str	r3, [sp, #32]
 801f7ce:	9b02      	ldr	r3, [sp, #8]
 801f7d0:	f003 0301 	and.w	r3, r3, #1
 801f7d4:	46b8      	mov	r8, r7
 801f7d6:	9306      	str	r3, [sp, #24]
 801f7d8:	4607      	mov	r7, r0
 801f7da:	9b04      	ldr	r3, [sp, #16]
 801f7dc:	4631      	mov	r1, r6
 801f7de:	3b01      	subs	r3, #1
 801f7e0:	4650      	mov	r0, sl
 801f7e2:	9301      	str	r3, [sp, #4]
 801f7e4:	f7ff fa6b 	bl	801ecbe <quorem>
 801f7e8:	4641      	mov	r1, r8
 801f7ea:	9002      	str	r0, [sp, #8]
 801f7ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801f7f0:	4650      	mov	r0, sl
 801f7f2:	f000 fc5b 	bl	80200ac <__mcmp>
 801f7f6:	463a      	mov	r2, r7
 801f7f8:	9005      	str	r0, [sp, #20]
 801f7fa:	4631      	mov	r1, r6
 801f7fc:	4620      	mov	r0, r4
 801f7fe:	f000 fc71 	bl	80200e4 <__mdiff>
 801f802:	68c2      	ldr	r2, [r0, #12]
 801f804:	4605      	mov	r5, r0
 801f806:	bb02      	cbnz	r2, 801f84a <_dtoa_r+0xa7a>
 801f808:	4601      	mov	r1, r0
 801f80a:	4650      	mov	r0, sl
 801f80c:	f000 fc4e 	bl	80200ac <__mcmp>
 801f810:	4602      	mov	r2, r0
 801f812:	4629      	mov	r1, r5
 801f814:	4620      	mov	r0, r4
 801f816:	9209      	str	r2, [sp, #36]	; 0x24
 801f818:	f000 fa0c 	bl	801fc34 <_Bfree>
 801f81c:	9b07      	ldr	r3, [sp, #28]
 801f81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f820:	9d04      	ldr	r5, [sp, #16]
 801f822:	ea43 0102 	orr.w	r1, r3, r2
 801f826:	9b06      	ldr	r3, [sp, #24]
 801f828:	4319      	orrs	r1, r3
 801f82a:	d110      	bne.n	801f84e <_dtoa_r+0xa7e>
 801f82c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f830:	d029      	beq.n	801f886 <_dtoa_r+0xab6>
 801f832:	9b05      	ldr	r3, [sp, #20]
 801f834:	2b00      	cmp	r3, #0
 801f836:	dd02      	ble.n	801f83e <_dtoa_r+0xa6e>
 801f838:	9b02      	ldr	r3, [sp, #8]
 801f83a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801f83e:	9b01      	ldr	r3, [sp, #4]
 801f840:	f883 9000 	strb.w	r9, [r3]
 801f844:	e774      	b.n	801f730 <_dtoa_r+0x960>
 801f846:	4638      	mov	r0, r7
 801f848:	e7ba      	b.n	801f7c0 <_dtoa_r+0x9f0>
 801f84a:	2201      	movs	r2, #1
 801f84c:	e7e1      	b.n	801f812 <_dtoa_r+0xa42>
 801f84e:	9b05      	ldr	r3, [sp, #20]
 801f850:	2b00      	cmp	r3, #0
 801f852:	db04      	blt.n	801f85e <_dtoa_r+0xa8e>
 801f854:	9907      	ldr	r1, [sp, #28]
 801f856:	430b      	orrs	r3, r1
 801f858:	9906      	ldr	r1, [sp, #24]
 801f85a:	430b      	orrs	r3, r1
 801f85c:	d120      	bne.n	801f8a0 <_dtoa_r+0xad0>
 801f85e:	2a00      	cmp	r2, #0
 801f860:	dded      	ble.n	801f83e <_dtoa_r+0xa6e>
 801f862:	4651      	mov	r1, sl
 801f864:	2201      	movs	r2, #1
 801f866:	4620      	mov	r0, r4
 801f868:	f000 fbb4 	bl	801ffd4 <__lshift>
 801f86c:	4631      	mov	r1, r6
 801f86e:	4682      	mov	sl, r0
 801f870:	f000 fc1c 	bl	80200ac <__mcmp>
 801f874:	2800      	cmp	r0, #0
 801f876:	dc03      	bgt.n	801f880 <_dtoa_r+0xab0>
 801f878:	d1e1      	bne.n	801f83e <_dtoa_r+0xa6e>
 801f87a:	f019 0f01 	tst.w	r9, #1
 801f87e:	d0de      	beq.n	801f83e <_dtoa_r+0xa6e>
 801f880:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f884:	d1d8      	bne.n	801f838 <_dtoa_r+0xa68>
 801f886:	9a01      	ldr	r2, [sp, #4]
 801f888:	2339      	movs	r3, #57	; 0x39
 801f88a:	7013      	strb	r3, [r2, #0]
 801f88c:	462b      	mov	r3, r5
 801f88e:	461d      	mov	r5, r3
 801f890:	3b01      	subs	r3, #1
 801f892:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f896:	2a39      	cmp	r2, #57	; 0x39
 801f898:	d06c      	beq.n	801f974 <_dtoa_r+0xba4>
 801f89a:	3201      	adds	r2, #1
 801f89c:	701a      	strb	r2, [r3, #0]
 801f89e:	e747      	b.n	801f730 <_dtoa_r+0x960>
 801f8a0:	2a00      	cmp	r2, #0
 801f8a2:	dd07      	ble.n	801f8b4 <_dtoa_r+0xae4>
 801f8a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f8a8:	d0ed      	beq.n	801f886 <_dtoa_r+0xab6>
 801f8aa:	9a01      	ldr	r2, [sp, #4]
 801f8ac:	f109 0301 	add.w	r3, r9, #1
 801f8b0:	7013      	strb	r3, [r2, #0]
 801f8b2:	e73d      	b.n	801f730 <_dtoa_r+0x960>
 801f8b4:	9b04      	ldr	r3, [sp, #16]
 801f8b6:	9a08      	ldr	r2, [sp, #32]
 801f8b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 801f8bc:	4293      	cmp	r3, r2
 801f8be:	d043      	beq.n	801f948 <_dtoa_r+0xb78>
 801f8c0:	4651      	mov	r1, sl
 801f8c2:	2300      	movs	r3, #0
 801f8c4:	220a      	movs	r2, #10
 801f8c6:	4620      	mov	r0, r4
 801f8c8:	f000 f9d6 	bl	801fc78 <__multadd>
 801f8cc:	45b8      	cmp	r8, r7
 801f8ce:	4682      	mov	sl, r0
 801f8d0:	f04f 0300 	mov.w	r3, #0
 801f8d4:	f04f 020a 	mov.w	r2, #10
 801f8d8:	4641      	mov	r1, r8
 801f8da:	4620      	mov	r0, r4
 801f8dc:	d107      	bne.n	801f8ee <_dtoa_r+0xb1e>
 801f8de:	f000 f9cb 	bl	801fc78 <__multadd>
 801f8e2:	4680      	mov	r8, r0
 801f8e4:	4607      	mov	r7, r0
 801f8e6:	9b04      	ldr	r3, [sp, #16]
 801f8e8:	3301      	adds	r3, #1
 801f8ea:	9304      	str	r3, [sp, #16]
 801f8ec:	e775      	b.n	801f7da <_dtoa_r+0xa0a>
 801f8ee:	f000 f9c3 	bl	801fc78 <__multadd>
 801f8f2:	4639      	mov	r1, r7
 801f8f4:	4680      	mov	r8, r0
 801f8f6:	2300      	movs	r3, #0
 801f8f8:	220a      	movs	r2, #10
 801f8fa:	4620      	mov	r0, r4
 801f8fc:	f000 f9bc 	bl	801fc78 <__multadd>
 801f900:	4607      	mov	r7, r0
 801f902:	e7f0      	b.n	801f8e6 <_dtoa_r+0xb16>
 801f904:	9b04      	ldr	r3, [sp, #16]
 801f906:	9301      	str	r3, [sp, #4]
 801f908:	9d00      	ldr	r5, [sp, #0]
 801f90a:	4631      	mov	r1, r6
 801f90c:	4650      	mov	r0, sl
 801f90e:	f7ff f9d6 	bl	801ecbe <quorem>
 801f912:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801f916:	9b00      	ldr	r3, [sp, #0]
 801f918:	f805 9b01 	strb.w	r9, [r5], #1
 801f91c:	1aea      	subs	r2, r5, r3
 801f91e:	9b01      	ldr	r3, [sp, #4]
 801f920:	4293      	cmp	r3, r2
 801f922:	dd07      	ble.n	801f934 <_dtoa_r+0xb64>
 801f924:	4651      	mov	r1, sl
 801f926:	2300      	movs	r3, #0
 801f928:	220a      	movs	r2, #10
 801f92a:	4620      	mov	r0, r4
 801f92c:	f000 f9a4 	bl	801fc78 <__multadd>
 801f930:	4682      	mov	sl, r0
 801f932:	e7ea      	b.n	801f90a <_dtoa_r+0xb3a>
 801f934:	9b01      	ldr	r3, [sp, #4]
 801f936:	2b00      	cmp	r3, #0
 801f938:	bfc8      	it	gt
 801f93a:	461d      	movgt	r5, r3
 801f93c:	9b00      	ldr	r3, [sp, #0]
 801f93e:	bfd8      	it	le
 801f940:	2501      	movle	r5, #1
 801f942:	441d      	add	r5, r3
 801f944:	f04f 0800 	mov.w	r8, #0
 801f948:	4651      	mov	r1, sl
 801f94a:	2201      	movs	r2, #1
 801f94c:	4620      	mov	r0, r4
 801f94e:	f000 fb41 	bl	801ffd4 <__lshift>
 801f952:	4631      	mov	r1, r6
 801f954:	4682      	mov	sl, r0
 801f956:	f000 fba9 	bl	80200ac <__mcmp>
 801f95a:	2800      	cmp	r0, #0
 801f95c:	dc96      	bgt.n	801f88c <_dtoa_r+0xabc>
 801f95e:	d102      	bne.n	801f966 <_dtoa_r+0xb96>
 801f960:	f019 0f01 	tst.w	r9, #1
 801f964:	d192      	bne.n	801f88c <_dtoa_r+0xabc>
 801f966:	462b      	mov	r3, r5
 801f968:	461d      	mov	r5, r3
 801f96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f96e:	2a30      	cmp	r2, #48	; 0x30
 801f970:	d0fa      	beq.n	801f968 <_dtoa_r+0xb98>
 801f972:	e6dd      	b.n	801f730 <_dtoa_r+0x960>
 801f974:	9a00      	ldr	r2, [sp, #0]
 801f976:	429a      	cmp	r2, r3
 801f978:	d189      	bne.n	801f88e <_dtoa_r+0xabe>
 801f97a:	f10b 0b01 	add.w	fp, fp, #1
 801f97e:	2331      	movs	r3, #49	; 0x31
 801f980:	e796      	b.n	801f8b0 <_dtoa_r+0xae0>
 801f982:	4b0a      	ldr	r3, [pc, #40]	; (801f9ac <_dtoa_r+0xbdc>)
 801f984:	f7ff ba99 	b.w	801eeba <_dtoa_r+0xea>
 801f988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	f47f aa6d 	bne.w	801ee6a <_dtoa_r+0x9a>
 801f990:	4b07      	ldr	r3, [pc, #28]	; (801f9b0 <_dtoa_r+0xbe0>)
 801f992:	f7ff ba92 	b.w	801eeba <_dtoa_r+0xea>
 801f996:	9b01      	ldr	r3, [sp, #4]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	dcb5      	bgt.n	801f908 <_dtoa_r+0xb38>
 801f99c:	9b07      	ldr	r3, [sp, #28]
 801f99e:	2b02      	cmp	r3, #2
 801f9a0:	f73f aeb1 	bgt.w	801f706 <_dtoa_r+0x936>
 801f9a4:	e7b0      	b.n	801f908 <_dtoa_r+0xb38>
 801f9a6:	bf00      	nop
 801f9a8:	08023fa7 	.word	0x08023fa7
 801f9ac:	08023f07 	.word	0x08023f07
 801f9b0:	08023f2b 	.word	0x08023f2b

0801f9b4 <_free_r>:
 801f9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f9b6:	2900      	cmp	r1, #0
 801f9b8:	d044      	beq.n	801fa44 <_free_r+0x90>
 801f9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f9be:	9001      	str	r0, [sp, #4]
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	f1a1 0404 	sub.w	r4, r1, #4
 801f9c6:	bfb8      	it	lt
 801f9c8:	18e4      	addlt	r4, r4, r3
 801f9ca:	f000 f8e7 	bl	801fb9c <__malloc_lock>
 801f9ce:	4a1e      	ldr	r2, [pc, #120]	; (801fa48 <_free_r+0x94>)
 801f9d0:	9801      	ldr	r0, [sp, #4]
 801f9d2:	6813      	ldr	r3, [r2, #0]
 801f9d4:	b933      	cbnz	r3, 801f9e4 <_free_r+0x30>
 801f9d6:	6063      	str	r3, [r4, #4]
 801f9d8:	6014      	str	r4, [r2, #0]
 801f9da:	b003      	add	sp, #12
 801f9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f9e0:	f000 b8e2 	b.w	801fba8 <__malloc_unlock>
 801f9e4:	42a3      	cmp	r3, r4
 801f9e6:	d908      	bls.n	801f9fa <_free_r+0x46>
 801f9e8:	6825      	ldr	r5, [r4, #0]
 801f9ea:	1961      	adds	r1, r4, r5
 801f9ec:	428b      	cmp	r3, r1
 801f9ee:	bf01      	itttt	eq
 801f9f0:	6819      	ldreq	r1, [r3, #0]
 801f9f2:	685b      	ldreq	r3, [r3, #4]
 801f9f4:	1949      	addeq	r1, r1, r5
 801f9f6:	6021      	streq	r1, [r4, #0]
 801f9f8:	e7ed      	b.n	801f9d6 <_free_r+0x22>
 801f9fa:	461a      	mov	r2, r3
 801f9fc:	685b      	ldr	r3, [r3, #4]
 801f9fe:	b10b      	cbz	r3, 801fa04 <_free_r+0x50>
 801fa00:	42a3      	cmp	r3, r4
 801fa02:	d9fa      	bls.n	801f9fa <_free_r+0x46>
 801fa04:	6811      	ldr	r1, [r2, #0]
 801fa06:	1855      	adds	r5, r2, r1
 801fa08:	42a5      	cmp	r5, r4
 801fa0a:	d10b      	bne.n	801fa24 <_free_r+0x70>
 801fa0c:	6824      	ldr	r4, [r4, #0]
 801fa0e:	4421      	add	r1, r4
 801fa10:	1854      	adds	r4, r2, r1
 801fa12:	42a3      	cmp	r3, r4
 801fa14:	6011      	str	r1, [r2, #0]
 801fa16:	d1e0      	bne.n	801f9da <_free_r+0x26>
 801fa18:	681c      	ldr	r4, [r3, #0]
 801fa1a:	685b      	ldr	r3, [r3, #4]
 801fa1c:	6053      	str	r3, [r2, #4]
 801fa1e:	440c      	add	r4, r1
 801fa20:	6014      	str	r4, [r2, #0]
 801fa22:	e7da      	b.n	801f9da <_free_r+0x26>
 801fa24:	d902      	bls.n	801fa2c <_free_r+0x78>
 801fa26:	230c      	movs	r3, #12
 801fa28:	6003      	str	r3, [r0, #0]
 801fa2a:	e7d6      	b.n	801f9da <_free_r+0x26>
 801fa2c:	6825      	ldr	r5, [r4, #0]
 801fa2e:	1961      	adds	r1, r4, r5
 801fa30:	428b      	cmp	r3, r1
 801fa32:	bf04      	itt	eq
 801fa34:	6819      	ldreq	r1, [r3, #0]
 801fa36:	685b      	ldreq	r3, [r3, #4]
 801fa38:	6063      	str	r3, [r4, #4]
 801fa3a:	bf04      	itt	eq
 801fa3c:	1949      	addeq	r1, r1, r5
 801fa3e:	6021      	streq	r1, [r4, #0]
 801fa40:	6054      	str	r4, [r2, #4]
 801fa42:	e7ca      	b.n	801f9da <_free_r+0x26>
 801fa44:	b003      	add	sp, #12
 801fa46:	bd30      	pop	{r4, r5, pc}
 801fa48:	20016a8c 	.word	0x20016a8c

0801fa4c <malloc>:
 801fa4c:	4b02      	ldr	r3, [pc, #8]	; (801fa58 <malloc+0xc>)
 801fa4e:	4601      	mov	r1, r0
 801fa50:	6818      	ldr	r0, [r3, #0]
 801fa52:	f000 b823 	b.w	801fa9c <_malloc_r>
 801fa56:	bf00      	nop
 801fa58:	200001e8 	.word	0x200001e8

0801fa5c <sbrk_aligned>:
 801fa5c:	b570      	push	{r4, r5, r6, lr}
 801fa5e:	4e0e      	ldr	r6, [pc, #56]	; (801fa98 <sbrk_aligned+0x3c>)
 801fa60:	460c      	mov	r4, r1
 801fa62:	6831      	ldr	r1, [r6, #0]
 801fa64:	4605      	mov	r5, r0
 801fa66:	b911      	cbnz	r1, 801fa6e <sbrk_aligned+0x12>
 801fa68:	f001 f85e 	bl	8020b28 <_sbrk_r>
 801fa6c:	6030      	str	r0, [r6, #0]
 801fa6e:	4621      	mov	r1, r4
 801fa70:	4628      	mov	r0, r5
 801fa72:	f001 f859 	bl	8020b28 <_sbrk_r>
 801fa76:	1c43      	adds	r3, r0, #1
 801fa78:	d00a      	beq.n	801fa90 <sbrk_aligned+0x34>
 801fa7a:	1cc4      	adds	r4, r0, #3
 801fa7c:	f024 0403 	bic.w	r4, r4, #3
 801fa80:	42a0      	cmp	r0, r4
 801fa82:	d007      	beq.n	801fa94 <sbrk_aligned+0x38>
 801fa84:	1a21      	subs	r1, r4, r0
 801fa86:	4628      	mov	r0, r5
 801fa88:	f001 f84e 	bl	8020b28 <_sbrk_r>
 801fa8c:	3001      	adds	r0, #1
 801fa8e:	d101      	bne.n	801fa94 <sbrk_aligned+0x38>
 801fa90:	f04f 34ff 	mov.w	r4, #4294967295
 801fa94:	4620      	mov	r0, r4
 801fa96:	bd70      	pop	{r4, r5, r6, pc}
 801fa98:	20016a90 	.word	0x20016a90

0801fa9c <_malloc_r>:
 801fa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801faa0:	1ccd      	adds	r5, r1, #3
 801faa2:	f025 0503 	bic.w	r5, r5, #3
 801faa6:	3508      	adds	r5, #8
 801faa8:	2d0c      	cmp	r5, #12
 801faaa:	bf38      	it	cc
 801faac:	250c      	movcc	r5, #12
 801faae:	2d00      	cmp	r5, #0
 801fab0:	4607      	mov	r7, r0
 801fab2:	db01      	blt.n	801fab8 <_malloc_r+0x1c>
 801fab4:	42a9      	cmp	r1, r5
 801fab6:	d905      	bls.n	801fac4 <_malloc_r+0x28>
 801fab8:	230c      	movs	r3, #12
 801faba:	603b      	str	r3, [r7, #0]
 801fabc:	2600      	movs	r6, #0
 801fabe:	4630      	mov	r0, r6
 801fac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fac4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801fb98 <_malloc_r+0xfc>
 801fac8:	f000 f868 	bl	801fb9c <__malloc_lock>
 801facc:	f8d8 3000 	ldr.w	r3, [r8]
 801fad0:	461c      	mov	r4, r3
 801fad2:	bb5c      	cbnz	r4, 801fb2c <_malloc_r+0x90>
 801fad4:	4629      	mov	r1, r5
 801fad6:	4638      	mov	r0, r7
 801fad8:	f7ff ffc0 	bl	801fa5c <sbrk_aligned>
 801fadc:	1c43      	adds	r3, r0, #1
 801fade:	4604      	mov	r4, r0
 801fae0:	d155      	bne.n	801fb8e <_malloc_r+0xf2>
 801fae2:	f8d8 4000 	ldr.w	r4, [r8]
 801fae6:	4626      	mov	r6, r4
 801fae8:	2e00      	cmp	r6, #0
 801faea:	d145      	bne.n	801fb78 <_malloc_r+0xdc>
 801faec:	2c00      	cmp	r4, #0
 801faee:	d048      	beq.n	801fb82 <_malloc_r+0xe6>
 801faf0:	6823      	ldr	r3, [r4, #0]
 801faf2:	4631      	mov	r1, r6
 801faf4:	4638      	mov	r0, r7
 801faf6:	eb04 0903 	add.w	r9, r4, r3
 801fafa:	f001 f815 	bl	8020b28 <_sbrk_r>
 801fafe:	4581      	cmp	r9, r0
 801fb00:	d13f      	bne.n	801fb82 <_malloc_r+0xe6>
 801fb02:	6821      	ldr	r1, [r4, #0]
 801fb04:	1a6d      	subs	r5, r5, r1
 801fb06:	4629      	mov	r1, r5
 801fb08:	4638      	mov	r0, r7
 801fb0a:	f7ff ffa7 	bl	801fa5c <sbrk_aligned>
 801fb0e:	3001      	adds	r0, #1
 801fb10:	d037      	beq.n	801fb82 <_malloc_r+0xe6>
 801fb12:	6823      	ldr	r3, [r4, #0]
 801fb14:	442b      	add	r3, r5
 801fb16:	6023      	str	r3, [r4, #0]
 801fb18:	f8d8 3000 	ldr.w	r3, [r8]
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d038      	beq.n	801fb92 <_malloc_r+0xf6>
 801fb20:	685a      	ldr	r2, [r3, #4]
 801fb22:	42a2      	cmp	r2, r4
 801fb24:	d12b      	bne.n	801fb7e <_malloc_r+0xe2>
 801fb26:	2200      	movs	r2, #0
 801fb28:	605a      	str	r2, [r3, #4]
 801fb2a:	e00f      	b.n	801fb4c <_malloc_r+0xb0>
 801fb2c:	6822      	ldr	r2, [r4, #0]
 801fb2e:	1b52      	subs	r2, r2, r5
 801fb30:	d41f      	bmi.n	801fb72 <_malloc_r+0xd6>
 801fb32:	2a0b      	cmp	r2, #11
 801fb34:	d917      	bls.n	801fb66 <_malloc_r+0xca>
 801fb36:	1961      	adds	r1, r4, r5
 801fb38:	42a3      	cmp	r3, r4
 801fb3a:	6025      	str	r5, [r4, #0]
 801fb3c:	bf18      	it	ne
 801fb3e:	6059      	strne	r1, [r3, #4]
 801fb40:	6863      	ldr	r3, [r4, #4]
 801fb42:	bf08      	it	eq
 801fb44:	f8c8 1000 	streq.w	r1, [r8]
 801fb48:	5162      	str	r2, [r4, r5]
 801fb4a:	604b      	str	r3, [r1, #4]
 801fb4c:	4638      	mov	r0, r7
 801fb4e:	f104 060b 	add.w	r6, r4, #11
 801fb52:	f000 f829 	bl	801fba8 <__malloc_unlock>
 801fb56:	f026 0607 	bic.w	r6, r6, #7
 801fb5a:	1d23      	adds	r3, r4, #4
 801fb5c:	1af2      	subs	r2, r6, r3
 801fb5e:	d0ae      	beq.n	801fabe <_malloc_r+0x22>
 801fb60:	1b9b      	subs	r3, r3, r6
 801fb62:	50a3      	str	r3, [r4, r2]
 801fb64:	e7ab      	b.n	801fabe <_malloc_r+0x22>
 801fb66:	42a3      	cmp	r3, r4
 801fb68:	6862      	ldr	r2, [r4, #4]
 801fb6a:	d1dd      	bne.n	801fb28 <_malloc_r+0x8c>
 801fb6c:	f8c8 2000 	str.w	r2, [r8]
 801fb70:	e7ec      	b.n	801fb4c <_malloc_r+0xb0>
 801fb72:	4623      	mov	r3, r4
 801fb74:	6864      	ldr	r4, [r4, #4]
 801fb76:	e7ac      	b.n	801fad2 <_malloc_r+0x36>
 801fb78:	4634      	mov	r4, r6
 801fb7a:	6876      	ldr	r6, [r6, #4]
 801fb7c:	e7b4      	b.n	801fae8 <_malloc_r+0x4c>
 801fb7e:	4613      	mov	r3, r2
 801fb80:	e7cc      	b.n	801fb1c <_malloc_r+0x80>
 801fb82:	230c      	movs	r3, #12
 801fb84:	603b      	str	r3, [r7, #0]
 801fb86:	4638      	mov	r0, r7
 801fb88:	f000 f80e 	bl	801fba8 <__malloc_unlock>
 801fb8c:	e797      	b.n	801fabe <_malloc_r+0x22>
 801fb8e:	6025      	str	r5, [r4, #0]
 801fb90:	e7dc      	b.n	801fb4c <_malloc_r+0xb0>
 801fb92:	605b      	str	r3, [r3, #4]
 801fb94:	deff      	udf	#255	; 0xff
 801fb96:	bf00      	nop
 801fb98:	20016a8c 	.word	0x20016a8c

0801fb9c <__malloc_lock>:
 801fb9c:	4801      	ldr	r0, [pc, #4]	; (801fba4 <__malloc_lock+0x8>)
 801fb9e:	f7ff b877 	b.w	801ec90 <__retarget_lock_acquire_recursive>
 801fba2:	bf00      	nop
 801fba4:	20016a88 	.word	0x20016a88

0801fba8 <__malloc_unlock>:
 801fba8:	4801      	ldr	r0, [pc, #4]	; (801fbb0 <__malloc_unlock+0x8>)
 801fbaa:	f7ff b872 	b.w	801ec92 <__retarget_lock_release_recursive>
 801fbae:	bf00      	nop
 801fbb0:	20016a88 	.word	0x20016a88

0801fbb4 <_Balloc>:
 801fbb4:	b570      	push	{r4, r5, r6, lr}
 801fbb6:	69c6      	ldr	r6, [r0, #28]
 801fbb8:	4604      	mov	r4, r0
 801fbba:	460d      	mov	r5, r1
 801fbbc:	b976      	cbnz	r6, 801fbdc <_Balloc+0x28>
 801fbbe:	2010      	movs	r0, #16
 801fbc0:	f7ff ff44 	bl	801fa4c <malloc>
 801fbc4:	4602      	mov	r2, r0
 801fbc6:	61e0      	str	r0, [r4, #28]
 801fbc8:	b920      	cbnz	r0, 801fbd4 <_Balloc+0x20>
 801fbca:	4b18      	ldr	r3, [pc, #96]	; (801fc2c <_Balloc+0x78>)
 801fbcc:	4818      	ldr	r0, [pc, #96]	; (801fc30 <_Balloc+0x7c>)
 801fbce:	216b      	movs	r1, #107	; 0x6b
 801fbd0:	f7fe fa38 	bl	801e044 <__assert_func>
 801fbd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fbd8:	6006      	str	r6, [r0, #0]
 801fbda:	60c6      	str	r6, [r0, #12]
 801fbdc:	69e6      	ldr	r6, [r4, #28]
 801fbde:	68f3      	ldr	r3, [r6, #12]
 801fbe0:	b183      	cbz	r3, 801fc04 <_Balloc+0x50>
 801fbe2:	69e3      	ldr	r3, [r4, #28]
 801fbe4:	68db      	ldr	r3, [r3, #12]
 801fbe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fbea:	b9b8      	cbnz	r0, 801fc1c <_Balloc+0x68>
 801fbec:	2101      	movs	r1, #1
 801fbee:	fa01 f605 	lsl.w	r6, r1, r5
 801fbf2:	1d72      	adds	r2, r6, #5
 801fbf4:	0092      	lsls	r2, r2, #2
 801fbf6:	4620      	mov	r0, r4
 801fbf8:	f000 ffa6 	bl	8020b48 <_calloc_r>
 801fbfc:	b160      	cbz	r0, 801fc18 <_Balloc+0x64>
 801fbfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fc02:	e00e      	b.n	801fc22 <_Balloc+0x6e>
 801fc04:	2221      	movs	r2, #33	; 0x21
 801fc06:	2104      	movs	r1, #4
 801fc08:	4620      	mov	r0, r4
 801fc0a:	f000 ff9d 	bl	8020b48 <_calloc_r>
 801fc0e:	69e3      	ldr	r3, [r4, #28]
 801fc10:	60f0      	str	r0, [r6, #12]
 801fc12:	68db      	ldr	r3, [r3, #12]
 801fc14:	2b00      	cmp	r3, #0
 801fc16:	d1e4      	bne.n	801fbe2 <_Balloc+0x2e>
 801fc18:	2000      	movs	r0, #0
 801fc1a:	bd70      	pop	{r4, r5, r6, pc}
 801fc1c:	6802      	ldr	r2, [r0, #0]
 801fc1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fc22:	2300      	movs	r3, #0
 801fc24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fc28:	e7f7      	b.n	801fc1a <_Balloc+0x66>
 801fc2a:	bf00      	nop
 801fc2c:	08023f38 	.word	0x08023f38
 801fc30:	08023fb8 	.word	0x08023fb8

0801fc34 <_Bfree>:
 801fc34:	b570      	push	{r4, r5, r6, lr}
 801fc36:	69c6      	ldr	r6, [r0, #28]
 801fc38:	4605      	mov	r5, r0
 801fc3a:	460c      	mov	r4, r1
 801fc3c:	b976      	cbnz	r6, 801fc5c <_Bfree+0x28>
 801fc3e:	2010      	movs	r0, #16
 801fc40:	f7ff ff04 	bl	801fa4c <malloc>
 801fc44:	4602      	mov	r2, r0
 801fc46:	61e8      	str	r0, [r5, #28]
 801fc48:	b920      	cbnz	r0, 801fc54 <_Bfree+0x20>
 801fc4a:	4b09      	ldr	r3, [pc, #36]	; (801fc70 <_Bfree+0x3c>)
 801fc4c:	4809      	ldr	r0, [pc, #36]	; (801fc74 <_Bfree+0x40>)
 801fc4e:	218f      	movs	r1, #143	; 0x8f
 801fc50:	f7fe f9f8 	bl	801e044 <__assert_func>
 801fc54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fc58:	6006      	str	r6, [r0, #0]
 801fc5a:	60c6      	str	r6, [r0, #12]
 801fc5c:	b13c      	cbz	r4, 801fc6e <_Bfree+0x3a>
 801fc5e:	69eb      	ldr	r3, [r5, #28]
 801fc60:	6862      	ldr	r2, [r4, #4]
 801fc62:	68db      	ldr	r3, [r3, #12]
 801fc64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fc68:	6021      	str	r1, [r4, #0]
 801fc6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fc6e:	bd70      	pop	{r4, r5, r6, pc}
 801fc70:	08023f38 	.word	0x08023f38
 801fc74:	08023fb8 	.word	0x08023fb8

0801fc78 <__multadd>:
 801fc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc7c:	690d      	ldr	r5, [r1, #16]
 801fc7e:	4607      	mov	r7, r0
 801fc80:	460c      	mov	r4, r1
 801fc82:	461e      	mov	r6, r3
 801fc84:	f101 0c14 	add.w	ip, r1, #20
 801fc88:	2000      	movs	r0, #0
 801fc8a:	f8dc 3000 	ldr.w	r3, [ip]
 801fc8e:	b299      	uxth	r1, r3
 801fc90:	fb02 6101 	mla	r1, r2, r1, r6
 801fc94:	0c1e      	lsrs	r6, r3, #16
 801fc96:	0c0b      	lsrs	r3, r1, #16
 801fc98:	fb02 3306 	mla	r3, r2, r6, r3
 801fc9c:	b289      	uxth	r1, r1
 801fc9e:	3001      	adds	r0, #1
 801fca0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fca4:	4285      	cmp	r5, r0
 801fca6:	f84c 1b04 	str.w	r1, [ip], #4
 801fcaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fcae:	dcec      	bgt.n	801fc8a <__multadd+0x12>
 801fcb0:	b30e      	cbz	r6, 801fcf6 <__multadd+0x7e>
 801fcb2:	68a3      	ldr	r3, [r4, #8]
 801fcb4:	42ab      	cmp	r3, r5
 801fcb6:	dc19      	bgt.n	801fcec <__multadd+0x74>
 801fcb8:	6861      	ldr	r1, [r4, #4]
 801fcba:	4638      	mov	r0, r7
 801fcbc:	3101      	adds	r1, #1
 801fcbe:	f7ff ff79 	bl	801fbb4 <_Balloc>
 801fcc2:	4680      	mov	r8, r0
 801fcc4:	b928      	cbnz	r0, 801fcd2 <__multadd+0x5a>
 801fcc6:	4602      	mov	r2, r0
 801fcc8:	4b0c      	ldr	r3, [pc, #48]	; (801fcfc <__multadd+0x84>)
 801fcca:	480d      	ldr	r0, [pc, #52]	; (801fd00 <__multadd+0x88>)
 801fccc:	21ba      	movs	r1, #186	; 0xba
 801fcce:	f7fe f9b9 	bl	801e044 <__assert_func>
 801fcd2:	6922      	ldr	r2, [r4, #16]
 801fcd4:	3202      	adds	r2, #2
 801fcd6:	f104 010c 	add.w	r1, r4, #12
 801fcda:	0092      	lsls	r2, r2, #2
 801fcdc:	300c      	adds	r0, #12
 801fcde:	f7fe ffd9 	bl	801ec94 <memcpy>
 801fce2:	4621      	mov	r1, r4
 801fce4:	4638      	mov	r0, r7
 801fce6:	f7ff ffa5 	bl	801fc34 <_Bfree>
 801fcea:	4644      	mov	r4, r8
 801fcec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fcf0:	3501      	adds	r5, #1
 801fcf2:	615e      	str	r6, [r3, #20]
 801fcf4:	6125      	str	r5, [r4, #16]
 801fcf6:	4620      	mov	r0, r4
 801fcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcfc:	08023fa7 	.word	0x08023fa7
 801fd00:	08023fb8 	.word	0x08023fb8

0801fd04 <__hi0bits>:
 801fd04:	0c03      	lsrs	r3, r0, #16
 801fd06:	041b      	lsls	r3, r3, #16
 801fd08:	b9d3      	cbnz	r3, 801fd40 <__hi0bits+0x3c>
 801fd0a:	0400      	lsls	r0, r0, #16
 801fd0c:	2310      	movs	r3, #16
 801fd0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fd12:	bf04      	itt	eq
 801fd14:	0200      	lsleq	r0, r0, #8
 801fd16:	3308      	addeq	r3, #8
 801fd18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fd1c:	bf04      	itt	eq
 801fd1e:	0100      	lsleq	r0, r0, #4
 801fd20:	3304      	addeq	r3, #4
 801fd22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fd26:	bf04      	itt	eq
 801fd28:	0080      	lsleq	r0, r0, #2
 801fd2a:	3302      	addeq	r3, #2
 801fd2c:	2800      	cmp	r0, #0
 801fd2e:	db05      	blt.n	801fd3c <__hi0bits+0x38>
 801fd30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801fd34:	f103 0301 	add.w	r3, r3, #1
 801fd38:	bf08      	it	eq
 801fd3a:	2320      	moveq	r3, #32
 801fd3c:	4618      	mov	r0, r3
 801fd3e:	4770      	bx	lr
 801fd40:	2300      	movs	r3, #0
 801fd42:	e7e4      	b.n	801fd0e <__hi0bits+0xa>

0801fd44 <__lo0bits>:
 801fd44:	6803      	ldr	r3, [r0, #0]
 801fd46:	f013 0207 	ands.w	r2, r3, #7
 801fd4a:	d00c      	beq.n	801fd66 <__lo0bits+0x22>
 801fd4c:	07d9      	lsls	r1, r3, #31
 801fd4e:	d422      	bmi.n	801fd96 <__lo0bits+0x52>
 801fd50:	079a      	lsls	r2, r3, #30
 801fd52:	bf49      	itett	mi
 801fd54:	085b      	lsrmi	r3, r3, #1
 801fd56:	089b      	lsrpl	r3, r3, #2
 801fd58:	6003      	strmi	r3, [r0, #0]
 801fd5a:	2201      	movmi	r2, #1
 801fd5c:	bf5c      	itt	pl
 801fd5e:	6003      	strpl	r3, [r0, #0]
 801fd60:	2202      	movpl	r2, #2
 801fd62:	4610      	mov	r0, r2
 801fd64:	4770      	bx	lr
 801fd66:	b299      	uxth	r1, r3
 801fd68:	b909      	cbnz	r1, 801fd6e <__lo0bits+0x2a>
 801fd6a:	0c1b      	lsrs	r3, r3, #16
 801fd6c:	2210      	movs	r2, #16
 801fd6e:	b2d9      	uxtb	r1, r3
 801fd70:	b909      	cbnz	r1, 801fd76 <__lo0bits+0x32>
 801fd72:	3208      	adds	r2, #8
 801fd74:	0a1b      	lsrs	r3, r3, #8
 801fd76:	0719      	lsls	r1, r3, #28
 801fd78:	bf04      	itt	eq
 801fd7a:	091b      	lsreq	r3, r3, #4
 801fd7c:	3204      	addeq	r2, #4
 801fd7e:	0799      	lsls	r1, r3, #30
 801fd80:	bf04      	itt	eq
 801fd82:	089b      	lsreq	r3, r3, #2
 801fd84:	3202      	addeq	r2, #2
 801fd86:	07d9      	lsls	r1, r3, #31
 801fd88:	d403      	bmi.n	801fd92 <__lo0bits+0x4e>
 801fd8a:	085b      	lsrs	r3, r3, #1
 801fd8c:	f102 0201 	add.w	r2, r2, #1
 801fd90:	d003      	beq.n	801fd9a <__lo0bits+0x56>
 801fd92:	6003      	str	r3, [r0, #0]
 801fd94:	e7e5      	b.n	801fd62 <__lo0bits+0x1e>
 801fd96:	2200      	movs	r2, #0
 801fd98:	e7e3      	b.n	801fd62 <__lo0bits+0x1e>
 801fd9a:	2220      	movs	r2, #32
 801fd9c:	e7e1      	b.n	801fd62 <__lo0bits+0x1e>
	...

0801fda0 <__i2b>:
 801fda0:	b510      	push	{r4, lr}
 801fda2:	460c      	mov	r4, r1
 801fda4:	2101      	movs	r1, #1
 801fda6:	f7ff ff05 	bl	801fbb4 <_Balloc>
 801fdaa:	4602      	mov	r2, r0
 801fdac:	b928      	cbnz	r0, 801fdba <__i2b+0x1a>
 801fdae:	4b05      	ldr	r3, [pc, #20]	; (801fdc4 <__i2b+0x24>)
 801fdb0:	4805      	ldr	r0, [pc, #20]	; (801fdc8 <__i2b+0x28>)
 801fdb2:	f240 1145 	movw	r1, #325	; 0x145
 801fdb6:	f7fe f945 	bl	801e044 <__assert_func>
 801fdba:	2301      	movs	r3, #1
 801fdbc:	6144      	str	r4, [r0, #20]
 801fdbe:	6103      	str	r3, [r0, #16]
 801fdc0:	bd10      	pop	{r4, pc}
 801fdc2:	bf00      	nop
 801fdc4:	08023fa7 	.word	0x08023fa7
 801fdc8:	08023fb8 	.word	0x08023fb8

0801fdcc <__multiply>:
 801fdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdd0:	4691      	mov	r9, r2
 801fdd2:	690a      	ldr	r2, [r1, #16]
 801fdd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fdd8:	429a      	cmp	r2, r3
 801fdda:	bfb8      	it	lt
 801fddc:	460b      	movlt	r3, r1
 801fdde:	460c      	mov	r4, r1
 801fde0:	bfbc      	itt	lt
 801fde2:	464c      	movlt	r4, r9
 801fde4:	4699      	movlt	r9, r3
 801fde6:	6927      	ldr	r7, [r4, #16]
 801fde8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801fdec:	68a3      	ldr	r3, [r4, #8]
 801fdee:	6861      	ldr	r1, [r4, #4]
 801fdf0:	eb07 060a 	add.w	r6, r7, sl
 801fdf4:	42b3      	cmp	r3, r6
 801fdf6:	b085      	sub	sp, #20
 801fdf8:	bfb8      	it	lt
 801fdfa:	3101      	addlt	r1, #1
 801fdfc:	f7ff feda 	bl	801fbb4 <_Balloc>
 801fe00:	b930      	cbnz	r0, 801fe10 <__multiply+0x44>
 801fe02:	4602      	mov	r2, r0
 801fe04:	4b44      	ldr	r3, [pc, #272]	; (801ff18 <__multiply+0x14c>)
 801fe06:	4845      	ldr	r0, [pc, #276]	; (801ff1c <__multiply+0x150>)
 801fe08:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801fe0c:	f7fe f91a 	bl	801e044 <__assert_func>
 801fe10:	f100 0514 	add.w	r5, r0, #20
 801fe14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801fe18:	462b      	mov	r3, r5
 801fe1a:	2200      	movs	r2, #0
 801fe1c:	4543      	cmp	r3, r8
 801fe1e:	d321      	bcc.n	801fe64 <__multiply+0x98>
 801fe20:	f104 0314 	add.w	r3, r4, #20
 801fe24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801fe28:	f109 0314 	add.w	r3, r9, #20
 801fe2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801fe30:	9202      	str	r2, [sp, #8]
 801fe32:	1b3a      	subs	r2, r7, r4
 801fe34:	3a15      	subs	r2, #21
 801fe36:	f022 0203 	bic.w	r2, r2, #3
 801fe3a:	3204      	adds	r2, #4
 801fe3c:	f104 0115 	add.w	r1, r4, #21
 801fe40:	428f      	cmp	r7, r1
 801fe42:	bf38      	it	cc
 801fe44:	2204      	movcc	r2, #4
 801fe46:	9201      	str	r2, [sp, #4]
 801fe48:	9a02      	ldr	r2, [sp, #8]
 801fe4a:	9303      	str	r3, [sp, #12]
 801fe4c:	429a      	cmp	r2, r3
 801fe4e:	d80c      	bhi.n	801fe6a <__multiply+0x9e>
 801fe50:	2e00      	cmp	r6, #0
 801fe52:	dd03      	ble.n	801fe5c <__multiply+0x90>
 801fe54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	d05b      	beq.n	801ff14 <__multiply+0x148>
 801fe5c:	6106      	str	r6, [r0, #16]
 801fe5e:	b005      	add	sp, #20
 801fe60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe64:	f843 2b04 	str.w	r2, [r3], #4
 801fe68:	e7d8      	b.n	801fe1c <__multiply+0x50>
 801fe6a:	f8b3 a000 	ldrh.w	sl, [r3]
 801fe6e:	f1ba 0f00 	cmp.w	sl, #0
 801fe72:	d024      	beq.n	801febe <__multiply+0xf2>
 801fe74:	f104 0e14 	add.w	lr, r4, #20
 801fe78:	46a9      	mov	r9, r5
 801fe7a:	f04f 0c00 	mov.w	ip, #0
 801fe7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801fe82:	f8d9 1000 	ldr.w	r1, [r9]
 801fe86:	fa1f fb82 	uxth.w	fp, r2
 801fe8a:	b289      	uxth	r1, r1
 801fe8c:	fb0a 110b 	mla	r1, sl, fp, r1
 801fe90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801fe94:	f8d9 2000 	ldr.w	r2, [r9]
 801fe98:	4461      	add	r1, ip
 801fe9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801fe9e:	fb0a c20b 	mla	r2, sl, fp, ip
 801fea2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801fea6:	b289      	uxth	r1, r1
 801fea8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801feac:	4577      	cmp	r7, lr
 801feae:	f849 1b04 	str.w	r1, [r9], #4
 801feb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801feb6:	d8e2      	bhi.n	801fe7e <__multiply+0xb2>
 801feb8:	9a01      	ldr	r2, [sp, #4]
 801feba:	f845 c002 	str.w	ip, [r5, r2]
 801febe:	9a03      	ldr	r2, [sp, #12]
 801fec0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801fec4:	3304      	adds	r3, #4
 801fec6:	f1b9 0f00 	cmp.w	r9, #0
 801feca:	d021      	beq.n	801ff10 <__multiply+0x144>
 801fecc:	6829      	ldr	r1, [r5, #0]
 801fece:	f104 0c14 	add.w	ip, r4, #20
 801fed2:	46ae      	mov	lr, r5
 801fed4:	f04f 0a00 	mov.w	sl, #0
 801fed8:	f8bc b000 	ldrh.w	fp, [ip]
 801fedc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801fee0:	fb09 220b 	mla	r2, r9, fp, r2
 801fee4:	4452      	add	r2, sl
 801fee6:	b289      	uxth	r1, r1
 801fee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801feec:	f84e 1b04 	str.w	r1, [lr], #4
 801fef0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801fef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801fef8:	f8be 1000 	ldrh.w	r1, [lr]
 801fefc:	fb09 110a 	mla	r1, r9, sl, r1
 801ff00:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801ff04:	4567      	cmp	r7, ip
 801ff06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ff0a:	d8e5      	bhi.n	801fed8 <__multiply+0x10c>
 801ff0c:	9a01      	ldr	r2, [sp, #4]
 801ff0e:	50a9      	str	r1, [r5, r2]
 801ff10:	3504      	adds	r5, #4
 801ff12:	e799      	b.n	801fe48 <__multiply+0x7c>
 801ff14:	3e01      	subs	r6, #1
 801ff16:	e79b      	b.n	801fe50 <__multiply+0x84>
 801ff18:	08023fa7 	.word	0x08023fa7
 801ff1c:	08023fb8 	.word	0x08023fb8

0801ff20 <__pow5mult>:
 801ff20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff24:	4615      	mov	r5, r2
 801ff26:	f012 0203 	ands.w	r2, r2, #3
 801ff2a:	4606      	mov	r6, r0
 801ff2c:	460f      	mov	r7, r1
 801ff2e:	d007      	beq.n	801ff40 <__pow5mult+0x20>
 801ff30:	4c25      	ldr	r4, [pc, #148]	; (801ffc8 <__pow5mult+0xa8>)
 801ff32:	3a01      	subs	r2, #1
 801ff34:	2300      	movs	r3, #0
 801ff36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ff3a:	f7ff fe9d 	bl	801fc78 <__multadd>
 801ff3e:	4607      	mov	r7, r0
 801ff40:	10ad      	asrs	r5, r5, #2
 801ff42:	d03d      	beq.n	801ffc0 <__pow5mult+0xa0>
 801ff44:	69f4      	ldr	r4, [r6, #28]
 801ff46:	b97c      	cbnz	r4, 801ff68 <__pow5mult+0x48>
 801ff48:	2010      	movs	r0, #16
 801ff4a:	f7ff fd7f 	bl	801fa4c <malloc>
 801ff4e:	4602      	mov	r2, r0
 801ff50:	61f0      	str	r0, [r6, #28]
 801ff52:	b928      	cbnz	r0, 801ff60 <__pow5mult+0x40>
 801ff54:	4b1d      	ldr	r3, [pc, #116]	; (801ffcc <__pow5mult+0xac>)
 801ff56:	481e      	ldr	r0, [pc, #120]	; (801ffd0 <__pow5mult+0xb0>)
 801ff58:	f240 11b3 	movw	r1, #435	; 0x1b3
 801ff5c:	f7fe f872 	bl	801e044 <__assert_func>
 801ff60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ff64:	6004      	str	r4, [r0, #0]
 801ff66:	60c4      	str	r4, [r0, #12]
 801ff68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801ff6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ff70:	b94c      	cbnz	r4, 801ff86 <__pow5mult+0x66>
 801ff72:	f240 2171 	movw	r1, #625	; 0x271
 801ff76:	4630      	mov	r0, r6
 801ff78:	f7ff ff12 	bl	801fda0 <__i2b>
 801ff7c:	2300      	movs	r3, #0
 801ff7e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ff82:	4604      	mov	r4, r0
 801ff84:	6003      	str	r3, [r0, #0]
 801ff86:	f04f 0900 	mov.w	r9, #0
 801ff8a:	07eb      	lsls	r3, r5, #31
 801ff8c:	d50a      	bpl.n	801ffa4 <__pow5mult+0x84>
 801ff8e:	4639      	mov	r1, r7
 801ff90:	4622      	mov	r2, r4
 801ff92:	4630      	mov	r0, r6
 801ff94:	f7ff ff1a 	bl	801fdcc <__multiply>
 801ff98:	4639      	mov	r1, r7
 801ff9a:	4680      	mov	r8, r0
 801ff9c:	4630      	mov	r0, r6
 801ff9e:	f7ff fe49 	bl	801fc34 <_Bfree>
 801ffa2:	4647      	mov	r7, r8
 801ffa4:	106d      	asrs	r5, r5, #1
 801ffa6:	d00b      	beq.n	801ffc0 <__pow5mult+0xa0>
 801ffa8:	6820      	ldr	r0, [r4, #0]
 801ffaa:	b938      	cbnz	r0, 801ffbc <__pow5mult+0x9c>
 801ffac:	4622      	mov	r2, r4
 801ffae:	4621      	mov	r1, r4
 801ffb0:	4630      	mov	r0, r6
 801ffb2:	f7ff ff0b 	bl	801fdcc <__multiply>
 801ffb6:	6020      	str	r0, [r4, #0]
 801ffb8:	f8c0 9000 	str.w	r9, [r0]
 801ffbc:	4604      	mov	r4, r0
 801ffbe:	e7e4      	b.n	801ff8a <__pow5mult+0x6a>
 801ffc0:	4638      	mov	r0, r7
 801ffc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ffc6:	bf00      	nop
 801ffc8:	08024108 	.word	0x08024108
 801ffcc:	08023f38 	.word	0x08023f38
 801ffd0:	08023fb8 	.word	0x08023fb8

0801ffd4 <__lshift>:
 801ffd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffd8:	460c      	mov	r4, r1
 801ffda:	6849      	ldr	r1, [r1, #4]
 801ffdc:	6923      	ldr	r3, [r4, #16]
 801ffde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ffe2:	68a3      	ldr	r3, [r4, #8]
 801ffe4:	4607      	mov	r7, r0
 801ffe6:	4691      	mov	r9, r2
 801ffe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ffec:	f108 0601 	add.w	r6, r8, #1
 801fff0:	42b3      	cmp	r3, r6
 801fff2:	db0b      	blt.n	802000c <__lshift+0x38>
 801fff4:	4638      	mov	r0, r7
 801fff6:	f7ff fddd 	bl	801fbb4 <_Balloc>
 801fffa:	4605      	mov	r5, r0
 801fffc:	b948      	cbnz	r0, 8020012 <__lshift+0x3e>
 801fffe:	4602      	mov	r2, r0
 8020000:	4b28      	ldr	r3, [pc, #160]	; (80200a4 <__lshift+0xd0>)
 8020002:	4829      	ldr	r0, [pc, #164]	; (80200a8 <__lshift+0xd4>)
 8020004:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8020008:	f7fe f81c 	bl	801e044 <__assert_func>
 802000c:	3101      	adds	r1, #1
 802000e:	005b      	lsls	r3, r3, #1
 8020010:	e7ee      	b.n	801fff0 <__lshift+0x1c>
 8020012:	2300      	movs	r3, #0
 8020014:	f100 0114 	add.w	r1, r0, #20
 8020018:	f100 0210 	add.w	r2, r0, #16
 802001c:	4618      	mov	r0, r3
 802001e:	4553      	cmp	r3, sl
 8020020:	db33      	blt.n	802008a <__lshift+0xb6>
 8020022:	6920      	ldr	r0, [r4, #16]
 8020024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020028:	f104 0314 	add.w	r3, r4, #20
 802002c:	f019 091f 	ands.w	r9, r9, #31
 8020030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020034:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020038:	d02b      	beq.n	8020092 <__lshift+0xbe>
 802003a:	f1c9 0e20 	rsb	lr, r9, #32
 802003e:	468a      	mov	sl, r1
 8020040:	2200      	movs	r2, #0
 8020042:	6818      	ldr	r0, [r3, #0]
 8020044:	fa00 f009 	lsl.w	r0, r0, r9
 8020048:	4310      	orrs	r0, r2
 802004a:	f84a 0b04 	str.w	r0, [sl], #4
 802004e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020052:	459c      	cmp	ip, r3
 8020054:	fa22 f20e 	lsr.w	r2, r2, lr
 8020058:	d8f3      	bhi.n	8020042 <__lshift+0x6e>
 802005a:	ebac 0304 	sub.w	r3, ip, r4
 802005e:	3b15      	subs	r3, #21
 8020060:	f023 0303 	bic.w	r3, r3, #3
 8020064:	3304      	adds	r3, #4
 8020066:	f104 0015 	add.w	r0, r4, #21
 802006a:	4584      	cmp	ip, r0
 802006c:	bf38      	it	cc
 802006e:	2304      	movcc	r3, #4
 8020070:	50ca      	str	r2, [r1, r3]
 8020072:	b10a      	cbz	r2, 8020078 <__lshift+0xa4>
 8020074:	f108 0602 	add.w	r6, r8, #2
 8020078:	3e01      	subs	r6, #1
 802007a:	4638      	mov	r0, r7
 802007c:	612e      	str	r6, [r5, #16]
 802007e:	4621      	mov	r1, r4
 8020080:	f7ff fdd8 	bl	801fc34 <_Bfree>
 8020084:	4628      	mov	r0, r5
 8020086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802008a:	f842 0f04 	str.w	r0, [r2, #4]!
 802008e:	3301      	adds	r3, #1
 8020090:	e7c5      	b.n	802001e <__lshift+0x4a>
 8020092:	3904      	subs	r1, #4
 8020094:	f853 2b04 	ldr.w	r2, [r3], #4
 8020098:	f841 2f04 	str.w	r2, [r1, #4]!
 802009c:	459c      	cmp	ip, r3
 802009e:	d8f9      	bhi.n	8020094 <__lshift+0xc0>
 80200a0:	e7ea      	b.n	8020078 <__lshift+0xa4>
 80200a2:	bf00      	nop
 80200a4:	08023fa7 	.word	0x08023fa7
 80200a8:	08023fb8 	.word	0x08023fb8

080200ac <__mcmp>:
 80200ac:	b530      	push	{r4, r5, lr}
 80200ae:	6902      	ldr	r2, [r0, #16]
 80200b0:	690c      	ldr	r4, [r1, #16]
 80200b2:	1b12      	subs	r2, r2, r4
 80200b4:	d10e      	bne.n	80200d4 <__mcmp+0x28>
 80200b6:	f100 0314 	add.w	r3, r0, #20
 80200ba:	3114      	adds	r1, #20
 80200bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80200c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80200c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80200c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80200cc:	42a5      	cmp	r5, r4
 80200ce:	d003      	beq.n	80200d8 <__mcmp+0x2c>
 80200d0:	d305      	bcc.n	80200de <__mcmp+0x32>
 80200d2:	2201      	movs	r2, #1
 80200d4:	4610      	mov	r0, r2
 80200d6:	bd30      	pop	{r4, r5, pc}
 80200d8:	4283      	cmp	r3, r0
 80200da:	d3f3      	bcc.n	80200c4 <__mcmp+0x18>
 80200dc:	e7fa      	b.n	80200d4 <__mcmp+0x28>
 80200de:	f04f 32ff 	mov.w	r2, #4294967295
 80200e2:	e7f7      	b.n	80200d4 <__mcmp+0x28>

080200e4 <__mdiff>:
 80200e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200e8:	460c      	mov	r4, r1
 80200ea:	4606      	mov	r6, r0
 80200ec:	4611      	mov	r1, r2
 80200ee:	4620      	mov	r0, r4
 80200f0:	4690      	mov	r8, r2
 80200f2:	f7ff ffdb 	bl	80200ac <__mcmp>
 80200f6:	1e05      	subs	r5, r0, #0
 80200f8:	d110      	bne.n	802011c <__mdiff+0x38>
 80200fa:	4629      	mov	r1, r5
 80200fc:	4630      	mov	r0, r6
 80200fe:	f7ff fd59 	bl	801fbb4 <_Balloc>
 8020102:	b930      	cbnz	r0, 8020112 <__mdiff+0x2e>
 8020104:	4b3a      	ldr	r3, [pc, #232]	; (80201f0 <__mdiff+0x10c>)
 8020106:	4602      	mov	r2, r0
 8020108:	f240 2137 	movw	r1, #567	; 0x237
 802010c:	4839      	ldr	r0, [pc, #228]	; (80201f4 <__mdiff+0x110>)
 802010e:	f7fd ff99 	bl	801e044 <__assert_func>
 8020112:	2301      	movs	r3, #1
 8020114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802011c:	bfa4      	itt	ge
 802011e:	4643      	movge	r3, r8
 8020120:	46a0      	movge	r8, r4
 8020122:	4630      	mov	r0, r6
 8020124:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020128:	bfa6      	itte	ge
 802012a:	461c      	movge	r4, r3
 802012c:	2500      	movge	r5, #0
 802012e:	2501      	movlt	r5, #1
 8020130:	f7ff fd40 	bl	801fbb4 <_Balloc>
 8020134:	b920      	cbnz	r0, 8020140 <__mdiff+0x5c>
 8020136:	4b2e      	ldr	r3, [pc, #184]	; (80201f0 <__mdiff+0x10c>)
 8020138:	4602      	mov	r2, r0
 802013a:	f240 2145 	movw	r1, #581	; 0x245
 802013e:	e7e5      	b.n	802010c <__mdiff+0x28>
 8020140:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8020144:	6926      	ldr	r6, [r4, #16]
 8020146:	60c5      	str	r5, [r0, #12]
 8020148:	f104 0914 	add.w	r9, r4, #20
 802014c:	f108 0514 	add.w	r5, r8, #20
 8020150:	f100 0e14 	add.w	lr, r0, #20
 8020154:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8020158:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802015c:	f108 0210 	add.w	r2, r8, #16
 8020160:	46f2      	mov	sl, lr
 8020162:	2100      	movs	r1, #0
 8020164:	f859 3b04 	ldr.w	r3, [r9], #4
 8020168:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802016c:	fa11 f88b 	uxtah	r8, r1, fp
 8020170:	b299      	uxth	r1, r3
 8020172:	0c1b      	lsrs	r3, r3, #16
 8020174:	eba8 0801 	sub.w	r8, r8, r1
 8020178:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802017c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020180:	fa1f f888 	uxth.w	r8, r8
 8020184:	1419      	asrs	r1, r3, #16
 8020186:	454e      	cmp	r6, r9
 8020188:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802018c:	f84a 3b04 	str.w	r3, [sl], #4
 8020190:	d8e8      	bhi.n	8020164 <__mdiff+0x80>
 8020192:	1b33      	subs	r3, r6, r4
 8020194:	3b15      	subs	r3, #21
 8020196:	f023 0303 	bic.w	r3, r3, #3
 802019a:	3304      	adds	r3, #4
 802019c:	3415      	adds	r4, #21
 802019e:	42a6      	cmp	r6, r4
 80201a0:	bf38      	it	cc
 80201a2:	2304      	movcc	r3, #4
 80201a4:	441d      	add	r5, r3
 80201a6:	4473      	add	r3, lr
 80201a8:	469e      	mov	lr, r3
 80201aa:	462e      	mov	r6, r5
 80201ac:	4566      	cmp	r6, ip
 80201ae:	d30e      	bcc.n	80201ce <__mdiff+0xea>
 80201b0:	f10c 0203 	add.w	r2, ip, #3
 80201b4:	1b52      	subs	r2, r2, r5
 80201b6:	f022 0203 	bic.w	r2, r2, #3
 80201ba:	3d03      	subs	r5, #3
 80201bc:	45ac      	cmp	ip, r5
 80201be:	bf38      	it	cc
 80201c0:	2200      	movcc	r2, #0
 80201c2:	4413      	add	r3, r2
 80201c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80201c8:	b17a      	cbz	r2, 80201ea <__mdiff+0x106>
 80201ca:	6107      	str	r7, [r0, #16]
 80201cc:	e7a4      	b.n	8020118 <__mdiff+0x34>
 80201ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80201d2:	fa11 f288 	uxtah	r2, r1, r8
 80201d6:	1414      	asrs	r4, r2, #16
 80201d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80201dc:	b292      	uxth	r2, r2
 80201de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80201e2:	f84e 2b04 	str.w	r2, [lr], #4
 80201e6:	1421      	asrs	r1, r4, #16
 80201e8:	e7e0      	b.n	80201ac <__mdiff+0xc8>
 80201ea:	3f01      	subs	r7, #1
 80201ec:	e7ea      	b.n	80201c4 <__mdiff+0xe0>
 80201ee:	bf00      	nop
 80201f0:	08023fa7 	.word	0x08023fa7
 80201f4:	08023fb8 	.word	0x08023fb8

080201f8 <__d2b>:
 80201f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80201fc:	460f      	mov	r7, r1
 80201fe:	2101      	movs	r1, #1
 8020200:	ec59 8b10 	vmov	r8, r9, d0
 8020204:	4616      	mov	r6, r2
 8020206:	f7ff fcd5 	bl	801fbb4 <_Balloc>
 802020a:	4604      	mov	r4, r0
 802020c:	b930      	cbnz	r0, 802021c <__d2b+0x24>
 802020e:	4602      	mov	r2, r0
 8020210:	4b24      	ldr	r3, [pc, #144]	; (80202a4 <__d2b+0xac>)
 8020212:	4825      	ldr	r0, [pc, #148]	; (80202a8 <__d2b+0xb0>)
 8020214:	f240 310f 	movw	r1, #783	; 0x30f
 8020218:	f7fd ff14 	bl	801e044 <__assert_func>
 802021c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020224:	bb2d      	cbnz	r5, 8020272 <__d2b+0x7a>
 8020226:	9301      	str	r3, [sp, #4]
 8020228:	f1b8 0300 	subs.w	r3, r8, #0
 802022c:	d026      	beq.n	802027c <__d2b+0x84>
 802022e:	4668      	mov	r0, sp
 8020230:	9300      	str	r3, [sp, #0]
 8020232:	f7ff fd87 	bl	801fd44 <__lo0bits>
 8020236:	e9dd 1200 	ldrd	r1, r2, [sp]
 802023a:	b1e8      	cbz	r0, 8020278 <__d2b+0x80>
 802023c:	f1c0 0320 	rsb	r3, r0, #32
 8020240:	fa02 f303 	lsl.w	r3, r2, r3
 8020244:	430b      	orrs	r3, r1
 8020246:	40c2      	lsrs	r2, r0
 8020248:	6163      	str	r3, [r4, #20]
 802024a:	9201      	str	r2, [sp, #4]
 802024c:	9b01      	ldr	r3, [sp, #4]
 802024e:	61a3      	str	r3, [r4, #24]
 8020250:	2b00      	cmp	r3, #0
 8020252:	bf14      	ite	ne
 8020254:	2202      	movne	r2, #2
 8020256:	2201      	moveq	r2, #1
 8020258:	6122      	str	r2, [r4, #16]
 802025a:	b1bd      	cbz	r5, 802028c <__d2b+0x94>
 802025c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020260:	4405      	add	r5, r0
 8020262:	603d      	str	r5, [r7, #0]
 8020264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020268:	6030      	str	r0, [r6, #0]
 802026a:	4620      	mov	r0, r4
 802026c:	b003      	add	sp, #12
 802026e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020276:	e7d6      	b.n	8020226 <__d2b+0x2e>
 8020278:	6161      	str	r1, [r4, #20]
 802027a:	e7e7      	b.n	802024c <__d2b+0x54>
 802027c:	a801      	add	r0, sp, #4
 802027e:	f7ff fd61 	bl	801fd44 <__lo0bits>
 8020282:	9b01      	ldr	r3, [sp, #4]
 8020284:	6163      	str	r3, [r4, #20]
 8020286:	3020      	adds	r0, #32
 8020288:	2201      	movs	r2, #1
 802028a:	e7e5      	b.n	8020258 <__d2b+0x60>
 802028c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020294:	6038      	str	r0, [r7, #0]
 8020296:	6918      	ldr	r0, [r3, #16]
 8020298:	f7ff fd34 	bl	801fd04 <__hi0bits>
 802029c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80202a0:	e7e2      	b.n	8020268 <__d2b+0x70>
 80202a2:	bf00      	nop
 80202a4:	08023fa7 	.word	0x08023fa7
 80202a8:	08023fb8 	.word	0x08023fb8

080202ac <__ssputs_r>:
 80202ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202b0:	688e      	ldr	r6, [r1, #8]
 80202b2:	461f      	mov	r7, r3
 80202b4:	42be      	cmp	r6, r7
 80202b6:	680b      	ldr	r3, [r1, #0]
 80202b8:	4682      	mov	sl, r0
 80202ba:	460c      	mov	r4, r1
 80202bc:	4690      	mov	r8, r2
 80202be:	d82c      	bhi.n	802031a <__ssputs_r+0x6e>
 80202c0:	898a      	ldrh	r2, [r1, #12]
 80202c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80202c6:	d026      	beq.n	8020316 <__ssputs_r+0x6a>
 80202c8:	6965      	ldr	r5, [r4, #20]
 80202ca:	6909      	ldr	r1, [r1, #16]
 80202cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80202d0:	eba3 0901 	sub.w	r9, r3, r1
 80202d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80202d8:	1c7b      	adds	r3, r7, #1
 80202da:	444b      	add	r3, r9
 80202dc:	106d      	asrs	r5, r5, #1
 80202de:	429d      	cmp	r5, r3
 80202e0:	bf38      	it	cc
 80202e2:	461d      	movcc	r5, r3
 80202e4:	0553      	lsls	r3, r2, #21
 80202e6:	d527      	bpl.n	8020338 <__ssputs_r+0x8c>
 80202e8:	4629      	mov	r1, r5
 80202ea:	f7ff fbd7 	bl	801fa9c <_malloc_r>
 80202ee:	4606      	mov	r6, r0
 80202f0:	b360      	cbz	r0, 802034c <__ssputs_r+0xa0>
 80202f2:	6921      	ldr	r1, [r4, #16]
 80202f4:	464a      	mov	r2, r9
 80202f6:	f7fe fccd 	bl	801ec94 <memcpy>
 80202fa:	89a3      	ldrh	r3, [r4, #12]
 80202fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020304:	81a3      	strh	r3, [r4, #12]
 8020306:	6126      	str	r6, [r4, #16]
 8020308:	6165      	str	r5, [r4, #20]
 802030a:	444e      	add	r6, r9
 802030c:	eba5 0509 	sub.w	r5, r5, r9
 8020310:	6026      	str	r6, [r4, #0]
 8020312:	60a5      	str	r5, [r4, #8]
 8020314:	463e      	mov	r6, r7
 8020316:	42be      	cmp	r6, r7
 8020318:	d900      	bls.n	802031c <__ssputs_r+0x70>
 802031a:	463e      	mov	r6, r7
 802031c:	6820      	ldr	r0, [r4, #0]
 802031e:	4632      	mov	r2, r6
 8020320:	4641      	mov	r1, r8
 8020322:	f000 fba3 	bl	8020a6c <memmove>
 8020326:	68a3      	ldr	r3, [r4, #8]
 8020328:	1b9b      	subs	r3, r3, r6
 802032a:	60a3      	str	r3, [r4, #8]
 802032c:	6823      	ldr	r3, [r4, #0]
 802032e:	4433      	add	r3, r6
 8020330:	6023      	str	r3, [r4, #0]
 8020332:	2000      	movs	r0, #0
 8020334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020338:	462a      	mov	r2, r5
 802033a:	f000 fc2d 	bl	8020b98 <_realloc_r>
 802033e:	4606      	mov	r6, r0
 8020340:	2800      	cmp	r0, #0
 8020342:	d1e0      	bne.n	8020306 <__ssputs_r+0x5a>
 8020344:	6921      	ldr	r1, [r4, #16]
 8020346:	4650      	mov	r0, sl
 8020348:	f7ff fb34 	bl	801f9b4 <_free_r>
 802034c:	230c      	movs	r3, #12
 802034e:	f8ca 3000 	str.w	r3, [sl]
 8020352:	89a3      	ldrh	r3, [r4, #12]
 8020354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020358:	81a3      	strh	r3, [r4, #12]
 802035a:	f04f 30ff 	mov.w	r0, #4294967295
 802035e:	e7e9      	b.n	8020334 <__ssputs_r+0x88>

08020360 <_svfiprintf_r>:
 8020360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020364:	4698      	mov	r8, r3
 8020366:	898b      	ldrh	r3, [r1, #12]
 8020368:	061b      	lsls	r3, r3, #24
 802036a:	b09d      	sub	sp, #116	; 0x74
 802036c:	4607      	mov	r7, r0
 802036e:	460d      	mov	r5, r1
 8020370:	4614      	mov	r4, r2
 8020372:	d50e      	bpl.n	8020392 <_svfiprintf_r+0x32>
 8020374:	690b      	ldr	r3, [r1, #16]
 8020376:	b963      	cbnz	r3, 8020392 <_svfiprintf_r+0x32>
 8020378:	2140      	movs	r1, #64	; 0x40
 802037a:	f7ff fb8f 	bl	801fa9c <_malloc_r>
 802037e:	6028      	str	r0, [r5, #0]
 8020380:	6128      	str	r0, [r5, #16]
 8020382:	b920      	cbnz	r0, 802038e <_svfiprintf_r+0x2e>
 8020384:	230c      	movs	r3, #12
 8020386:	603b      	str	r3, [r7, #0]
 8020388:	f04f 30ff 	mov.w	r0, #4294967295
 802038c:	e0d0      	b.n	8020530 <_svfiprintf_r+0x1d0>
 802038e:	2340      	movs	r3, #64	; 0x40
 8020390:	616b      	str	r3, [r5, #20]
 8020392:	2300      	movs	r3, #0
 8020394:	9309      	str	r3, [sp, #36]	; 0x24
 8020396:	2320      	movs	r3, #32
 8020398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802039c:	f8cd 800c 	str.w	r8, [sp, #12]
 80203a0:	2330      	movs	r3, #48	; 0x30
 80203a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8020548 <_svfiprintf_r+0x1e8>
 80203a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80203aa:	f04f 0901 	mov.w	r9, #1
 80203ae:	4623      	mov	r3, r4
 80203b0:	469a      	mov	sl, r3
 80203b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80203b6:	b10a      	cbz	r2, 80203bc <_svfiprintf_r+0x5c>
 80203b8:	2a25      	cmp	r2, #37	; 0x25
 80203ba:	d1f9      	bne.n	80203b0 <_svfiprintf_r+0x50>
 80203bc:	ebba 0b04 	subs.w	fp, sl, r4
 80203c0:	d00b      	beq.n	80203da <_svfiprintf_r+0x7a>
 80203c2:	465b      	mov	r3, fp
 80203c4:	4622      	mov	r2, r4
 80203c6:	4629      	mov	r1, r5
 80203c8:	4638      	mov	r0, r7
 80203ca:	f7ff ff6f 	bl	80202ac <__ssputs_r>
 80203ce:	3001      	adds	r0, #1
 80203d0:	f000 80a9 	beq.w	8020526 <_svfiprintf_r+0x1c6>
 80203d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80203d6:	445a      	add	r2, fp
 80203d8:	9209      	str	r2, [sp, #36]	; 0x24
 80203da:	f89a 3000 	ldrb.w	r3, [sl]
 80203de:	2b00      	cmp	r3, #0
 80203e0:	f000 80a1 	beq.w	8020526 <_svfiprintf_r+0x1c6>
 80203e4:	2300      	movs	r3, #0
 80203e6:	f04f 32ff 	mov.w	r2, #4294967295
 80203ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80203ee:	f10a 0a01 	add.w	sl, sl, #1
 80203f2:	9304      	str	r3, [sp, #16]
 80203f4:	9307      	str	r3, [sp, #28]
 80203f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80203fa:	931a      	str	r3, [sp, #104]	; 0x68
 80203fc:	4654      	mov	r4, sl
 80203fe:	2205      	movs	r2, #5
 8020400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020404:	4850      	ldr	r0, [pc, #320]	; (8020548 <_svfiprintf_r+0x1e8>)
 8020406:	f7df ff0b 	bl	8000220 <memchr>
 802040a:	9a04      	ldr	r2, [sp, #16]
 802040c:	b9d8      	cbnz	r0, 8020446 <_svfiprintf_r+0xe6>
 802040e:	06d0      	lsls	r0, r2, #27
 8020410:	bf44      	itt	mi
 8020412:	2320      	movmi	r3, #32
 8020414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020418:	0711      	lsls	r1, r2, #28
 802041a:	bf44      	itt	mi
 802041c:	232b      	movmi	r3, #43	; 0x2b
 802041e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020422:	f89a 3000 	ldrb.w	r3, [sl]
 8020426:	2b2a      	cmp	r3, #42	; 0x2a
 8020428:	d015      	beq.n	8020456 <_svfiprintf_r+0xf6>
 802042a:	9a07      	ldr	r2, [sp, #28]
 802042c:	4654      	mov	r4, sl
 802042e:	2000      	movs	r0, #0
 8020430:	f04f 0c0a 	mov.w	ip, #10
 8020434:	4621      	mov	r1, r4
 8020436:	f811 3b01 	ldrb.w	r3, [r1], #1
 802043a:	3b30      	subs	r3, #48	; 0x30
 802043c:	2b09      	cmp	r3, #9
 802043e:	d94d      	bls.n	80204dc <_svfiprintf_r+0x17c>
 8020440:	b1b0      	cbz	r0, 8020470 <_svfiprintf_r+0x110>
 8020442:	9207      	str	r2, [sp, #28]
 8020444:	e014      	b.n	8020470 <_svfiprintf_r+0x110>
 8020446:	eba0 0308 	sub.w	r3, r0, r8
 802044a:	fa09 f303 	lsl.w	r3, r9, r3
 802044e:	4313      	orrs	r3, r2
 8020450:	9304      	str	r3, [sp, #16]
 8020452:	46a2      	mov	sl, r4
 8020454:	e7d2      	b.n	80203fc <_svfiprintf_r+0x9c>
 8020456:	9b03      	ldr	r3, [sp, #12]
 8020458:	1d19      	adds	r1, r3, #4
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	9103      	str	r1, [sp, #12]
 802045e:	2b00      	cmp	r3, #0
 8020460:	bfbb      	ittet	lt
 8020462:	425b      	neglt	r3, r3
 8020464:	f042 0202 	orrlt.w	r2, r2, #2
 8020468:	9307      	strge	r3, [sp, #28]
 802046a:	9307      	strlt	r3, [sp, #28]
 802046c:	bfb8      	it	lt
 802046e:	9204      	strlt	r2, [sp, #16]
 8020470:	7823      	ldrb	r3, [r4, #0]
 8020472:	2b2e      	cmp	r3, #46	; 0x2e
 8020474:	d10c      	bne.n	8020490 <_svfiprintf_r+0x130>
 8020476:	7863      	ldrb	r3, [r4, #1]
 8020478:	2b2a      	cmp	r3, #42	; 0x2a
 802047a:	d134      	bne.n	80204e6 <_svfiprintf_r+0x186>
 802047c:	9b03      	ldr	r3, [sp, #12]
 802047e:	1d1a      	adds	r2, r3, #4
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	9203      	str	r2, [sp, #12]
 8020484:	2b00      	cmp	r3, #0
 8020486:	bfb8      	it	lt
 8020488:	f04f 33ff 	movlt.w	r3, #4294967295
 802048c:	3402      	adds	r4, #2
 802048e:	9305      	str	r3, [sp, #20]
 8020490:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8020558 <_svfiprintf_r+0x1f8>
 8020494:	7821      	ldrb	r1, [r4, #0]
 8020496:	2203      	movs	r2, #3
 8020498:	4650      	mov	r0, sl
 802049a:	f7df fec1 	bl	8000220 <memchr>
 802049e:	b138      	cbz	r0, 80204b0 <_svfiprintf_r+0x150>
 80204a0:	9b04      	ldr	r3, [sp, #16]
 80204a2:	eba0 000a 	sub.w	r0, r0, sl
 80204a6:	2240      	movs	r2, #64	; 0x40
 80204a8:	4082      	lsls	r2, r0
 80204aa:	4313      	orrs	r3, r2
 80204ac:	3401      	adds	r4, #1
 80204ae:	9304      	str	r3, [sp, #16]
 80204b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204b4:	4825      	ldr	r0, [pc, #148]	; (802054c <_svfiprintf_r+0x1ec>)
 80204b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80204ba:	2206      	movs	r2, #6
 80204bc:	f7df feb0 	bl	8000220 <memchr>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	d038      	beq.n	8020536 <_svfiprintf_r+0x1d6>
 80204c4:	4b22      	ldr	r3, [pc, #136]	; (8020550 <_svfiprintf_r+0x1f0>)
 80204c6:	bb1b      	cbnz	r3, 8020510 <_svfiprintf_r+0x1b0>
 80204c8:	9b03      	ldr	r3, [sp, #12]
 80204ca:	3307      	adds	r3, #7
 80204cc:	f023 0307 	bic.w	r3, r3, #7
 80204d0:	3308      	adds	r3, #8
 80204d2:	9303      	str	r3, [sp, #12]
 80204d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204d6:	4433      	add	r3, r6
 80204d8:	9309      	str	r3, [sp, #36]	; 0x24
 80204da:	e768      	b.n	80203ae <_svfiprintf_r+0x4e>
 80204dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80204e0:	460c      	mov	r4, r1
 80204e2:	2001      	movs	r0, #1
 80204e4:	e7a6      	b.n	8020434 <_svfiprintf_r+0xd4>
 80204e6:	2300      	movs	r3, #0
 80204e8:	3401      	adds	r4, #1
 80204ea:	9305      	str	r3, [sp, #20]
 80204ec:	4619      	mov	r1, r3
 80204ee:	f04f 0c0a 	mov.w	ip, #10
 80204f2:	4620      	mov	r0, r4
 80204f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80204f8:	3a30      	subs	r2, #48	; 0x30
 80204fa:	2a09      	cmp	r2, #9
 80204fc:	d903      	bls.n	8020506 <_svfiprintf_r+0x1a6>
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d0c6      	beq.n	8020490 <_svfiprintf_r+0x130>
 8020502:	9105      	str	r1, [sp, #20]
 8020504:	e7c4      	b.n	8020490 <_svfiprintf_r+0x130>
 8020506:	fb0c 2101 	mla	r1, ip, r1, r2
 802050a:	4604      	mov	r4, r0
 802050c:	2301      	movs	r3, #1
 802050e:	e7f0      	b.n	80204f2 <_svfiprintf_r+0x192>
 8020510:	ab03      	add	r3, sp, #12
 8020512:	9300      	str	r3, [sp, #0]
 8020514:	462a      	mov	r2, r5
 8020516:	4b0f      	ldr	r3, [pc, #60]	; (8020554 <_svfiprintf_r+0x1f4>)
 8020518:	a904      	add	r1, sp, #16
 802051a:	4638      	mov	r0, r7
 802051c:	f7fd fe50 	bl	801e1c0 <_printf_float>
 8020520:	1c42      	adds	r2, r0, #1
 8020522:	4606      	mov	r6, r0
 8020524:	d1d6      	bne.n	80204d4 <_svfiprintf_r+0x174>
 8020526:	89ab      	ldrh	r3, [r5, #12]
 8020528:	065b      	lsls	r3, r3, #25
 802052a:	f53f af2d 	bmi.w	8020388 <_svfiprintf_r+0x28>
 802052e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020530:	b01d      	add	sp, #116	; 0x74
 8020532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020536:	ab03      	add	r3, sp, #12
 8020538:	9300      	str	r3, [sp, #0]
 802053a:	462a      	mov	r2, r5
 802053c:	4b05      	ldr	r3, [pc, #20]	; (8020554 <_svfiprintf_r+0x1f4>)
 802053e:	a904      	add	r1, sp, #16
 8020540:	4638      	mov	r0, r7
 8020542:	f7fe f8e1 	bl	801e708 <_printf_i>
 8020546:	e7eb      	b.n	8020520 <_svfiprintf_r+0x1c0>
 8020548:	08024114 	.word	0x08024114
 802054c:	0802411e 	.word	0x0802411e
 8020550:	0801e1c1 	.word	0x0801e1c1
 8020554:	080202ad 	.word	0x080202ad
 8020558:	0802411a 	.word	0x0802411a

0802055c <__sfputc_r>:
 802055c:	6893      	ldr	r3, [r2, #8]
 802055e:	3b01      	subs	r3, #1
 8020560:	2b00      	cmp	r3, #0
 8020562:	b410      	push	{r4}
 8020564:	6093      	str	r3, [r2, #8]
 8020566:	da08      	bge.n	802057a <__sfputc_r+0x1e>
 8020568:	6994      	ldr	r4, [r2, #24]
 802056a:	42a3      	cmp	r3, r4
 802056c:	db01      	blt.n	8020572 <__sfputc_r+0x16>
 802056e:	290a      	cmp	r1, #10
 8020570:	d103      	bne.n	802057a <__sfputc_r+0x1e>
 8020572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020576:	f000 b9e3 	b.w	8020940 <__swbuf_r>
 802057a:	6813      	ldr	r3, [r2, #0]
 802057c:	1c58      	adds	r0, r3, #1
 802057e:	6010      	str	r0, [r2, #0]
 8020580:	7019      	strb	r1, [r3, #0]
 8020582:	4608      	mov	r0, r1
 8020584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020588:	4770      	bx	lr

0802058a <__sfputs_r>:
 802058a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802058c:	4606      	mov	r6, r0
 802058e:	460f      	mov	r7, r1
 8020590:	4614      	mov	r4, r2
 8020592:	18d5      	adds	r5, r2, r3
 8020594:	42ac      	cmp	r4, r5
 8020596:	d101      	bne.n	802059c <__sfputs_r+0x12>
 8020598:	2000      	movs	r0, #0
 802059a:	e007      	b.n	80205ac <__sfputs_r+0x22>
 802059c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80205a0:	463a      	mov	r2, r7
 80205a2:	4630      	mov	r0, r6
 80205a4:	f7ff ffda 	bl	802055c <__sfputc_r>
 80205a8:	1c43      	adds	r3, r0, #1
 80205aa:	d1f3      	bne.n	8020594 <__sfputs_r+0xa>
 80205ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080205b0 <_vfiprintf_r>:
 80205b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205b4:	460d      	mov	r5, r1
 80205b6:	b09d      	sub	sp, #116	; 0x74
 80205b8:	4614      	mov	r4, r2
 80205ba:	4698      	mov	r8, r3
 80205bc:	4606      	mov	r6, r0
 80205be:	b118      	cbz	r0, 80205c8 <_vfiprintf_r+0x18>
 80205c0:	6a03      	ldr	r3, [r0, #32]
 80205c2:	b90b      	cbnz	r3, 80205c8 <_vfiprintf_r+0x18>
 80205c4:	f7fe fa3c 	bl	801ea40 <__sinit>
 80205c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80205ca:	07d9      	lsls	r1, r3, #31
 80205cc:	d405      	bmi.n	80205da <_vfiprintf_r+0x2a>
 80205ce:	89ab      	ldrh	r3, [r5, #12]
 80205d0:	059a      	lsls	r2, r3, #22
 80205d2:	d402      	bmi.n	80205da <_vfiprintf_r+0x2a>
 80205d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80205d6:	f7fe fb5b 	bl	801ec90 <__retarget_lock_acquire_recursive>
 80205da:	89ab      	ldrh	r3, [r5, #12]
 80205dc:	071b      	lsls	r3, r3, #28
 80205de:	d501      	bpl.n	80205e4 <_vfiprintf_r+0x34>
 80205e0:	692b      	ldr	r3, [r5, #16]
 80205e2:	b99b      	cbnz	r3, 802060c <_vfiprintf_r+0x5c>
 80205e4:	4629      	mov	r1, r5
 80205e6:	4630      	mov	r0, r6
 80205e8:	f000 f9e8 	bl	80209bc <__swsetup_r>
 80205ec:	b170      	cbz	r0, 802060c <_vfiprintf_r+0x5c>
 80205ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80205f0:	07dc      	lsls	r4, r3, #31
 80205f2:	d504      	bpl.n	80205fe <_vfiprintf_r+0x4e>
 80205f4:	f04f 30ff 	mov.w	r0, #4294967295
 80205f8:	b01d      	add	sp, #116	; 0x74
 80205fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205fe:	89ab      	ldrh	r3, [r5, #12]
 8020600:	0598      	lsls	r0, r3, #22
 8020602:	d4f7      	bmi.n	80205f4 <_vfiprintf_r+0x44>
 8020604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020606:	f7fe fb44 	bl	801ec92 <__retarget_lock_release_recursive>
 802060a:	e7f3      	b.n	80205f4 <_vfiprintf_r+0x44>
 802060c:	2300      	movs	r3, #0
 802060e:	9309      	str	r3, [sp, #36]	; 0x24
 8020610:	2320      	movs	r3, #32
 8020612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020616:	f8cd 800c 	str.w	r8, [sp, #12]
 802061a:	2330      	movs	r3, #48	; 0x30
 802061c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80207d0 <_vfiprintf_r+0x220>
 8020620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020624:	f04f 0901 	mov.w	r9, #1
 8020628:	4623      	mov	r3, r4
 802062a:	469a      	mov	sl, r3
 802062c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020630:	b10a      	cbz	r2, 8020636 <_vfiprintf_r+0x86>
 8020632:	2a25      	cmp	r2, #37	; 0x25
 8020634:	d1f9      	bne.n	802062a <_vfiprintf_r+0x7a>
 8020636:	ebba 0b04 	subs.w	fp, sl, r4
 802063a:	d00b      	beq.n	8020654 <_vfiprintf_r+0xa4>
 802063c:	465b      	mov	r3, fp
 802063e:	4622      	mov	r2, r4
 8020640:	4629      	mov	r1, r5
 8020642:	4630      	mov	r0, r6
 8020644:	f7ff ffa1 	bl	802058a <__sfputs_r>
 8020648:	3001      	adds	r0, #1
 802064a:	f000 80a9 	beq.w	80207a0 <_vfiprintf_r+0x1f0>
 802064e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020650:	445a      	add	r2, fp
 8020652:	9209      	str	r2, [sp, #36]	; 0x24
 8020654:	f89a 3000 	ldrb.w	r3, [sl]
 8020658:	2b00      	cmp	r3, #0
 802065a:	f000 80a1 	beq.w	80207a0 <_vfiprintf_r+0x1f0>
 802065e:	2300      	movs	r3, #0
 8020660:	f04f 32ff 	mov.w	r2, #4294967295
 8020664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020668:	f10a 0a01 	add.w	sl, sl, #1
 802066c:	9304      	str	r3, [sp, #16]
 802066e:	9307      	str	r3, [sp, #28]
 8020670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020674:	931a      	str	r3, [sp, #104]	; 0x68
 8020676:	4654      	mov	r4, sl
 8020678:	2205      	movs	r2, #5
 802067a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802067e:	4854      	ldr	r0, [pc, #336]	; (80207d0 <_vfiprintf_r+0x220>)
 8020680:	f7df fdce 	bl	8000220 <memchr>
 8020684:	9a04      	ldr	r2, [sp, #16]
 8020686:	b9d8      	cbnz	r0, 80206c0 <_vfiprintf_r+0x110>
 8020688:	06d1      	lsls	r1, r2, #27
 802068a:	bf44      	itt	mi
 802068c:	2320      	movmi	r3, #32
 802068e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020692:	0713      	lsls	r3, r2, #28
 8020694:	bf44      	itt	mi
 8020696:	232b      	movmi	r3, #43	; 0x2b
 8020698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802069c:	f89a 3000 	ldrb.w	r3, [sl]
 80206a0:	2b2a      	cmp	r3, #42	; 0x2a
 80206a2:	d015      	beq.n	80206d0 <_vfiprintf_r+0x120>
 80206a4:	9a07      	ldr	r2, [sp, #28]
 80206a6:	4654      	mov	r4, sl
 80206a8:	2000      	movs	r0, #0
 80206aa:	f04f 0c0a 	mov.w	ip, #10
 80206ae:	4621      	mov	r1, r4
 80206b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80206b4:	3b30      	subs	r3, #48	; 0x30
 80206b6:	2b09      	cmp	r3, #9
 80206b8:	d94d      	bls.n	8020756 <_vfiprintf_r+0x1a6>
 80206ba:	b1b0      	cbz	r0, 80206ea <_vfiprintf_r+0x13a>
 80206bc:	9207      	str	r2, [sp, #28]
 80206be:	e014      	b.n	80206ea <_vfiprintf_r+0x13a>
 80206c0:	eba0 0308 	sub.w	r3, r0, r8
 80206c4:	fa09 f303 	lsl.w	r3, r9, r3
 80206c8:	4313      	orrs	r3, r2
 80206ca:	9304      	str	r3, [sp, #16]
 80206cc:	46a2      	mov	sl, r4
 80206ce:	e7d2      	b.n	8020676 <_vfiprintf_r+0xc6>
 80206d0:	9b03      	ldr	r3, [sp, #12]
 80206d2:	1d19      	adds	r1, r3, #4
 80206d4:	681b      	ldr	r3, [r3, #0]
 80206d6:	9103      	str	r1, [sp, #12]
 80206d8:	2b00      	cmp	r3, #0
 80206da:	bfbb      	ittet	lt
 80206dc:	425b      	neglt	r3, r3
 80206de:	f042 0202 	orrlt.w	r2, r2, #2
 80206e2:	9307      	strge	r3, [sp, #28]
 80206e4:	9307      	strlt	r3, [sp, #28]
 80206e6:	bfb8      	it	lt
 80206e8:	9204      	strlt	r2, [sp, #16]
 80206ea:	7823      	ldrb	r3, [r4, #0]
 80206ec:	2b2e      	cmp	r3, #46	; 0x2e
 80206ee:	d10c      	bne.n	802070a <_vfiprintf_r+0x15a>
 80206f0:	7863      	ldrb	r3, [r4, #1]
 80206f2:	2b2a      	cmp	r3, #42	; 0x2a
 80206f4:	d134      	bne.n	8020760 <_vfiprintf_r+0x1b0>
 80206f6:	9b03      	ldr	r3, [sp, #12]
 80206f8:	1d1a      	adds	r2, r3, #4
 80206fa:	681b      	ldr	r3, [r3, #0]
 80206fc:	9203      	str	r2, [sp, #12]
 80206fe:	2b00      	cmp	r3, #0
 8020700:	bfb8      	it	lt
 8020702:	f04f 33ff 	movlt.w	r3, #4294967295
 8020706:	3402      	adds	r4, #2
 8020708:	9305      	str	r3, [sp, #20]
 802070a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80207e0 <_vfiprintf_r+0x230>
 802070e:	7821      	ldrb	r1, [r4, #0]
 8020710:	2203      	movs	r2, #3
 8020712:	4650      	mov	r0, sl
 8020714:	f7df fd84 	bl	8000220 <memchr>
 8020718:	b138      	cbz	r0, 802072a <_vfiprintf_r+0x17a>
 802071a:	9b04      	ldr	r3, [sp, #16]
 802071c:	eba0 000a 	sub.w	r0, r0, sl
 8020720:	2240      	movs	r2, #64	; 0x40
 8020722:	4082      	lsls	r2, r0
 8020724:	4313      	orrs	r3, r2
 8020726:	3401      	adds	r4, #1
 8020728:	9304      	str	r3, [sp, #16]
 802072a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802072e:	4829      	ldr	r0, [pc, #164]	; (80207d4 <_vfiprintf_r+0x224>)
 8020730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020734:	2206      	movs	r2, #6
 8020736:	f7df fd73 	bl	8000220 <memchr>
 802073a:	2800      	cmp	r0, #0
 802073c:	d03f      	beq.n	80207be <_vfiprintf_r+0x20e>
 802073e:	4b26      	ldr	r3, [pc, #152]	; (80207d8 <_vfiprintf_r+0x228>)
 8020740:	bb1b      	cbnz	r3, 802078a <_vfiprintf_r+0x1da>
 8020742:	9b03      	ldr	r3, [sp, #12]
 8020744:	3307      	adds	r3, #7
 8020746:	f023 0307 	bic.w	r3, r3, #7
 802074a:	3308      	adds	r3, #8
 802074c:	9303      	str	r3, [sp, #12]
 802074e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020750:	443b      	add	r3, r7
 8020752:	9309      	str	r3, [sp, #36]	; 0x24
 8020754:	e768      	b.n	8020628 <_vfiprintf_r+0x78>
 8020756:	fb0c 3202 	mla	r2, ip, r2, r3
 802075a:	460c      	mov	r4, r1
 802075c:	2001      	movs	r0, #1
 802075e:	e7a6      	b.n	80206ae <_vfiprintf_r+0xfe>
 8020760:	2300      	movs	r3, #0
 8020762:	3401      	adds	r4, #1
 8020764:	9305      	str	r3, [sp, #20]
 8020766:	4619      	mov	r1, r3
 8020768:	f04f 0c0a 	mov.w	ip, #10
 802076c:	4620      	mov	r0, r4
 802076e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020772:	3a30      	subs	r2, #48	; 0x30
 8020774:	2a09      	cmp	r2, #9
 8020776:	d903      	bls.n	8020780 <_vfiprintf_r+0x1d0>
 8020778:	2b00      	cmp	r3, #0
 802077a:	d0c6      	beq.n	802070a <_vfiprintf_r+0x15a>
 802077c:	9105      	str	r1, [sp, #20]
 802077e:	e7c4      	b.n	802070a <_vfiprintf_r+0x15a>
 8020780:	fb0c 2101 	mla	r1, ip, r1, r2
 8020784:	4604      	mov	r4, r0
 8020786:	2301      	movs	r3, #1
 8020788:	e7f0      	b.n	802076c <_vfiprintf_r+0x1bc>
 802078a:	ab03      	add	r3, sp, #12
 802078c:	9300      	str	r3, [sp, #0]
 802078e:	462a      	mov	r2, r5
 8020790:	4b12      	ldr	r3, [pc, #72]	; (80207dc <_vfiprintf_r+0x22c>)
 8020792:	a904      	add	r1, sp, #16
 8020794:	4630      	mov	r0, r6
 8020796:	f7fd fd13 	bl	801e1c0 <_printf_float>
 802079a:	4607      	mov	r7, r0
 802079c:	1c78      	adds	r0, r7, #1
 802079e:	d1d6      	bne.n	802074e <_vfiprintf_r+0x19e>
 80207a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80207a2:	07d9      	lsls	r1, r3, #31
 80207a4:	d405      	bmi.n	80207b2 <_vfiprintf_r+0x202>
 80207a6:	89ab      	ldrh	r3, [r5, #12]
 80207a8:	059a      	lsls	r2, r3, #22
 80207aa:	d402      	bmi.n	80207b2 <_vfiprintf_r+0x202>
 80207ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80207ae:	f7fe fa70 	bl	801ec92 <__retarget_lock_release_recursive>
 80207b2:	89ab      	ldrh	r3, [r5, #12]
 80207b4:	065b      	lsls	r3, r3, #25
 80207b6:	f53f af1d 	bmi.w	80205f4 <_vfiprintf_r+0x44>
 80207ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80207bc:	e71c      	b.n	80205f8 <_vfiprintf_r+0x48>
 80207be:	ab03      	add	r3, sp, #12
 80207c0:	9300      	str	r3, [sp, #0]
 80207c2:	462a      	mov	r2, r5
 80207c4:	4b05      	ldr	r3, [pc, #20]	; (80207dc <_vfiprintf_r+0x22c>)
 80207c6:	a904      	add	r1, sp, #16
 80207c8:	4630      	mov	r0, r6
 80207ca:	f7fd ff9d 	bl	801e708 <_printf_i>
 80207ce:	e7e4      	b.n	802079a <_vfiprintf_r+0x1ea>
 80207d0:	08024114 	.word	0x08024114
 80207d4:	0802411e 	.word	0x0802411e
 80207d8:	0801e1c1 	.word	0x0801e1c1
 80207dc:	0802058b 	.word	0x0802058b
 80207e0:	0802411a 	.word	0x0802411a

080207e4 <__sflush_r>:
 80207e4:	898a      	ldrh	r2, [r1, #12]
 80207e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207ea:	4605      	mov	r5, r0
 80207ec:	0710      	lsls	r0, r2, #28
 80207ee:	460c      	mov	r4, r1
 80207f0:	d458      	bmi.n	80208a4 <__sflush_r+0xc0>
 80207f2:	684b      	ldr	r3, [r1, #4]
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	dc05      	bgt.n	8020804 <__sflush_r+0x20>
 80207f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	dc02      	bgt.n	8020804 <__sflush_r+0x20>
 80207fe:	2000      	movs	r0, #0
 8020800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020806:	2e00      	cmp	r6, #0
 8020808:	d0f9      	beq.n	80207fe <__sflush_r+0x1a>
 802080a:	2300      	movs	r3, #0
 802080c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020810:	682f      	ldr	r7, [r5, #0]
 8020812:	6a21      	ldr	r1, [r4, #32]
 8020814:	602b      	str	r3, [r5, #0]
 8020816:	d032      	beq.n	802087e <__sflush_r+0x9a>
 8020818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802081a:	89a3      	ldrh	r3, [r4, #12]
 802081c:	075a      	lsls	r2, r3, #29
 802081e:	d505      	bpl.n	802082c <__sflush_r+0x48>
 8020820:	6863      	ldr	r3, [r4, #4]
 8020822:	1ac0      	subs	r0, r0, r3
 8020824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020826:	b10b      	cbz	r3, 802082c <__sflush_r+0x48>
 8020828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802082a:	1ac0      	subs	r0, r0, r3
 802082c:	2300      	movs	r3, #0
 802082e:	4602      	mov	r2, r0
 8020830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020832:	6a21      	ldr	r1, [r4, #32]
 8020834:	4628      	mov	r0, r5
 8020836:	47b0      	blx	r6
 8020838:	1c43      	adds	r3, r0, #1
 802083a:	89a3      	ldrh	r3, [r4, #12]
 802083c:	d106      	bne.n	802084c <__sflush_r+0x68>
 802083e:	6829      	ldr	r1, [r5, #0]
 8020840:	291d      	cmp	r1, #29
 8020842:	d82b      	bhi.n	802089c <__sflush_r+0xb8>
 8020844:	4a29      	ldr	r2, [pc, #164]	; (80208ec <__sflush_r+0x108>)
 8020846:	410a      	asrs	r2, r1
 8020848:	07d6      	lsls	r6, r2, #31
 802084a:	d427      	bmi.n	802089c <__sflush_r+0xb8>
 802084c:	2200      	movs	r2, #0
 802084e:	6062      	str	r2, [r4, #4]
 8020850:	04d9      	lsls	r1, r3, #19
 8020852:	6922      	ldr	r2, [r4, #16]
 8020854:	6022      	str	r2, [r4, #0]
 8020856:	d504      	bpl.n	8020862 <__sflush_r+0x7e>
 8020858:	1c42      	adds	r2, r0, #1
 802085a:	d101      	bne.n	8020860 <__sflush_r+0x7c>
 802085c:	682b      	ldr	r3, [r5, #0]
 802085e:	b903      	cbnz	r3, 8020862 <__sflush_r+0x7e>
 8020860:	6560      	str	r0, [r4, #84]	; 0x54
 8020862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020864:	602f      	str	r7, [r5, #0]
 8020866:	2900      	cmp	r1, #0
 8020868:	d0c9      	beq.n	80207fe <__sflush_r+0x1a>
 802086a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802086e:	4299      	cmp	r1, r3
 8020870:	d002      	beq.n	8020878 <__sflush_r+0x94>
 8020872:	4628      	mov	r0, r5
 8020874:	f7ff f89e 	bl	801f9b4 <_free_r>
 8020878:	2000      	movs	r0, #0
 802087a:	6360      	str	r0, [r4, #52]	; 0x34
 802087c:	e7c0      	b.n	8020800 <__sflush_r+0x1c>
 802087e:	2301      	movs	r3, #1
 8020880:	4628      	mov	r0, r5
 8020882:	47b0      	blx	r6
 8020884:	1c41      	adds	r1, r0, #1
 8020886:	d1c8      	bne.n	802081a <__sflush_r+0x36>
 8020888:	682b      	ldr	r3, [r5, #0]
 802088a:	2b00      	cmp	r3, #0
 802088c:	d0c5      	beq.n	802081a <__sflush_r+0x36>
 802088e:	2b1d      	cmp	r3, #29
 8020890:	d001      	beq.n	8020896 <__sflush_r+0xb2>
 8020892:	2b16      	cmp	r3, #22
 8020894:	d101      	bne.n	802089a <__sflush_r+0xb6>
 8020896:	602f      	str	r7, [r5, #0]
 8020898:	e7b1      	b.n	80207fe <__sflush_r+0x1a>
 802089a:	89a3      	ldrh	r3, [r4, #12]
 802089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80208a0:	81a3      	strh	r3, [r4, #12]
 80208a2:	e7ad      	b.n	8020800 <__sflush_r+0x1c>
 80208a4:	690f      	ldr	r7, [r1, #16]
 80208a6:	2f00      	cmp	r7, #0
 80208a8:	d0a9      	beq.n	80207fe <__sflush_r+0x1a>
 80208aa:	0793      	lsls	r3, r2, #30
 80208ac:	680e      	ldr	r6, [r1, #0]
 80208ae:	bf08      	it	eq
 80208b0:	694b      	ldreq	r3, [r1, #20]
 80208b2:	600f      	str	r7, [r1, #0]
 80208b4:	bf18      	it	ne
 80208b6:	2300      	movne	r3, #0
 80208b8:	eba6 0807 	sub.w	r8, r6, r7
 80208bc:	608b      	str	r3, [r1, #8]
 80208be:	f1b8 0f00 	cmp.w	r8, #0
 80208c2:	dd9c      	ble.n	80207fe <__sflush_r+0x1a>
 80208c4:	6a21      	ldr	r1, [r4, #32]
 80208c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80208c8:	4643      	mov	r3, r8
 80208ca:	463a      	mov	r2, r7
 80208cc:	4628      	mov	r0, r5
 80208ce:	47b0      	blx	r6
 80208d0:	2800      	cmp	r0, #0
 80208d2:	dc06      	bgt.n	80208e2 <__sflush_r+0xfe>
 80208d4:	89a3      	ldrh	r3, [r4, #12]
 80208d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80208da:	81a3      	strh	r3, [r4, #12]
 80208dc:	f04f 30ff 	mov.w	r0, #4294967295
 80208e0:	e78e      	b.n	8020800 <__sflush_r+0x1c>
 80208e2:	4407      	add	r7, r0
 80208e4:	eba8 0800 	sub.w	r8, r8, r0
 80208e8:	e7e9      	b.n	80208be <__sflush_r+0xda>
 80208ea:	bf00      	nop
 80208ec:	dfbffffe 	.word	0xdfbffffe

080208f0 <_fflush_r>:
 80208f0:	b538      	push	{r3, r4, r5, lr}
 80208f2:	690b      	ldr	r3, [r1, #16]
 80208f4:	4605      	mov	r5, r0
 80208f6:	460c      	mov	r4, r1
 80208f8:	b913      	cbnz	r3, 8020900 <_fflush_r+0x10>
 80208fa:	2500      	movs	r5, #0
 80208fc:	4628      	mov	r0, r5
 80208fe:	bd38      	pop	{r3, r4, r5, pc}
 8020900:	b118      	cbz	r0, 802090a <_fflush_r+0x1a>
 8020902:	6a03      	ldr	r3, [r0, #32]
 8020904:	b90b      	cbnz	r3, 802090a <_fflush_r+0x1a>
 8020906:	f7fe f89b 	bl	801ea40 <__sinit>
 802090a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802090e:	2b00      	cmp	r3, #0
 8020910:	d0f3      	beq.n	80208fa <_fflush_r+0xa>
 8020912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020914:	07d0      	lsls	r0, r2, #31
 8020916:	d404      	bmi.n	8020922 <_fflush_r+0x32>
 8020918:	0599      	lsls	r1, r3, #22
 802091a:	d402      	bmi.n	8020922 <_fflush_r+0x32>
 802091c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802091e:	f7fe f9b7 	bl	801ec90 <__retarget_lock_acquire_recursive>
 8020922:	4628      	mov	r0, r5
 8020924:	4621      	mov	r1, r4
 8020926:	f7ff ff5d 	bl	80207e4 <__sflush_r>
 802092a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802092c:	07da      	lsls	r2, r3, #31
 802092e:	4605      	mov	r5, r0
 8020930:	d4e4      	bmi.n	80208fc <_fflush_r+0xc>
 8020932:	89a3      	ldrh	r3, [r4, #12]
 8020934:	059b      	lsls	r3, r3, #22
 8020936:	d4e1      	bmi.n	80208fc <_fflush_r+0xc>
 8020938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802093a:	f7fe f9aa 	bl	801ec92 <__retarget_lock_release_recursive>
 802093e:	e7dd      	b.n	80208fc <_fflush_r+0xc>

08020940 <__swbuf_r>:
 8020940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020942:	460e      	mov	r6, r1
 8020944:	4614      	mov	r4, r2
 8020946:	4605      	mov	r5, r0
 8020948:	b118      	cbz	r0, 8020952 <__swbuf_r+0x12>
 802094a:	6a03      	ldr	r3, [r0, #32]
 802094c:	b90b      	cbnz	r3, 8020952 <__swbuf_r+0x12>
 802094e:	f7fe f877 	bl	801ea40 <__sinit>
 8020952:	69a3      	ldr	r3, [r4, #24]
 8020954:	60a3      	str	r3, [r4, #8]
 8020956:	89a3      	ldrh	r3, [r4, #12]
 8020958:	071a      	lsls	r2, r3, #28
 802095a:	d525      	bpl.n	80209a8 <__swbuf_r+0x68>
 802095c:	6923      	ldr	r3, [r4, #16]
 802095e:	b31b      	cbz	r3, 80209a8 <__swbuf_r+0x68>
 8020960:	6823      	ldr	r3, [r4, #0]
 8020962:	6922      	ldr	r2, [r4, #16]
 8020964:	1a98      	subs	r0, r3, r2
 8020966:	6963      	ldr	r3, [r4, #20]
 8020968:	b2f6      	uxtb	r6, r6
 802096a:	4283      	cmp	r3, r0
 802096c:	4637      	mov	r7, r6
 802096e:	dc04      	bgt.n	802097a <__swbuf_r+0x3a>
 8020970:	4621      	mov	r1, r4
 8020972:	4628      	mov	r0, r5
 8020974:	f7ff ffbc 	bl	80208f0 <_fflush_r>
 8020978:	b9e0      	cbnz	r0, 80209b4 <__swbuf_r+0x74>
 802097a:	68a3      	ldr	r3, [r4, #8]
 802097c:	3b01      	subs	r3, #1
 802097e:	60a3      	str	r3, [r4, #8]
 8020980:	6823      	ldr	r3, [r4, #0]
 8020982:	1c5a      	adds	r2, r3, #1
 8020984:	6022      	str	r2, [r4, #0]
 8020986:	701e      	strb	r6, [r3, #0]
 8020988:	6962      	ldr	r2, [r4, #20]
 802098a:	1c43      	adds	r3, r0, #1
 802098c:	429a      	cmp	r2, r3
 802098e:	d004      	beq.n	802099a <__swbuf_r+0x5a>
 8020990:	89a3      	ldrh	r3, [r4, #12]
 8020992:	07db      	lsls	r3, r3, #31
 8020994:	d506      	bpl.n	80209a4 <__swbuf_r+0x64>
 8020996:	2e0a      	cmp	r6, #10
 8020998:	d104      	bne.n	80209a4 <__swbuf_r+0x64>
 802099a:	4621      	mov	r1, r4
 802099c:	4628      	mov	r0, r5
 802099e:	f7ff ffa7 	bl	80208f0 <_fflush_r>
 80209a2:	b938      	cbnz	r0, 80209b4 <__swbuf_r+0x74>
 80209a4:	4638      	mov	r0, r7
 80209a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80209a8:	4621      	mov	r1, r4
 80209aa:	4628      	mov	r0, r5
 80209ac:	f000 f806 	bl	80209bc <__swsetup_r>
 80209b0:	2800      	cmp	r0, #0
 80209b2:	d0d5      	beq.n	8020960 <__swbuf_r+0x20>
 80209b4:	f04f 37ff 	mov.w	r7, #4294967295
 80209b8:	e7f4      	b.n	80209a4 <__swbuf_r+0x64>
	...

080209bc <__swsetup_r>:
 80209bc:	b538      	push	{r3, r4, r5, lr}
 80209be:	4b2a      	ldr	r3, [pc, #168]	; (8020a68 <__swsetup_r+0xac>)
 80209c0:	4605      	mov	r5, r0
 80209c2:	6818      	ldr	r0, [r3, #0]
 80209c4:	460c      	mov	r4, r1
 80209c6:	b118      	cbz	r0, 80209d0 <__swsetup_r+0x14>
 80209c8:	6a03      	ldr	r3, [r0, #32]
 80209ca:	b90b      	cbnz	r3, 80209d0 <__swsetup_r+0x14>
 80209cc:	f7fe f838 	bl	801ea40 <__sinit>
 80209d0:	89a3      	ldrh	r3, [r4, #12]
 80209d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80209d6:	0718      	lsls	r0, r3, #28
 80209d8:	d422      	bmi.n	8020a20 <__swsetup_r+0x64>
 80209da:	06d9      	lsls	r1, r3, #27
 80209dc:	d407      	bmi.n	80209ee <__swsetup_r+0x32>
 80209de:	2309      	movs	r3, #9
 80209e0:	602b      	str	r3, [r5, #0]
 80209e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80209e6:	81a3      	strh	r3, [r4, #12]
 80209e8:	f04f 30ff 	mov.w	r0, #4294967295
 80209ec:	e034      	b.n	8020a58 <__swsetup_r+0x9c>
 80209ee:	0758      	lsls	r0, r3, #29
 80209f0:	d512      	bpl.n	8020a18 <__swsetup_r+0x5c>
 80209f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80209f4:	b141      	cbz	r1, 8020a08 <__swsetup_r+0x4c>
 80209f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80209fa:	4299      	cmp	r1, r3
 80209fc:	d002      	beq.n	8020a04 <__swsetup_r+0x48>
 80209fe:	4628      	mov	r0, r5
 8020a00:	f7fe ffd8 	bl	801f9b4 <_free_r>
 8020a04:	2300      	movs	r3, #0
 8020a06:	6363      	str	r3, [r4, #52]	; 0x34
 8020a08:	89a3      	ldrh	r3, [r4, #12]
 8020a0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020a0e:	81a3      	strh	r3, [r4, #12]
 8020a10:	2300      	movs	r3, #0
 8020a12:	6063      	str	r3, [r4, #4]
 8020a14:	6923      	ldr	r3, [r4, #16]
 8020a16:	6023      	str	r3, [r4, #0]
 8020a18:	89a3      	ldrh	r3, [r4, #12]
 8020a1a:	f043 0308 	orr.w	r3, r3, #8
 8020a1e:	81a3      	strh	r3, [r4, #12]
 8020a20:	6923      	ldr	r3, [r4, #16]
 8020a22:	b94b      	cbnz	r3, 8020a38 <__swsetup_r+0x7c>
 8020a24:	89a3      	ldrh	r3, [r4, #12]
 8020a26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020a2e:	d003      	beq.n	8020a38 <__swsetup_r+0x7c>
 8020a30:	4621      	mov	r1, r4
 8020a32:	4628      	mov	r0, r5
 8020a34:	f000 f912 	bl	8020c5c <__smakebuf_r>
 8020a38:	89a0      	ldrh	r0, [r4, #12]
 8020a3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020a3e:	f010 0301 	ands.w	r3, r0, #1
 8020a42:	d00a      	beq.n	8020a5a <__swsetup_r+0x9e>
 8020a44:	2300      	movs	r3, #0
 8020a46:	60a3      	str	r3, [r4, #8]
 8020a48:	6963      	ldr	r3, [r4, #20]
 8020a4a:	425b      	negs	r3, r3
 8020a4c:	61a3      	str	r3, [r4, #24]
 8020a4e:	6923      	ldr	r3, [r4, #16]
 8020a50:	b943      	cbnz	r3, 8020a64 <__swsetup_r+0xa8>
 8020a52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020a56:	d1c4      	bne.n	80209e2 <__swsetup_r+0x26>
 8020a58:	bd38      	pop	{r3, r4, r5, pc}
 8020a5a:	0781      	lsls	r1, r0, #30
 8020a5c:	bf58      	it	pl
 8020a5e:	6963      	ldrpl	r3, [r4, #20]
 8020a60:	60a3      	str	r3, [r4, #8]
 8020a62:	e7f4      	b.n	8020a4e <__swsetup_r+0x92>
 8020a64:	2000      	movs	r0, #0
 8020a66:	e7f7      	b.n	8020a58 <__swsetup_r+0x9c>
 8020a68:	200001e8 	.word	0x200001e8

08020a6c <memmove>:
 8020a6c:	4288      	cmp	r0, r1
 8020a6e:	b510      	push	{r4, lr}
 8020a70:	eb01 0402 	add.w	r4, r1, r2
 8020a74:	d902      	bls.n	8020a7c <memmove+0x10>
 8020a76:	4284      	cmp	r4, r0
 8020a78:	4623      	mov	r3, r4
 8020a7a:	d807      	bhi.n	8020a8c <memmove+0x20>
 8020a7c:	1e43      	subs	r3, r0, #1
 8020a7e:	42a1      	cmp	r1, r4
 8020a80:	d008      	beq.n	8020a94 <memmove+0x28>
 8020a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020a8a:	e7f8      	b.n	8020a7e <memmove+0x12>
 8020a8c:	4402      	add	r2, r0
 8020a8e:	4601      	mov	r1, r0
 8020a90:	428a      	cmp	r2, r1
 8020a92:	d100      	bne.n	8020a96 <memmove+0x2a>
 8020a94:	bd10      	pop	{r4, pc}
 8020a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020a9e:	e7f7      	b.n	8020a90 <memmove+0x24>

08020aa0 <_raise_r>:
 8020aa0:	291f      	cmp	r1, #31
 8020aa2:	b538      	push	{r3, r4, r5, lr}
 8020aa4:	4604      	mov	r4, r0
 8020aa6:	460d      	mov	r5, r1
 8020aa8:	d904      	bls.n	8020ab4 <_raise_r+0x14>
 8020aaa:	2316      	movs	r3, #22
 8020aac:	6003      	str	r3, [r0, #0]
 8020aae:	f04f 30ff 	mov.w	r0, #4294967295
 8020ab2:	bd38      	pop	{r3, r4, r5, pc}
 8020ab4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020ab6:	b112      	cbz	r2, 8020abe <_raise_r+0x1e>
 8020ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020abc:	b94b      	cbnz	r3, 8020ad2 <_raise_r+0x32>
 8020abe:	4620      	mov	r0, r4
 8020ac0:	f000 f830 	bl	8020b24 <_getpid_r>
 8020ac4:	462a      	mov	r2, r5
 8020ac6:	4601      	mov	r1, r0
 8020ac8:	4620      	mov	r0, r4
 8020aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020ace:	f000 b817 	b.w	8020b00 <_kill_r>
 8020ad2:	2b01      	cmp	r3, #1
 8020ad4:	d00a      	beq.n	8020aec <_raise_r+0x4c>
 8020ad6:	1c59      	adds	r1, r3, #1
 8020ad8:	d103      	bne.n	8020ae2 <_raise_r+0x42>
 8020ada:	2316      	movs	r3, #22
 8020adc:	6003      	str	r3, [r0, #0]
 8020ade:	2001      	movs	r0, #1
 8020ae0:	e7e7      	b.n	8020ab2 <_raise_r+0x12>
 8020ae2:	2400      	movs	r4, #0
 8020ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020ae8:	4628      	mov	r0, r5
 8020aea:	4798      	blx	r3
 8020aec:	2000      	movs	r0, #0
 8020aee:	e7e0      	b.n	8020ab2 <_raise_r+0x12>

08020af0 <raise>:
 8020af0:	4b02      	ldr	r3, [pc, #8]	; (8020afc <raise+0xc>)
 8020af2:	4601      	mov	r1, r0
 8020af4:	6818      	ldr	r0, [r3, #0]
 8020af6:	f7ff bfd3 	b.w	8020aa0 <_raise_r>
 8020afa:	bf00      	nop
 8020afc:	200001e8 	.word	0x200001e8

08020b00 <_kill_r>:
 8020b00:	b538      	push	{r3, r4, r5, lr}
 8020b02:	4d07      	ldr	r5, [pc, #28]	; (8020b20 <_kill_r+0x20>)
 8020b04:	2300      	movs	r3, #0
 8020b06:	4604      	mov	r4, r0
 8020b08:	4608      	mov	r0, r1
 8020b0a:	4611      	mov	r1, r2
 8020b0c:	602b      	str	r3, [r5, #0]
 8020b0e:	f7e5 fdc1 	bl	8006694 <_kill>
 8020b12:	1c43      	adds	r3, r0, #1
 8020b14:	d102      	bne.n	8020b1c <_kill_r+0x1c>
 8020b16:	682b      	ldr	r3, [r5, #0]
 8020b18:	b103      	cbz	r3, 8020b1c <_kill_r+0x1c>
 8020b1a:	6023      	str	r3, [r4, #0]
 8020b1c:	bd38      	pop	{r3, r4, r5, pc}
 8020b1e:	bf00      	nop
 8020b20:	20016a84 	.word	0x20016a84

08020b24 <_getpid_r>:
 8020b24:	f7e5 bdae 	b.w	8006684 <_getpid>

08020b28 <_sbrk_r>:
 8020b28:	b538      	push	{r3, r4, r5, lr}
 8020b2a:	4d06      	ldr	r5, [pc, #24]	; (8020b44 <_sbrk_r+0x1c>)
 8020b2c:	2300      	movs	r3, #0
 8020b2e:	4604      	mov	r4, r0
 8020b30:	4608      	mov	r0, r1
 8020b32:	602b      	str	r3, [r5, #0]
 8020b34:	f7e5 fe1a 	bl	800676c <_sbrk>
 8020b38:	1c43      	adds	r3, r0, #1
 8020b3a:	d102      	bne.n	8020b42 <_sbrk_r+0x1a>
 8020b3c:	682b      	ldr	r3, [r5, #0]
 8020b3e:	b103      	cbz	r3, 8020b42 <_sbrk_r+0x1a>
 8020b40:	6023      	str	r3, [r4, #0]
 8020b42:	bd38      	pop	{r3, r4, r5, pc}
 8020b44:	20016a84 	.word	0x20016a84

08020b48 <_calloc_r>:
 8020b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020b4a:	fba1 2402 	umull	r2, r4, r1, r2
 8020b4e:	b94c      	cbnz	r4, 8020b64 <_calloc_r+0x1c>
 8020b50:	4611      	mov	r1, r2
 8020b52:	9201      	str	r2, [sp, #4]
 8020b54:	f7fe ffa2 	bl	801fa9c <_malloc_r>
 8020b58:	9a01      	ldr	r2, [sp, #4]
 8020b5a:	4605      	mov	r5, r0
 8020b5c:	b930      	cbnz	r0, 8020b6c <_calloc_r+0x24>
 8020b5e:	4628      	mov	r0, r5
 8020b60:	b003      	add	sp, #12
 8020b62:	bd30      	pop	{r4, r5, pc}
 8020b64:	220c      	movs	r2, #12
 8020b66:	6002      	str	r2, [r0, #0]
 8020b68:	2500      	movs	r5, #0
 8020b6a:	e7f8      	b.n	8020b5e <_calloc_r+0x16>
 8020b6c:	4621      	mov	r1, r4
 8020b6e:	f7fe f812 	bl	801eb96 <memset>
 8020b72:	e7f4      	b.n	8020b5e <_calloc_r+0x16>

08020b74 <__ascii_mbtowc>:
 8020b74:	b082      	sub	sp, #8
 8020b76:	b901      	cbnz	r1, 8020b7a <__ascii_mbtowc+0x6>
 8020b78:	a901      	add	r1, sp, #4
 8020b7a:	b142      	cbz	r2, 8020b8e <__ascii_mbtowc+0x1a>
 8020b7c:	b14b      	cbz	r3, 8020b92 <__ascii_mbtowc+0x1e>
 8020b7e:	7813      	ldrb	r3, [r2, #0]
 8020b80:	600b      	str	r3, [r1, #0]
 8020b82:	7812      	ldrb	r2, [r2, #0]
 8020b84:	1e10      	subs	r0, r2, #0
 8020b86:	bf18      	it	ne
 8020b88:	2001      	movne	r0, #1
 8020b8a:	b002      	add	sp, #8
 8020b8c:	4770      	bx	lr
 8020b8e:	4610      	mov	r0, r2
 8020b90:	e7fb      	b.n	8020b8a <__ascii_mbtowc+0x16>
 8020b92:	f06f 0001 	mvn.w	r0, #1
 8020b96:	e7f8      	b.n	8020b8a <__ascii_mbtowc+0x16>

08020b98 <_realloc_r>:
 8020b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b9c:	4680      	mov	r8, r0
 8020b9e:	4614      	mov	r4, r2
 8020ba0:	460e      	mov	r6, r1
 8020ba2:	b921      	cbnz	r1, 8020bae <_realloc_r+0x16>
 8020ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020ba8:	4611      	mov	r1, r2
 8020baa:	f7fe bf77 	b.w	801fa9c <_malloc_r>
 8020bae:	b92a      	cbnz	r2, 8020bbc <_realloc_r+0x24>
 8020bb0:	f7fe ff00 	bl	801f9b4 <_free_r>
 8020bb4:	4625      	mov	r5, r4
 8020bb6:	4628      	mov	r0, r5
 8020bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020bbc:	f000 f8ac 	bl	8020d18 <_malloc_usable_size_r>
 8020bc0:	4284      	cmp	r4, r0
 8020bc2:	4607      	mov	r7, r0
 8020bc4:	d802      	bhi.n	8020bcc <_realloc_r+0x34>
 8020bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020bca:	d812      	bhi.n	8020bf2 <_realloc_r+0x5a>
 8020bcc:	4621      	mov	r1, r4
 8020bce:	4640      	mov	r0, r8
 8020bd0:	f7fe ff64 	bl	801fa9c <_malloc_r>
 8020bd4:	4605      	mov	r5, r0
 8020bd6:	2800      	cmp	r0, #0
 8020bd8:	d0ed      	beq.n	8020bb6 <_realloc_r+0x1e>
 8020bda:	42bc      	cmp	r4, r7
 8020bdc:	4622      	mov	r2, r4
 8020bde:	4631      	mov	r1, r6
 8020be0:	bf28      	it	cs
 8020be2:	463a      	movcs	r2, r7
 8020be4:	f7fe f856 	bl	801ec94 <memcpy>
 8020be8:	4631      	mov	r1, r6
 8020bea:	4640      	mov	r0, r8
 8020bec:	f7fe fee2 	bl	801f9b4 <_free_r>
 8020bf0:	e7e1      	b.n	8020bb6 <_realloc_r+0x1e>
 8020bf2:	4635      	mov	r5, r6
 8020bf4:	e7df      	b.n	8020bb6 <_realloc_r+0x1e>

08020bf6 <__ascii_wctomb>:
 8020bf6:	b149      	cbz	r1, 8020c0c <__ascii_wctomb+0x16>
 8020bf8:	2aff      	cmp	r2, #255	; 0xff
 8020bfa:	bf85      	ittet	hi
 8020bfc:	238a      	movhi	r3, #138	; 0x8a
 8020bfe:	6003      	strhi	r3, [r0, #0]
 8020c00:	700a      	strbls	r2, [r1, #0]
 8020c02:	f04f 30ff 	movhi.w	r0, #4294967295
 8020c06:	bf98      	it	ls
 8020c08:	2001      	movls	r0, #1
 8020c0a:	4770      	bx	lr
 8020c0c:	4608      	mov	r0, r1
 8020c0e:	4770      	bx	lr

08020c10 <__swhatbuf_r>:
 8020c10:	b570      	push	{r4, r5, r6, lr}
 8020c12:	460c      	mov	r4, r1
 8020c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c18:	2900      	cmp	r1, #0
 8020c1a:	b096      	sub	sp, #88	; 0x58
 8020c1c:	4615      	mov	r5, r2
 8020c1e:	461e      	mov	r6, r3
 8020c20:	da0d      	bge.n	8020c3e <__swhatbuf_r+0x2e>
 8020c22:	89a3      	ldrh	r3, [r4, #12]
 8020c24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020c28:	f04f 0100 	mov.w	r1, #0
 8020c2c:	bf0c      	ite	eq
 8020c2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8020c32:	2340      	movne	r3, #64	; 0x40
 8020c34:	2000      	movs	r0, #0
 8020c36:	6031      	str	r1, [r6, #0]
 8020c38:	602b      	str	r3, [r5, #0]
 8020c3a:	b016      	add	sp, #88	; 0x58
 8020c3c:	bd70      	pop	{r4, r5, r6, pc}
 8020c3e:	466a      	mov	r2, sp
 8020c40:	f000 f848 	bl	8020cd4 <_fstat_r>
 8020c44:	2800      	cmp	r0, #0
 8020c46:	dbec      	blt.n	8020c22 <__swhatbuf_r+0x12>
 8020c48:	9901      	ldr	r1, [sp, #4]
 8020c4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8020c4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8020c52:	4259      	negs	r1, r3
 8020c54:	4159      	adcs	r1, r3
 8020c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020c5a:	e7eb      	b.n	8020c34 <__swhatbuf_r+0x24>

08020c5c <__smakebuf_r>:
 8020c5c:	898b      	ldrh	r3, [r1, #12]
 8020c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020c60:	079d      	lsls	r5, r3, #30
 8020c62:	4606      	mov	r6, r0
 8020c64:	460c      	mov	r4, r1
 8020c66:	d507      	bpl.n	8020c78 <__smakebuf_r+0x1c>
 8020c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020c6c:	6023      	str	r3, [r4, #0]
 8020c6e:	6123      	str	r3, [r4, #16]
 8020c70:	2301      	movs	r3, #1
 8020c72:	6163      	str	r3, [r4, #20]
 8020c74:	b002      	add	sp, #8
 8020c76:	bd70      	pop	{r4, r5, r6, pc}
 8020c78:	ab01      	add	r3, sp, #4
 8020c7a:	466a      	mov	r2, sp
 8020c7c:	f7ff ffc8 	bl	8020c10 <__swhatbuf_r>
 8020c80:	9900      	ldr	r1, [sp, #0]
 8020c82:	4605      	mov	r5, r0
 8020c84:	4630      	mov	r0, r6
 8020c86:	f7fe ff09 	bl	801fa9c <_malloc_r>
 8020c8a:	b948      	cbnz	r0, 8020ca0 <__smakebuf_r+0x44>
 8020c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c90:	059a      	lsls	r2, r3, #22
 8020c92:	d4ef      	bmi.n	8020c74 <__smakebuf_r+0x18>
 8020c94:	f023 0303 	bic.w	r3, r3, #3
 8020c98:	f043 0302 	orr.w	r3, r3, #2
 8020c9c:	81a3      	strh	r3, [r4, #12]
 8020c9e:	e7e3      	b.n	8020c68 <__smakebuf_r+0xc>
 8020ca0:	89a3      	ldrh	r3, [r4, #12]
 8020ca2:	6020      	str	r0, [r4, #0]
 8020ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020ca8:	81a3      	strh	r3, [r4, #12]
 8020caa:	9b00      	ldr	r3, [sp, #0]
 8020cac:	6163      	str	r3, [r4, #20]
 8020cae:	9b01      	ldr	r3, [sp, #4]
 8020cb0:	6120      	str	r0, [r4, #16]
 8020cb2:	b15b      	cbz	r3, 8020ccc <__smakebuf_r+0x70>
 8020cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020cb8:	4630      	mov	r0, r6
 8020cba:	f000 f81d 	bl	8020cf8 <_isatty_r>
 8020cbe:	b128      	cbz	r0, 8020ccc <__smakebuf_r+0x70>
 8020cc0:	89a3      	ldrh	r3, [r4, #12]
 8020cc2:	f023 0303 	bic.w	r3, r3, #3
 8020cc6:	f043 0301 	orr.w	r3, r3, #1
 8020cca:	81a3      	strh	r3, [r4, #12]
 8020ccc:	89a3      	ldrh	r3, [r4, #12]
 8020cce:	431d      	orrs	r5, r3
 8020cd0:	81a5      	strh	r5, [r4, #12]
 8020cd2:	e7cf      	b.n	8020c74 <__smakebuf_r+0x18>

08020cd4 <_fstat_r>:
 8020cd4:	b538      	push	{r3, r4, r5, lr}
 8020cd6:	4d07      	ldr	r5, [pc, #28]	; (8020cf4 <_fstat_r+0x20>)
 8020cd8:	2300      	movs	r3, #0
 8020cda:	4604      	mov	r4, r0
 8020cdc:	4608      	mov	r0, r1
 8020cde:	4611      	mov	r1, r2
 8020ce0:	602b      	str	r3, [r5, #0]
 8020ce2:	f7e5 fd1a 	bl	800671a <_fstat>
 8020ce6:	1c43      	adds	r3, r0, #1
 8020ce8:	d102      	bne.n	8020cf0 <_fstat_r+0x1c>
 8020cea:	682b      	ldr	r3, [r5, #0]
 8020cec:	b103      	cbz	r3, 8020cf0 <_fstat_r+0x1c>
 8020cee:	6023      	str	r3, [r4, #0]
 8020cf0:	bd38      	pop	{r3, r4, r5, pc}
 8020cf2:	bf00      	nop
 8020cf4:	20016a84 	.word	0x20016a84

08020cf8 <_isatty_r>:
 8020cf8:	b538      	push	{r3, r4, r5, lr}
 8020cfa:	4d06      	ldr	r5, [pc, #24]	; (8020d14 <_isatty_r+0x1c>)
 8020cfc:	2300      	movs	r3, #0
 8020cfe:	4604      	mov	r4, r0
 8020d00:	4608      	mov	r0, r1
 8020d02:	602b      	str	r3, [r5, #0]
 8020d04:	f7e5 fd19 	bl	800673a <_isatty>
 8020d08:	1c43      	adds	r3, r0, #1
 8020d0a:	d102      	bne.n	8020d12 <_isatty_r+0x1a>
 8020d0c:	682b      	ldr	r3, [r5, #0]
 8020d0e:	b103      	cbz	r3, 8020d12 <_isatty_r+0x1a>
 8020d10:	6023      	str	r3, [r4, #0]
 8020d12:	bd38      	pop	{r3, r4, r5, pc}
 8020d14:	20016a84 	.word	0x20016a84

08020d18 <_malloc_usable_size_r>:
 8020d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020d1c:	1f18      	subs	r0, r3, #4
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	bfbc      	itt	lt
 8020d22:	580b      	ldrlt	r3, [r1, r0]
 8020d24:	18c0      	addlt	r0, r0, r3
 8020d26:	4770      	bx	lr

08020d28 <sinf>:
 8020d28:	ee10 3a10 	vmov	r3, s0
 8020d2c:	b507      	push	{r0, r1, r2, lr}
 8020d2e:	4a1f      	ldr	r2, [pc, #124]	; (8020dac <sinf+0x84>)
 8020d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020d34:	4293      	cmp	r3, r2
 8020d36:	dc07      	bgt.n	8020d48 <sinf+0x20>
 8020d38:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8020db0 <sinf+0x88>
 8020d3c:	2000      	movs	r0, #0
 8020d3e:	b003      	add	sp, #12
 8020d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8020d44:	f000 b894 	b.w	8020e70 <__kernel_sinf>
 8020d48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020d4c:	db04      	blt.n	8020d58 <sinf+0x30>
 8020d4e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8020d52:	b003      	add	sp, #12
 8020d54:	f85d fb04 	ldr.w	pc, [sp], #4
 8020d58:	4668      	mov	r0, sp
 8020d5a:	f000 f8d1 	bl	8020f00 <__ieee754_rem_pio2f>
 8020d5e:	f000 0003 	and.w	r0, r0, #3
 8020d62:	2801      	cmp	r0, #1
 8020d64:	d00a      	beq.n	8020d7c <sinf+0x54>
 8020d66:	2802      	cmp	r0, #2
 8020d68:	d00f      	beq.n	8020d8a <sinf+0x62>
 8020d6a:	b9c0      	cbnz	r0, 8020d9e <sinf+0x76>
 8020d6c:	eddd 0a01 	vldr	s1, [sp, #4]
 8020d70:	ed9d 0a00 	vldr	s0, [sp]
 8020d74:	2001      	movs	r0, #1
 8020d76:	f000 f87b 	bl	8020e70 <__kernel_sinf>
 8020d7a:	e7ea      	b.n	8020d52 <sinf+0x2a>
 8020d7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8020d80:	ed9d 0a00 	vldr	s0, [sp]
 8020d84:	f000 f816 	bl	8020db4 <__kernel_cosf>
 8020d88:	e7e3      	b.n	8020d52 <sinf+0x2a>
 8020d8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8020d8e:	ed9d 0a00 	vldr	s0, [sp]
 8020d92:	2001      	movs	r0, #1
 8020d94:	f000 f86c 	bl	8020e70 <__kernel_sinf>
 8020d98:	eeb1 0a40 	vneg.f32	s0, s0
 8020d9c:	e7d9      	b.n	8020d52 <sinf+0x2a>
 8020d9e:	eddd 0a01 	vldr	s1, [sp, #4]
 8020da2:	ed9d 0a00 	vldr	s0, [sp]
 8020da6:	f000 f805 	bl	8020db4 <__kernel_cosf>
 8020daa:	e7f5      	b.n	8020d98 <sinf+0x70>
 8020dac:	3f490fd8 	.word	0x3f490fd8
 8020db0:	00000000 	.word	0x00000000

08020db4 <__kernel_cosf>:
 8020db4:	ee10 3a10 	vmov	r3, s0
 8020db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020dbc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8020dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020dc4:	da05      	bge.n	8020dd2 <__kernel_cosf+0x1e>
 8020dc6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8020dca:	ee17 2a90 	vmov	r2, s15
 8020dce:	2a00      	cmp	r2, #0
 8020dd0:	d03b      	beq.n	8020e4a <__kernel_cosf+0x96>
 8020dd2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8020dd6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8020e50 <__kernel_cosf+0x9c>
 8020dda:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8020e54 <__kernel_cosf+0xa0>
 8020dde:	4a1e      	ldr	r2, [pc, #120]	; (8020e58 <__kernel_cosf+0xa4>)
 8020de0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020de4:	4293      	cmp	r3, r2
 8020de6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8020e5c <__kernel_cosf+0xa8>
 8020dea:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020dee:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8020e60 <__kernel_cosf+0xac>
 8020df2:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020df6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8020e64 <__kernel_cosf+0xb0>
 8020dfa:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020dfe:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8020e68 <__kernel_cosf+0xb4>
 8020e02:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020e06:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8020e0a:	ee26 6a07 	vmul.f32	s12, s12, s14
 8020e0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8020e12:	eee7 0a06 	vfma.f32	s1, s14, s12
 8020e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020e1a:	dc04      	bgt.n	8020e26 <__kernel_cosf+0x72>
 8020e1c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8020e20:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8020e24:	4770      	bx	lr
 8020e26:	4a11      	ldr	r2, [pc, #68]	; (8020e6c <__kernel_cosf+0xb8>)
 8020e28:	4293      	cmp	r3, r2
 8020e2a:	bfda      	itte	le
 8020e2c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8020e30:	ee07 3a10 	vmovle	s14, r3
 8020e34:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8020e38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020e3c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8020e40:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8020e44:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020e48:	4770      	bx	lr
 8020e4a:	eeb0 0a66 	vmov.f32	s0, s13
 8020e4e:	4770      	bx	lr
 8020e50:	ad47d74e 	.word	0xad47d74e
 8020e54:	310f74f6 	.word	0x310f74f6
 8020e58:	3e999999 	.word	0x3e999999
 8020e5c:	b493f27c 	.word	0xb493f27c
 8020e60:	37d00d01 	.word	0x37d00d01
 8020e64:	bab60b61 	.word	0xbab60b61
 8020e68:	3d2aaaab 	.word	0x3d2aaaab
 8020e6c:	3f480000 	.word	0x3f480000

08020e70 <__kernel_sinf>:
 8020e70:	ee10 3a10 	vmov	r3, s0
 8020e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020e78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8020e7c:	da04      	bge.n	8020e88 <__kernel_sinf+0x18>
 8020e7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8020e82:	ee17 3a90 	vmov	r3, s15
 8020e86:	b35b      	cbz	r3, 8020ee0 <__kernel_sinf+0x70>
 8020e88:	ee20 7a00 	vmul.f32	s14, s0, s0
 8020e8c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8020ee4 <__kernel_sinf+0x74>
 8020e90:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8020ee8 <__kernel_sinf+0x78>
 8020e94:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020e98:	eddf 7a14 	vldr	s15, [pc, #80]	; 8020eec <__kernel_sinf+0x7c>
 8020e9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020ea0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8020ef0 <__kernel_sinf+0x80>
 8020ea4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020ea8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8020ef4 <__kernel_sinf+0x84>
 8020eac:	ee60 6a07 	vmul.f32	s13, s0, s14
 8020eb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020eb4:	b930      	cbnz	r0, 8020ec4 <__kernel_sinf+0x54>
 8020eb6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8020ef8 <__kernel_sinf+0x88>
 8020eba:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020ebe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8020ec2:	4770      	bx	lr
 8020ec4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8020ec8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8020ecc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8020ed0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8020ed4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8020efc <__kernel_sinf+0x8c>
 8020ed8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8020edc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8020ee0:	4770      	bx	lr
 8020ee2:	bf00      	nop
 8020ee4:	2f2ec9d3 	.word	0x2f2ec9d3
 8020ee8:	b2d72f34 	.word	0xb2d72f34
 8020eec:	3638ef1b 	.word	0x3638ef1b
 8020ef0:	b9500d01 	.word	0xb9500d01
 8020ef4:	3c088889 	.word	0x3c088889
 8020ef8:	be2aaaab 	.word	0xbe2aaaab
 8020efc:	3e2aaaab 	.word	0x3e2aaaab

08020f00 <__ieee754_rem_pio2f>:
 8020f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f02:	ee10 6a10 	vmov	r6, s0
 8020f06:	4b86      	ldr	r3, [pc, #536]	; (8021120 <__ieee754_rem_pio2f+0x220>)
 8020f08:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8020f0c:	429d      	cmp	r5, r3
 8020f0e:	b087      	sub	sp, #28
 8020f10:	4604      	mov	r4, r0
 8020f12:	dc05      	bgt.n	8020f20 <__ieee754_rem_pio2f+0x20>
 8020f14:	2300      	movs	r3, #0
 8020f16:	ed80 0a00 	vstr	s0, [r0]
 8020f1a:	6043      	str	r3, [r0, #4]
 8020f1c:	2000      	movs	r0, #0
 8020f1e:	e020      	b.n	8020f62 <__ieee754_rem_pio2f+0x62>
 8020f20:	4b80      	ldr	r3, [pc, #512]	; (8021124 <__ieee754_rem_pio2f+0x224>)
 8020f22:	429d      	cmp	r5, r3
 8020f24:	dc38      	bgt.n	8020f98 <__ieee754_rem_pio2f+0x98>
 8020f26:	2e00      	cmp	r6, #0
 8020f28:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8021128 <__ieee754_rem_pio2f+0x228>
 8020f2c:	4b7f      	ldr	r3, [pc, #508]	; (802112c <__ieee754_rem_pio2f+0x22c>)
 8020f2e:	f025 050f 	bic.w	r5, r5, #15
 8020f32:	dd18      	ble.n	8020f66 <__ieee754_rem_pio2f+0x66>
 8020f34:	429d      	cmp	r5, r3
 8020f36:	ee70 7a47 	vsub.f32	s15, s0, s14
 8020f3a:	bf09      	itett	eq
 8020f3c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8021130 <__ieee754_rem_pio2f+0x230>
 8020f40:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8021134 <__ieee754_rem_pio2f+0x234>
 8020f44:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8020f48:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8021138 <__ieee754_rem_pio2f+0x238>
 8020f4c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8020f50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020f54:	edc0 6a00 	vstr	s13, [r0]
 8020f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020f5c:	edc0 7a01 	vstr	s15, [r0, #4]
 8020f60:	2001      	movs	r0, #1
 8020f62:	b007      	add	sp, #28
 8020f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f66:	429d      	cmp	r5, r3
 8020f68:	ee70 7a07 	vadd.f32	s15, s0, s14
 8020f6c:	bf09      	itett	eq
 8020f6e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8021130 <__ieee754_rem_pio2f+0x230>
 8020f72:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8021134 <__ieee754_rem_pio2f+0x234>
 8020f76:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8020f7a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8021138 <__ieee754_rem_pio2f+0x238>
 8020f7e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8020f82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020f86:	edc0 6a00 	vstr	s13, [r0]
 8020f8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020f8e:	edc0 7a01 	vstr	s15, [r0, #4]
 8020f92:	f04f 30ff 	mov.w	r0, #4294967295
 8020f96:	e7e4      	b.n	8020f62 <__ieee754_rem_pio2f+0x62>
 8020f98:	4b68      	ldr	r3, [pc, #416]	; (802113c <__ieee754_rem_pio2f+0x23c>)
 8020f9a:	429d      	cmp	r5, r3
 8020f9c:	dc71      	bgt.n	8021082 <__ieee754_rem_pio2f+0x182>
 8020f9e:	f000 f8db 	bl	8021158 <fabsf>
 8020fa2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8021140 <__ieee754_rem_pio2f+0x240>
 8020fa6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8020faa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8020fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020fb6:	ee17 0a90 	vmov	r0, s15
 8020fba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8021128 <__ieee754_rem_pio2f+0x228>
 8020fbe:	eea7 0a67 	vfms.f32	s0, s14, s15
 8020fc2:	281f      	cmp	r0, #31
 8020fc4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8021134 <__ieee754_rem_pio2f+0x234>
 8020fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020fcc:	eeb1 6a47 	vneg.f32	s12, s14
 8020fd0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8020fd4:	ee16 2a90 	vmov	r2, s13
 8020fd8:	dc1c      	bgt.n	8021014 <__ieee754_rem_pio2f+0x114>
 8020fda:	495a      	ldr	r1, [pc, #360]	; (8021144 <__ieee754_rem_pio2f+0x244>)
 8020fdc:	1e47      	subs	r7, r0, #1
 8020fde:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8020fe2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8020fe6:	428b      	cmp	r3, r1
 8020fe8:	d014      	beq.n	8021014 <__ieee754_rem_pio2f+0x114>
 8020fea:	6022      	str	r2, [r4, #0]
 8020fec:	ed94 7a00 	vldr	s14, [r4]
 8020ff0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8020ff4:	2e00      	cmp	r6, #0
 8020ff6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020ffa:	ed84 0a01 	vstr	s0, [r4, #4]
 8020ffe:	dab0      	bge.n	8020f62 <__ieee754_rem_pio2f+0x62>
 8021000:	eeb1 7a47 	vneg.f32	s14, s14
 8021004:	eeb1 0a40 	vneg.f32	s0, s0
 8021008:	ed84 7a00 	vstr	s14, [r4]
 802100c:	ed84 0a01 	vstr	s0, [r4, #4]
 8021010:	4240      	negs	r0, r0
 8021012:	e7a6      	b.n	8020f62 <__ieee754_rem_pio2f+0x62>
 8021014:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8021018:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 802101c:	2908      	cmp	r1, #8
 802101e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8021022:	dde2      	ble.n	8020fea <__ieee754_rem_pio2f+0xea>
 8021024:	eddf 5a42 	vldr	s11, [pc, #264]	; 8021130 <__ieee754_rem_pio2f+0x230>
 8021028:	eef0 6a40 	vmov.f32	s13, s0
 802102c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8021030:	ee70 7a66 	vsub.f32	s15, s0, s13
 8021034:	eee6 7a25 	vfma.f32	s15, s12, s11
 8021038:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8021138 <__ieee754_rem_pio2f+0x238>
 802103c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8021040:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8021044:	ee15 2a90 	vmov	r2, s11
 8021048:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802104c:	1a5b      	subs	r3, r3, r1
 802104e:	2b19      	cmp	r3, #25
 8021050:	dc04      	bgt.n	802105c <__ieee754_rem_pio2f+0x15c>
 8021052:	edc4 5a00 	vstr	s11, [r4]
 8021056:	eeb0 0a66 	vmov.f32	s0, s13
 802105a:	e7c7      	b.n	8020fec <__ieee754_rem_pio2f+0xec>
 802105c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8021148 <__ieee754_rem_pio2f+0x248>
 8021060:	eeb0 0a66 	vmov.f32	s0, s13
 8021064:	eea6 0a25 	vfma.f32	s0, s12, s11
 8021068:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802106c:	eddf 6a37 	vldr	s13, [pc, #220]	; 802114c <__ieee754_rem_pio2f+0x24c>
 8021070:	eee6 7a25 	vfma.f32	s15, s12, s11
 8021074:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8021078:	ee30 7a67 	vsub.f32	s14, s0, s15
 802107c:	ed84 7a00 	vstr	s14, [r4]
 8021080:	e7b4      	b.n	8020fec <__ieee754_rem_pio2f+0xec>
 8021082:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8021086:	db06      	blt.n	8021096 <__ieee754_rem_pio2f+0x196>
 8021088:	ee70 7a40 	vsub.f32	s15, s0, s0
 802108c:	edc0 7a01 	vstr	s15, [r0, #4]
 8021090:	edc0 7a00 	vstr	s15, [r0]
 8021094:	e742      	b.n	8020f1c <__ieee754_rem_pio2f+0x1c>
 8021096:	15ea      	asrs	r2, r5, #23
 8021098:	3a86      	subs	r2, #134	; 0x86
 802109a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802109e:	ee07 3a90 	vmov	s15, r3
 80210a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80210a6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8021150 <__ieee754_rem_pio2f+0x250>
 80210aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80210ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80210b2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80210b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80210ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80210be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80210c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80210c6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80210ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80210ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80210d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210d6:	edcd 7a05 	vstr	s15, [sp, #20]
 80210da:	d11e      	bne.n	802111a <__ieee754_rem_pio2f+0x21a>
 80210dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80210e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210e4:	bf14      	ite	ne
 80210e6:	2302      	movne	r3, #2
 80210e8:	2301      	moveq	r3, #1
 80210ea:	491a      	ldr	r1, [pc, #104]	; (8021154 <__ieee754_rem_pio2f+0x254>)
 80210ec:	9101      	str	r1, [sp, #4]
 80210ee:	2102      	movs	r1, #2
 80210f0:	9100      	str	r1, [sp, #0]
 80210f2:	a803      	add	r0, sp, #12
 80210f4:	4621      	mov	r1, r4
 80210f6:	f000 f837 	bl	8021168 <__kernel_rem_pio2f>
 80210fa:	2e00      	cmp	r6, #0
 80210fc:	f6bf af31 	bge.w	8020f62 <__ieee754_rem_pio2f+0x62>
 8021100:	edd4 7a00 	vldr	s15, [r4]
 8021104:	eef1 7a67 	vneg.f32	s15, s15
 8021108:	edc4 7a00 	vstr	s15, [r4]
 802110c:	edd4 7a01 	vldr	s15, [r4, #4]
 8021110:	eef1 7a67 	vneg.f32	s15, s15
 8021114:	edc4 7a01 	vstr	s15, [r4, #4]
 8021118:	e77a      	b.n	8021010 <__ieee754_rem_pio2f+0x110>
 802111a:	2303      	movs	r3, #3
 802111c:	e7e5      	b.n	80210ea <__ieee754_rem_pio2f+0x1ea>
 802111e:	bf00      	nop
 8021120:	3f490fd8 	.word	0x3f490fd8
 8021124:	4016cbe3 	.word	0x4016cbe3
 8021128:	3fc90f80 	.word	0x3fc90f80
 802112c:	3fc90fd0 	.word	0x3fc90fd0
 8021130:	37354400 	.word	0x37354400
 8021134:	37354443 	.word	0x37354443
 8021138:	2e85a308 	.word	0x2e85a308
 802113c:	43490f80 	.word	0x43490f80
 8021140:	3f22f984 	.word	0x3f22f984
 8021144:	08024230 	.word	0x08024230
 8021148:	2e85a300 	.word	0x2e85a300
 802114c:	248d3132 	.word	0x248d3132
 8021150:	43800000 	.word	0x43800000
 8021154:	080242b0 	.word	0x080242b0

08021158 <fabsf>:
 8021158:	ee10 3a10 	vmov	r3, s0
 802115c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021160:	ee00 3a10 	vmov	s0, r3
 8021164:	4770      	bx	lr
	...

08021168 <__kernel_rem_pio2f>:
 8021168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802116c:	ed2d 8b04 	vpush	{d8-d9}
 8021170:	b0d9      	sub	sp, #356	; 0x164
 8021172:	4688      	mov	r8, r1
 8021174:	9002      	str	r0, [sp, #8]
 8021176:	49b8      	ldr	r1, [pc, #736]	; (8021458 <__kernel_rem_pio2f+0x2f0>)
 8021178:	9866      	ldr	r0, [sp, #408]	; 0x198
 802117a:	9301      	str	r3, [sp, #4]
 802117c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8021180:	9901      	ldr	r1, [sp, #4]
 8021182:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8021184:	f101 3bff 	add.w	fp, r1, #4294967295
 8021188:	1d11      	adds	r1, r2, #4
 802118a:	db25      	blt.n	80211d8 <__kernel_rem_pio2f+0x70>
 802118c:	1ed0      	subs	r0, r2, #3
 802118e:	bf48      	it	mi
 8021190:	1d10      	addmi	r0, r2, #4
 8021192:	10c0      	asrs	r0, r0, #3
 8021194:	1c45      	adds	r5, r0, #1
 8021196:	00e9      	lsls	r1, r5, #3
 8021198:	eba0 070b 	sub.w	r7, r0, fp
 802119c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8021468 <__kernel_rem_pio2f+0x300>
 80211a0:	9103      	str	r1, [sp, #12]
 80211a2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80211a6:	eb0a 0c0b 	add.w	ip, sl, fp
 80211aa:	ae1c      	add	r6, sp, #112	; 0x70
 80211ac:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80211b0:	2400      	movs	r4, #0
 80211b2:	4564      	cmp	r4, ip
 80211b4:	dd12      	ble.n	80211dc <__kernel_rem_pio2f+0x74>
 80211b6:	9901      	ldr	r1, [sp, #4]
 80211b8:	ac1c      	add	r4, sp, #112	; 0x70
 80211ba:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80211be:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80211c2:	f04f 0c00 	mov.w	ip, #0
 80211c6:	45d4      	cmp	ip, sl
 80211c8:	dc27      	bgt.n	802121a <__kernel_rem_pio2f+0xb2>
 80211ca:	f8dd e008 	ldr.w	lr, [sp, #8]
 80211ce:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8021468 <__kernel_rem_pio2f+0x300>
 80211d2:	4627      	mov	r7, r4
 80211d4:	2600      	movs	r6, #0
 80211d6:	e016      	b.n	8021206 <__kernel_rem_pio2f+0x9e>
 80211d8:	2000      	movs	r0, #0
 80211da:	e7db      	b.n	8021194 <__kernel_rem_pio2f+0x2c>
 80211dc:	42e7      	cmn	r7, r4
 80211de:	bf5d      	ittte	pl
 80211e0:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80211e4:	ee07 1a90 	vmovpl	s15, r1
 80211e8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80211ec:	eef0 7a47 	vmovmi.f32	s15, s14
 80211f0:	ece6 7a01 	vstmia	r6!, {s15}
 80211f4:	3401      	adds	r4, #1
 80211f6:	e7dc      	b.n	80211b2 <__kernel_rem_pio2f+0x4a>
 80211f8:	ecfe 6a01 	vldmia	lr!, {s13}
 80211fc:	ed97 7a00 	vldr	s14, [r7]
 8021200:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021204:	3601      	adds	r6, #1
 8021206:	455e      	cmp	r6, fp
 8021208:	f1a7 0704 	sub.w	r7, r7, #4
 802120c:	ddf4      	ble.n	80211f8 <__kernel_rem_pio2f+0x90>
 802120e:	ece9 7a01 	vstmia	r9!, {s15}
 8021212:	f10c 0c01 	add.w	ip, ip, #1
 8021216:	3404      	adds	r4, #4
 8021218:	e7d5      	b.n	80211c6 <__kernel_rem_pio2f+0x5e>
 802121a:	a908      	add	r1, sp, #32
 802121c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021220:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8021224:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8021464 <__kernel_rem_pio2f+0x2fc>
 8021228:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8021460 <__kernel_rem_pio2f+0x2f8>
 802122c:	9105      	str	r1, [sp, #20]
 802122e:	9304      	str	r3, [sp, #16]
 8021230:	4656      	mov	r6, sl
 8021232:	00b3      	lsls	r3, r6, #2
 8021234:	9306      	str	r3, [sp, #24]
 8021236:	ab58      	add	r3, sp, #352	; 0x160
 8021238:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802123c:	ac08      	add	r4, sp, #32
 802123e:	ab44      	add	r3, sp, #272	; 0x110
 8021240:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8021244:	46a4      	mov	ip, r4
 8021246:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802124a:	4637      	mov	r7, r6
 802124c:	2f00      	cmp	r7, #0
 802124e:	f1a0 0004 	sub.w	r0, r0, #4
 8021252:	dc4a      	bgt.n	80212ea <__kernel_rem_pio2f+0x182>
 8021254:	4628      	mov	r0, r5
 8021256:	9207      	str	r2, [sp, #28]
 8021258:	f000 f9f8 	bl	802164c <scalbnf>
 802125c:	eeb0 8a40 	vmov.f32	s16, s0
 8021260:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8021264:	ee28 0a00 	vmul.f32	s0, s16, s0
 8021268:	f000 fa56 	bl	8021718 <floorf>
 802126c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8021270:	eea0 8a67 	vfms.f32	s16, s0, s15
 8021274:	2d00      	cmp	r5, #0
 8021276:	9a07      	ldr	r2, [sp, #28]
 8021278:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802127c:	ee17 9a90 	vmov	r9, s15
 8021280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021284:	ee38 8a67 	vsub.f32	s16, s16, s15
 8021288:	dd41      	ble.n	802130e <__kernel_rem_pio2f+0x1a6>
 802128a:	f106 3cff 	add.w	ip, r6, #4294967295
 802128e:	ab08      	add	r3, sp, #32
 8021290:	f1c5 0e08 	rsb	lr, r5, #8
 8021294:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8021298:	fa47 f00e 	asr.w	r0, r7, lr
 802129c:	4481      	add	r9, r0
 802129e:	fa00 f00e 	lsl.w	r0, r0, lr
 80212a2:	1a3f      	subs	r7, r7, r0
 80212a4:	f1c5 0007 	rsb	r0, r5, #7
 80212a8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80212ac:	4107      	asrs	r7, r0
 80212ae:	2f00      	cmp	r7, #0
 80212b0:	dd3c      	ble.n	802132c <__kernel_rem_pio2f+0x1c4>
 80212b2:	f04f 0e00 	mov.w	lr, #0
 80212b6:	f109 0901 	add.w	r9, r9, #1
 80212ba:	4671      	mov	r1, lr
 80212bc:	4576      	cmp	r6, lr
 80212be:	dc67      	bgt.n	8021390 <__kernel_rem_pio2f+0x228>
 80212c0:	2d00      	cmp	r5, #0
 80212c2:	dd03      	ble.n	80212cc <__kernel_rem_pio2f+0x164>
 80212c4:	2d01      	cmp	r5, #1
 80212c6:	d074      	beq.n	80213b2 <__kernel_rem_pio2f+0x24a>
 80212c8:	2d02      	cmp	r5, #2
 80212ca:	d07b      	beq.n	80213c4 <__kernel_rem_pio2f+0x25c>
 80212cc:	2f02      	cmp	r7, #2
 80212ce:	d12d      	bne.n	802132c <__kernel_rem_pio2f+0x1c4>
 80212d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80212d4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80212d8:	b341      	cbz	r1, 802132c <__kernel_rem_pio2f+0x1c4>
 80212da:	4628      	mov	r0, r5
 80212dc:	9207      	str	r2, [sp, #28]
 80212de:	f000 f9b5 	bl	802164c <scalbnf>
 80212e2:	9a07      	ldr	r2, [sp, #28]
 80212e4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80212e8:	e020      	b.n	802132c <__kernel_rem_pio2f+0x1c4>
 80212ea:	ee60 7a28 	vmul.f32	s15, s0, s17
 80212ee:	3f01      	subs	r7, #1
 80212f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80212f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80212f8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80212fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021300:	ecac 0a01 	vstmia	ip!, {s0}
 8021304:	ed90 0a00 	vldr	s0, [r0]
 8021308:	ee37 0a80 	vadd.f32	s0, s15, s0
 802130c:	e79e      	b.n	802124c <__kernel_rem_pio2f+0xe4>
 802130e:	d105      	bne.n	802131c <__kernel_rem_pio2f+0x1b4>
 8021310:	1e70      	subs	r0, r6, #1
 8021312:	ab08      	add	r3, sp, #32
 8021314:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8021318:	11ff      	asrs	r7, r7, #7
 802131a:	e7c8      	b.n	80212ae <__kernel_rem_pio2f+0x146>
 802131c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021320:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8021324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021328:	da30      	bge.n	802138c <__kernel_rem_pio2f+0x224>
 802132a:	2700      	movs	r7, #0
 802132c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8021330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021334:	f040 809a 	bne.w	802146c <__kernel_rem_pio2f+0x304>
 8021338:	1e74      	subs	r4, r6, #1
 802133a:	46a4      	mov	ip, r4
 802133c:	2100      	movs	r1, #0
 802133e:	45d4      	cmp	ip, sl
 8021340:	da47      	bge.n	80213d2 <__kernel_rem_pio2f+0x26a>
 8021342:	2900      	cmp	r1, #0
 8021344:	d063      	beq.n	802140e <__kernel_rem_pio2f+0x2a6>
 8021346:	ab08      	add	r3, sp, #32
 8021348:	3d08      	subs	r5, #8
 802134a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802134e:	2b00      	cmp	r3, #0
 8021350:	d07f      	beq.n	8021452 <__kernel_rem_pio2f+0x2ea>
 8021352:	4628      	mov	r0, r5
 8021354:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021358:	f000 f978 	bl	802164c <scalbnf>
 802135c:	1c63      	adds	r3, r4, #1
 802135e:	aa44      	add	r2, sp, #272	; 0x110
 8021360:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8021464 <__kernel_rem_pio2f+0x2fc>
 8021364:	0099      	lsls	r1, r3, #2
 8021366:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802136a:	4623      	mov	r3, r4
 802136c:	2b00      	cmp	r3, #0
 802136e:	f280 80ad 	bge.w	80214cc <__kernel_rem_pio2f+0x364>
 8021372:	4623      	mov	r3, r4
 8021374:	2b00      	cmp	r3, #0
 8021376:	f2c0 80cb 	blt.w	8021510 <__kernel_rem_pio2f+0x3a8>
 802137a:	aa44      	add	r2, sp, #272	; 0x110
 802137c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021380:	4e36      	ldr	r6, [pc, #216]	; (802145c <__kernel_rem_pio2f+0x2f4>)
 8021382:	eddf 7a39 	vldr	s15, [pc, #228]	; 8021468 <__kernel_rem_pio2f+0x300>
 8021386:	2000      	movs	r0, #0
 8021388:	1ae2      	subs	r2, r4, r3
 802138a:	e0b6      	b.n	80214fa <__kernel_rem_pio2f+0x392>
 802138c:	2702      	movs	r7, #2
 802138e:	e790      	b.n	80212b2 <__kernel_rem_pio2f+0x14a>
 8021390:	6820      	ldr	r0, [r4, #0]
 8021392:	b949      	cbnz	r1, 80213a8 <__kernel_rem_pio2f+0x240>
 8021394:	b118      	cbz	r0, 802139e <__kernel_rem_pio2f+0x236>
 8021396:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802139a:	6020      	str	r0, [r4, #0]
 802139c:	2001      	movs	r0, #1
 802139e:	f10e 0e01 	add.w	lr, lr, #1
 80213a2:	3404      	adds	r4, #4
 80213a4:	4601      	mov	r1, r0
 80213a6:	e789      	b.n	80212bc <__kernel_rem_pio2f+0x154>
 80213a8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80213ac:	6020      	str	r0, [r4, #0]
 80213ae:	4608      	mov	r0, r1
 80213b0:	e7f5      	b.n	802139e <__kernel_rem_pio2f+0x236>
 80213b2:	1e74      	subs	r4, r6, #1
 80213b4:	ab08      	add	r3, sp, #32
 80213b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80213ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80213be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80213c2:	e783      	b.n	80212cc <__kernel_rem_pio2f+0x164>
 80213c4:	1e74      	subs	r4, r6, #1
 80213c6:	ab08      	add	r3, sp, #32
 80213c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80213cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80213d0:	e7f5      	b.n	80213be <__kernel_rem_pio2f+0x256>
 80213d2:	ab08      	add	r3, sp, #32
 80213d4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80213d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80213dc:	4301      	orrs	r1, r0
 80213de:	e7ae      	b.n	802133e <__kernel_rem_pio2f+0x1d6>
 80213e0:	3001      	adds	r0, #1
 80213e2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80213e6:	2f00      	cmp	r7, #0
 80213e8:	d0fa      	beq.n	80213e0 <__kernel_rem_pio2f+0x278>
 80213ea:	9b06      	ldr	r3, [sp, #24]
 80213ec:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80213f0:	eb0d 0403 	add.w	r4, sp, r3
 80213f4:	9b01      	ldr	r3, [sp, #4]
 80213f6:	18f7      	adds	r7, r6, r3
 80213f8:	ab1c      	add	r3, sp, #112	; 0x70
 80213fa:	f106 0c01 	add.w	ip, r6, #1
 80213fe:	3c4c      	subs	r4, #76	; 0x4c
 8021400:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021404:	4430      	add	r0, r6
 8021406:	4560      	cmp	r0, ip
 8021408:	da04      	bge.n	8021414 <__kernel_rem_pio2f+0x2ac>
 802140a:	4606      	mov	r6, r0
 802140c:	e711      	b.n	8021232 <__kernel_rem_pio2f+0xca>
 802140e:	9c05      	ldr	r4, [sp, #20]
 8021410:	2001      	movs	r0, #1
 8021412:	e7e6      	b.n	80213e2 <__kernel_rem_pio2f+0x27a>
 8021414:	9b04      	ldr	r3, [sp, #16]
 8021416:	f8dd e008 	ldr.w	lr, [sp, #8]
 802141a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802141e:	9306      	str	r3, [sp, #24]
 8021420:	ee07 3a90 	vmov	s15, r3
 8021424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021428:	2600      	movs	r6, #0
 802142a:	ece7 7a01 	vstmia	r7!, {s15}
 802142e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8021468 <__kernel_rem_pio2f+0x300>
 8021432:	46b9      	mov	r9, r7
 8021434:	455e      	cmp	r6, fp
 8021436:	dd04      	ble.n	8021442 <__kernel_rem_pio2f+0x2da>
 8021438:	ece4 7a01 	vstmia	r4!, {s15}
 802143c:	f10c 0c01 	add.w	ip, ip, #1
 8021440:	e7e1      	b.n	8021406 <__kernel_rem_pio2f+0x29e>
 8021442:	ecfe 6a01 	vldmia	lr!, {s13}
 8021446:	ed39 7a01 	vldmdb	r9!, {s14}
 802144a:	3601      	adds	r6, #1
 802144c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021450:	e7f0      	b.n	8021434 <__kernel_rem_pio2f+0x2cc>
 8021452:	3c01      	subs	r4, #1
 8021454:	e777      	b.n	8021346 <__kernel_rem_pio2f+0x1de>
 8021456:	bf00      	nop
 8021458:	080245f4 	.word	0x080245f4
 802145c:	080245c8 	.word	0x080245c8
 8021460:	43800000 	.word	0x43800000
 8021464:	3b800000 	.word	0x3b800000
 8021468:	00000000 	.word	0x00000000
 802146c:	9b03      	ldr	r3, [sp, #12]
 802146e:	eeb0 0a48 	vmov.f32	s0, s16
 8021472:	1a98      	subs	r0, r3, r2
 8021474:	f000 f8ea 	bl	802164c <scalbnf>
 8021478:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8021460 <__kernel_rem_pio2f+0x2f8>
 802147c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8021480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021484:	db19      	blt.n	80214ba <__kernel_rem_pio2f+0x352>
 8021486:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8021464 <__kernel_rem_pio2f+0x2fc>
 802148a:	ee60 7a27 	vmul.f32	s15, s0, s15
 802148e:	aa08      	add	r2, sp, #32
 8021490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021494:	1c74      	adds	r4, r6, #1
 8021496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802149a:	3508      	adds	r5, #8
 802149c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80214a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80214a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80214a8:	ee10 3a10 	vmov	r3, s0
 80214ac:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80214b0:	ee17 3a90 	vmov	r3, s15
 80214b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80214b8:	e74b      	b.n	8021352 <__kernel_rem_pio2f+0x1ea>
 80214ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80214be:	aa08      	add	r2, sp, #32
 80214c0:	ee10 3a10 	vmov	r3, s0
 80214c4:	4634      	mov	r4, r6
 80214c6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80214ca:	e742      	b.n	8021352 <__kernel_rem_pio2f+0x1ea>
 80214cc:	a808      	add	r0, sp, #32
 80214ce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80214d2:	9001      	str	r0, [sp, #4]
 80214d4:	ee07 0a90 	vmov	s15, r0
 80214d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80214dc:	3b01      	subs	r3, #1
 80214de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80214e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80214e6:	ed62 7a01 	vstmdb	r2!, {s15}
 80214ea:	e73f      	b.n	802136c <__kernel_rem_pio2f+0x204>
 80214ec:	ecf6 6a01 	vldmia	r6!, {s13}
 80214f0:	ecb5 7a01 	vldmia	r5!, {s14}
 80214f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80214f8:	3001      	adds	r0, #1
 80214fa:	4550      	cmp	r0, sl
 80214fc:	dc01      	bgt.n	8021502 <__kernel_rem_pio2f+0x39a>
 80214fe:	4290      	cmp	r0, r2
 8021500:	ddf4      	ble.n	80214ec <__kernel_rem_pio2f+0x384>
 8021502:	a858      	add	r0, sp, #352	; 0x160
 8021504:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8021508:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 802150c:	3b01      	subs	r3, #1
 802150e:	e731      	b.n	8021374 <__kernel_rem_pio2f+0x20c>
 8021510:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8021512:	2b02      	cmp	r3, #2
 8021514:	dc09      	bgt.n	802152a <__kernel_rem_pio2f+0x3c2>
 8021516:	2b00      	cmp	r3, #0
 8021518:	dc2b      	bgt.n	8021572 <__kernel_rem_pio2f+0x40a>
 802151a:	d044      	beq.n	80215a6 <__kernel_rem_pio2f+0x43e>
 802151c:	f009 0007 	and.w	r0, r9, #7
 8021520:	b059      	add	sp, #356	; 0x164
 8021522:	ecbd 8b04 	vpop	{d8-d9}
 8021526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802152a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802152c:	2b03      	cmp	r3, #3
 802152e:	d1f5      	bne.n	802151c <__kernel_rem_pio2f+0x3b4>
 8021530:	aa30      	add	r2, sp, #192	; 0xc0
 8021532:	1f0b      	subs	r3, r1, #4
 8021534:	4413      	add	r3, r2
 8021536:	461a      	mov	r2, r3
 8021538:	4620      	mov	r0, r4
 802153a:	2800      	cmp	r0, #0
 802153c:	f1a2 0204 	sub.w	r2, r2, #4
 8021540:	dc52      	bgt.n	80215e8 <__kernel_rem_pio2f+0x480>
 8021542:	4622      	mov	r2, r4
 8021544:	2a01      	cmp	r2, #1
 8021546:	f1a3 0304 	sub.w	r3, r3, #4
 802154a:	dc5d      	bgt.n	8021608 <__kernel_rem_pio2f+0x4a0>
 802154c:	ab30      	add	r3, sp, #192	; 0xc0
 802154e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8021468 <__kernel_rem_pio2f+0x300>
 8021552:	440b      	add	r3, r1
 8021554:	2c01      	cmp	r4, #1
 8021556:	dc67      	bgt.n	8021628 <__kernel_rem_pio2f+0x4c0>
 8021558:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802155c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8021560:	2f00      	cmp	r7, #0
 8021562:	d167      	bne.n	8021634 <__kernel_rem_pio2f+0x4cc>
 8021564:	edc8 6a00 	vstr	s13, [r8]
 8021568:	ed88 7a01 	vstr	s14, [r8, #4]
 802156c:	edc8 7a02 	vstr	s15, [r8, #8]
 8021570:	e7d4      	b.n	802151c <__kernel_rem_pio2f+0x3b4>
 8021572:	ab30      	add	r3, sp, #192	; 0xc0
 8021574:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8021468 <__kernel_rem_pio2f+0x300>
 8021578:	440b      	add	r3, r1
 802157a:	4622      	mov	r2, r4
 802157c:	2a00      	cmp	r2, #0
 802157e:	da24      	bge.n	80215ca <__kernel_rem_pio2f+0x462>
 8021580:	b34f      	cbz	r7, 80215d6 <__kernel_rem_pio2f+0x46e>
 8021582:	eef1 7a47 	vneg.f32	s15, s14
 8021586:	edc8 7a00 	vstr	s15, [r8]
 802158a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802158e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021592:	aa31      	add	r2, sp, #196	; 0xc4
 8021594:	2301      	movs	r3, #1
 8021596:	429c      	cmp	r4, r3
 8021598:	da20      	bge.n	80215dc <__kernel_rem_pio2f+0x474>
 802159a:	b10f      	cbz	r7, 80215a0 <__kernel_rem_pio2f+0x438>
 802159c:	eef1 7a67 	vneg.f32	s15, s15
 80215a0:	edc8 7a01 	vstr	s15, [r8, #4]
 80215a4:	e7ba      	b.n	802151c <__kernel_rem_pio2f+0x3b4>
 80215a6:	ab30      	add	r3, sp, #192	; 0xc0
 80215a8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8021468 <__kernel_rem_pio2f+0x300>
 80215ac:	440b      	add	r3, r1
 80215ae:	2c00      	cmp	r4, #0
 80215b0:	da05      	bge.n	80215be <__kernel_rem_pio2f+0x456>
 80215b2:	b10f      	cbz	r7, 80215b8 <__kernel_rem_pio2f+0x450>
 80215b4:	eef1 7a67 	vneg.f32	s15, s15
 80215b8:	edc8 7a00 	vstr	s15, [r8]
 80215bc:	e7ae      	b.n	802151c <__kernel_rem_pio2f+0x3b4>
 80215be:	ed33 7a01 	vldmdb	r3!, {s14}
 80215c2:	3c01      	subs	r4, #1
 80215c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80215c8:	e7f1      	b.n	80215ae <__kernel_rem_pio2f+0x446>
 80215ca:	ed73 7a01 	vldmdb	r3!, {s15}
 80215ce:	3a01      	subs	r2, #1
 80215d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80215d4:	e7d2      	b.n	802157c <__kernel_rem_pio2f+0x414>
 80215d6:	eef0 7a47 	vmov.f32	s15, s14
 80215da:	e7d4      	b.n	8021586 <__kernel_rem_pio2f+0x41e>
 80215dc:	ecb2 7a01 	vldmia	r2!, {s14}
 80215e0:	3301      	adds	r3, #1
 80215e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80215e6:	e7d6      	b.n	8021596 <__kernel_rem_pio2f+0x42e>
 80215e8:	edd2 7a00 	vldr	s15, [r2]
 80215ec:	edd2 6a01 	vldr	s13, [r2, #4]
 80215f0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80215f4:	3801      	subs	r0, #1
 80215f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80215fa:	ed82 7a00 	vstr	s14, [r2]
 80215fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021602:	edc2 7a01 	vstr	s15, [r2, #4]
 8021606:	e798      	b.n	802153a <__kernel_rem_pio2f+0x3d2>
 8021608:	edd3 7a00 	vldr	s15, [r3]
 802160c:	edd3 6a01 	vldr	s13, [r3, #4]
 8021610:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021614:	3a01      	subs	r2, #1
 8021616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802161a:	ed83 7a00 	vstr	s14, [r3]
 802161e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021622:	edc3 7a01 	vstr	s15, [r3, #4]
 8021626:	e78d      	b.n	8021544 <__kernel_rem_pio2f+0x3dc>
 8021628:	ed33 7a01 	vldmdb	r3!, {s14}
 802162c:	3c01      	subs	r4, #1
 802162e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021632:	e78f      	b.n	8021554 <__kernel_rem_pio2f+0x3ec>
 8021634:	eef1 6a66 	vneg.f32	s13, s13
 8021638:	eeb1 7a47 	vneg.f32	s14, s14
 802163c:	edc8 6a00 	vstr	s13, [r8]
 8021640:	ed88 7a01 	vstr	s14, [r8, #4]
 8021644:	eef1 7a67 	vneg.f32	s15, s15
 8021648:	e790      	b.n	802156c <__kernel_rem_pio2f+0x404>
 802164a:	bf00      	nop

0802164c <scalbnf>:
 802164c:	ee10 3a10 	vmov	r3, s0
 8021650:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8021654:	d02b      	beq.n	80216ae <scalbnf+0x62>
 8021656:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802165a:	d302      	bcc.n	8021662 <scalbnf+0x16>
 802165c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021660:	4770      	bx	lr
 8021662:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8021666:	d123      	bne.n	80216b0 <scalbnf+0x64>
 8021668:	4b24      	ldr	r3, [pc, #144]	; (80216fc <scalbnf+0xb0>)
 802166a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8021700 <scalbnf+0xb4>
 802166e:	4298      	cmp	r0, r3
 8021670:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021674:	db17      	blt.n	80216a6 <scalbnf+0x5a>
 8021676:	ee10 3a10 	vmov	r3, s0
 802167a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802167e:	3a19      	subs	r2, #25
 8021680:	f24c 3150 	movw	r1, #50000	; 0xc350
 8021684:	4288      	cmp	r0, r1
 8021686:	dd15      	ble.n	80216b4 <scalbnf+0x68>
 8021688:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8021704 <scalbnf+0xb8>
 802168c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8021708 <scalbnf+0xbc>
 8021690:	ee10 3a10 	vmov	r3, s0
 8021694:	eeb0 7a67 	vmov.f32	s14, s15
 8021698:	2b00      	cmp	r3, #0
 802169a:	bfb8      	it	lt
 802169c:	eef0 7a66 	vmovlt.f32	s15, s13
 80216a0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80216a4:	4770      	bx	lr
 80216a6:	eddf 7a19 	vldr	s15, [pc, #100]	; 802170c <scalbnf+0xc0>
 80216aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80216ae:	4770      	bx	lr
 80216b0:	0dd2      	lsrs	r2, r2, #23
 80216b2:	e7e5      	b.n	8021680 <scalbnf+0x34>
 80216b4:	4410      	add	r0, r2
 80216b6:	28fe      	cmp	r0, #254	; 0xfe
 80216b8:	dce6      	bgt.n	8021688 <scalbnf+0x3c>
 80216ba:	2800      	cmp	r0, #0
 80216bc:	dd06      	ble.n	80216cc <scalbnf+0x80>
 80216be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80216c2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80216c6:	ee00 3a10 	vmov	s0, r3
 80216ca:	4770      	bx	lr
 80216cc:	f110 0f16 	cmn.w	r0, #22
 80216d0:	da09      	bge.n	80216e6 <scalbnf+0x9a>
 80216d2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802170c <scalbnf+0xc0>
 80216d6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8021710 <scalbnf+0xc4>
 80216da:	ee10 3a10 	vmov	r3, s0
 80216de:	eeb0 7a67 	vmov.f32	s14, s15
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	e7d9      	b.n	802169a <scalbnf+0x4e>
 80216e6:	3019      	adds	r0, #25
 80216e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80216ec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80216f0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8021714 <scalbnf+0xc8>
 80216f4:	ee07 3a90 	vmov	s15, r3
 80216f8:	e7d7      	b.n	80216aa <scalbnf+0x5e>
 80216fa:	bf00      	nop
 80216fc:	ffff3cb0 	.word	0xffff3cb0
 8021700:	4c000000 	.word	0x4c000000
 8021704:	7149f2ca 	.word	0x7149f2ca
 8021708:	f149f2ca 	.word	0xf149f2ca
 802170c:	0da24260 	.word	0x0da24260
 8021710:	8da24260 	.word	0x8da24260
 8021714:	33000000 	.word	0x33000000

08021718 <floorf>:
 8021718:	ee10 3a10 	vmov	r3, s0
 802171c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021720:	3a7f      	subs	r2, #127	; 0x7f
 8021722:	2a16      	cmp	r2, #22
 8021724:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8021728:	dc2a      	bgt.n	8021780 <floorf+0x68>
 802172a:	2a00      	cmp	r2, #0
 802172c:	da11      	bge.n	8021752 <floorf+0x3a>
 802172e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8021790 <floorf+0x78>
 8021732:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021736:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802173e:	dd05      	ble.n	802174c <floorf+0x34>
 8021740:	2b00      	cmp	r3, #0
 8021742:	da23      	bge.n	802178c <floorf+0x74>
 8021744:	4a13      	ldr	r2, [pc, #76]	; (8021794 <floorf+0x7c>)
 8021746:	2900      	cmp	r1, #0
 8021748:	bf18      	it	ne
 802174a:	4613      	movne	r3, r2
 802174c:	ee00 3a10 	vmov	s0, r3
 8021750:	4770      	bx	lr
 8021752:	4911      	ldr	r1, [pc, #68]	; (8021798 <floorf+0x80>)
 8021754:	4111      	asrs	r1, r2
 8021756:	420b      	tst	r3, r1
 8021758:	d0fa      	beq.n	8021750 <floorf+0x38>
 802175a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8021790 <floorf+0x78>
 802175e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021762:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802176a:	ddef      	ble.n	802174c <floorf+0x34>
 802176c:	2b00      	cmp	r3, #0
 802176e:	bfbe      	ittt	lt
 8021770:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8021774:	fa40 f202 	asrlt.w	r2, r0, r2
 8021778:	189b      	addlt	r3, r3, r2
 802177a:	ea23 0301 	bic.w	r3, r3, r1
 802177e:	e7e5      	b.n	802174c <floorf+0x34>
 8021780:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021784:	d3e4      	bcc.n	8021750 <floorf+0x38>
 8021786:	ee30 0a00 	vadd.f32	s0, s0, s0
 802178a:	4770      	bx	lr
 802178c:	2300      	movs	r3, #0
 802178e:	e7dd      	b.n	802174c <floorf+0x34>
 8021790:	7149f2ca 	.word	0x7149f2ca
 8021794:	bf800000 	.word	0xbf800000
 8021798:	007fffff 	.word	0x007fffff

0802179c <_init>:
 802179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802179e:	bf00      	nop
 80217a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80217a2:	bc08      	pop	{r3}
 80217a4:	469e      	mov	lr, r3
 80217a6:	4770      	bx	lr

080217a8 <_fini>:
 80217a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80217aa:	bf00      	nop
 80217ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80217ae:	bc08      	pop	{r3}
 80217b0:	469e      	mov	lr, r3
 80217b2:	4770      	bx	lr
